#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ValetRuntime_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ValetRuntime.FortDagwoodVehicleManager
// 0x0008 (0x00B8 - 0x00B0)
class UFortDagwoodVehicleManager final : public UGameStateComponent
{
public:
	bool                                          bHasUpdatedPropReplacement;                        // 0x00B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_426E[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomHandleActorStreamedInEditor(class AActor* SourceActor);
	void OnVehicleSpawned(class AFortAthenaVehicle* Vehicle);
	void OnVehicleSpawnsUpdated(class UFortVehicleItemDefinition* VehicleItemDef, TArray<class AActor*>* SpawnedVehicles, int32 NewVehicleCount);
	void ServerSetVehicleFuel(float NewFuel);
	void SetVehicleFuel(float NewFuel);
	void UpdatePropReplacement();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleManager">();
	}
	static class UFortDagwoodVehicleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleManager>();
	}
};
static_assert(alignof(UFortDagwoodVehicleManager) == 0x000008, "Wrong alignment on UFortDagwoodVehicleManager");
static_assert(sizeof(UFortDagwoodVehicleManager) == 0x0000B8, "Wrong size on UFortDagwoodVehicleManager");
static_assert(offsetof(UFortDagwoodVehicleManager, bHasUpdatedPropReplacement) == 0x0000B0, "Member 'UFortDagwoodVehicleManager::bHasUpdatedPropReplacement' has a wrong offset!");

// Class ValetRuntime.FortCameraMode_Dagwood
// 0x0040 (0x0DF0 - 0x0DB0)
class UFortCameraMode_Dagwood final : public UFortCameraMode_AthenaVehicle
{
public:
	float                                         HorizontalCameraSpaceOffsetWhileTurning;           // 0x0DA8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteeringAngleForMaxHorizontalOffset;               // 0x0DAC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAirVerticalOffset;                               // 0x0DB0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirOffsetDampFactor;                               // 0x0DB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedAlphaDampFactor;                              // 0x0DB8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAirRequiredForVertOffset;                    // 0x0DBC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleBasePitch;                                  // 0x0DC0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeed;                            // 0x0DC4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizOffsetInterpSpeedRecovery;                    // 0x0DC8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpeedAlpha;                                 // 0x0DCC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentVerticalOffset;                             // 0x0DD0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentHorizontalOffset;                           // 0x0DD4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInAir;                                         // 0x0DD8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousSpeed;                                     // 0x0DDC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AppliedPitch;                                      // 0x0DE0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4270[0xC];                                     // 0x0DE4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCameraMode_Dagwood">();
	}
	static class UFortCameraMode_Dagwood* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCameraMode_Dagwood>();
	}
};
static_assert(alignof(UFortCameraMode_Dagwood) == 0x000010, "Wrong alignment on UFortCameraMode_Dagwood");
static_assert(sizeof(UFortCameraMode_Dagwood) == 0x000DF0, "Wrong size on UFortCameraMode_Dagwood");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizontalCameraSpaceOffsetWhileTurning) == 0x000DA8, "Member 'UFortCameraMode_Dagwood::HorizontalCameraSpaceOffsetWhileTurning' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SteeringAngleForMaxHorizontalOffset) == 0x000DAC, "Member 'UFortCameraMode_Dagwood::SteeringAngleForMaxHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, InAirVerticalOffset) == 0x000DB0, "Member 'UFortCameraMode_Dagwood::InAirVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AirOffsetDampFactor) == 0x000DB4, "Member 'UFortCameraMode_Dagwood::AirOffsetDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, SpeedAlphaDampFactor) == 0x000DB8, "Member 'UFortCameraMode_Dagwood::SpeedAlphaDampFactor' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAirRequiredForVertOffset) == 0x000DBC, "Member 'UFortCameraMode_Dagwood::TimeInAirRequiredForVertOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, VehicleBasePitch) == 0x000DC0, "Member 'UFortCameraMode_Dagwood::VehicleBasePitch' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeed) == 0x000DC4, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, HorizOffsetInterpSpeedRecovery) == 0x000DC8, "Member 'UFortCameraMode_Dagwood::HorizOffsetInterpSpeedRecovery' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentSpeedAlpha) == 0x000DCC, "Member 'UFortCameraMode_Dagwood::CurrentSpeedAlpha' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentVerticalOffset) == 0x000DD0, "Member 'UFortCameraMode_Dagwood::CurrentVerticalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, CurrentHorizontalOffset) == 0x000DD4, "Member 'UFortCameraMode_Dagwood::CurrentHorizontalOffset' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, TimeInAir) == 0x000DD8, "Member 'UFortCameraMode_Dagwood::TimeInAir' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, PreviousSpeed) == 0x000DDC, "Member 'UFortCameraMode_Dagwood::PreviousSpeed' has a wrong offset!");
static_assert(offsetof(UFortCameraMode_Dagwood, AppliedPitch) == 0x000DE0, "Member 'UFortCameraMode_Dagwood::AppliedPitch' has a wrong offset!");

// Class ValetRuntime.FortContextualTutorial_VehicleValetLowFuel
// 0x0008 (0x00C8 - 0x00C0)
class UFortContextualTutorial_VehicleValetLowFuel final : public UFortContextualTutorial
{
public:
	uint8                                         Pad_4271[0x8];                                     // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleStartSkydivingForActivation();
	void HandleVehicleStateChanged(class AFortPlayerPawn* PlayerPawn, class AActor* NewVehicle, class AActor* OldVehicle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortContextualTutorial_VehicleValetLowFuel">();
	}
	static class UFortContextualTutorial_VehicleValetLowFuel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortContextualTutorial_VehicleValetLowFuel>();
	}
};
static_assert(alignof(UFortContextualTutorial_VehicleValetLowFuel) == 0x000008, "Wrong alignment on UFortContextualTutorial_VehicleValetLowFuel");
static_assert(sizeof(UFortContextualTutorial_VehicleValetLowFuel) == 0x0000C8, "Wrong size on UFortContextualTutorial_VehicleValetLowFuel");

// Class ValetRuntime.FortValetGameFeatureData
// 0x0080 (0x02E0 - 0x0260)
class UFortValetGameFeatureData final : public UFortGameFeatureData
{
public:
	TMap<TSoftClassPtr<class UClass>, struct FVehiclePropReplacementData> PropReplacements;                                  // 0x0260(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   VehicleSpawnerClass;                               // 0x02B0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            SpawnActorCollisionHandlingMethod;                 // 0x02D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4272[0x7];                                     // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetGameFeatureData">();
	}
	static class UFortValetGameFeatureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetGameFeatureData>();
	}
};
static_assert(alignof(UFortValetGameFeatureData) == 0x000008, "Wrong alignment on UFortValetGameFeatureData");
static_assert(sizeof(UFortValetGameFeatureData) == 0x0002E0, "Wrong size on UFortValetGameFeatureData");
static_assert(offsetof(UFortValetGameFeatureData, PropReplacements) == 0x000260, "Member 'UFortValetGameFeatureData::PropReplacements' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, VehicleSpawnerClass) == 0x0002B0, "Member 'UFortValetGameFeatureData::VehicleSpawnerClass' has a wrong offset!");
static_assert(offsetof(UFortValetGameFeatureData, SpawnActorCollisionHandlingMethod) == 0x0002D8, "Member 'UFortValetGameFeatureData::SpawnActorCollisionHandlingMethod' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicle
// 0x03E0 (0x1B90 - 0x17B0)
class AFortDagwoodVehicle : public AFortAthenaSKMotorVehicle
{
public:
	uint8                                         Pad_4273[0x10];                                    // 0x17B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShake>               HardLandingCameraShake;                            // 0x17C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               OffroadCamShakeClass;                              // 0x17C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               DriverCamShakeClass;                               // 0x17D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShake>               HandBrakeCamShakeClass;                            // 0x17D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleClass                                 VehicleClass;                                      // 0x17E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4274[0x3];                                     // 0x17E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NativeMinPontoonRadiusToSink;                      // 0x17E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NativePontoonScaleTimeFront;                       // 0x17E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NativePontoonScaleRadiusPerTick;                   // 0x17EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NativePontoonScaleTimeRear;                        // 0x17F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NativeBasePontoonRadiusFront;                      // 0x17F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NativeBasePontoonRadiusRear;                       // 0x17F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBrakeForceForSkid;                              // 0x17FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinForwardSpeedForSkid;                            // 0x1800(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SpeedLinesCueTag;                                  // 0x1804(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedRPM;                                     // 0x180C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnOutOfFuelDelegate;                               // 0x1810(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostPercent;                          // 0x1820(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoostEndTime;                                      // 0x1824(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortSplatterSourceComponent*           SplatterSourceComp;                                // 0x1828(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCachedWaterData                       WaterBodyDataCache;                                // 0x1830(0x0038)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EFuelLeakType                                 FuelLeakType;                                      // 0x1868(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableNativizedTick;                              // 0x1869(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4275[0x6];                                     // 0x186A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PassengerLeanSockets;                              // 0x1870(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        PassngerLeanRelativeOffsets;                       // 0x1880(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode_AthenaVehicle> PassengerCameraModeClass;                          // 0x1890(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortCameraMode>            PassengerCameraModeClass_ADS;                      // 0x1898(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           WheelSocketNames;                                  // 0x18A0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortDagwoodVehicleConfigs*             FortDagwoodVehicleConfigs;                         // 0x18B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UFortDagwoodVehicleConfigs> FortDagwoodConfigsClass;                           // 0x18B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 RearShocks;                                        // 0x18C0(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  OffroadEnvironmentDamageTags;                      // 0x18D0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FireDamageTags;                                    // 0x18F0(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleRear;                              // 0x1910(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeWheelScaleFront;                             // 0x191C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleRear;                               // 0x1928(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                NativeTireScaleFront;                              // 0x1934(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTireSmokeActive;                                  // 0x1940(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoostFailed;                                      // 0x1941(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBoostPitch;                                    // 0x1942(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnRoad;                                           // 0x1943(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnLandscape;                                      // 0x1944(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnDirt;                                           // 0x1945(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnVehicle;                                        // 0x1946(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWasBrakeSkidding;                                 // 0x1947(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        AccelForceFeedbackHandle;                          // 0x1948(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        SkidForceFeedbackHandle;                           // 0x1950(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        BrakeForceFeedbackHandle;                          // 0x1958(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint64                                        HandBrakeForceFeedbackHandle;                      // 0x1960(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<ETireSurfaces>                         TireSurfaces;                                      // 0x1968(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBoosting;                                         // 0x1978(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpeedLinesActive;                                 // 0x1979(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4276[0xE];                                     // 0x197A(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAttributeSet_VehicleFuel*          VehicleFuelSet;                                    // 0x1988(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ServerFuel;                                        // 0x1990(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortAttributeInitializationKey        DagwoodAttributeInitKey;                           // 0x1994(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                FlipYawForwardTargetDirection;                     // 0x19A4(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FlipYawOriginalForward;                            // 0x19B0(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETireLocations                                LastPoppedTire;                                    // 0x19BC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4277[0x3];                                     // 0x19BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoadTopSpeedMultplier;                             // 0x19C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBumpiness;                                  // 0x19C4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentForwardAcceleration;                        // 0x19C8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreviousTurnAlpha;                                 // 0x19CC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentCameraAssistStrength;                       // 0x19D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripTime;                                      // 0x19D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LostGripRightAlpha;                                // 0x19D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandbrakeTime;                                     // 0x19DC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RimScrapeDamageTimer;                              // 0x19E0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipYawMult;                                       // 0x19E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipTimer;                                         // 0x19E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipExplodeTimer;                                  // 0x19EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipPushForceTimer;                                // 0x19F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipAirTimer;                                      // 0x19F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipLanding;                                       // 0x19F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipStartTime;                                     // 0x19FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastFlipDamageTime;                                // 0x1A00(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PreFlipControlLossTimer;                           // 0x1A04(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPopTireTime;                                   // 0x1A08(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HealthZeroTime;                                    // 0x1A0C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NativePontoonScaleTimerFront;                      // 0x1A10(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NativePontoonScaleTimerRear;                       // 0x1A14(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NativeScaledFrontPontoonRadius;                    // 0x1A18(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NativeScaledRearPontoonRadius;                     // 0x1A1C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidCinematicFlip;                                 // 0x1A20(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanCinematicFlip;                                 // 0x1A21(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPopTireVeer;                                    // 0x1A22(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRecovery;                                   // 0x1A23(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExplodeAfterFlip;                                 // 0x1A24(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLostGrip;                                         // 0x1A25(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyHandBrakeCatchupForce;                       // 0x1A26(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDidHandbrakeCatchup;                              // 0x1A27(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipRoll;                                       // 0x1A28(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipYaw;                                        // 0x1A29(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInFlipPitch;                                      // 0x1A2A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOutOfFuel;                                        // 0x1A2B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLowFuel;                                          // 0x1A2C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFlipDidLeaveGround;                               // 0x1A2D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBreakBuildingsIfBlockingLeaningPassenger;         // 0x1A2E(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4278[0x1];                                     // 0x1A2F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanBreakTimeAccumulator;                          // 0x1A30(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeanBreakCheckInterval;                            // 0x1A34(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           SeatToWindowShapeNames;                            // 0x1A38(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraShake*                           OffroadCameraShakeInstance;                        // 0x1A48(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraShake*                           DriverCameraShakeInstance;                         // 0x1A50(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraShake*                           AccelCameraShakeInstance;                          // 0x1A58(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraShake*                           HandBrakeCameraShakeInstance;                      // 0x1A60(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_RoadAndExhaust;                         // 0x1A68(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_LowFuelSputter;                         // 0x1A70(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_Damage;                                 // 0x1A78(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NativeComp_SpeedLines;                             // 0x1A80(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         TireExhaustFX;                                     // 0x1A88(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_LowFuelSputter;                          // 0x1A90(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NativeSys_SpeedLines;                              // 0x1A98(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             OutOfFuelSound;                                    // 0x1AA0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             LowFuelSound;                                      // 0x1AA8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4279[0x18];                                    // 0x1AB0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ETireStates>                           TireStates;                                        // 0x1AC8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ActivePoppedTireReaction;                          // 0x1AD8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPoppedTireReactionStates                     ServerPoppedTireReaction;                          // 0x1AD9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bExploded;                                         // 0x1ADA(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_427A[0x1];                                     // 0x1ADB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerCriticalHealth;                              // 0x1ADC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AController>             KillerController;                                  // 0x1AE0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  KillerCauser;                                      // 0x1AE8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class AFortPlayerPawnAthena*>            PlayersBasedOnVehicle;                             // 0x1AF0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_427B[0x4];                                     // 0x1B40(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInoperable;                                     // 0x1B44(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_427C[0x3];                                     // 0x1B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RandomSeed;                                        // 0x1B48(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRandomStream                          RandStream;                                        // 0x1B4C(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_427D[0x4];                                     // 0x1B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            TireBootMesh;                                      // 0x1B58(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_427E[0x30];                                    // 0x1B60(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnBoostFinished();
	void BP_OnBoostStarted();
	void CleanupLoopingPooledFX();
	void MakeInoperable();
	void MakeOperable(bool bAddGas);
	void OnBoostFailed();
	void OnBoostReady();
	void OnClientBeginAltInteract(class AFortPawn* Pawn);
	void OnDestroyedPropFromCollision(const class ABuildingActor* BuildingHitActor);
	void OnEmptyFuel();
	void OnEnteredRoad();
	void OnEnterLandscape();
	void OnExitLandscape();
	void OnExitRoad();
	void OnExplode();
	void OnFireStart();
	void OnFireStop();
	void OnFlipImpactDamage();
	void OnGainedFuel(float NewPercent);
	void OnInoperableChanged(bool bInoperable);
	void OnLeakingFuelStart();
	void OnLeakingFuelStop();
	void OnLowFuel();
	void OnPoppedTire(int32 TireIndex);
	void OnRep_Exploded();
	void OnRep_IsInoperable();
	void OnRep_PoppedTireReaction();
	void OnRep_RandSeed();
	void OnRep_ServerFuel();
	void OnRep_Tires(const TArray<ETireStates>& PrevTireStates);
	void OnRimScrapeDamage(int32 TireIndex);
	void OnServerAltInteract(class AFortPawn* Pawn);
	void OnSpawnLeakProjectile(class AFortProjectileBase* SpawnProjectile);
	void OnStartCriticalHealth();
	void OnStartHandbrake();
	void OnStopHandbrake();
	void OnTickAudioController(float DeltaTime);
	void SetFuel(float NewFuel);
	void SetNormalizedAudioRPM(float InRPM);
	void SetOnFire(bool bNewFire);
	void UpdateVehicleFuelLeak();

	bool AreAnyTiresPopped() const;
	bool ForwardOrReverseInputPressed() const;
	float GetBumpiness() const;
	float GetFuel() const;
	float GetFuelCapacity() const;
	float GetHUDTopSpeed() const;
	float GetNormalizedAudioRPM() const;
	bool GetOnFire() const;
	class FString GetPlayerFacingName() const;
	float GetTireHealthPercent(ETireLocations TireIndex) const;
	bool GetTireState(int32 TireIndex) const;
	ETireSurfaces GetTireSurface(ETireLocations TireIndex) const;
	bool IsInoperable() const;
	bool IsNativeBPTickEnabled() const;
	bool IsOffroad() const;
	bool IsOnDirt() const;
	bool IsOnLandscape() const;
	bool IsOnRoad() const;
	bool IsTireSkidding(const float MinSpeedForSkid, const float AngleForSkid, const float SpeedForPeelout, const float SpeedForBraking) const;
	bool IsVehicleAcceleratingWithSpeedThreshold(float SpeedThreshold) const;
	float NativeCalculateAccelRumbleIntensity(float MaxIntensity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicle">();
	}
	static class AFortDagwoodVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortDagwoodVehicle>();
	}
};
static_assert(alignof(AFortDagwoodVehicle) == 0x000010, "Wrong alignment on AFortDagwoodVehicle");
static_assert(sizeof(AFortDagwoodVehicle) == 0x001B90, "Wrong size on AFortDagwoodVehicle");
static_assert(offsetof(AFortDagwoodVehicle, HardLandingCameraShake) == 0x0017C0, "Member 'AFortDagwoodVehicle::HardLandingCameraShake' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadCamShakeClass) == 0x0017C8, "Member 'AFortDagwoodVehicle::OffroadCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCamShakeClass) == 0x0017D0, "Member 'AFortDagwoodVehicle::DriverCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCamShakeClass) == 0x0017D8, "Member 'AFortDagwoodVehicle::HandBrakeCamShakeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, VehicleClass) == 0x0017E0, "Member 'AFortDagwoodVehicle::VehicleClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeMinPontoonRadiusToSink) == 0x0017E4, "Member 'AFortDagwoodVehicle::NativeMinPontoonRadiusToSink' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativePontoonScaleTimeFront) == 0x0017E8, "Member 'AFortDagwoodVehicle::NativePontoonScaleTimeFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativePontoonScaleRadiusPerTick) == 0x0017EC, "Member 'AFortDagwoodVehicle::NativePontoonScaleRadiusPerTick' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativePontoonScaleTimeRear) == 0x0017F0, "Member 'AFortDagwoodVehicle::NativePontoonScaleTimeRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeBasePontoonRadiusFront) == 0x0017F4, "Member 'AFortDagwoodVehicle::NativeBasePontoonRadiusFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeBasePontoonRadiusRear) == 0x0017F8, "Member 'AFortDagwoodVehicle::NativeBasePontoonRadiusRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinBrakeForceForSkid) == 0x0017FC, "Member 'AFortDagwoodVehicle::MinBrakeForceForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, MinForwardSpeedForSkid) == 0x001800, "Member 'AFortDagwoodVehicle::MinForwardSpeedForSkid' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SpeedLinesCueTag) == 0x001804, "Member 'AFortDagwoodVehicle::SpeedLinesCueTag' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NormalizedRPM) == 0x00180C, "Member 'AFortDagwoodVehicle::NormalizedRPM' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OnOutOfFuelDelegate) == 0x001810, "Member 'AFortDagwoodVehicle::OnOutOfFuelDelegate' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RechargeableBoostPercent) == 0x001820, "Member 'AFortDagwoodVehicle::RechargeableBoostPercent' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, BoostEndTime) == 0x001824, "Member 'AFortDagwoodVehicle::BoostEndTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SplatterSourceComp) == 0x001828, "Member 'AFortDagwoodVehicle::SplatterSourceComp' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, WaterBodyDataCache) == 0x001830, "Member 'AFortDagwoodVehicle::WaterBodyDataCache' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FuelLeakType) == 0x001868, "Member 'AFortDagwoodVehicle::FuelLeakType' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bEnableNativizedTick) == 0x001869, "Member 'AFortDagwoodVehicle::bEnableNativizedTick' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerLeanSockets) == 0x001870, "Member 'AFortDagwoodVehicle::PassengerLeanSockets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassngerLeanRelativeOffsets) == 0x001880, "Member 'AFortDagwoodVehicle::PassngerLeanRelativeOffsets' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass) == 0x001890, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PassengerCameraModeClass_ADS) == 0x001898, "Member 'AFortDagwoodVehicle::PassengerCameraModeClass_ADS' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, WheelSocketNames) == 0x0018A0, "Member 'AFortDagwoodVehicle::WheelSocketNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FortDagwoodVehicleConfigs) == 0x0018B0, "Member 'AFortDagwoodVehicle::FortDagwoodVehicleConfigs' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FortDagwoodConfigsClass) == 0x0018B8, "Member 'AFortDagwoodVehicle::FortDagwoodConfigsClass' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RearShocks) == 0x0018C0, "Member 'AFortDagwoodVehicle::RearShocks' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadEnvironmentDamageTags) == 0x0018D0, "Member 'AFortDagwoodVehicle::OffroadEnvironmentDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FireDamageTags) == 0x0018F0, "Member 'AFortDagwoodVehicle::FireDamageTags' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleRear) == 0x001910, "Member 'AFortDagwoodVehicle::NativeWheelScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeWheelScaleFront) == 0x00191C, "Member 'AFortDagwoodVehicle::NativeWheelScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleRear) == 0x001928, "Member 'AFortDagwoodVehicle::NativeTireScaleRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeTireScaleFront) == 0x001934, "Member 'AFortDagwoodVehicle::NativeTireScaleFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bTireSmokeActive) == 0x001940, "Member 'AFortDagwoodVehicle::bTireSmokeActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBoostFailed) == 0x001941, "Member 'AFortDagwoodVehicle::bBoostFailed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanBoostPitch) == 0x001942, "Member 'AFortDagwoodVehicle::bCanBoostPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnRoad) == 0x001943, "Member 'AFortDagwoodVehicle::bOnRoad' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnLandscape) == 0x001944, "Member 'AFortDagwoodVehicle::bOnLandscape' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnDirt) == 0x001945, "Member 'AFortDagwoodVehicle::bOnDirt' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOnVehicle) == 0x001946, "Member 'AFortDagwoodVehicle::bOnVehicle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bWasBrakeSkidding) == 0x001947, "Member 'AFortDagwoodVehicle::bWasBrakeSkidding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelForceFeedbackHandle) == 0x001948, "Member 'AFortDagwoodVehicle::AccelForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SkidForceFeedbackHandle) == 0x001950, "Member 'AFortDagwoodVehicle::SkidForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, BrakeForceFeedbackHandle) == 0x001958, "Member 'AFortDagwoodVehicle::BrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeForceFeedbackHandle) == 0x001960, "Member 'AFortDagwoodVehicle::HandBrakeForceFeedbackHandle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireSurfaces) == 0x001968, "Member 'AFortDagwoodVehicle::TireSurfaces' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBoosting) == 0x001978, "Member 'AFortDagwoodVehicle::bBoosting' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bSpeedLinesActive) == 0x001979, "Member 'AFortDagwoodVehicle::bSpeedLinesActive' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, VehicleFuelSet) == 0x001988, "Member 'AFortDagwoodVehicle::VehicleFuelSet' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerFuel) == 0x001990, "Member 'AFortDagwoodVehicle::ServerFuel' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DagwoodAttributeInitKey) == 0x001994, "Member 'AFortDagwoodVehicle::DagwoodAttributeInitKey' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawForwardTargetDirection) == 0x0019A4, "Member 'AFortDagwoodVehicle::FlipYawForwardTargetDirection' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawOriginalForward) == 0x0019B0, "Member 'AFortDagwoodVehicle::FlipYawOriginalForward' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPoppedTire) == 0x0019BC, "Member 'AFortDagwoodVehicle::LastPoppedTire' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RoadTopSpeedMultplier) == 0x0019C0, "Member 'AFortDagwoodVehicle::RoadTopSpeedMultplier' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentBumpiness) == 0x0019C4, "Member 'AFortDagwoodVehicle::CurrentBumpiness' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentForwardAcceleration) == 0x0019C8, "Member 'AFortDagwoodVehicle::CurrentForwardAcceleration' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreviousTurnAlpha) == 0x0019CC, "Member 'AFortDagwoodVehicle::PreviousTurnAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, CurrentCameraAssistStrength) == 0x0019D0, "Member 'AFortDagwoodVehicle::CurrentCameraAssistStrength' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripTime) == 0x0019D4, "Member 'AFortDagwoodVehicle::LostGripTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LostGripRightAlpha) == 0x0019D8, "Member 'AFortDagwoodVehicle::LostGripRightAlpha' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandbrakeTime) == 0x0019DC, "Member 'AFortDagwoodVehicle::HandbrakeTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RimScrapeDamageTimer) == 0x0019E0, "Member 'AFortDagwoodVehicle::RimScrapeDamageTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipYawMult) == 0x0019E4, "Member 'AFortDagwoodVehicle::FlipYawMult' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipTimer) == 0x0019E8, "Member 'AFortDagwoodVehicle::FlipTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipExplodeTimer) == 0x0019EC, "Member 'AFortDagwoodVehicle::FlipExplodeTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipPushForceTimer) == 0x0019F0, "Member 'AFortDagwoodVehicle::FlipPushForceTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipAirTimer) == 0x0019F4, "Member 'AFortDagwoodVehicle::FlipAirTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipLanding) == 0x0019F8, "Member 'AFortDagwoodVehicle::FlipLanding' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, FlipStartTime) == 0x0019FC, "Member 'AFortDagwoodVehicle::FlipStartTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastFlipDamageTime) == 0x001A00, "Member 'AFortDagwoodVehicle::LastFlipDamageTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PreFlipControlLossTimer) == 0x001A04, "Member 'AFortDagwoodVehicle::PreFlipControlLossTimer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LastPopTireTime) == 0x001A08, "Member 'AFortDagwoodVehicle::LastPopTireTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HealthZeroTime) == 0x001A0C, "Member 'AFortDagwoodVehicle::HealthZeroTime' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativePontoonScaleTimerFront) == 0x001A10, "Member 'AFortDagwoodVehicle::NativePontoonScaleTimerFront' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativePontoonScaleTimerRear) == 0x001A14, "Member 'AFortDagwoodVehicle::NativePontoonScaleTimerRear' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeScaledFrontPontoonRadius) == 0x001A18, "Member 'AFortDagwoodVehicle::NativeScaledFrontPontoonRadius' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeScaledRearPontoonRadius) == 0x001A1C, "Member 'AFortDagwoodVehicle::NativeScaledRearPontoonRadius' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidCinematicFlip) == 0x001A20, "Member 'AFortDagwoodVehicle::bDidCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bCanCinematicFlip) == 0x001A21, "Member 'AFortDagwoodVehicle::bCanCinematicFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInPopTireVeer) == 0x001A22, "Member 'AFortDagwoodVehicle::bInPopTireVeer' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRecovery) == 0x001A23, "Member 'AFortDagwoodVehicle::bInFlipRecovery' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bExplodeAfterFlip) == 0x001A24, "Member 'AFortDagwoodVehicle::bExplodeAfterFlip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bLostGrip) == 0x001A25, "Member 'AFortDagwoodVehicle::bLostGrip' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bApplyHandBrakeCatchupForce) == 0x001A26, "Member 'AFortDagwoodVehicle::bApplyHandBrakeCatchupForce' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bDidHandbrakeCatchup) == 0x001A27, "Member 'AFortDagwoodVehicle::bDidHandbrakeCatchup' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipRoll) == 0x001A28, "Member 'AFortDagwoodVehicle::bInFlipRoll' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipYaw) == 0x001A29, "Member 'AFortDagwoodVehicle::bInFlipYaw' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bInFlipPitch) == 0x001A2A, "Member 'AFortDagwoodVehicle::bInFlipPitch' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bOutOfFuel) == 0x001A2B, "Member 'AFortDagwoodVehicle::bOutOfFuel' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bLowFuel) == 0x001A2C, "Member 'AFortDagwoodVehicle::bLowFuel' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bFlipDidLeaveGround) == 0x001A2D, "Member 'AFortDagwoodVehicle::bFlipDidLeaveGround' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bBreakBuildingsIfBlockingLeaningPassenger) == 0x001A2E, "Member 'AFortDagwoodVehicle::bBreakBuildingsIfBlockingLeaningPassenger' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakTimeAccumulator) == 0x001A30, "Member 'AFortDagwoodVehicle::LeanBreakTimeAccumulator' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LeanBreakCheckInterval) == 0x001A34, "Member 'AFortDagwoodVehicle::LeanBreakCheckInterval' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, SeatToWindowShapeNames) == 0x001A38, "Member 'AFortDagwoodVehicle::SeatToWindowShapeNames' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OffroadCameraShakeInstance) == 0x001A48, "Member 'AFortDagwoodVehicle::OffroadCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, DriverCameraShakeInstance) == 0x001A50, "Member 'AFortDagwoodVehicle::DriverCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, AccelCameraShakeInstance) == 0x001A58, "Member 'AFortDagwoodVehicle::AccelCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, HandBrakeCameraShakeInstance) == 0x001A60, "Member 'AFortDagwoodVehicle::HandBrakeCameraShakeInstance' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_RoadAndExhaust) == 0x001A68, "Member 'AFortDagwoodVehicle::NativeComp_RoadAndExhaust' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_LowFuelSputter) == 0x001A70, "Member 'AFortDagwoodVehicle::NativeComp_LowFuelSputter' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_Damage) == 0x001A78, "Member 'AFortDagwoodVehicle::NativeComp_Damage' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeComp_SpeedLines) == 0x001A80, "Member 'AFortDagwoodVehicle::NativeComp_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireExhaustFX) == 0x001A88, "Member 'AFortDagwoodVehicle::TireExhaustFX' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_LowFuelSputter) == 0x001A90, "Member 'AFortDagwoodVehicle::NativeSys_LowFuelSputter' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, NativeSys_SpeedLines) == 0x001A98, "Member 'AFortDagwoodVehicle::NativeSys_SpeedLines' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, OutOfFuelSound) == 0x001AA0, "Member 'AFortDagwoodVehicle::OutOfFuelSound' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, LowFuelSound) == 0x001AA8, "Member 'AFortDagwoodVehicle::LowFuelSound' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireStates) == 0x001AC8, "Member 'AFortDagwoodVehicle::TireStates' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ActivePoppedTireReaction) == 0x001AD8, "Member 'AFortDagwoodVehicle::ActivePoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerPoppedTireReaction) == 0x001AD9, "Member 'AFortDagwoodVehicle::ServerPoppedTireReaction' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bExploded) == 0x001ADA, "Member 'AFortDagwoodVehicle::bExploded' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, ServerCriticalHealth) == 0x001ADC, "Member 'AFortDagwoodVehicle::ServerCriticalHealth' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, KillerController) == 0x001AE0, "Member 'AFortDagwoodVehicle::KillerController' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, KillerCauser) == 0x001AE8, "Member 'AFortDagwoodVehicle::KillerCauser' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, PlayersBasedOnVehicle) == 0x001AF0, "Member 'AFortDagwoodVehicle::PlayersBasedOnVehicle' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, bIsInoperable) == 0x001B44, "Member 'AFortDagwoodVehicle::bIsInoperable' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandomSeed) == 0x001B48, "Member 'AFortDagwoodVehicle::RandomSeed' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, RandStream) == 0x001B4C, "Member 'AFortDagwoodVehicle::RandStream' has a wrong offset!");
static_assert(offsetof(AFortDagwoodVehicle, TireBootMesh) == 0x001B58, "Member 'AFortDagwoodVehicle::TireBootMesh' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleAnimInstance
// 0x0040 (0x03C0 - 0x0380)
class UFortDagwoodVehicleAnimInstance final : public UFortVehicleAnimInstance
{
public:
	class AFortDagwoodVehicle*                    Dagwood;                                           // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FR;                                     // 0x0388(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_FL;                                     // 0x0394(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BR;                                     // 0x03A0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GlassScale_BL;                                     // 0x03AC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4283[0x8];                                     // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleAnimInstance">();
	}
	static class UFortDagwoodVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleAnimInstance>();
	}
};
static_assert(alignof(UFortDagwoodVehicleAnimInstance) == 0x000010, "Wrong alignment on UFortDagwoodVehicleAnimInstance");
static_assert(sizeof(UFortDagwoodVehicleAnimInstance) == 0x0003C0, "Wrong size on UFortDagwoodVehicleAnimInstance");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, Dagwood) == 0x000380, "Member 'UFortDagwoodVehicleAnimInstance::Dagwood' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FR) == 0x000388, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_FL) == 0x000394, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_FL' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BR) == 0x0003A0, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BR' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleAnimInstance, GlassScale_BL) == 0x0003AC, "Member 'UFortDagwoodVehicleAnimInstance::GlassScale_BL' has a wrong offset!");

// Class ValetRuntime.FortDagwoodVehicleConfigs
// 0x0208 (0x06C0 - 0x04B8)
class UFortDagwoodVehicleConfigs final : public UFortSKMotorVehicleConfigs
{
public:
	float                                         BoostMinPushForce;                                 // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedForceMultiplier;                      // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostTopSpeedMultiplier;                           // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostWaterMultiplier;                              // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideFrontMultiplier;                  // 0x04C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehiclePowerSlideRearMultiplier;                   // 0x04CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngle;                                // 0x04D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeGripAngleRecovery;                        // 0x04D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSpeedForGripLoss;                         // 0x04D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlipDuration;                                   // 0x04DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeLateralFriction;                          // 0x04E0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeSteeringMultiplier;                       // 0x04E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeFrictionDampFactor;                       // 0x04E8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RestoreTractionDampFactor;                         // 0x04EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForce;                                    // 0x04F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeForceNoAccel;                             // 0x04F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteFuel;                                     // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4284[0x3];                                     // 0x04F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinStartingFuel;                                   // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStartingFuel;                                   // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostSteeringMultiplier;                           // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadTopSpeedMultiplier;                        // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFrontLateralFriction;                      // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRearLateralFriction;                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadAccelForceMultiplier;                      // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadFakeBumpinessMultiplier;                   // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadTopSpeedMultiplier;                         // 0x051C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadFrontLateralFriction;                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadRearLateralFriction;                        // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffRoadPushForceMultiplier;                        // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMin;                       // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageImpactForceMax;                       // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMin;                            // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadImpactDamageMax;                            // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForOffroadHandling;                        // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireHealthPercentThreshold;                        // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBumpinessSpringHitTimeMultiplier;               // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBumpinessSpringHitTimeMultiplier;               // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BumpinessExponentForShocks;                        // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadRumbleIntensity;                            // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirtRoadRumbleIntensity;                           // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffroadDamageScaleExponent;                        // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushDrivingTopSpeed;                               // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushSteeringAngleAtMinSpeed;                       // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushSteeringAngleAtMaxSpeed;                       // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushDrivingAccel;                                  // 0x0568(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMin;                           // 0x056C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingThresholdMax;                           // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMin;                     // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HardLandingShakeZAmplitudeMax;                     // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedLinesThreshold;                               // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropDestructionImpulse;                            // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionAngle;                                  // 0x0584(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpNormalMinProtected;                              // 0x0588(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpForwardMinProtected;                             // 0x058C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NonCameraSteeringAngleMultiplier;                  // 0x0590(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMax;                           // 0x0594(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthMin;                           // 0x0598(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistStrengthRecovery;                      // 0x059C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraAssistInterpSpeed;                           // 0x05A0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionBrakeForceMultiplier;        // 0x05A4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseChangeDirectionSpeedThreshold;              // 0x05A8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitPushForce;                                // 0x05AC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DriftExitCatchupSpeed;                             // 0x05B0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandbrakeDurationRequiredForCatchup;               // 0x05B4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactMagnitudeToEndCatchup;                       // 0x05B8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringLength;                            // 0x05BC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringStiff;                             // 0x05C0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireSpringDamp;                              // 0x05C4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageOne;             // 0x05C8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_StageTwo;             // 0x05CC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireTractionMultiplier_Min;                  // 0x05D0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireScrapeFrictionMultiplier;                // 0x05D4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedForRimScrapeDamage;                        // 0x05D8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeDamageRate;                               // 0x05DC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipRollMagnitude;                        // 0x05E0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimScrapeFlipPitchMagnitude;                       // 0x05E4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForRimFlip;                                   // 0x05E8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForFlip;                              // 0x05EC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawDuration;                                   // 0x05F0(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRollDuration;                                  // 0x05F4(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPitchDuration;                                 // 0x05F8(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Yaw;                           // 0x05FC(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipExplodeDuration_Pitch;                         // 0x0600(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Yaw;                         // 0x0604(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForceDuration_Pitch;                       // 0x0608(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForcMultiplier;                            // 0x060C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentPitch;                    // 0x0610(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipPushForce_UpComponentRoll;                     // 0x0614(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeInAirRequiredForExplodeLanding;             // 0x0618(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringStiff;                                // 0x061C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringDamp;                                 // 0x0620(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawSpringMaxAccel;                             // 0x0624(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentForExplode;                           // 0x0628(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipRecoveryTime;                                  // 0x062C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipMaxDuration;                                   // 0x0630(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleDuration;                                // 0x0634(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerDuration;                            // 0x0638(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PoppedTireVeerSteeringAngle;                       // 0x063C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleFrequency;                               // 0x0640(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipWiggleSteeringAngle;                           // 0x0644(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlipYawAngleThreshold;                             // 0x0648(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesBoost;                                        // 0x064C(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4285[0x3];                                     // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RechargeableBoostRateOfUse;                        // 0x0650(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRateOfRegen;                      // 0x0654(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMinMultiplier;                     // 0x0658(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRateOfRegenMaxMultiplier;                     // 0x065C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostRegenMaxMultiplyTime;                         // 0x0660(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostRequiredPercentToActivate;        // 0x0664(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMaxPercent;                       // 0x0668(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RechargeableBoostMinPercent;                       // 0x066C(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWheelsOnSurfaceRequired;                        // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelLeakProjectileTimeInterval;                    // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuelLeakHealthPercentThreshold;                    // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerExtraHealth;                                 // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeZeroHealth;                                 // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeExplosion;                                  // 0x0684(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RefuelInteractDuration;                            // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HUDTopSpeed;                                       // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogDriftStickThreshold;                         // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootRightSocketName;                           // 0x0694(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TireBootLeftSocketName;                            // 0x069C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TireBootRelativeDistance;                          // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostForceInAir;                                   // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostAirMaxSpeed;                                  // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerFacingName;                                  // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortDagwoodVehicleConfigs">();
	}
	static class UFortDagwoodVehicleConfigs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortDagwoodVehicleConfigs>();
	}
};
static_assert(alignof(UFortDagwoodVehicleConfigs) == 0x000008, "Wrong alignment on UFortDagwoodVehicleConfigs");
static_assert(sizeof(UFortDagwoodVehicleConfigs) == 0x0006C0, "Wrong size on UFortDagwoodVehicleConfigs");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostMinPushForce) == 0x0004B8, "Member 'UFortDagwoodVehicleConfigs::BoostMinPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedForceMultiplier) == 0x0004BC, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostTopSpeedMultiplier) == 0x0004C0, "Member 'UFortDagwoodVehicleConfigs::BoostTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostWaterMultiplier) == 0x0004C4, "Member 'UFortDagwoodVehicleConfigs::BoostWaterMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideFrontMultiplier) == 0x0004C8, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideFrontMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, VehiclePowerSlideRearMultiplier) == 0x0004CC, "Member 'UFortDagwoodVehicleConfigs::VehiclePowerSlideRearMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngle) == 0x0004D0, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeGripAngleRecovery) == 0x0004D4, "Member 'UFortDagwoodVehicleConfigs::HandbrakeGripAngleRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSpeedForGripLoss) == 0x0004D8, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSpeedForGripLoss' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSlipDuration) == 0x0004DC, "Member 'UFortDagwoodVehicleConfigs::MinSlipDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeLateralFriction) == 0x0004E0, "Member 'UFortDagwoodVehicleConfigs::HandbrakeLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeSteeringMultiplier) == 0x0004E4, "Member 'UFortDagwoodVehicleConfigs::HandbrakeSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeFrictionDampFactor) == 0x0004E8, "Member 'UFortDagwoodVehicleConfigs::HandbrakeFrictionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RestoreTractionDampFactor) == 0x0004EC, "Member 'UFortDagwoodVehicleConfigs::RestoreTractionDampFactor' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForce) == 0x0004F0, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeForceNoAccel) == 0x0004F4, "Member 'UFortDagwoodVehicleConfigs::HandbrakeForceNoAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bInfiniteFuel) == 0x0004F8, "Member 'UFortDagwoodVehicleConfigs::bInfiniteFuel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinStartingFuel) == 0x0004FC, "Member 'UFortDagwoodVehicleConfigs::MinStartingFuel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxStartingFuel) == 0x000500, "Member 'UFortDagwoodVehicleConfigs::MaxStartingFuel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostSteeringMultiplier) == 0x000504, "Member 'UFortDagwoodVehicleConfigs::BoostSteeringMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadTopSpeedMultiplier) == 0x000508, "Member 'UFortDagwoodVehicleConfigs::DirtRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFrontLateralFriction) == 0x00050C, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRearLateralFriction) == 0x000510, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadAccelForceMultiplier) == 0x000514, "Member 'UFortDagwoodVehicleConfigs::DirtRoadAccelForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadFakeBumpinessMultiplier) == 0x000518, "Member 'UFortDagwoodVehicleConfigs::DirtRoadFakeBumpinessMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadTopSpeedMultiplier) == 0x00051C, "Member 'UFortDagwoodVehicleConfigs::OffRoadTopSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadFrontLateralFriction) == 0x000520, "Member 'UFortDagwoodVehicleConfigs::OffRoadFrontLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadRearLateralFriction) == 0x000524, "Member 'UFortDagwoodVehicleConfigs::OffRoadRearLateralFriction' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffRoadPushForceMultiplier) == 0x000528, "Member 'UFortDagwoodVehicleConfigs::OffRoadPushForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMin) == 0x00052C, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageImpactForceMax) == 0x000530, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageImpactForceMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMin) == 0x000534, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadImpactDamageMax) == 0x000538, "Member 'UFortDagwoodVehicleConfigs::OffroadImpactDamageMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForOffroadHandling) == 0x00053C, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForOffroadHandling' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FireHealthPercentThreshold) == 0x000540, "Member 'UFortDagwoodVehicleConfigs::FireHealthPercentThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinBumpinessSpringHitTimeMultiplier) == 0x000544, "Member 'UFortDagwoodVehicleConfigs::MinBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxBumpinessSpringHitTimeMultiplier) == 0x000548, "Member 'UFortDagwoodVehicleConfigs::MaxBumpinessSpringHitTimeMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BumpinessExponentForShocks) == 0x00054C, "Member 'UFortDagwoodVehicleConfigs::BumpinessExponentForShocks' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadRumbleIntensity) == 0x000550, "Member 'UFortDagwoodVehicleConfigs::OffroadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DirtRoadRumbleIntensity) == 0x000554, "Member 'UFortDagwoodVehicleConfigs::DirtRoadRumbleIntensity' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, OffroadDamageScaleExponent) == 0x000558, "Member 'UFortDagwoodVehicleConfigs::OffroadDamageScaleExponent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PushDrivingTopSpeed) == 0x00055C, "Member 'UFortDagwoodVehicleConfigs::PushDrivingTopSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PushSteeringAngleAtMinSpeed) == 0x000560, "Member 'UFortDagwoodVehicleConfigs::PushSteeringAngleAtMinSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PushSteeringAngleAtMaxSpeed) == 0x000564, "Member 'UFortDagwoodVehicleConfigs::PushSteeringAngleAtMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PushDrivingAccel) == 0x000568, "Member 'UFortDagwoodVehicleConfigs::PushDrivingAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMin) == 0x00056C, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingThresholdMax) == 0x000570, "Member 'UFortDagwoodVehicleConfigs::HardLandingThresholdMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMin) == 0x000574, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HardLandingShakeZAmplitudeMax) == 0x000578, "Member 'UFortDagwoodVehicleConfigs::HardLandingShakeZAmplitudeMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedLinesThreshold) == 0x00057C, "Member 'UFortDagwoodVehicleConfigs::SpeedLinesThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PropDestructionImpulse) == 0x000580, "Member 'UFortDagwoodVehicleConfigs::PropDestructionImpulse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DestructionAngle) == 0x000584, "Member 'UFortDagwoodVehicleConfigs::DestructionAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpNormalMinProtected) == 0x000588, "Member 'UFortDagwoodVehicleConfigs::UpNormalMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, UpForwardMinProtected) == 0x00058C, "Member 'UFortDagwoodVehicleConfigs::UpForwardMinProtected' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NonCameraSteeringAngleMultiplier) == 0x000590, "Member 'UFortDagwoodVehicleConfigs::NonCameraSteeringAngleMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMax) == 0x000594, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMax' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthMin) == 0x000598, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthMin' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistStrengthRecovery) == 0x00059C, "Member 'UFortDagwoodVehicleConfigs::CameraAssistStrengthRecovery' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, CameraAssistInterpSpeed) == 0x0005A0, "Member 'UFortDagwoodVehicleConfigs::CameraAssistInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionBrakeForceMultiplier) == 0x0005A4, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionBrakeForceMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ReverseChangeDirectionSpeedThreshold) == 0x0005A8, "Member 'UFortDagwoodVehicleConfigs::ReverseChangeDirectionSpeedThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitPushForce) == 0x0005AC, "Member 'UFortDagwoodVehicleConfigs::DriftExitPushForce' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, DriftExitCatchupSpeed) == 0x0005B0, "Member 'UFortDagwoodVehicleConfigs::DriftExitCatchupSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HandbrakeDurationRequiredForCatchup) == 0x0005B4, "Member 'UFortDagwoodVehicleConfigs::HandbrakeDurationRequiredForCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ImpactMagnitudeToEndCatchup) == 0x0005B8, "Member 'UFortDagwoodVehicleConfigs::ImpactMagnitudeToEndCatchup' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringLength) == 0x0005BC, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringLength' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringStiff) == 0x0005C0, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireSpringDamp) == 0x0005C4, "Member 'UFortDagwoodVehicleConfigs::PoppedTireSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageOne) == 0x0005C8, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageOne' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_StageTwo) == 0x0005CC, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_StageTwo' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireTractionMultiplier_Min) == 0x0005D0, "Member 'UFortDagwoodVehicleConfigs::PoppedTireTractionMultiplier_Min' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireScrapeFrictionMultiplier) == 0x0005D4, "Member 'UFortDagwoodVehicleConfigs::PoppedTireScrapeFrictionMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinSpeedForRimScrapeDamage) == 0x0005D8, "Member 'UFortDagwoodVehicleConfigs::MinSpeedForRimScrapeDamage' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeDamageRate) == 0x0005DC, "Member 'UFortDagwoodVehicleConfigs::RimScrapeDamageRate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipRollMagnitude) == 0x0005E0, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipRollMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RimScrapeFlipPitchMagnitude) == 0x0005E4, "Member 'UFortDagwoodVehicleConfigs::RimScrapeFlipPitchMagnitude' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, SpeedForRimFlip) == 0x0005E8, "Member 'UFortDagwoodVehicleConfigs::SpeedForRimFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForFlip) == 0x0005EC, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForFlip' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawDuration) == 0x0005F0, "Member 'UFortDagwoodVehicleConfigs::FlipYawDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRollDuration) == 0x0005F4, "Member 'UFortDagwoodVehicleConfigs::FlipRollDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPitchDuration) == 0x0005F8, "Member 'UFortDagwoodVehicleConfigs::FlipPitchDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Yaw) == 0x0005FC, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipExplodeDuration_Pitch) == 0x000600, "Member 'UFortDagwoodVehicleConfigs::FlipExplodeDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Yaw) == 0x000604, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Yaw' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForceDuration_Pitch) == 0x000608, "Member 'UFortDagwoodVehicleConfigs::FlipPushForceDuration_Pitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForcMultiplier) == 0x00060C, "Member 'UFortDagwoodVehicleConfigs::FlipPushForcMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentPitch) == 0x000610, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentPitch' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipPushForce_UpComponentRoll) == 0x000614, "Member 'UFortDagwoodVehicleConfigs::FlipPushForce_UpComponentRoll' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MinTimeInAirRequiredForExplodeLanding) == 0x000618, "Member 'UFortDagwoodVehicleConfigs::MinTimeInAirRequiredForExplodeLanding' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringStiff) == 0x00061C, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringStiff' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringDamp) == 0x000620, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringDamp' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawSpringMaxAccel) == 0x000624, "Member 'UFortDagwoodVehicleConfigs::FlipYawSpringMaxAccel' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HealthPercentForExplode) == 0x000628, "Member 'UFortDagwoodVehicleConfigs::HealthPercentForExplode' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipRecoveryTime) == 0x00062C, "Member 'UFortDagwoodVehicleConfigs::FlipRecoveryTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipMaxDuration) == 0x000630, "Member 'UFortDagwoodVehicleConfigs::FlipMaxDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleDuration) == 0x000634, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerDuration) == 0x000638, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PoppedTireVeerSteeringAngle) == 0x00063C, "Member 'UFortDagwoodVehicleConfigs::PoppedTireVeerSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleFrequency) == 0x000640, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleFrequency' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipWiggleSteeringAngle) == 0x000644, "Member 'UFortDagwoodVehicleConfigs::FlipWiggleSteeringAngle' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FlipYawAngleThreshold) == 0x000648, "Member 'UFortDagwoodVehicleConfigs::FlipYawAngleThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, bUsesBoost) == 0x00064C, "Member 'UFortDagwoodVehicleConfigs::bUsesBoost' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfUse) == 0x000650, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfUse' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRateOfRegen) == 0x000654, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRateOfRegen' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMinMultiplier) == 0x000658, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMinMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRateOfRegenMaxMultiplier) == 0x00065C, "Member 'UFortDagwoodVehicleConfigs::BoostRateOfRegenMaxMultiplier' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostRegenMaxMultiplyTime) == 0x000660, "Member 'UFortDagwoodVehicleConfigs::BoostRegenMaxMultiplyTime' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostRequiredPercentToActivate) == 0x000664, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostRequiredPercentToActivate' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMaxPercent) == 0x000668, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMaxPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RechargeableBoostMinPercent) == 0x00066C, "Member 'UFortDagwoodVehicleConfigs::RechargeableBoostMinPercent' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, NumWheelsOnSurfaceRequired) == 0x000670, "Member 'UFortDagwoodVehicleConfigs::NumWheelsOnSurfaceRequired' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FuelLeakProjectileTimeInterval) == 0x000674, "Member 'UFortDagwoodVehicleConfigs::FuelLeakProjectileTimeInterval' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, FuelLeakHealthPercentThreshold) == 0x000678, "Member 'UFortDagwoodVehicleConfigs::FuelLeakHealthPercentThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, ServerExtraHealth) == 0x00067C, "Member 'UFortDagwoodVehicleConfigs::ServerExtraHealth' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxTimeZeroHealth) == 0x000680, "Member 'UFortDagwoodVehicleConfigs::MaxTimeZeroHealth' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, MaxTimeExplosion) == 0x000684, "Member 'UFortDagwoodVehicleConfigs::MaxTimeExplosion' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, RefuelInteractDuration) == 0x000688, "Member 'UFortDagwoodVehicleConfigs::RefuelInteractDuration' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, HUDTopSpeed) == 0x00068C, "Member 'UFortDagwoodVehicleConfigs::HUDTopSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, AnalogDriftStickThreshold) == 0x000690, "Member 'UFortDagwoodVehicleConfigs::AnalogDriftStickThreshold' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRightSocketName) == 0x000694, "Member 'UFortDagwoodVehicleConfigs::TireBootRightSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootLeftSocketName) == 0x00069C, "Member 'UFortDagwoodVehicleConfigs::TireBootLeftSocketName' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, TireBootRelativeDistance) == 0x0006A4, "Member 'UFortDagwoodVehicleConfigs::TireBootRelativeDistance' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostForceInAir) == 0x0006A8, "Member 'UFortDagwoodVehicleConfigs::BoostForceInAir' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, BoostAirMaxSpeed) == 0x0006AC, "Member 'UFortDagwoodVehicleConfigs::BoostAirMaxSpeed' has a wrong offset!");
static_assert(offsetof(UFortDagwoodVehicleConfigs, PlayerFacingName) == 0x0006B0, "Member 'UFortDagwoodVehicleConfigs::PlayerFacingName' has a wrong offset!");

// Class ValetRuntime.FortValetAudioController
// 0x0120 (0x0340 - 0x0220)
class AFortValetAudioController final : public AActor
{
public:
	FMulticastInlineDelegateProperty_             OnEngineLoadChanged;                               // 0x0220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnShiftGearCompleted;                              // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnShiftGearDelegate;                               // 0x0240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         RPMResetTime_Native;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterAmount_Native;                               // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftTimeThreshold_Native;                         // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceShift_Native;                             // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMInterp_Native;                            // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineRPMLinear_Native;                            // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRPMRange_Native;                                // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMRange_Native;                                // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCurrentlyShifting_Native;                         // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4286[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentAccelRateGearModifier_Native;               // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAccelRate_Native;                           // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear_Native;                                // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxGear_Native;                                    // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultAccelRateScalar_Native;                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAttackInterpSpeed_Native;                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearReleaseInterpSpeed_Native;                     // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarFirstGear_Native;                   // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMinGear_Native;                     // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelRateScalarMaxGear_Native;                     // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMStart_Native;                            // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftToRPMEnd_Native;                              // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMStart_Native;                          // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShiftFromRPMEnd_Native;                            // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothDecrement_Native;                    // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPMSawtoothRepeatTime_Native;                   // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownhillAccelScalar_Native;                        // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UphillAccelScalar_Native;                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizedSpeed_Native;                            // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuspValue_Native;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHandbraking_Native;                             // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4287[0x3];                                     // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotoSynthVolume_Native;                            // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthLogRPM_Native;                            // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFuel_Native;                                   // 0x02D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInWater_Native;                                 // 0x02D1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocalPlayerInVehicle_Native;                      // 0x02D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4288[0x1];                                     // 0x02D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeLocalPlayerEnteredVehicle_Native;              // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttemptingDirectionChange_Native;                 // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreDestroy_Native;                                // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineLoad_Native;                                // 0x02DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4289[0x1];                                     // 0x02DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkidAmount_Native;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceAwoken_Native;                            // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyed_Native;                                 // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428A[0x3];                                     // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeSinceSurfaceChange_Native;                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428B[0x4];                                     // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnInitialSuspensionSound;                          // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleForSkidding_Native;                           // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringCompressionMultiplier;                       // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotoSynthMaxVolume_Native;                         // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortDagwoodVehicle>     ValetVehicle;                                      // 0x0304(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428C[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortLayeredAudioComponent*             Engine_Native;                                     // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        BoostAudioComponent_Native;                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USynthComponentMoto*                    SynthComponentMoto_Native;                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortCollisionAudioComponent*           SuspensionCollisionComponent_Native;               // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428D[0x10];                                    // 0x0330(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheValetVehicle(class AFortDagwoodVehicle* InVehicle);
	void OnSuspensionCollision_Native(bool* OutResult, float* OutMagnitude);
	void Update_Native();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetAudioController">();
	}
	static class AFortValetAudioController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortValetAudioController>();
	}
};
static_assert(alignof(AFortValetAudioController) == 0x000008, "Wrong alignment on AFortValetAudioController");
static_assert(sizeof(AFortValetAudioController) == 0x000340, "Wrong size on AFortValetAudioController");
static_assert(offsetof(AFortValetAudioController, OnEngineLoadChanged) == 0x000220, "Member 'AFortValetAudioController::OnEngineLoadChanged' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearCompleted) == 0x000230, "Member 'AFortValetAudioController::OnShiftGearCompleted' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnShiftGearDelegate) == 0x000240, "Member 'AFortValetAudioController::OnShiftGearDelegate' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, RPMResetTime_Native) == 0x000250, "Member 'AFortValetAudioController::RPMResetTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, JitterAmount_Native) == 0x000254, "Member 'AFortValetAudioController::JitterAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftTimeThreshold_Native) == 0x000258, "Member 'AFortValetAudioController::ShiftTimeThreshold_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceShift_Native) == 0x00025C, "Member 'AFortValetAudioController::TimeSinceShift_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMInterp_Native) == 0x000260, "Member 'AFortValetAudioController::EngineRPMInterp_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, EngineRPMLinear_Native) == 0x000264, "Member 'AFortValetAudioController::EngineRPMLinear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MinRPMRange_Native) == 0x000268, "Member 'AFortValetAudioController::MinRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMRange_Native) == 0x00026C, "Member 'AFortValetAudioController::MaxRPMRange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bCurrentlyShifting_Native) == 0x000270, "Member 'AFortValetAudioController::bCurrentlyShifting_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRateGearModifier_Native) == 0x000274, "Member 'AFortValetAudioController::CurrentAccelRateGearModifier_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentAccelRate_Native) == 0x000278, "Member 'AFortValetAudioController::CurrentAccelRate_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, CurrentGear_Native) == 0x00027C, "Member 'AFortValetAudioController::CurrentGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxGear_Native) == 0x000280, "Member 'AFortValetAudioController::MaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DefaultAccelRateScalar_Native) == 0x000284, "Member 'AFortValetAudioController::DefaultAccelRateScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearAttackInterpSpeed_Native) == 0x000288, "Member 'AFortValetAudioController::GearAttackInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, GearReleaseInterpSpeed_Native) == 0x00028C, "Member 'AFortValetAudioController::GearReleaseInterpSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarFirstGear_Native) == 0x000290, "Member 'AFortValetAudioController::AccelRateScalarFirstGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMinGear_Native) == 0x000294, "Member 'AFortValetAudioController::AccelRateScalarMinGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AccelRateScalarMaxGear_Native) == 0x000298, "Member 'AFortValetAudioController::AccelRateScalarMaxGear_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMStart_Native) == 0x00029C, "Member 'AFortValetAudioController::ShiftToRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftToRPMEnd_Native) == 0x0002A0, "Member 'AFortValetAudioController::ShiftToRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMStart_Native) == 0x0002A4, "Member 'AFortValetAudioController::ShiftFromRPMStart_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ShiftFromRPMEnd_Native) == 0x0002A8, "Member 'AFortValetAudioController::ShiftFromRPMEnd_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothDecrement_Native) == 0x0002AC, "Member 'AFortValetAudioController::MaxRPMSawtoothDecrement_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MaxRPMSawtoothRepeatTime_Native) == 0x0002B0, "Member 'AFortValetAudioController::MaxRPMSawtoothRepeatTime_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, DownhillAccelScalar_Native) == 0x0002B4, "Member 'AFortValetAudioController::DownhillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, UphillAccelScalar_Native) == 0x0002B8, "Member 'AFortValetAudioController::UphillAccelScalar_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, NormalizedSpeed_Native) == 0x0002BC, "Member 'AFortValetAudioController::NormalizedSpeed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspValue_Native) == 0x0002C0, "Member 'AFortValetAudioController::SuspValue_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsHandbraking_Native) == 0x0002C4, "Member 'AFortValetAudioController::bIsHandbraking_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthVolume_Native) == 0x0002C8, "Member 'AFortValetAudioController::MotoSynthVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthLogRPM_Native) == 0x0002CC, "Member 'AFortValetAudioController::MotoSynthLogRPM_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bHasFuel_Native) == 0x0002D0, "Member 'AFortValetAudioController::bHasFuel_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bIsInWater_Native) == 0x0002D1, "Member 'AFortValetAudioController::bIsInWater_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bLocalPlayerInVehicle_Native) == 0x0002D2, "Member 'AFortValetAudioController::bLocalPlayerInVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeLocalPlayerEnteredVehicle_Native) == 0x0002D4, "Member 'AFortValetAudioController::TimeLocalPlayerEnteredVehicle_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bAttemptingDirectionChange_Native) == 0x0002D8, "Member 'AFortValetAudioController::bAttemptingDirectionChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bPreDestroy_Native) == 0x0002D9, "Member 'AFortValetAudioController::bPreDestroy_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bEngineLoad_Native) == 0x0002DA, "Member 'AFortValetAudioController::bEngineLoad_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SkidAmount_Native) == 0x0002DC, "Member 'AFortValetAudioController::SkidAmount_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceAwoken_Native) == 0x0002E0, "Member 'AFortValetAudioController::TimeSinceAwoken_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, bDestroyed_Native) == 0x0002E4, "Member 'AFortValetAudioController::bDestroyed_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, TimeSinceSurfaceChange_Native) == 0x0002E8, "Member 'AFortValetAudioController::TimeSinceSurfaceChange_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, OnInitialSuspensionSound) == 0x0002F0, "Member 'AFortValetAudioController::OnInitialSuspensionSound' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, AngleForSkidding_Native) == 0x0002F8, "Member 'AFortValetAudioController::AngleForSkidding_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SpringCompressionMultiplier) == 0x0002FC, "Member 'AFortValetAudioController::SpringCompressionMultiplier' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, MotoSynthMaxVolume_Native) == 0x000300, "Member 'AFortValetAudioController::MotoSynthMaxVolume_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, ValetVehicle) == 0x000304, "Member 'AFortValetAudioController::ValetVehicle' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, Engine_Native) == 0x000310, "Member 'AFortValetAudioController::Engine_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, BoostAudioComponent_Native) == 0x000318, "Member 'AFortValetAudioController::BoostAudioComponent_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SynthComponentMoto_Native) == 0x000320, "Member 'AFortValetAudioController::SynthComponentMoto_Native' has a wrong offset!");
static_assert(offsetof(AFortValetAudioController, SuspensionCollisionComponent_Native) == 0x000328, "Member 'AFortValetAudioController::SuspensionCollisionComponent_Native' has a wrong offset!");

// Class ValetRuntime.FortValetPassengerAnimInstance
// 0x0070 (0x0620 - 0x05B0)
class UFortValetPassengerAnimInstance final : public UFortVehicleOccupantAnimInstance
{
public:
	struct FCachedAnimRelevancyData               IntoVehicleCachedData;                             // 0x05A8(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FCachedAnimRelevancyData               OutOfVehicleCachedData;                            // 0x05C4(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class AFortDagwoodVehicle>     DagwoodVehicleInstance;                            // 0x05E0(0x0028)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYaw;                                           // 0x0608(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x060C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutTime;                                           // 0x0610(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x0614(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargeting;                                      // 0x0615(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingConsumable;                                // 0x0616(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAction;                                       // 0x0617(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPassengerBackLeft;                              // 0x0618(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsThrowConsumable;                                // 0x0619(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428F[0x6];                                     // 0x061A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortValetPassengerAnimInstance">();
	}
	static class UFortValetPassengerAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortValetPassengerAnimInstance>();
	}
};
static_assert(alignof(UFortValetPassengerAnimInstance) == 0x000010, "Wrong alignment on UFortValetPassengerAnimInstance");
static_assert(sizeof(UFortValetPassengerAnimInstance) == 0x000620, "Wrong size on UFortValetPassengerAnimInstance");
static_assert(offsetof(UFortValetPassengerAnimInstance, IntoVehicleCachedData) == 0x0005A8, "Member 'UFortValetPassengerAnimInstance::IntoVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutOfVehicleCachedData) == 0x0005C4, "Member 'UFortValetPassengerAnimInstance::OutOfVehicleCachedData' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, DagwoodVehicleInstance) == 0x0005E0, "Member 'UFortValetPassengerAnimInstance::DagwoodVehicleInstance' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, TurnYaw) == 0x000608, "Member 'UFortValetPassengerAnimInstance::TurnYaw' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, InTime) == 0x00060C, "Member 'UFortValetPassengerAnimInstance::InTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, OutTime) == 0x000610, "Member 'UFortValetPassengerAnimInstance::OutTime' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsReloading) == 0x000614, "Member 'UFortValetPassengerAnimInstance::bIsReloading' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsTargeting) == 0x000615, "Member 'UFortValetPassengerAnimInstance::bIsTargeting' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsUsingConsumable) == 0x000616, "Member 'UFortValetPassengerAnimInstance::bIsUsingConsumable' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsInAction) == 0x000617, "Member 'UFortValetPassengerAnimInstance::bIsInAction' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsPassengerBackLeft) == 0x000618, "Member 'UFortValetPassengerAnimInstance::bIsPassengerBackLeft' has a wrong offset!");
static_assert(offsetof(UFortValetPassengerAnimInstance, bIsThrowConsumable) == 0x000619, "Member 'UFortValetPassengerAnimInstance::bIsThrowConsumable' has a wrong offset!");

}

