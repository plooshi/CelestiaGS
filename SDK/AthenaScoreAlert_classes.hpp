#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaScoreAlert

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AthenaScoreAlert.AthenaScoreAlert_C
// 0x0218 (0x04B0 - 0x0298)
class UAthenaScoreAlert_C final : public UAthenaWinConditionMsgBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Exclamation;                                       // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Outro;                                             // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UVerticalBox*                           Content;                                           // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             ExclamationTextBlock;                              // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URichTextBlock*                         MessageTextBlock;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         TestMessageType;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ContentOffset;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FHUDMessageData>                QueuedMessages;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         DefaultShowTime;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IntroShowTime;                                     // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHUDMessageData                        PreviousMessage;                                   // 0x02F0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          TextStyleDataAsset;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6FA7[0x7];                                     // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHUDMessageData                        CurrentMessage;                                    // 0x0350(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           ShowTimeTimerHandle;                               // 0x03A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHUDMessageData                        NextMessage;                                       // 0x03B0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FTimerHandle                           OutroTimerHandle;                                  // 0x0408(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FHUDMessageOverlaySlotPlacementData    BottomCenterOverlaySlotData;                       // 0x0410(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FHUDMessageOverlaySlotPlacementData    TopCenterOverlaySlotData;                          // 0x0424(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FHUDMessageOverlaySlotPlacementData    CenterRightOverlaySlotData;                        // 0x0438(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FHUDMessageCanvasSlotPlacementData     BottomCenterCanvasSlotData;                        // 0x044C(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FHUDMessageCanvasSlotPlacementData     TopCenterCanvasSlotData;                           // 0x046C(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FHUDMessageCanvasSlotPlacementData     CenterRightCanvasSlotData;                         // 0x048C(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void TryToDisplayMessage(const struct FHUDMessageData& Param_CurrentMessage);
	void HandleMessageQueuing(bool* bMessageWasQueued);
	void DisplayMessage();
	void UpdateExclamationTextBlockColors(const class FText& Message);
	void OnShowTimeExpired();
	void PlayIntroAnimations();
	void ShouldPlayIntroAnimations(bool* bShouldPlay);
	void StartHideTimer();
	void OnOutroAnimationFinished();
	void OnGameModeMessageRequest(const struct FAthenaGameMessageData& MessageData);
	void OnHideGameModeMessageRequest(EAthenaGameMsgType MessageType, bool bInstantHide, bool bClearQueue);
	void BindToGameStateEvents(class AFortGameState* GameState);
	void UpdateContentTranslation(bool bShiftContentDown);
	void PlaySoundFromType(const struct FHUDMessageData& MessageData);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void BP_OnMinigameEnded();
	void BP_OnGameStateInitialized(class AFortGameState* GameState);
	void BP_OnShowHUDMessage(const struct FHUDMessageData& MessageData);
	void ExecuteUbergraph_AthenaScoreAlert(int32 EntryPoint);
	void FillInitialPositionData();
	void SetPlacement();
	void ConvertToHUDMessage(EHUDMessagePlacement Placement, ETextTransformPolicy Text_Transform_Policy, const struct FAthenaGameMessageData& AthenaGameMessageData, struct FHUDMessageData* HUDMessageData);
	void HUDMessageToText(const struct FHUDMessageData& HUDMessage, class FText* Text);

	void ShouldColorizeExclamationTextBlock(bool* bShouldColorize) const;
	void ShouldShowExclamation(bool* bShouldShow) const;
	void GetRichTextStyleFromMessage(const class FText& Message, class FName* Style) const;
	void IsMessageValidForWidget(const struct FHUDMessageData& Message, bool* bIsValid) const;
	void IsMessageValidForViewTarget(const struct FHUDMessageData& Message, bool* bIsValid) const;
	void GetShowTimeInterval(const struct FHUDMessageData& MessageData, float* ShowTimeInterval) const;
	void DoesWidgetHandleThisEnum(EAthenaGameMsgType MessageType, bool* bIsValid) const;
	void DoesTeamMatchViewTargetsTeam(int32 Team, bool* bDoesMatchViewTargetsTeam) const;
	void DoesViewTargetMatchTriggeringPlayer(class APlayerState* TriggeringPlayer, bool* bDoesMatch) const;
	void DoesViewTargetsTeamMatchTriggeringPlayersTeam(class APlayerState* TriggeringPlayer, bool* bDoesMatch) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaScoreAlert_C">();
	}
	static class UAthenaScoreAlert_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAthenaScoreAlert_C>();
	}
};
static_assert(alignof(UAthenaScoreAlert_C) == 0x000008, "Wrong alignment on UAthenaScoreAlert_C");
static_assert(sizeof(UAthenaScoreAlert_C) == 0x0004B0, "Wrong size on UAthenaScoreAlert_C");
static_assert(offsetof(UAthenaScoreAlert_C, UberGraphFrame) == 0x000298, "Member 'UAthenaScoreAlert_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, Exclamation) == 0x0002A0, "Member 'UAthenaScoreAlert_C::Exclamation' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, Outro) == 0x0002A8, "Member 'UAthenaScoreAlert_C::Outro' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, Intro) == 0x0002B0, "Member 'UAthenaScoreAlert_C::Intro' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, Content) == 0x0002B8, "Member 'UAthenaScoreAlert_C::Content' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, ExclamationTextBlock) == 0x0002C0, "Member 'UAthenaScoreAlert_C::ExclamationTextBlock' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, MessageTextBlock) == 0x0002C8, "Member 'UAthenaScoreAlert_C::MessageTextBlock' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, TestMessageType) == 0x0002D0, "Member 'UAthenaScoreAlert_C::TestMessageType' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, ContentOffset) == 0x0002D4, "Member 'UAthenaScoreAlert_C::ContentOffset' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, QueuedMessages) == 0x0002D8, "Member 'UAthenaScoreAlert_C::QueuedMessages' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, DefaultShowTime) == 0x0002E8, "Member 'UAthenaScoreAlert_C::DefaultShowTime' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, IntroShowTime) == 0x0002EC, "Member 'UAthenaScoreAlert_C::IntroShowTime' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, PreviousMessage) == 0x0002F0, "Member 'UAthenaScoreAlert_C::PreviousMessage' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, TextStyleDataAsset) == 0x000348, "Member 'UAthenaScoreAlert_C::TextStyleDataAsset' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, CurrentMessage) == 0x000350, "Member 'UAthenaScoreAlert_C::CurrentMessage' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, ShowTimeTimerHandle) == 0x0003A8, "Member 'UAthenaScoreAlert_C::ShowTimeTimerHandle' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, NextMessage) == 0x0003B0, "Member 'UAthenaScoreAlert_C::NextMessage' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, OutroTimerHandle) == 0x000408, "Member 'UAthenaScoreAlert_C::OutroTimerHandle' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, BottomCenterOverlaySlotData) == 0x000410, "Member 'UAthenaScoreAlert_C::BottomCenterOverlaySlotData' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, TopCenterOverlaySlotData) == 0x000424, "Member 'UAthenaScoreAlert_C::TopCenterOverlaySlotData' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, CenterRightOverlaySlotData) == 0x000438, "Member 'UAthenaScoreAlert_C::CenterRightOverlaySlotData' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, BottomCenterCanvasSlotData) == 0x00044C, "Member 'UAthenaScoreAlert_C::BottomCenterCanvasSlotData' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, TopCenterCanvasSlotData) == 0x00046C, "Member 'UAthenaScoreAlert_C::TopCenterCanvasSlotData' has a wrong offset!");
static_assert(offsetof(UAthenaScoreAlert_C, CenterRightCanvasSlotData) == 0x00048C, "Member 'UAthenaScoreAlert_C::CenterRightCanvasSlotData' has a wrong offset!");

}

