#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FogVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FogVolume.BP_FogVolume_C
// 0x0098 (0x02B8 - 0x0220)
class ABP_FogVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FogCube;                                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FogMaterial;                                       // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Size;                                              // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_Day;                                       // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InnerScatter;                                      // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Emissive;                                          // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Workaround;                                        // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77A2[0x3];                                     // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseMin;                                          // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseMax;                                          // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoNoiseOpacityValue;                               // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               NoiseTexture;                                      // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseSize;                                         // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseSpeed;                                        // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RadialFalloff;                                     // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77A3[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadiusScale;                                       // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AxisFalloffExponent;                               // 0x0290(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_Morning;                                   // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_Evening;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density_Night;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AxisShift;                                         // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FogVolume(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetScalarOnFogMaterial(float Value, class FName Param_Name);
	void UpdateMaterial();
	void SetVectorOnFogMaterial(const struct FLinearColor& Value, class FName Param_Name);
	void UpdateParticle();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FogVolume_C">();
	}
	static class ABP_FogVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FogVolume_C>();
	}
};
static_assert(alignof(ABP_FogVolume_C) == 0x000008, "Wrong alignment on ABP_FogVolume_C");
static_assert(sizeof(ABP_FogVolume_C) == 0x0002B8, "Wrong size on ABP_FogVolume_C");
static_assert(offsetof(ABP_FogVolume_C, UberGraphFrame) == 0x000220, "Member 'ABP_FogVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, FogCube) == 0x000228, "Member 'ABP_FogVolume_C::FogCube' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_FogVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, FogMaterial) == 0x000238, "Member 'ABP_FogVolume_C::FogMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Size) == 0x000240, "Member 'ABP_FogVolume_C::Size' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Density_Day) == 0x000244, "Member 'ABP_FogVolume_C::Density_Day' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, InnerScatter) == 0x000248, "Member 'ABP_FogVolume_C::InnerScatter' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Emissive) == 0x000258, "Member 'ABP_FogVolume_C::Emissive' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Workaround) == 0x000268, "Member 'ABP_FogVolume_C::Workaround' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseMin) == 0x00026C, "Member 'ABP_FogVolume_C::NoiseMin' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseMax) == 0x000270, "Member 'ABP_FogVolume_C::NoiseMax' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoNoiseOpacityValue) == 0x000274, "Member 'ABP_FogVolume_C::NoNoiseOpacityValue' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseTexture) == 0x000278, "Member 'ABP_FogVolume_C::NoiseTexture' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseSize) == 0x000280, "Member 'ABP_FogVolume_C::NoiseSize' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, NoiseSpeed) == 0x000284, "Member 'ABP_FogVolume_C::NoiseSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, RadialFalloff) == 0x000288, "Member 'ABP_FogVolume_C::RadialFalloff' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, RadiusScale) == 0x00028C, "Member 'ABP_FogVolume_C::RadiusScale' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, AxisFalloffExponent) == 0x000290, "Member 'ABP_FogVolume_C::AxisFalloffExponent' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Density_Morning) == 0x00029C, "Member 'ABP_FogVolume_C::Density_Morning' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Density_Evening) == 0x0002A0, "Member 'ABP_FogVolume_C::Density_Evening' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, Density_Night) == 0x0002A4, "Member 'ABP_FogVolume_C::Density_Night' has a wrong offset!");
static_assert(offsetof(ABP_FogVolume_C, AxisShift) == 0x0002A8, "Member 'ABP_FogVolume_C::AxisShift' has a wrong offset!");

}

