#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Solaris

#include "Basic.hpp"


namespace SDK::Params
{

// Function Solaris.SolarisArrayLibrary.Add
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Add final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         New_item;                                          // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Add) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Add");
static_assert(sizeof(SolarisArrayLibrary_Add) == 0x000018, "Wrong size on SolarisArrayLibrary_Add");
static_assert(offsetof(SolarisArrayLibrary_Add, Array) == 0x000000, "Member 'SolarisArrayLibrary_Add::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, New_item) == 0x000010, "Member 'SolarisArrayLibrary_Add::New_item' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Add, ReturnValue) == 0x000014, "Member 'SolarisArrayLibrary_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Concat
// 0x0030 (0x0030 - 0x0000)
struct SolarisArrayLibrary_Concat final
{
public:
	TArray<int32>                                 Lhs;                                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Rhs;                                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Concat) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Concat");
static_assert(sizeof(SolarisArrayLibrary_Concat) == 0x000030, "Wrong size on SolarisArrayLibrary_Concat");
static_assert(offsetof(SolarisArrayLibrary_Concat, Lhs) == 0x000000, "Member 'SolarisArrayLibrary_Concat::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Concat, Rhs) == 0x000010, "Member 'SolarisArrayLibrary_Concat::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Concat, ReturnValue) == 0x000020, "Member 'SolarisArrayLibrary_Concat::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Contains
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Contains final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Search_item;                                       // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492D[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisArrayLibrary_Contains) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Contains");
static_assert(sizeof(SolarisArrayLibrary_Contains) == 0x000018, "Wrong size on SolarisArrayLibrary_Contains");
static_assert(offsetof(SolarisArrayLibrary_Contains, Array) == 0x000000, "Member 'SolarisArrayLibrary_Contains::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Contains, Search_item) == 0x000010, "Member 'SolarisArrayLibrary_Contains::Search_item' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Contains, ReturnValue) == 0x000014, "Member 'SolarisArrayLibrary_Contains::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Empty
// 0x0010 (0x0010 - 0x0000)
struct SolarisArrayLibrary_Empty final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Empty) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Empty");
static_assert(sizeof(SolarisArrayLibrary_Empty) == 0x000010, "Wrong size on SolarisArrayLibrary_Empty");
static_assert(offsetof(SolarisArrayLibrary_Empty, Array) == 0x000000, "Member 'SolarisArrayLibrary_Empty::Array' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.IsValidIndex
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_IsValidIndex final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492E[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisArrayLibrary_IsValidIndex) == 0x000008, "Wrong alignment on SolarisArrayLibrary_IsValidIndex");
static_assert(sizeof(SolarisArrayLibrary_IsValidIndex) == 0x000018, "Wrong size on SolarisArrayLibrary_IsValidIndex");
static_assert(offsetof(SolarisArrayLibrary_IsValidIndex, Array) == 0x000000, "Member 'SolarisArrayLibrary_IsValidIndex::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_IsValidIndex, Param_Index) == 0x000010, "Member 'SolarisArrayLibrary_IsValidIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_IsValidIndex, ReturnValue) == 0x000014, "Member 'SolarisArrayLibrary_IsValidIndex::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Move
// 0x0020 (0x0020 - 0x0000)
struct SolarisArrayLibrary_Move final
{
public:
	TArray<int32>                                 Target;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Source;                                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisArrayLibrary_Move) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Move");
static_assert(sizeof(SolarisArrayLibrary_Move) == 0x000020, "Wrong size on SolarisArrayLibrary_Move");
static_assert(offsetof(SolarisArrayLibrary_Move, Target) == 0x000000, "Member 'SolarisArrayLibrary_Move::Target' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Move, Source) == 0x000010, "Member 'SolarisArrayLibrary_Move::Source' has a wrong offset!");

// Function Solaris.SolarisArrayLibrary.Num
// 0x0018 (0x0018 - 0x0000)
struct SolarisArrayLibrary_Num final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492F[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisArrayLibrary_Num) == 0x000008, "Wrong alignment on SolarisArrayLibrary_Num");
static_assert(sizeof(SolarisArrayLibrary_Num) == 0x000018, "Wrong size on SolarisArrayLibrary_Num");
static_assert(offsetof(SolarisArrayLibrary_Num, Array) == 0x000000, "Member 'SolarisArrayLibrary_Num::Array' has a wrong offset!");
static_assert(offsetof(SolarisArrayLibrary_Num, ReturnValue) == 0x000010, "Member 'SolarisArrayLibrary_Num::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Bool.equal
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Bool_Equal final
{
public:
	bool                                          Lhs;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rhs;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Bool_Equal) == 0x000001, "Wrong alignment on SolarisMathLibrary_Bool_Equal");
static_assert(sizeof(SolarisMathLibrary_Bool_Equal) == 0x000003, "Wrong size on SolarisMathLibrary_Bool_Equal");
static_assert(offsetof(SolarisMathLibrary_Bool_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Bool_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_Equal, Rhs) == 0x000001, "Member 'SolarisMathLibrary_Bool_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_Equal, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Bool_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Bool.logical_xor
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Bool_Logical_xor final
{
public:
	bool                                          Lhs;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rhs;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Bool_Logical_xor) == 0x000001, "Wrong alignment on SolarisMathLibrary_Bool_Logical_xor");
static_assert(sizeof(SolarisMathLibrary_Bool_Logical_xor) == 0x000003, "Wrong size on SolarisMathLibrary_Bool_Logical_xor");
static_assert(offsetof(SolarisMathLibrary_Bool_Logical_xor, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Bool_Logical_xor::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_Logical_xor, Rhs) == 0x000001, "Member 'SolarisMathLibrary_Bool_Logical_xor::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Bool_Logical_xor, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Bool_Logical_xor::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.abs
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_Abs final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Abs) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Abs");
static_assert(sizeof(SolarisMathLibrary_Int_Abs) == 0x000008, "Wrong size on SolarisMathLibrary_Int_Abs");
static_assert(offsetof(SolarisMathLibrary_Int_Abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_Abs::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Abs, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Int_Abs::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Add
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Add final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Add) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Add");
static_assert(sizeof(SolarisMathLibrary_Int_Add) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Add");
static_assert(offsetof(SolarisMathLibrary_Int_Add, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Add::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Add::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.add_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Add_equals final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Add_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Add_equals");
static_assert(sizeof(SolarisMathLibrary_Int_Add_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Add_equals");
static_assert(offsetof(SolarisMathLibrary_Int_Add_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Add_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Add_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Add_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Add_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Divide
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Divide final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Divide) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Divide");
static_assert(sizeof(SolarisMathLibrary_Int_Divide) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Divide");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Divide::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Divide::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.divide_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Divide_equals final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Divide_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Divide_equals");
static_assert(sizeof(SolarisMathLibrary_Int_Divide_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Divide_equals");
static_assert(offsetof(SolarisMathLibrary_Int_Divide_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Divide_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Divide_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Divide_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Divide_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Equal final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4931[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Equal");
static_assert(sizeof(SolarisMathLibrary_Int_Equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Equal");
static_assert(offsetof(SolarisMathLibrary_Int_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.greater
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Greater final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4932[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Greater) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Greater");
static_assert(sizeof(SolarisMathLibrary_Int_Greater) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Greater");
static_assert(offsetof(SolarisMathLibrary_Int_Greater, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Greater::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Greater, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Greater::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Greater, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Greater::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.greater_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Greater_equal final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4933[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Greater_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Greater_equal");
static_assert(sizeof(SolarisMathLibrary_Int_Greater_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Greater_equal");
static_assert(offsetof(SolarisMathLibrary_Int_Greater_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Greater_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Greater_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Greater_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Greater_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.less
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Less final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4934[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Less) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Less");
static_assert(sizeof(SolarisMathLibrary_Int_Less) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Less");
static_assert(offsetof(SolarisMathLibrary_Int_Less, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Less::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Less, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Less::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Less, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Less::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.less_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Less_equal final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4935[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Less_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Less_equal");
static_assert(sizeof(SolarisMathLibrary_Int_Less_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Less_equal");
static_assert(offsetof(SolarisMathLibrary_Int_Less_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Less_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Less_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Less_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Less_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.max
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Max final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Max) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Max");
static_assert(sizeof(SolarisMathLibrary_Int_Max) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Max");
static_assert(offsetof(SolarisMathLibrary_Int_Max, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Max::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Max, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Max::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Max, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Max::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.min
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Min final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Min) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Min");
static_assert(sizeof(SolarisMathLibrary_Int_Min) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Min");
static_assert(offsetof(SolarisMathLibrary_Int_Min, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Min::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Min, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Min::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Min, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Min::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Multiply
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Multiply final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Multiply) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Multiply");
static_assert(sizeof(SolarisMathLibrary_Int_Multiply) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Multiply");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Multiply::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Multiply::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.multiply_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Multiply_equals final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Multiply_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Multiply_equals");
static_assert(sizeof(SolarisMathLibrary_Int_Multiply_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Multiply_equals");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Multiply_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Multiply_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Multiply_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Multiply_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.negate
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Int_Negate final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Negate) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Negate");
static_assert(sizeof(SolarisMathLibrary_Int_Negate) == 0x000008, "Wrong size on SolarisMathLibrary_Int_Negate");
static_assert(offsetof(SolarisMathLibrary_Int_Negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Int_Negate::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Negate, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Int_Negate::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.not_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Not_equal final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4936[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Int_Not_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Not_equal");
static_assert(sizeof(SolarisMathLibrary_Int_Not_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Not_equal");
static_assert(offsetof(SolarisMathLibrary_Int_Not_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Not_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Not_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Not_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Not_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.Subtract
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Subtract final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Subtract) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Subtract");
static_assert(sizeof(SolarisMathLibrary_Int_Subtract) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Subtract");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Subtract::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Subtract::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Subtract::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Int.subtract_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Int_Subtract_equals final
{
public:
	int32                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Int_Subtract_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Int_Subtract_equals");
static_assert(sizeof(SolarisMathLibrary_Int_Subtract_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Int_Subtract_equals");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Int_Subtract_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Int_Subtract_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Int_Subtract_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Int_Subtract_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.abs
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Float_Abs final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Abs) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Abs");
static_assert(sizeof(SolarisMathLibrary_Float_Abs) == 0x000008, "Wrong size on SolarisMathLibrary_Float_Abs");
static_assert(offsetof(SolarisMathLibrary_Float_Abs, Value) == 0x000000, "Member 'SolarisMathLibrary_Float_Abs::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Abs, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Float_Abs::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Add
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Add final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Add) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Add");
static_assert(sizeof(SolarisMathLibrary_Float_Add) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Add");
static_assert(offsetof(SolarisMathLibrary_Float_Add, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Add::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Add::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Add::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.add_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Add_equals final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Add_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Add_equals");
static_assert(sizeof(SolarisMathLibrary_Float_Add_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Add_equals");
static_assert(offsetof(SolarisMathLibrary_Float_Add_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Add_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Add_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Add_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Add_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.assign
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Assign final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Assign) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Assign");
static_assert(sizeof(SolarisMathLibrary_Float_Assign) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Assign");
static_assert(offsetof(SolarisMathLibrary_Float_Assign, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Assign::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Assign, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Assign::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Assign, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Assign::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Divide
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Divide final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Divide) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Divide");
static_assert(sizeof(SolarisMathLibrary_Float_Divide) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Divide");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Divide::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Divide::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Divide::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.divide_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Divide_equals final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Divide_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Divide_equals");
static_assert(sizeof(SolarisMathLibrary_Float_Divide_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Divide_equals");
static_assert(offsetof(SolarisMathLibrary_Float_Divide_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Divide_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Divide_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Divide_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Divide_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Equal final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4937[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Equal");
static_assert(sizeof(SolarisMathLibrary_Float_Equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Equal");
static_assert(offsetof(SolarisMathLibrary_Float_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.greater
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Greater final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4938[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Greater) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Greater");
static_assert(sizeof(SolarisMathLibrary_Float_Greater) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Greater");
static_assert(offsetof(SolarisMathLibrary_Float_Greater, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Greater::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Greater, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Greater::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Greater, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Greater::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.greater_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Greater_equal final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4939[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Greater_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Greater_equal");
static_assert(sizeof(SolarisMathLibrary_Float_Greater_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Greater_equal");
static_assert(offsetof(SolarisMathLibrary_Float_Greater_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Greater_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Greater_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Greater_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Greater_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Greater_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.less
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Less final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493A[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Less) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Less");
static_assert(sizeof(SolarisMathLibrary_Float_Less) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Less");
static_assert(offsetof(SolarisMathLibrary_Float_Less, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Less::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Less, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Less::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Less, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Less::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.less_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Less_equal final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493B[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Less_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Less_equal");
static_assert(sizeof(SolarisMathLibrary_Float_Less_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Less_equal");
static_assert(offsetof(SolarisMathLibrary_Float_Less_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Less_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Less_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Less_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Less_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Less_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.max
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Max final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Max) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Max");
static_assert(sizeof(SolarisMathLibrary_Float_Max) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Max");
static_assert(offsetof(SolarisMathLibrary_Float_Max, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Max::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Max, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Max::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Max, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Max::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.min
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Min final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Min) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Min");
static_assert(sizeof(SolarisMathLibrary_Float_Min) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Min");
static_assert(offsetof(SolarisMathLibrary_Float_Min, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Min::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Min, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Min::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Min, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Min::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Multiply
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Multiply final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Multiply) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Multiply");
static_assert(sizeof(SolarisMathLibrary_Float_Multiply) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Multiply");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Multiply::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Multiply::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Multiply::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.multiply_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Multiply_equals final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Multiply_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Multiply_equals");
static_assert(sizeof(SolarisMathLibrary_Float_Multiply_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Multiply_equals");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Multiply_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Multiply_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Multiply_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Multiply_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.negate
// 0x0008 (0x0008 - 0x0000)
struct SolarisMathLibrary_Float_Negate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Negate) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Negate");
static_assert(sizeof(SolarisMathLibrary_Float_Negate) == 0x000008, "Wrong size on SolarisMathLibrary_Float_Negate");
static_assert(offsetof(SolarisMathLibrary_Float_Negate, Value) == 0x000000, "Member 'SolarisMathLibrary_Float_Negate::Value' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Negate, ReturnValue) == 0x000004, "Member 'SolarisMathLibrary_Float_Negate::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.not_equal
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Not_equal final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493C[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Float_Not_equal) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Not_equal");
static_assert(sizeof(SolarisMathLibrary_Float_Not_equal) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Not_equal");
static_assert(offsetof(SolarisMathLibrary_Float_Not_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Not_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Not_equal, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Not_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Not_equal, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.Subtract
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Subtract final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Subtract) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Subtract");
static_assert(sizeof(SolarisMathLibrary_Float_Subtract) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Subtract");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Subtract::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Subtract::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Subtract::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Float.subtract_equals
// 0x000C (0x000C - 0x0000)
struct SolarisMathLibrary_Float_Subtract_equals final
{
public:
	float                                         Lhs;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhs;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Float_Subtract_equals) == 0x000004, "Wrong alignment on SolarisMathLibrary_Float_Subtract_equals");
static_assert(sizeof(SolarisMathLibrary_Float_Subtract_equals) == 0x00000C, "Wrong size on SolarisMathLibrary_Float_Subtract_equals");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract_equals, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Float_Subtract_equals::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract_equals, Rhs) == 0x000004, "Member 'SolarisMathLibrary_Float_Subtract_equals::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Float_Subtract_equals, ReturnValue) == 0x000008, "Member 'SolarisMathLibrary_Float_Subtract_equals::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.equal
// 0x0028 (0x0028 - 0x0000)
struct SolarisMathLibrary_String_Equal final
{
public:
	class FString                                 Lhs;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Rhs;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_String_Equal) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_Equal");
static_assert(sizeof(SolarisMathLibrary_String_Equal) == 0x000028, "Wrong size on SolarisMathLibrary_String_Equal");
static_assert(offsetof(SolarisMathLibrary_String_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_String_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Equal, Rhs) == 0x000010, "Member 'SolarisMathLibrary_String_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Equal, ReturnValue) == 0x000020, "Member 'SolarisMathLibrary_String_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_String.not_equal
// 0x0028 (0x0028 - 0x0000)
struct SolarisMathLibrary_String_Not_equal final
{
public:
	class FString                                 Lhs;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Rhs;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493E[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_String_Not_equal) == 0x000008, "Wrong alignment on SolarisMathLibrary_String_Not_equal");
static_assert(sizeof(SolarisMathLibrary_String_Not_equal) == 0x000028, "Wrong size on SolarisMathLibrary_String_Not_equal");
static_assert(offsetof(SolarisMathLibrary_String_Not_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_String_Not_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Not_equal, Rhs) == 0x000010, "Member 'SolarisMathLibrary_String_Not_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_String_Not_equal, ReturnValue) == 0x000020, "Member 'SolarisMathLibrary_String_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Object.equal
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Object_Equal final
{
public:
	class UObject*                                Lhs;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Rhs;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_493F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Object_Equal) == 0x000008, "Wrong alignment on SolarisMathLibrary_Object_Equal");
static_assert(sizeof(SolarisMathLibrary_Object_Equal) == 0x000018, "Wrong size on SolarisMathLibrary_Object_Equal");
static_assert(offsetof(SolarisMathLibrary_Object_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Object_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Object_Equal, Rhs) == 0x000008, "Member 'SolarisMathLibrary_Object_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Object_Equal, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Object_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Object.not_equal
// 0x0018 (0x0018 - 0x0000)
struct SolarisMathLibrary_Object_Not_equal final
{
public:
	class UObject*                                Lhs;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Rhs;                                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4940[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisMathLibrary_Object_Not_equal) == 0x000008, "Wrong alignment on SolarisMathLibrary_Object_Not_equal");
static_assert(sizeof(SolarisMathLibrary_Object_Not_equal) == 0x000018, "Wrong size on SolarisMathLibrary_Object_Not_equal");
static_assert(offsetof(SolarisMathLibrary_Object_Not_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Object_Not_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Object_Not_equal, Rhs) == 0x000008, "Member 'SolarisMathLibrary_Object_Not_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Object_Not_equal, ReturnValue) == 0x000010, "Member 'SolarisMathLibrary_Object_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Enum.equal
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Enum_Equal final
{
public:
	uint8                                         Lhs;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rhs;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Enum_Equal) == 0x000001, "Wrong alignment on SolarisMathLibrary_Enum_Equal");
static_assert(sizeof(SolarisMathLibrary_Enum_Equal) == 0x000003, "Wrong size on SolarisMathLibrary_Enum_Equal");
static_assert(offsetof(SolarisMathLibrary_Enum_Equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Enum_Equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Enum_Equal, Rhs) == 0x000001, "Member 'SolarisMathLibrary_Enum_Equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Enum_Equal, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Enum_Equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisMathLibrary_Enum.not_equal
// 0x0003 (0x0003 - 0x0000)
struct SolarisMathLibrary_Enum_Not_equal final
{
public:
	uint8                                         Lhs;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rhs;                                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisMathLibrary_Enum_Not_equal) == 0x000001, "Wrong alignment on SolarisMathLibrary_Enum_Not_equal");
static_assert(sizeof(SolarisMathLibrary_Enum_Not_equal) == 0x000003, "Wrong size on SolarisMathLibrary_Enum_Not_equal");
static_assert(offsetof(SolarisMathLibrary_Enum_Not_equal, Lhs) == 0x000000, "Member 'SolarisMathLibrary_Enum_Not_equal::Lhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Enum_Not_equal, Rhs) == 0x000001, "Member 'SolarisMathLibrary_Enum_Not_equal::Rhs' has a wrong offset!");
static_assert(offsetof(SolarisMathLibrary_Enum_Not_equal, ReturnValue) == 0x000002, "Member 'SolarisMathLibrary_Enum_Not_equal::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.GetClass
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_GetClass final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_GetClass) == 0x000008, "Wrong alignment on SolarisUtilLibrary_GetClass");
static_assert(sizeof(SolarisUtilLibrary_GetClass) == 0x000010, "Wrong size on SolarisUtilLibrary_GetClass");
static_assert(offsetof(SolarisUtilLibrary_GetClass, Object) == 0x000000, "Member 'SolarisUtilLibrary_GetClass::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_GetClass, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_GetClass::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.GetOptionalValue
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_GetOptionalValue final
{
public:
	class UObject*                                Property;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Optional;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_GetOptionalValue) == 0x000008, "Wrong alignment on SolarisUtilLibrary_GetOptionalValue");
static_assert(sizeof(SolarisUtilLibrary_GetOptionalValue) == 0x000010, "Wrong size on SolarisUtilLibrary_GetOptionalValue");
static_assert(offsetof(SolarisUtilLibrary_GetOptionalValue, Property) == 0x000000, "Member 'SolarisUtilLibrary_GetOptionalValue::Property' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_GetOptionalValue, Optional) == 0x000008, "Member 'SolarisUtilLibrary_GetOptionalValue::Optional' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_GetOptionalValue, ReturnValue) == 0x00000C, "Member 'SolarisUtilLibrary_GetOptionalValue::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.HasTrait
// 0x0018 (0x0018 - 0x0000)
struct SolarisUtilLibrary_HasTrait final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 TraitClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4942[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_HasTrait) == 0x000008, "Wrong alignment on SolarisUtilLibrary_HasTrait");
static_assert(sizeof(SolarisUtilLibrary_HasTrait) == 0x000018, "Wrong size on SolarisUtilLibrary_HasTrait");
static_assert(offsetof(SolarisUtilLibrary_HasTrait, Object) == 0x000000, "Member 'SolarisUtilLibrary_HasTrait::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_HasTrait, TraitClass) == 0x000008, "Member 'SolarisUtilLibrary_HasTrait::TraitClass' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_HasTrait, ReturnValue) == 0x000010, "Member 'SolarisUtilLibrary_HasTrait::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.InstantiateObject
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_InstantiateObject final
{
public:
	class UClass*                                 Type;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SolarisUtilLibrary_InstantiateObject) == 0x000008, "Wrong alignment on SolarisUtilLibrary_InstantiateObject");
static_assert(sizeof(SolarisUtilLibrary_InstantiateObject) == 0x000010, "Wrong size on SolarisUtilLibrary_InstantiateObject");
static_assert(offsetof(SolarisUtilLibrary_InstantiateObject, Type) == 0x000000, "Member 'SolarisUtilLibrary_InstantiateObject::Type' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_InstantiateObject, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_InstantiateObject::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.IsNonNullObject
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_IsNonNullObject final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4943[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_IsNonNullObject) == 0x000008, "Wrong alignment on SolarisUtilLibrary_IsNonNullObject");
static_assert(sizeof(SolarisUtilLibrary_IsNonNullObject) == 0x000010, "Wrong size on SolarisUtilLibrary_IsNonNullObject");
static_assert(offsetof(SolarisUtilLibrary_IsNonNullObject, Object) == 0x000000, "Member 'SolarisUtilLibrary_IsNonNullObject::Object' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_IsNonNullObject, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_IsNonNullObject::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.IsOptionalSet
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_IsOptionalSet final
{
public:
	class UObject*                                Property;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Optional;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4944[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_IsOptionalSet) == 0x000008, "Wrong alignment on SolarisUtilLibrary_IsOptionalSet");
static_assert(sizeof(SolarisUtilLibrary_IsOptionalSet) == 0x000010, "Wrong size on SolarisUtilLibrary_IsOptionalSet");
static_assert(offsetof(SolarisUtilLibrary_IsOptionalSet, Property) == 0x000000, "Member 'SolarisUtilLibrary_IsOptionalSet::Property' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_IsOptionalSet, Optional) == 0x000008, "Member 'SolarisUtilLibrary_IsOptionalSet::Optional' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_IsOptionalSet, ReturnValue) == 0x00000C, "Member 'SolarisUtilLibrary_IsOptionalSet::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.MakeOptionalFromValue
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_MakeOptionalFromValue final
{
public:
	class UObject*                                Property;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4945[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_MakeOptionalFromValue) == 0x000008, "Wrong alignment on SolarisUtilLibrary_MakeOptionalFromValue");
static_assert(sizeof(SolarisUtilLibrary_MakeOptionalFromValue) == 0x000010, "Wrong size on SolarisUtilLibrary_MakeOptionalFromValue");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionalFromValue, Property) == 0x000000, "Member 'SolarisUtilLibrary_MakeOptionalFromValue::Property' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionalFromValue, Value) == 0x000008, "Member 'SolarisUtilLibrary_MakeOptionalFromValue::Value' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_MakeOptionalFromValue, ReturnValue) == 0x00000C, "Member 'SolarisUtilLibrary_MakeOptionalFromValue::ReturnValue' has a wrong offset!");

// Function Solaris.SolarisUtilLibrary.MakeUnsetOptional
// 0x0010 (0x0010 - 0x0000)
struct SolarisUtilLibrary_MakeUnsetOptional final
{
public:
	class UObject*                                Property;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4946[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SolarisUtilLibrary_MakeUnsetOptional) == 0x000008, "Wrong alignment on SolarisUtilLibrary_MakeUnsetOptional");
static_assert(sizeof(SolarisUtilLibrary_MakeUnsetOptional) == 0x000010, "Wrong size on SolarisUtilLibrary_MakeUnsetOptional");
static_assert(offsetof(SolarisUtilLibrary_MakeUnsetOptional, Property) == 0x000000, "Member 'SolarisUtilLibrary_MakeUnsetOptional::Property' has a wrong offset!");
static_assert(offsetof(SolarisUtilLibrary_MakeUnsetOptional, ReturnValue) == 0x000008, "Member 'SolarisUtilLibrary_MakeUnsetOptional::ReturnValue' has a wrong offset!");

}

