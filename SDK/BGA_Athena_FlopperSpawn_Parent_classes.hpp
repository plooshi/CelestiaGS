#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_FlopperSpawn_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_FlopperSpawn_Parent.BGA_Athena_FlopperSpawn_Parent_C
// 0x0328 (0x0AD8 - 0x07B0)
class ABGA_Athena_FlopperSpawn_Parent_C : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          OverlapVolume;                                     // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_MaxUses;                                       // 0x07C8(0x0020)(Edit, BlueprintVisible)
	struct FScalableFloat                         Row_MinUses;                                       // 0x07E8(0x0020)(Edit, BlueprintVisible)
	int32                                         Uses;                                              // 0x0808(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AfterHideLifeSpan;                                 // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemsToDrop;                                       // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Spawn;                                          // 0x0818(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_SpawnChanceMax;                                // 0x0820(0x0020)(Edit, BlueprintVisible)
	bool                                          IsWorldSpawner;                                    // 0x0840(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65CD[0x7];                                     // 0x0841(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_SpawnChanceMin;                                // 0x0848(0x0020)(Edit, BlueprintVisible)
	TMap<struct FGameplayTag, class FName>        TagToLoot_FishingSpotTier;                         // 0x0868(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlreadySpawnChecked;                               // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_65CE[0x7];                                     // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FName>        TagToLoot_DefaultTier;                             // 0x08C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FName>        TagToLoot_ToUse;                                   // 0x0910(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, class FName>        TagToLoot_HighTier_FishingRod;                     // 0x0960(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasTypeTag;                                        // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65CF[0x7];                                     // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x09B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTagContainer                  LootTags;                                          // 0x09C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          MaxUses;                                           // 0x09E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x09E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D0[0x6];                                     // 0x09EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_AddedBobChanceOnOverlapMin;                    // 0x09F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_AddedBobChanceOnOverlapMax;                    // 0x0A10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPickup*                            SpawnedItem;                                       // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_HighTierPoolSpawn;                           // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  QuestTag_DefaultSpawn;                             // 0x0A40(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  QuestTag_WorldSpawn;                               // 0x0A60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APrj_Athena_FloppingRabbit_C*           Projectile;                                        // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FishSizeCurve;                                     // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MiniGameFishSizeThreshold;                         // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D1[0x4];                                     // 0x0A94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         MiniGameFishSizePercentileThreshold;               // 0x0A98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AlwaysStartMiniGame;                               // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_65D2[0x3];                                     // 0x0AB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           HighTierFishingRod;                                // 0x0ABC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   HighTierLootData;                                  // 0x0AC4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DefaultLootTag;                                    // 0x0ACC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Athena_FlopperSpawn_Parent(int32 EntryPoint);
	void UpdateCollectionsComponent(bool bCaughtFish, class AActor* Player, class UFortItemDefinition* ItemDefinition, class AFortPickup* Pickup, float Length);
	void SpawnItem(class AActor* Target, bool Hooked, class USceneComponent* HookComponent, const struct FVector& SpawnLoc, class AActor* Player, float ItemSpawnDelay, bool CaughtWithFishingRod, bool CaughtWithHappyGhost, class AActor* ItemUsedToFish, class APrj_Athena_FloppingRabbit_C* Param_Projectile, const struct FGameplayTagContainer& Required_Tags);
	void ReceiveBeginPlay();
	void HideAndKill();
	void FishingComplete();
	void PlaySpawnItemHightier(const struct FVector& Location);
	void BndEvt__OverlapVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnReady_5804F209455A50B3EE64E3AED087DE64(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void UserConstructionScript();
	void SetBalanceValues();
	void HandleUseTracking();
	void ShouldKill();
	void GetLootTier(bool IsExplosion, bool IsProFishingRod, class FName* Output_Get);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_FlopperSpawn_Parent_C">();
	}
	static class ABGA_Athena_FlopperSpawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_FlopperSpawn_Parent_C>();
	}
};
static_assert(alignof(ABGA_Athena_FlopperSpawn_Parent_C) == 0x000008, "Wrong alignment on ABGA_Athena_FlopperSpawn_Parent_C");
static_assert(sizeof(ABGA_Athena_FlopperSpawn_Parent_C) == 0x000AD8, "Wrong size on ABGA_Athena_FlopperSpawn_Parent_C");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, UberGraphFrame) == 0x0007B0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, OverlapVolume) == 0x0007B8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, DefaultSceneRoot) == 0x0007C0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_MaxUses) == 0x0007C8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_MaxUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_MinUses) == 0x0007E8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_MinUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Uses) == 0x000808, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Uses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AfterHideLifeSpan) == 0x00080C, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AfterHideLifeSpan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, ItemsToDrop) == 0x000810, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::ItemsToDrop' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, GC_Spawn) == 0x000818, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::GC_Spawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_SpawnChanceMax) == 0x000820, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_SpawnChanceMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, IsWorldSpawner) == 0x000840, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::IsWorldSpawner' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_SpawnChanceMin) == 0x000848, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_SpawnChanceMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_FishingSpotTier) == 0x000868, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_FishingSpotTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AlreadySpawnChecked) == 0x0008B8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AlreadySpawnChecked' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_DefaultTier) == 0x0008C0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_DefaultTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_ToUse) == 0x000910, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_ToUse' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, TagToLoot_HighTier_FishingRod) == 0x000960, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::TagToLoot_HighTier_FishingRod' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HasTypeTag) == 0x0009B0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HasTypeTag' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, ObjectTypes) == 0x0009B8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, LootTags) == 0x0009C8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::LootTags' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MaxUses) == 0x0009E8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MaxUses' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Debug) == 0x0009E9, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Debug' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_AddedBobChanceOnOverlapMin) == 0x0009F0, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_AddedBobChanceOnOverlapMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Row_AddedBobChanceOnOverlapMax) == 0x000A10, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Row_AddedBobChanceOnOverlapMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, SpawnedItem) == 0x000A30, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::SpawnedItem' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Sound_HighTierPoolSpawn) == 0x000A38, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Sound_HighTierPoolSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, QuestTag_DefaultSpawn) == 0x000A40, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::QuestTag_DefaultSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, QuestTag_WorldSpawn) == 0x000A60, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::QuestTag_WorldSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, Projectile) == 0x000A80, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::Projectile' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, FishSizeCurve) == 0x000A88, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::FishSizeCurve' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MiniGameFishSizeThreshold) == 0x000A90, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MiniGameFishSizeThreshold' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, MiniGameFishSizePercentileThreshold) == 0x000A98, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::MiniGameFishSizePercentileThreshold' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, AlwaysStartMiniGame) == 0x000AB8, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::AlwaysStartMiniGame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HighTierFishingRod) == 0x000ABC, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HighTierFishingRod' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, HighTierLootData) == 0x000AC4, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::HighTierLootData' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FlopperSpawn_Parent_C, DefaultLootTag) == 0x000ACC, "Member 'ABGA_Athena_FlopperSpawn_Parent_C::DefaultLootTag' has a wrong offset!");

}

