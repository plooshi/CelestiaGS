#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VideoMeshTrigger

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "MeshNetwork_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VideoMeshTrigger.BP_VideoMeshTrigger_C
// 0x0140 (0x0360 - 0x0220)
class ABP_VideoMeshTrigger_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMeshNetworkComponent*                  MeshNetwork;                                       // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              PlayUTCTime;                                       // 0x0238(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         PlayServerTimeSeconds;                             // 0x0240(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         VideoPlayStartTime;                                // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnReadyToPlay;                                     // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnStopPlayback;                                    // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDateTime                              StopUTCTime;                                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MinutesBetweenPlays;                               // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77CB[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShouldPlayCalendarVideo;                           // 0x0278(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MinBetweenPlays;                                   // 0x0298(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPlayerPawn*>                VIPList;                                           // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDateTime                              StartWarmingUTCTime;                               // 0x02C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         StartWarmingServerTimeSeconds;                     // 0x02D0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77CC[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStartWarming;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         VideoWarmingStartTime;                             // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopVideo;                                         // 0x02EC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_77CD[0x3];                                     // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEnableLoopVideo;                                 // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDisableLoopVideo;                                // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 VideoUID;                                          // 0x0310(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ScreenName;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              RootUtcTime;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnStopWarming;                                     // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MaxBandwidth;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77CE[0x4];                                     // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSetBandwidthLimit;                               // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnReadyToPlay__DelegateSignature(float PlayStartTime, const class FString& Param_VideoUID, const class FString& Param_ScreenName);
	void OnStopPlayback__DelegateSignature(const class FString& VideoScreen);
	void OnStartWarming__DelegateSignature(float StartWarmingTime, const class FString& Param_ScreenName);
	void OnEnableLoopVideo__DelegateSignature(const class FString& Param_ScreenName);
	void OnDisableLoopVideo__DelegateSignature(const class FString& Param_ScreenName);
	void OnStopWarming__DelegateSignature(const class FString& VideoScreen);
	void OnSetBandwidthLimit__DelegateSignature(const class FString& Param_ScreenName, int32 MaxBW);
	void ExecuteUbergraph_BP_VideoMeshTrigger(int32 EntryPoint);
	void ReceiveBeginPlay();
	void RootSetMaxBW(const class FString& Param_ScreenName, int32 MaxBW);
	void RootStopWarming(const class FString& Param_ScreenName);
	void ReceiveTick(float DeltaSeconds);
	void RootDisableLoopVideo(const class FString& Param_ScreenName);
	void RootEnableLoopVideo(const class FString& Param_ScreenName);
	void RootStartWarming(const class FString& Param_ScreenName);
	void CheckCalendarForTime();
	void PlayVideoFromCalendar();
	void RootStopvideo(const class FString& Param_ScreenName);
	void RootPlayVideo(const class FString& Param_ScreenName, const class FString& Param_VideoUID);
	void OnReady_7737C6E44FB866E135EECDA102C2BB5A();
	void OnReady_0990DAD74F53D1B0866AA3BCBBD5355C(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnRep_PlayUTCTime();
	void OnRep_PlayServerTimeSeconds();
	void OnRep_StartWarmingUTCTime();
	void OnRep_StartWarmingServerTimeSeconds();
	void OnRep_LoopVideo();
	void OnRep_ScreenName();
	void OnRep_MaxBandwidth();
	void PrintIncomingData(const class FString& Param_ScreenName, const class FString& Param_VideoUID, const class FString& Command);
	void CheckScreen(const class FString& Param_ScreenName, bool* ThisScreen);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VideoMeshTrigger_C">();
	}
	static class ABP_VideoMeshTrigger_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VideoMeshTrigger_C>();
	}
};
static_assert(alignof(ABP_VideoMeshTrigger_C) == 0x000008, "Wrong alignment on ABP_VideoMeshTrigger_C");
static_assert(sizeof(ABP_VideoMeshTrigger_C) == 0x000360, "Wrong size on ABP_VideoMeshTrigger_C");
static_assert(offsetof(ABP_VideoMeshTrigger_C, UberGraphFrame) == 0x000220, "Member 'ABP_VideoMeshTrigger_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MeshNetwork) == 0x000228, "Member 'ABP_VideoMeshTrigger_C::MeshNetwork' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_VideoMeshTrigger_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PlayUTCTime) == 0x000238, "Member 'ABP_VideoMeshTrigger_C::PlayUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, PlayServerTimeSeconds) == 0x000240, "Member 'ABP_VideoMeshTrigger_C::PlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoPlayStartTime) == 0x000244, "Member 'ABP_VideoMeshTrigger_C::VideoPlayStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnReadyToPlay) == 0x000248, "Member 'ABP_VideoMeshTrigger_C::OnReadyToPlay' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnStopPlayback) == 0x000258, "Member 'ABP_VideoMeshTrigger_C::OnStopPlayback' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StopUTCTime) == 0x000268, "Member 'ABP_VideoMeshTrigger_C::StopUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MinutesBetweenPlays) == 0x000270, "Member 'ABP_VideoMeshTrigger_C::MinutesBetweenPlays' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, ShouldPlayCalendarVideo) == 0x000278, "Member 'ABP_VideoMeshTrigger_C::ShouldPlayCalendarVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MinBetweenPlays) == 0x000298, "Member 'ABP_VideoMeshTrigger_C::MinBetweenPlays' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VIPList) == 0x0002B8, "Member 'ABP_VideoMeshTrigger_C::VIPList' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StartWarmingUTCTime) == 0x0002C8, "Member 'ABP_VideoMeshTrigger_C::StartWarmingUTCTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, StartWarmingServerTimeSeconds) == 0x0002D0, "Member 'ABP_VideoMeshTrigger_C::StartWarmingServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnStartWarming) == 0x0002D8, "Member 'ABP_VideoMeshTrigger_C::OnStartWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoWarmingStartTime) == 0x0002E8, "Member 'ABP_VideoMeshTrigger_C::VideoWarmingStartTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, LoopVideo) == 0x0002EC, "Member 'ABP_VideoMeshTrigger_C::LoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnEnableLoopVideo) == 0x0002F0, "Member 'ABP_VideoMeshTrigger_C::OnEnableLoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnDisableLoopVideo) == 0x000300, "Member 'ABP_VideoMeshTrigger_C::OnDisableLoopVideo' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, VideoUID) == 0x000310, "Member 'ABP_VideoMeshTrigger_C::VideoUID' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, ScreenName) == 0x000320, "Member 'ABP_VideoMeshTrigger_C::ScreenName' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, RootUtcTime) == 0x000330, "Member 'ABP_VideoMeshTrigger_C::RootUtcTime' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnStopWarming) == 0x000338, "Member 'ABP_VideoMeshTrigger_C::OnStopWarming' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, MaxBandwidth) == 0x000348, "Member 'ABP_VideoMeshTrigger_C::MaxBandwidth' has a wrong offset!");
static_assert(offsetof(ABP_VideoMeshTrigger_C, OnSetBandwidthLimit) == 0x000350, "Member 'ABP_VideoMeshTrigger_C::OnSetBandwidthLimit' has a wrong offset!");

}

