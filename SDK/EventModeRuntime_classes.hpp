#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EventModeRuntime

#include "Basic.hpp"

#include "EventModeRuntime_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "ModularGameplay_classes.hpp"


namespace SDK
{

// Class EventModeRuntime.FortGameFrameworkComponent_EventMode
// 0x0118 (0x01C8 - 0x00B0)
class UFortGameFrameworkComponent_EventMode : public UGameFrameworkComponent
{
public:
	uint8                                         Pad_3F02[0x60];                                    // 0x00B0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFortWeaponItemDefinition> ActivatorAsset;                                    // 0x0110(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FUIExtension>                   UIExtensions;                                      // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, TSoftClassPtr<class UClass>> TaggedUIExtensions;                                // 0x0148(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FEventModeFocusActor>           FocusActors;                                       // 0x0198(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F03[0x8];                                     // 0x01A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputComponent*                        InputComponent;                                    // 0x01B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FEventModeWidgetCachedData>     CachedWidgetData;                                  // 0x01B8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEnterVehicle();
	void OnExitVehicle();
	void OnPlayerPawnPossessed(class APawn* PossessedPawn);

	bool GetIsEventModeActive() const;
	bool GetIsFocusAvailable() const;
	bool GetIsFocusing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameFrameworkComponent_EventMode">();
	}
	static class UFortGameFrameworkComponent_EventMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameFrameworkComponent_EventMode>();
	}
};
static_assert(alignof(UFortGameFrameworkComponent_EventMode) == 0x000008, "Wrong alignment on UFortGameFrameworkComponent_EventMode");
static_assert(sizeof(UFortGameFrameworkComponent_EventMode) == 0x0001C8, "Wrong size on UFortGameFrameworkComponent_EventMode");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, ActivatorAsset) == 0x000110, "Member 'UFortGameFrameworkComponent_EventMode::ActivatorAsset' has a wrong offset!");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, UIExtensions) == 0x000138, "Member 'UFortGameFrameworkComponent_EventMode::UIExtensions' has a wrong offset!");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, TaggedUIExtensions) == 0x000148, "Member 'UFortGameFrameworkComponent_EventMode::TaggedUIExtensions' has a wrong offset!");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, FocusActors) == 0x000198, "Member 'UFortGameFrameworkComponent_EventMode::FocusActors' has a wrong offset!");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, InputComponent) == 0x0001B0, "Member 'UFortGameFrameworkComponent_EventMode::InputComponent' has a wrong offset!");
static_assert(offsetof(UFortGameFrameworkComponent_EventMode, CachedWidgetData) == 0x0001B8, "Member 'UFortGameFrameworkComponent_EventMode::CachedWidgetData' has a wrong offset!");

// Class EventModeRuntime.FortWeapon_EventMode
// 0x0000 (0x0C18 - 0x0C18)
class AFortWeapon_EventMode final : public AFortWeapon
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortWeapon_EventMode">();
	}
	static class AFortWeapon_EventMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortWeapon_EventMode>();
	}
};
static_assert(alignof(AFortWeapon_EventMode) == 0x000008, "Wrong alignment on AFortWeapon_EventMode");
static_assert(sizeof(AFortWeapon_EventMode) == 0x000C18, "Wrong size on AFortWeapon_EventMode");

}

