#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SunDirectionandColorSet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SunDirectionandColorSet.SunDirectionandColorSet_C
// 0x0048 (0x0268 - 0x0220)
class ASunDirectionandColorSet_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SunLightVector;                                    // 0x0238(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SunLightColor;                                     // 0x0244(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMaterialParameterInfo                 Material_COllection;                               // 0x0254(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_SunDirectionandColorSet(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SunDirectionandColorSet_C">();
	}
	static class ASunDirectionandColorSet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASunDirectionandColorSet_C>();
	}
};
static_assert(alignof(ASunDirectionandColorSet_C) == 0x000008, "Wrong alignment on ASunDirectionandColorSet_C");
static_assert(sizeof(ASunDirectionandColorSet_C) == 0x000268, "Wrong size on ASunDirectionandColorSet_C");
static_assert(offsetof(ASunDirectionandColorSet_C, UberGraphFrame) == 0x000220, "Member 'ASunDirectionandColorSet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASunDirectionandColorSet_C, Scene) == 0x000228, "Member 'ASunDirectionandColorSet_C::Scene' has a wrong offset!");
static_assert(offsetof(ASunDirectionandColorSet_C, Arrow) == 0x000230, "Member 'ASunDirectionandColorSet_C::Arrow' has a wrong offset!");
static_assert(offsetof(ASunDirectionandColorSet_C, SunLightVector) == 0x000238, "Member 'ASunDirectionandColorSet_C::SunLightVector' has a wrong offset!");
static_assert(offsetof(ASunDirectionandColorSet_C, SunLightColor) == 0x000244, "Member 'ASunDirectionandColorSet_C::SunLightColor' has a wrong offset!");
static_assert(offsetof(ASunDirectionandColorSet_C, Material_COllection) == 0x000254, "Member 'ASunDirectionandColorSet_C::Material_COllection' has a wrong offset!");

}

