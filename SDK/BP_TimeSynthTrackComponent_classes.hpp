#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeSynthTrackComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "TimeSynth_structs.hpp"
#include "TimeSynth_TransitionData_structs.hpp"
#include "TimeSynth_TrackStemData_structs.hpp"
#include "TimeSynth_TrackPlayStates_structs.hpp"
#include "TimeSynth_TrackMixState_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeSynthTrackComponent.BP_TimeSynthTrackComponent_C
// 0x00F0 (0x01A0 - 0x00B0)
class UBP_TimeSynthTrackComponent_C : public UFortTimeSynthTrackComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Enabled;                                           // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732E[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TrackID;                                           // 0x00BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_732F[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TimeSynthController_Base_C*         TimeSynthController;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackLengthBeats;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimeSynthQuantizationSettings         QuantizationSettings;                              // 0x00D4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<struct FTimeSynth_TrackStemData>       Clips;                                             // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         CurrentBeatDecrement;                              // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7330[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeSynth_TrackStemData               StopClip;                                          // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, struct FTimeSynth_TransitionData> Transitions;                                       // 0x0110(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FTimeSynthClipHandle>           Handles;                                           // 0x0160(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          QuantizationEventBound;                            // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DebugEnabled;                                      // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETimeSynth_TrackPlayStates                    PlayState;                                         // 0x0172(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7331[0x1];                                     // 0x0173(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentBeat;                                       // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnPlayStateChanged;                                // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FTimeSynth_TrackMixState>       TrackMixStates;                                    // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         PriorityWeight;                                    // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnPlayStateChanged__DelegateSignature(ETimeSynth_TrackPlayStates Previous, ETimeSynth_TrackPlayStates New);
	void ExecuteUbergraph_BP_TimeSynthTrackComponent(int32 EntryPoint);
	void ReceiveBeginPlay();
	void SetTimeSynthController(class ABP_TimeSynthController_Base_C* Param_TimeSynthController);
	void QueueTrackStart(bool Is_First_Track);
	void QueueTrackStop(bool Play_Outro);
	void LoopCurrentTrack();
	void CalculateMaxClipDuration(TArray<struct FTimeSynth_TrackStemData>& Param_Clips, int32* Duration);
	void HasTransitionForTrack(class FName Param_TrackID, bool* Transition_Found, struct FTimeSynth_TransitionData* Transition_Data);
	void OnQuantizationBeat(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void CheckPlaystate(ETimeSynth_TrackPlayStates Is_In_Play_State, bool* Result);
	void SetPlaystate(ETimeSynth_TrackPlayStates Is_In_Play_State);
	void OnQuantizationBar(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void GetTimeSynthController(class ABP_TimeSynthController_Base_C** Param_TimeSynthController);
	void GetIsEnabled(bool* Param_Enabled);
	void GetTrackID(class FName* Param_TrackID);
	void GetQuantizationSettings(struct FTimeSynthQuantizationSettings* Param_QuantizationSettings);
	void GetMaxClipDuration(int32* MaxClipDuration);
	void FindMixState(class FName Param_Name, int32* Array_Index);
	void SetMixStateVolume(class FName MixStateName, float Volume);
	void GetPriority(float* Priority);
	void GetMixStateIndexFromName(class FName Param_Name, int32* Array_Index);
	void SetMixStateVolumeByIndex(int32 Param_Index, float Volume);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeSynthTrackComponent_C">();
	}
	static class UBP_TimeSynthTrackComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_TimeSynthTrackComponent_C>();
	}
};
static_assert(alignof(UBP_TimeSynthTrackComponent_C) == 0x000008, "Wrong alignment on UBP_TimeSynthTrackComponent_C");
static_assert(sizeof(UBP_TimeSynthTrackComponent_C) == 0x0001A0, "Wrong size on UBP_TimeSynthTrackComponent_C");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UBP_TimeSynthTrackComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, Enabled) == 0x0000B8, "Member 'UBP_TimeSynthTrackComponent_C::Enabled' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, TrackID) == 0x0000BC, "Member 'UBP_TimeSynthTrackComponent_C::TrackID' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, TimeSynthController) == 0x0000C8, "Member 'UBP_TimeSynthTrackComponent_C::TimeSynthController' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, TrackLengthBeats) == 0x0000D0, "Member 'UBP_TimeSynthTrackComponent_C::TrackLengthBeats' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, QuantizationSettings) == 0x0000D4, "Member 'UBP_TimeSynthTrackComponent_C::QuantizationSettings' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, Clips) == 0x0000E8, "Member 'UBP_TimeSynthTrackComponent_C::Clips' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, CurrentBeatDecrement) == 0x0000F8, "Member 'UBP_TimeSynthTrackComponent_C::CurrentBeatDecrement' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, StopClip) == 0x000100, "Member 'UBP_TimeSynthTrackComponent_C::StopClip' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, Transitions) == 0x000110, "Member 'UBP_TimeSynthTrackComponent_C::Transitions' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, Handles) == 0x000160, "Member 'UBP_TimeSynthTrackComponent_C::Handles' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, QuantizationEventBound) == 0x000170, "Member 'UBP_TimeSynthTrackComponent_C::QuantizationEventBound' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, DebugEnabled) == 0x000171, "Member 'UBP_TimeSynthTrackComponent_C::DebugEnabled' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, PlayState) == 0x000172, "Member 'UBP_TimeSynthTrackComponent_C::PlayState' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, CurrentBeat) == 0x000174, "Member 'UBP_TimeSynthTrackComponent_C::CurrentBeat' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, OnPlayStateChanged) == 0x000178, "Member 'UBP_TimeSynthTrackComponent_C::OnPlayStateChanged' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, TrackMixStates) == 0x000188, "Member 'UBP_TimeSynthTrackComponent_C::TrackMixStates' has a wrong offset!");
static_assert(offsetof(UBP_TimeSynthTrackComponent_C, PriorityWeight) == 0x000198, "Member 'UBP_TimeSynthTrackComponent_C::PriorityWeight' has a wrong offset!");

}

