#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "AmbientAudio_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class AmbientAudio.AmbientAudioDataAsset
// 0x0028 (0x0058 - 0x0030)
class UAmbientAudioDataAsset : public UDataAsset
{
public:
	TArray<struct FAmbientAudioLoop>              LoopingSounds;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAmbientAudioOneShot>           OneShotSounds;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TagCrossfadeTime;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C5[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioDataAsset">();
	}
	static class UAmbientAudioDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioDataAsset>();
	}
};
static_assert(alignof(UAmbientAudioDataAsset) == 0x000008, "Wrong alignment on UAmbientAudioDataAsset");
static_assert(sizeof(UAmbientAudioDataAsset) == 0x000058, "Wrong size on UAmbientAudioDataAsset");
static_assert(offsetof(UAmbientAudioDataAsset, LoopingSounds) == 0x000030, "Member 'UAmbientAudioDataAsset::LoopingSounds' has a wrong offset!");
static_assert(offsetof(UAmbientAudioDataAsset, OneShotSounds) == 0x000040, "Member 'UAmbientAudioDataAsset::OneShotSounds' has a wrong offset!");
static_assert(offsetof(UAmbientAudioDataAsset, TagCrossfadeTime) == 0x000050, "Member 'UAmbientAudioDataAsset::TagCrossfadeTime' has a wrong offset!");

// Class AmbientAudio.AmbientAudioStatics
// 0x0000 (0x0028 - 0x0028)
class UAmbientAudioStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddAmbientEntry(class UObject* WorldContextObject, class FName AmbientName, class UAmbientAudioDataAsset* Asset, int32 Priority, float CrossfadeTime);
	static void AddAmbientGameplayTag(class UObject* WorldContextObject, const struct FGameplayTag& GameplayTag);
	static class UAudioComponent* CreateAudioComponent(class UObject* WorldContextObject, class USoundBase* Sound);
	static void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location);
	static void RemoveAmbientEntry(class UObject* WorldContextObject, class FName AmbientName);
	static void RemoveAmbientGameplayTag(class UObject* WorldContextObject, const struct FGameplayTag& GameplayTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioStatics">();
	}
	static class UAmbientAudioStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioStatics>();
	}
};
static_assert(alignof(UAmbientAudioStatics) == 0x000008, "Wrong alignment on UAmbientAudioStatics");
static_assert(sizeof(UAmbientAudioStatics) == 0x000028, "Wrong size on UAmbientAudioStatics");

// Class AmbientAudio.AmbientAudioSubsystem
// 0x01E0 (0x0210 - 0x0030)
class UAmbientAudioSubsystem final : public UWorldSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnTagChanged;                                      // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEntryChanged;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C7[0x1C0];                                   // 0x0050(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAmbientEntry(class FName AmbientName, class UAmbientAudioDataAsset* Asset, int32 Priority, float CrossfadeTime);
	void AddGameplayTag(const struct FGameplayTag& GameplayTag);
	void RemoveAmbientEntry(class FName AmbientName);
	void RemoveGameplayTag(const struct FGameplayTag& GameplayTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioSubsystem">();
	}
	static class UAmbientAudioSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioSubsystem>();
	}
};
static_assert(alignof(UAmbientAudioSubsystem) == 0x000008, "Wrong alignment on UAmbientAudioSubsystem");
static_assert(sizeof(UAmbientAudioSubsystem) == 0x000210, "Wrong size on UAmbientAudioSubsystem");
static_assert(offsetof(UAmbientAudioSubsystem, OnTagChanged) == 0x000030, "Member 'UAmbientAudioSubsystem::OnTagChanged' has a wrong offset!");
static_assert(offsetof(UAmbientAudioSubsystem, OnEntryChanged) == 0x000040, "Member 'UAmbientAudioSubsystem::OnEntryChanged' has a wrong offset!");

// Class AmbientAudio.AmbientVolume
// 0x0018 (0x0270 - 0x0258)
class AAmbientVolume final : public AVolume
{
public:
	class UAmbientAudioDataAsset*                 AmbientAsset;                                      // 0x0258(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Priority;                                          // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CrossfadeTime;                                     // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x0268(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bGlobal : 1;                                       // 0x0268(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_48C8[0x7];                                     // 0x0269(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bEnabled();
	void SetAmbientAsset(class UAmbientAudioDataAsset* NewAmbientAsset);
	void SetCrossfadeTime(float NewCrossfadeTime);
	void SetEnabled(bool bNewEnabled);
	void SetPriority(int32 NewPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientVolume">();
	}
	static class AAmbientVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientVolume>();
	}
};
static_assert(alignof(AAmbientVolume) == 0x000008, "Wrong alignment on AAmbientVolume");
static_assert(sizeof(AAmbientVolume) == 0x000270, "Wrong size on AAmbientVolume");
static_assert(offsetof(AAmbientVolume, AmbientAsset) == 0x000258, "Member 'AAmbientVolume::AmbientAsset' has a wrong offset!");
static_assert(offsetof(AAmbientVolume, Priority) == 0x000260, "Member 'AAmbientVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAmbientVolume, CrossfadeTime) == 0x000264, "Member 'AAmbientVolume::CrossfadeTime' has a wrong offset!");

}

