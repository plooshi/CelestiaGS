#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortReplayNotification

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonUI_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass FortReplayNotification.FortReplayNotification_C
// 0x00A8 (0x0300 - 0x0258)
class UFortReplayNotification_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0258(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCommonBorder*                          Border;                                            // 0x0260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Notification;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         TimeToDisplay;                                     // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeInterpSpeed;                                   // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFading;                                          // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D8D[0x3];                                     // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemainingTime;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FullyVisible;                                      // 0x0280(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FullyHidden;                                       // 0x0298(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   GameOnly;                                          // 0x02B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ReplayOnly;                                        // 0x02C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	ESlateVisibility                              PendingVisibility;                                 // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D8E[0x7];                                     // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NewVar_0;                                          // 0x02E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_FortReplayNotification(int32 EntryPoint);
	void OnShowNotificationsEnabledChanged_Event_0(bool bShouldShowNotifications);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void ShowNotification(class FText& NotificationText);
	void TickFade(float DeltaTime);
	void StartFading();
	void TickRemainingTime(float DeltaTime);
	void SetNotificationVisibility(ESlateVisibility Param_Visibility);
	void IsVisibilityNotification(const class FText& Param_Notification, bool* Param_IsVisibilityNotification);
	void GetVisibilityText(EHudVisibilityState Param_Visibility, class FText* Text);
	void ShowNotificationWIthSettings(class FText& NotificationText, struct FNotificationUISettings& NotificationSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortReplayNotification_C">();
	}
	static class UFortReplayNotification_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortReplayNotification_C>();
	}
};
static_assert(alignof(UFortReplayNotification_C) == 0x000008, "Wrong alignment on UFortReplayNotification_C");
static_assert(sizeof(UFortReplayNotification_C) == 0x000300, "Wrong size on UFortReplayNotification_C");
static_assert(offsetof(UFortReplayNotification_C, UberGraphFrame) == 0x000258, "Member 'UFortReplayNotification_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, Border) == 0x000260, "Member 'UFortReplayNotification_C::Border' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, Notification) == 0x000268, "Member 'UFortReplayNotification_C::Notification' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, TimeToDisplay) == 0x000270, "Member 'UFortReplayNotification_C::TimeToDisplay' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, FadeInterpSpeed) == 0x000274, "Member 'UFortReplayNotification_C::FadeInterpSpeed' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, IsFading) == 0x000278, "Member 'UFortReplayNotification_C::IsFading' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, RemainingTime) == 0x00027C, "Member 'UFortReplayNotification_C::RemainingTime' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, FullyVisible) == 0x000280, "Member 'UFortReplayNotification_C::FullyVisible' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, FullyHidden) == 0x000298, "Member 'UFortReplayNotification_C::FullyHidden' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, GameOnly) == 0x0002B0, "Member 'UFortReplayNotification_C::GameOnly' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, ReplayOnly) == 0x0002C8, "Member 'UFortReplayNotification_C::ReplayOnly' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, PendingVisibility) == 0x0002E0, "Member 'UFortReplayNotification_C::PendingVisibility' has a wrong offset!");
static_assert(offsetof(UFortReplayNotification_C, NewVar_0) == 0x0002E8, "Member 'UFortReplayNotification_C::NewVar_0' has a wrong offset!");

}

