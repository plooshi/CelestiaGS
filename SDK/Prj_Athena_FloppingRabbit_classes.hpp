#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Prj_Athena_FloppingRabbit

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "B_Prj_ThrownConsumable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Prj_Athena_FloppingRabbit.Prj_Athena_FloppingRabbit_C
// 0x0388 (0x0C90 - 0x0908)
class APrj_Athena_FloppingRabbit_C final : public AB_Prj_ThrownConsumable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Prj_Athena_FloppingRabbit_C;        // 0x0908(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        LineLoc;                                           // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_5E59FE3C4CA5776FE578F391478AB1A6; // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_5E59FE3C4CA5776FE578F391478AB1A6; // 0x091C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E4[0x3];                                     // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307;    // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BigBob__Direction_9789CB934FE6D3F1A956D993031B4307; // 0x092C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E5[0x3];                                     // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BigBob;                                            // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             NullHit;                                           // 0x0938(0x008C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               WaterRotation;                                     // 0x09C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                MeshLocAfterHit;                                   // 0x09D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChanceForBigBob;                                   // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x09E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         DistanceCheckInterval;                             // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E6[0x4];                                     // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Spawner;                                           // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingCatchBigBobChance;                         // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Delay_CatchWindow;                                 // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanCatch;                                          // 0x0A08(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InWater;                                           // 0x0A09(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E7[0x6];                                     // 0x0A0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Athena_FloppingRabbit_Wire_C*        Wire;                                              // 0x0A18(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_Fire;                                        // 0x0A20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_InWorld;                                     // 0x0A28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistanceFromPlayer;                             // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DefaultSpawner;                                    // 0x0A34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47E8[0x3];                                     // 0x0A35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IncreaseBigBobChanceAmount;                        // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47E9[0x4];                                     // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ChanceForBigBob;                               // 0x0A40(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_ChanceForBigBobIncrease;                       // 0x0A60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_CatchWindow;                                   // 0x0A80(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystem*                        FX_HitWater;                                       // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXScaleHitWater;                                   // 0x0AA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47EA[0x4];                                     // 0x0AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_HitWater;                                    // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_WaterDip;                                       // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_FX_HitWater;                                    // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_FX_SpawnItems;                                  // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_FX_WaterDip;                                    // 0x0AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         NS_FX_WaterDip_HighTier;                           // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_WaterDip_HighTier;                              // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FXScaleWaterDip;                                   // 0x0AF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47EB[0x4];                                     // 0x0AFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sound_WaterDip;                                    // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_ProjDestroyed;                               // 0x0B08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_Hooked;                                      // 0x0B10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_DistanceCheck;                                 // 0x0B18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_DistanceCheckZ;                                // 0x0B38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Dipping;                                           // 0x0B58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47EC[0x7];                                     // 0x0B59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SpawnedDefaultSpawner;                             // 0x0B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_BobChanceDelayMin;                             // 0x0B68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_BobChanceDelayMax;                             // 0x0B88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnedItem;                                       // 0x0BA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47ED[0x7];                                     // 0x0BA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FluidSim_FN_C*                      FluidSim;                                          // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_WaterDip_HighTier;                           // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WorldSpawner;                                      // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47EE[0x7];                                     // 0x0BC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FX_SpawnItems;                                     // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_SpawnItems;                                  // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachMinDist;                                 // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemAttachDistanceRequirement;                     // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStartedFishingSession;                            // 0x0BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47EF[0x3];                                     // 0x0BE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceOutOfWaterDelay;                             // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Event_Unhooked;                                    // 0x0BE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TowardPlayerVector;                                // 0x0BF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BobberStartLocation;                               // 0x0BFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target;                                            // 0x0C08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47F0[0x4];                                     // 0x0C14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortAIAssignmentIdentifier            AIAssignmentIdentifier;                            // 0x0C18(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortAIAssignmentSettings*              AIAssignmentSettings;                              // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TetherSocket;                                      // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTetherCanChangeWeapons;                           // 0x0C58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_47F1[0x7];                                     // 0x0C59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  FishingRodTag;                                     // 0x0C60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 FloppingRabbitWire;                                // 0x0C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_MiniGameSplash;                                 // 0x0C88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Prj_Athena_FloppingRabbit(int32 EntryPoint);
	void ToggleMiniGameSplashLoop(bool On);
	void ClientReelIn();
	void ReceiveTick(float DeltaSeconds);
	void DipFx();
	void Minigame_MoveBobber();
	void ServerAttemptTether(class APawn* TetherActor);
	void ReelIn();
	void BndEvt__WaterInteractionComponent_K2Node_ComponentBoundEvent_0_WaterInteractionOnExitWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* Param_WaterInteractionComponent, bool bIsLastBody);
	void WriteNothingCaughtFishingAnalytic();
	void CustomPickupAttach(class AFortPickup* FortPickup);
	void SpawnItemsFX();
	void CheckForHighTierSpawner();
	void CheckForDip();
	void ReceiveDestroyed();
	void HitWater(bool FishSpawner);
	void OnExploded(const TArray<class AActor*>& HitActors, const TArray<struct FHitResult>& HitResults);
	void ForceKill();
	void DistanceCheck();
	void ReceiveBeginPlay();
	void HideAndKill();
	void TryCatch();
	void CatchWindow();
	void FullDip(bool InWorldSpawner);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void BigBob__UpdateFunc();
	void BigBob__FinishedFunc();
	void GetSheetVals();
	void AttemptTether(class AActor* HitActor, bool* bTethered);
	void RegisterWithGoalManager();
	void UnRegisterWithGoalManager();
	void IgnoreTetherablePawn(class AActor* HitActor, bool* IsIgnored);
	class FName DetermineFishLootTierNameAndSetLootForSpawner(bool bIsExplosion);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Prj_Athena_FloppingRabbit_C">();
	}
	static class APrj_Athena_FloppingRabbit_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrj_Athena_FloppingRabbit_C>();
	}
};
static_assert(alignof(APrj_Athena_FloppingRabbit_C) == 0x000008, "Wrong alignment on APrj_Athena_FloppingRabbit_C");
static_assert(sizeof(APrj_Athena_FloppingRabbit_C) == 0x000C90, "Wrong size on APrj_Athena_FloppingRabbit_C");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, UberGraphFrame_Prj_Athena_FloppingRabbit_C) == 0x000908, "Member 'APrj_Athena_FloppingRabbit_C::UberGraphFrame_Prj_Athena_FloppingRabbit_C' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, LineLoc) == 0x000910, "Member 'APrj_Athena_FloppingRabbit_C::LineLoc' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Timeline_0_NewTrack_0_5E59FE3C4CA5776FE578F391478AB1A6) == 0x000918, "Member 'APrj_Athena_FloppingRabbit_C::Timeline_0_NewTrack_0_5E59FE3C4CA5776FE578F391478AB1A6' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Timeline_0__Direction_5E59FE3C4CA5776FE578F391478AB1A6) == 0x00091C, "Member 'APrj_Athena_FloppingRabbit_C::Timeline_0__Direction_5E59FE3C4CA5776FE578F391478AB1A6' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Timeline_0) == 0x000920, "Member 'APrj_Athena_FloppingRabbit_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307) == 0x000928, "Member 'APrj_Athena_FloppingRabbit_C::BigBob_BigDip_9789CB934FE6D3F1A956D993031B4307' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob__Direction_9789CB934FE6D3F1A956D993031B4307) == 0x00092C, "Member 'APrj_Athena_FloppingRabbit_C::BigBob__Direction_9789CB934FE6D3F1A956D993031B4307' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BigBob) == 0x000930, "Member 'APrj_Athena_FloppingRabbit_C::BigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NullHit) == 0x000938, "Member 'APrj_Athena_FloppingRabbit_C::NullHit' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, WaterRotation) == 0x0009C4, "Member 'APrj_Athena_FloppingRabbit_C::WaterRotation' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, MeshLocAfterHit) == 0x0009D0, "Member 'APrj_Athena_FloppingRabbit_C::MeshLocAfterHit' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ChanceForBigBob) == 0x0009DC, "Member 'APrj_Athena_FloppingRabbit_C::ChanceForBigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ObjectTypes) == 0x0009E0, "Member 'APrj_Athena_FloppingRabbit_C::ObjectTypes' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, DistanceCheckInterval) == 0x0009F0, "Member 'APrj_Athena_FloppingRabbit_C::DistanceCheckInterval' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Spawner) == 0x0009F8, "Member 'APrj_Athena_FloppingRabbit_C::Spawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, StartingCatchBigBobChance) == 0x000A00, "Member 'APrj_Athena_FloppingRabbit_C::StartingCatchBigBobChance' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Delay_CatchWindow) == 0x000A04, "Member 'APrj_Athena_FloppingRabbit_C::Delay_CatchWindow' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, CanCatch) == 0x000A08, "Member 'APrj_Athena_FloppingRabbit_C::CanCatch' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, InWater) == 0x000A09, "Member 'APrj_Athena_FloppingRabbit_C::InWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, PlayerPawn) == 0x000A10, "Member 'APrj_Athena_FloppingRabbit_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Wire) == 0x000A18, "Member 'APrj_Athena_FloppingRabbit_C::Wire' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_Fire) == 0x000A20, "Member 'APrj_Athena_FloppingRabbit_C::Event_Fire' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_InWorld) == 0x000A28, "Member 'APrj_Athena_FloppingRabbit_C::Event_InWorld' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, MaxDistanceFromPlayer) == 0x000A30, "Member 'APrj_Athena_FloppingRabbit_C::MaxDistanceFromPlayer' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, DefaultSpawner) == 0x000A34, "Member 'APrj_Athena_FloppingRabbit_C::DefaultSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, IncreaseBigBobChanceAmount) == 0x000A38, "Member 'APrj_Athena_FloppingRabbit_C::IncreaseBigBobChanceAmount' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_ChanceForBigBob) == 0x000A40, "Member 'APrj_Athena_FloppingRabbit_C::Row_ChanceForBigBob' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_ChanceForBigBobIncrease) == 0x000A60, "Member 'APrj_Athena_FloppingRabbit_C::Row_ChanceForBigBobIncrease' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_CatchWindow) == 0x000A80, "Member 'APrj_Athena_FloppingRabbit_C::Row_CatchWindow' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_HitWater) == 0x000AA0, "Member 'APrj_Athena_FloppingRabbit_C::FX_HitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FXScaleHitWater) == 0x000AA8, "Member 'APrj_Athena_FloppingRabbit_C::FXScaleHitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_HitWater) == 0x000AB8, "Member 'APrj_Athena_FloppingRabbit_C::Sound_HitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_WaterDip) == 0x000AC0, "Member 'APrj_Athena_FloppingRabbit_C::FX_WaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NS_FX_HitWater) == 0x000AC8, "Member 'APrj_Athena_FloppingRabbit_C::NS_FX_HitWater' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NS_FX_SpawnItems) == 0x000AD0, "Member 'APrj_Athena_FloppingRabbit_C::NS_FX_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NS_FX_WaterDip) == 0x000AD8, "Member 'APrj_Athena_FloppingRabbit_C::NS_FX_WaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, NS_FX_WaterDip_HighTier) == 0x000AE0, "Member 'APrj_Athena_FloppingRabbit_C::NS_FX_WaterDip_HighTier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_WaterDip_HighTier) == 0x000AE8, "Member 'APrj_Athena_FloppingRabbit_C::FX_WaterDip_HighTier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FXScaleWaterDip) == 0x000AF0, "Member 'APrj_Athena_FloppingRabbit_C::FXScaleWaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_WaterDip) == 0x000B00, "Member 'APrj_Athena_FloppingRabbit_C::Sound_WaterDip' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_ProjDestroyed) == 0x000B08, "Member 'APrj_Athena_FloppingRabbit_C::Event_ProjDestroyed' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_Hooked) == 0x000B10, "Member 'APrj_Athena_FloppingRabbit_C::Event_Hooked' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_DistanceCheck) == 0x000B18, "Member 'APrj_Athena_FloppingRabbit_C::Row_DistanceCheck' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_DistanceCheckZ) == 0x000B38, "Member 'APrj_Athena_FloppingRabbit_C::Row_DistanceCheckZ' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Dipping) == 0x000B58, "Member 'APrj_Athena_FloppingRabbit_C::Dipping' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, SpawnedDefaultSpawner) == 0x000B60, "Member 'APrj_Athena_FloppingRabbit_C::SpawnedDefaultSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_BobChanceDelayMin) == 0x000B68, "Member 'APrj_Athena_FloppingRabbit_C::Row_BobChanceDelayMin' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Row_BobChanceDelayMax) == 0x000B88, "Member 'APrj_Athena_FloppingRabbit_C::Row_BobChanceDelayMax' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, SpawnedItem) == 0x000BA8, "Member 'APrj_Athena_FloppingRabbit_C::SpawnedItem' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FluidSim) == 0x000BB0, "Member 'APrj_Athena_FloppingRabbit_C::FluidSim' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_WaterDip_HighTier) == 0x000BB8, "Member 'APrj_Athena_FloppingRabbit_C::Sound_WaterDip_HighTier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, WorldSpawner) == 0x000BC0, "Member 'APrj_Athena_FloppingRabbit_C::WorldSpawner' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FX_SpawnItems) == 0x000BC8, "Member 'APrj_Athena_FloppingRabbit_C::FX_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Sound_SpawnItems) == 0x000BD0, "Member 'APrj_Athena_FloppingRabbit_C::Sound_SpawnItems' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ItemAttachMinDist) == 0x000BD8, "Member 'APrj_Athena_FloppingRabbit_C::ItemAttachMinDist' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, ItemAttachDistanceRequirement) == 0x000BDC, "Member 'APrj_Athena_FloppingRabbit_C::ItemAttachDistanceRequirement' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, bStartedFishingSession) == 0x000BE0, "Member 'APrj_Athena_FloppingRabbit_C::bStartedFishingSession' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BounceOutOfWaterDelay) == 0x000BE4, "Member 'APrj_Athena_FloppingRabbit_C::BounceOutOfWaterDelay' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Event_Unhooked) == 0x000BE8, "Member 'APrj_Athena_FloppingRabbit_C::Event_Unhooked' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, TowardPlayerVector) == 0x000BF0, "Member 'APrj_Athena_FloppingRabbit_C::TowardPlayerVector' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, BobberStartLocation) == 0x000BFC, "Member 'APrj_Athena_FloppingRabbit_C::BobberStartLocation' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, Target) == 0x000C08, "Member 'APrj_Athena_FloppingRabbit_C::Target' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, AIAssignmentIdentifier) == 0x000C18, "Member 'APrj_Athena_FloppingRabbit_C::AIAssignmentIdentifier' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, AIAssignmentSettings) == 0x000C48, "Member 'APrj_Athena_FloppingRabbit_C::AIAssignmentSettings' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, TetherSocket) == 0x000C50, "Member 'APrj_Athena_FloppingRabbit_C::TetherSocket' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, bTetherCanChangeWeapons) == 0x000C58, "Member 'APrj_Athena_FloppingRabbit_C::bTetherCanChangeWeapons' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FishingRodTag) == 0x000C60, "Member 'APrj_Athena_FloppingRabbit_C::FishingRodTag' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, FloppingRabbitWire) == 0x000C80, "Member 'APrj_Athena_FloppingRabbit_C::FloppingRabbitWire' has a wrong offset!");
static_assert(offsetof(APrj_Athena_FloppingRabbit_C, GC_MiniGameSplash) == 0x000C88, "Member 'APrj_Athena_FloppingRabbit_C::GC_MiniGameSplash' has a wrong offset!");

}

