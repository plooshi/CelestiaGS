#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Athena_Prop_Video_Stream_Trigger1

#include "Basic.hpp"

#include "MediaUtils_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Athena_Prop_Video_Stream_Trigger1.Athena_Prop_Video_Stream_Trigger1_C
// 0x0138 (0x0358 - 0x0220)
class AAthena_Prop_Video_Stream_Trigger1_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88AF[0x7];                                     // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMediaPlayer*                           StreamingSyncTest;                                 // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          EnteredStreamingZone;                              // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88B0[0x7];                                     // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TimeEnteredStreamingZone;                          // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortStreamMediaSource*                 MediaSource;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             VideoStartedEventDispatcher;                       // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             VideoStoppedEventDispatcher;                       // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UPrimitiveComponent*                    Mesh;                                              // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVideoTestEnabled;                                // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_88B1[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_VideoMeshTrigger_C*                 MeshTrigger;                                       // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartPlayTime;                                     // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88B2[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckDistanceTimer;                                // 0x02A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortMediaSubtitlesPlayer*              SubtitlePlayer;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UFortDownloadLocalizedOverlays*         SubtitlesOverlays;                                 // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMediaSource*                           FallbackMediaSource;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StreamingFailed;                                   // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88B3[0x3];                                     // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VideoRetryCounter;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VideoMaxRetries;                                   // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VideoEnableLocalFallback;                          // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMediaPlayerOptionBooleanOverride             LoopVideoPlayerOption;                             // 0x02CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88B4[0x2];                                     // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VideoUID;                                          // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 VideoUID_Default;                                  // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FString                                 ScreenName;                                        // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         LocalPlayServerTimeSeconds;                        // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceStartPlayTime;                                // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88B5[0x3];                                     // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StartPlayingTimer;                                 // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Galileo_VideoPreBuffer_C*           WarmingObject;                                     // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VideoUIDSet;                                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_88B6[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivationCullRadius;                              // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         BandwidthLimitCullRadius;                          // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_88B7[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           BandwidthCheckLimitTimer;                          // 0x0328(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MaxBandwidthTimer;                                 // 0x0330(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MediaMaxBandwidth;                                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88B8[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              LocalPlayUTCTime;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SubtitleRenderLimitTimer;                          // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortMediaPlayerCtrl*                   MediaPlayerCtrl;                                   // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void VideoStartedEventDispatcher__DelegateSignature();
	void VideoStoppedEventDispatcher__DelegateSignature();
	void ExecuteUbergraph_Athena_Prop_Video_Stream_Trigger1(int32 EntryPoint);
	void SubtitleLimitDistance();
	void Videoseek(const class FString& Param_ScreenName, float SeekTime, bool Exact);
	void Videosetmaxbw(const class FString& Param_ScreenName, int32 MaxBandwidth);
	void BandwidthLimitDistance();
	void MeshStopWarming(const class FString& VideoScreen);
	void StopVideoWarming(const class FString& Screen_Name);
	void PlayCheck();
	void StartPlayCheck();
	void ReceiveBeginPlay();
	void OnMetaDataFailed(const class FString& Reason);
	void DisableLoopVideo(const class FString& Param_ScreenName);
	void EnableLoopVideo(const class FString& Param_ScreenName);
	void StartVideoWarming(const class FString& Param_ScreenName);
	void MeshStartWarming(float StartWarmingTime, const class FString& Param_ScreenName);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Stop_PIP();
	void VideoPlayFrom(const class FString& Param_ScreenName, float Param_StartPlayTime);
	void MeshStopPlayback(const class FString& VideoScreen);
	void On_Media_Closed();
	void On_Media_Open_Failed(const class FString& FailedUrl);
	void AttemptActivateScreen();
	void SetScreenActiveWithTimer();
	void MeshTriggerReady(float PlayStartTime, const class FString& Param_VideoUID, const class FString& Param_ScreenName);
	void SetupMeshTrigger();
	void RequestVideoUrl();
	void AttemptOpenSource();
	void Videotestoff(const class FString& Param_ScreenName);
	void Videotest(const class FString& Param_ScreenName, const class FString& Param_VideoUID, float StartTime);
	void CheckDistanceToScreen();
	void On_Media_Opened(const class FString& OpenedUrl);
	void On_Media_End();
	void On_Video_Url_Failed(const class FString& RetrievedUrl);
	void On_Video_Url_Success(const class FString& RetrievedUrl);
	void SendRelevancyAnalytics();
	void TelevisionOff();
	void Unbind_Video_Player_Events();
	void CheckScreen(const class FString& Param_ScreenName, bool* IsThisScreen);
	void SetStartPlayTime();
	void Utc_To_String(const struct FDateTime& UTC, class FString* String);
	void SendAnalytics();
	void StreamFailCheck();
	void CheckBlocks(bool* CompleteBlock);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Athena_Prop_Video_Stream_Trigger1_C">();
	}
	static class AAthena_Prop_Video_Stream_Trigger1_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAthena_Prop_Video_Stream_Trigger1_C>();
	}
};
static_assert(alignof(AAthena_Prop_Video_Stream_Trigger1_C) == 0x000008, "Wrong alignment on AAthena_Prop_Video_Stream_Trigger1_C");
static_assert(sizeof(AAthena_Prop_Video_Stream_Trigger1_C) == 0x000358, "Wrong size on AAthena_Prop_Video_Stream_Trigger1_C");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, UberGraphFrame) == 0x000220, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StaticMesh) == 0x000228, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, DefaultSceneRoot) == 0x000230, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, IsActive) == 0x000238, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::IsActive' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StreamingSyncTest) == 0x000240, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StreamingSyncTest' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, EnteredStreamingZone) == 0x000248, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::EnteredStreamingZone' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, TimeEnteredStreamingZone) == 0x000250, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::TimeEnteredStreamingZone' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaSource) == 0x000258, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaSource' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoStartedEventDispatcher) == 0x000260, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoStartedEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoStoppedEventDispatcher) == 0x000270, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoStoppedEventDispatcher' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, Mesh) == 0x000280, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::Mesh' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, IsVideoTestEnabled) == 0x000288, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::IsVideoTestEnabled' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MeshTrigger) == 0x000290, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MeshTrigger' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StartPlayTime) == 0x000298, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StartPlayTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, CheckDistanceTimer) == 0x0002A0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::CheckDistanceTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SubtitlePlayer) == 0x0002A8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SubtitlePlayer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SubtitlesOverlays) == 0x0002B0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SubtitlesOverlays' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, FallbackMediaSource) == 0x0002B8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::FallbackMediaSource' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StreamingFailed) == 0x0002C0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StreamingFailed' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoRetryCounter) == 0x0002C4, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoRetryCounter' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoMaxRetries) == 0x0002C8, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoMaxRetries' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoEnableLocalFallback) == 0x0002CC, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoEnableLocalFallback' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LoopVideoPlayerOption) == 0x0002CD, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LoopVideoPlayerOption' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUID) == 0x0002D0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUID' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUID_Default) == 0x0002E0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUID_Default' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ScreenName) == 0x0002F0, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ScreenName' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LocalPlayServerTimeSeconds) == 0x000300, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LocalPlayServerTimeSeconds' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ForceStartPlayTime) == 0x000304, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ForceStartPlayTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, StartPlayingTimer) == 0x000308, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::StartPlayingTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, WarmingObject) == 0x000310, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::WarmingObject' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, VideoUIDSet) == 0x000318, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::VideoUIDSet' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, ActivationCullRadius) == 0x00031C, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::ActivationCullRadius' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, BandwidthLimitCullRadius) == 0x000320, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::BandwidthLimitCullRadius' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, BandwidthCheckLimitTimer) == 0x000328, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::BandwidthCheckLimitTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MaxBandwidthTimer) == 0x000330, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MaxBandwidthTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaMaxBandwidth) == 0x000338, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaMaxBandwidth' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, LocalPlayUTCTime) == 0x000340, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::LocalPlayUTCTime' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, SubtitleRenderLimitTimer) == 0x000348, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::SubtitleRenderLimitTimer' has a wrong offset!");
static_assert(offsetof(AAthena_Prop_Video_Stream_Trigger1_C, MediaPlayerCtrl) == 0x000350, "Member 'AAthena_Prop_Video_Stream_Trigger1_C::MediaPlayerCtrl' has a wrong offset!");

}

