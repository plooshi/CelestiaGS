#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S12_MainRoom_ToChangingRoom

#include "Basic.hpp"


namespace SDK::Params
{

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_15
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_15::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_14
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_14::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_0 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_0, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_0::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_1 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_1, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_1::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_2 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_2, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_2::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_3 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_3");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_3");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_3, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_3::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_4 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_4");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_4");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_4, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_4::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_0 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_0, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_0::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_1 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_1, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_1::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_2 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_2, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_2::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_5 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_5");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_5) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_5");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_5, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_5::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_6 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_6) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_6");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_6) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_6");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_6, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_6::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_7 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_7) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_7");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_7) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_7");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_7, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_7::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_8 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_8) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_8");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_8) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_8");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_8, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_8::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_3 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_3");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_3");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_3, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_3::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_4 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_4");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_4");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_4, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_4::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_5 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_5");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_5) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_5");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_5, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_5::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_6 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_6) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_6");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_6) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_6");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_6, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_6::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_7 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_7) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_7");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_7) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_7");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_7, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_7::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition2_Event_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition2_Event_8 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition2;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition2_Event_8) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition2_Event_8");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition2_Event_8) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition2_Event_8");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition2_Event_8, BP_Elevator_Transition2) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition2_Event_8::BP_Elevator_Transition2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_9 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_9) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_9");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_9) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_9");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_9, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_9::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_10 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_10) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_10");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_10) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_10");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_10, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_10::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_11 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_11) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_11");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_11) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_11");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_11, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_11::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_12 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_12) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_12");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_12) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_12");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_12, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_12::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_13 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_13) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_13");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_13) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_13");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_13, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_13::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Elevator_Transition4_Event_14
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition4_Event_14 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition4;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition4_Event_14) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition4_Event_14");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition4_Event_14) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition4_Event_14");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition4_Event_14, BP_Elevator_Transition4) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition4_Event_14::BP_Elevator_Transition4' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_2::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_3::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_4::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.Audio Camera Movemt Event
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_Audio_Camera_Movemt_Event final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Audio_Camera_Movemt_Event) == 0x000008, "Wrong alignment on SequenceDirector_C_Audio_Camera_Movemt_Event");
static_assert(sizeof(SequenceDirector_C_Audio_Camera_Movemt_Event) == 0x000008, "Wrong size on SequenceDirector_C_Audio_Camera_Movemt_Event");
static_assert(offsetof(SequenceDirector_C_Audio_Camera_Movemt_Event, Sound) == 0x000000, "Member 'SequenceDirector_C_Audio_Camera_Movemt_Event::Sound' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.Camera_Root_Movement_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Camera_Root_Movement_Event_0 final
{
public:
	class AFrontend_EventLevel_Camera_C*          Camera_Root_Movement;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStreamIn;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_Camera_Root_Movement_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_Camera_Root_Movement_Event_0");
static_assert(sizeof(SequenceDirector_C_Camera_Root_Movement_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_Camera_Root_Movement_Event_0");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_0, Camera_Root_Movement) == 0x000000, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_0::Camera_Root_Movement' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_0, bStreamIn) == 0x000008, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_0::bStreamIn' has a wrong offset!");

// Function S12_MainRoom_ToChangingRoom.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0120 (0x0120 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D70[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFrontend_EventLevel_Camera_C*          K2Node_CustomEvent_Camera_Root_Movement;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bStreamIn;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D71[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_14;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_13;     // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_12;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_11;     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_10;     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_8;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_7;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_6;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_9;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_8;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_7;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_6;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_5;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_4;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_3;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_2;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition2;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_5;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_4;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_3;      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_2;      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4_1;      // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition4;        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_4; // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_3; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_2; // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1; // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom; // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2;   // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_CustomEvent_Sound;                          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue;                   // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReversed_ReturnValue_1;                 // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000120, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Camera_Root_Movement) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Camera_Root_Movement' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bStreamIn) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bStreamIn' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_14) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_14' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_13) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_13' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_12) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_12' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_11) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_11' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_10) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_10' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_8) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_7) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_6) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_9) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_9' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_8) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_7) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_6) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_5) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_4) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_3) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_2) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2_1) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition2) == 0x0000A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_5) == 0x0000A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_4) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_3) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_2) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4_1) == 0x0000C8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition4) == 0x0000D0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_4) == 0x0000D8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_3) == 0x0000E0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_2) == 0x0000E8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1) == 0x0000F0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1) == 0x0000F8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom) == 0x000100, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2) == 0x000108, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Sound) == 0x000110, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue) == 0x000118, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue_1) == 0x000119, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue_1' has a wrong offset!");

}

