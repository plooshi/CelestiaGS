#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function MantisRuntime.FortAbilityTask_ApplyRootMotionMantisForce.ApplyRootMotionMantisForce
// 0x0020 (0x0020 - 0x0000)
struct FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce final
{
public:
	class UGameplayAbility*                       OwningAbility;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param_Duration;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_435E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Param_TechniqueMontage;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortAbilityTask_ApplyRootMotionMantisForce* ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce) == 0x000008, "Wrong alignment on FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce");
static_assert(sizeof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce) == 0x000020, "Wrong size on FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce");
static_assert(offsetof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce, OwningAbility) == 0x000000, "Member 'FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce::OwningAbility' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce, Param_Duration) == 0x000008, "Member 'FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce::Param_Duration' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce, Param_TechniqueMontage) == 0x000010, "Member 'FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce::Param_TechniqueMontage' has a wrong offset!");
static_assert(offsetof(FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce, ReturnValue) == 0x000018, "Member 'FortAbilityTask_ApplyRootMotionMantisForce_ApplyRootMotionMantisForce::ReturnValue' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnCharacterMovementPreUpdate
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnCharacterMovementPreUpdate final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4361[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(sizeof(FortMantisPawnComponent_OnCharacterMovementPreUpdate) == 0x000010, "Wrong size on FortMantisPawnComponent_OnCharacterMovementPreUpdate");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnCharacterMovementPreUpdate, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnCharacterMovementPreUpdate::DeltaSeconds' has a wrong offset!");

// Function MantisRuntime.FortMantisPawnComponent.OnPostPhysicsRotation
// 0x0010 (0x0010 - 0x0000)
struct FortMantisPawnComponent_OnPostPhysicsRotation final
{
public:
	class UCharacterMovementComponent*            CharMoveComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4362[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000008, "Wrong alignment on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(sizeof(FortMantisPawnComponent_OnPostPhysicsRotation) == 0x000010, "Wrong size on FortMantisPawnComponent_OnPostPhysicsRotation");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, CharMoveComp) == 0x000000, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::CharMoveComp' has a wrong offset!");
static_assert(offsetof(FortMantisPawnComponent_OnPostPhysicsRotation, DeltaSeconds) == 0x000008, "Member 'FortMantisPawnComponent_OnPostPhysicsRotation::DeltaSeconds' has a wrong offset!");

// Function MantisRuntime.FortGameplayAbility_Mantis.BP_OnMantisTechniqueHit
// 0x0030 (0x0030 - 0x0000)
struct FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetDataHandle;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000008, "Wrong alignment on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(sizeof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit) == 0x000030, "Wrong size on FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, TargetDataHandle) == 0x000000, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::TargetDataHandle' has a wrong offset!");
static_assert(offsetof(FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit, ApplicationTag) == 0x000028, "Member 'FortGameplayAbility_Mantis_BP_OnMantisTechniqueHit::ApplicationTag' has a wrong offset!");

}

