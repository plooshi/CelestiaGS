#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameSettingsMachine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "MinigameScoringPreset_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass MinigameSettingsMachine.MinigameSettingsMachine_C
// 0x0180 (0x04A0 - 0x0320)
class AMinigameSettingsMachine_C final : public AFortMinigameSettingsBuilding
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0320(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         GameModeIndex;                                     // 0x0330(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         TimeLimit;                                         // 0x0334(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigamePlayerSpawnLocationSetting       SpawnLocationSetting;                              // 0x0338(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6493[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumTeams;                                          // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	EFortMinigamePostGameSpawnLocationSetting     PostGameSpawnLocationSetting;                      // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6494[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerLives;                                       // 0x0344(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AutoEndTeamThreshold;                              // 0x0348(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamToMoveToWhenOutOfSpawns;                       // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumKillsForEndCondition;                           // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AutoStartDelay;                                    // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumCollectItemsForEndCondition;                    // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6495[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMinigameScoringPreset>         ScoringPresets;                                    // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	TArray<class UClass*>                         TrackedStats;                                      // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         NumAIKillsForEndCondition;                         // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreForEndCondition;                              // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalRounds;                                       // 0x0388(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumObjectDestroysForWin;                           // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WinnerDisplayTime;                                 // 0x0390(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScoreDisplayTime;                                  // 0x0394(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat0;                                 // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat1;                                 // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat2;                                 // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat3;                                 // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackedScoreStat4;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6496[0x4];                                     // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TrackedScoreStats;                                 // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FGameplayTagContainer>          AvailableUIExtensions;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CommonUIExtensions;                                // 0x03D0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         UIExtensionSetting;                                // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6497[0x4];                                     // 0x03F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat0_Definition;                      // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat1_Definition;                      // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat2_Definition;                      // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat3_Definition;                      // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             TrackedScoreStat4_Definition;                      // 0x0418(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UPlaylistUserOptionIntEnum*             UIExtensionSetting_Definition;                     // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         TeamSetting;                                       // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6498[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlaylistUserOptionIntEnum*             TeamSetting_Definition;                            // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bUseIngameScoreboard;                              // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMinigameFullscreenMapWidgetType              MinigameFullscreenMapWidgetType;                   // 0x0439(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6499[0x2];                                     // 0x043A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimerDirection;                                    // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamRotationSetting;                               // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundScoreDisplayTime;                             // 0x0444(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RoundWinnerDisplayTime;                            // 0x0448(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStopwatchMode;                                    // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bStableTeamCosmetics;                              // 0x044D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShowCumulativeScoreOnHUD;                         // 0x044E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMinigameWinCondition                         WinCondition;                                      // 0x044F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AllTeamsMustMatchEndConditions;                    // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EndGameOnMatchPointWin;                            // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefaultClassSlot;                                  // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortMinigameClassResetType                   ClassResetType;                                    // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMinigamePlayerPersistence                    PlayerPersistence;                                 // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649A[0x2];                                     // 0x045E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnlyAllowRespawningIfPlayerStartPadsFound;         // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShowCumulativeScoreboard;                          // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowFriendlyFire;                                // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EMinigameGameEndCallout                       GameEndCallout;                                    // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649B[0x2];                                     // 0x046A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VictoryAudioIndex;                                 // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DrawAudioIndex;                                    // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DefeatAudioIndex;                                  // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CustomVictoryCallout;                              // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CustomDefeatCallout;                               // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         StartCountdownDuration;                            // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MinigameSettingsMachine(int32 EntryPoint);
	void AbandonMinigameHelper();
	void StartMinigameHelper();
	void OnGameSettingsUpdated();
	void ReceiveBeginPlay();
	void GetPickupSpawnLocation(struct FVector* SpawnLocation);
	void HasMinigameStarted(bool* bHasStarted);
	void UpdateGameMode();
	void UpdateTimeLimit();
	void GetCurrentMinigame(class AFortMinigame** Minigame);
	void UpdateSpawnLocationSetting();
	void UpdateTeamSetting();
	void UpdatePostGameSpawnLocationSetting();
	void UpdatePlayerLives();
	void UpdateAutoEndTeamThreshold();
	void UpdateTeamToMoveToWhenOutOfSpawns();
	void UpdateEndConditions();
	void UpdateAutoStart();
	void TryAddEndCondition_CollectItems(TArray<struct FFortMinigameStatQuery>& EndConditions, bool* bResult);
	void UpdateJoinInProgress();
	void UpdateMinigameMutators();
	void UpdateTotalRounds();
	void TryAddEndCondition_DestroyObjects(TArray<struct FFortMinigameStatQuery>& EndConditions, bool* bResult);
	void FillTrackedStats();
	void GetScoreboardStatsArray(TArray<class UClass*>* ScoreboardStats);
	void Game_Mode_Preset_Upgrade_Path();
	void GetUIExtensions(struct FGameplayTagContainer* Return_Value);
	void UpdateClassSettings();
	void UpdatePlayerPersistence();
	void UpdateGameSettings();
	void AdditionalUIExtensionValidityChecks(const struct FGameplayTagContainer& TagContainer, bool* bUIExtensionIsValid);
	void UpdateGameStartCountdown();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	int32 GetTeamSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MinigameSettingsMachine_C">();
	}
	static class AMinigameSettingsMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMinigameSettingsMachine_C>();
	}
};
static_assert(alignof(AMinigameSettingsMachine_C) == 0x000008, "Wrong alignment on AMinigameSettingsMachine_C");
static_assert(sizeof(AMinigameSettingsMachine_C) == 0x0004A0, "Wrong size on AMinigameSettingsMachine_C");
static_assert(offsetof(AMinigameSettingsMachine_C, UberGraphFrame) == 0x000320, "Member 'AMinigameSettingsMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ToyOptionsComponent) == 0x000328, "Member 'AMinigameSettingsMachine_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, GameModeIndex) == 0x000330, "Member 'AMinigameSettingsMachine_C::GameModeIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TimeLimit) == 0x000334, "Member 'AMinigameSettingsMachine_C::TimeLimit' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, SpawnLocationSetting) == 0x000338, "Member 'AMinigameSettingsMachine_C::SpawnLocationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumTeams) == 0x00033C, "Member 'AMinigameSettingsMachine_C::NumTeams' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PostGameSpawnLocationSetting) == 0x000340, "Member 'AMinigameSettingsMachine_C::PostGameSpawnLocationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PlayerLives) == 0x000344, "Member 'AMinigameSettingsMachine_C::PlayerLives' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AutoEndTeamThreshold) == 0x000348, "Member 'AMinigameSettingsMachine_C::AutoEndTeamThreshold' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamToMoveToWhenOutOfSpawns) == 0x00034C, "Member 'AMinigameSettingsMachine_C::TeamToMoveToWhenOutOfSpawns' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumKillsForEndCondition) == 0x000350, "Member 'AMinigameSettingsMachine_C::NumKillsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AutoStartDelay) == 0x000354, "Member 'AMinigameSettingsMachine_C::AutoStartDelay' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumCollectItemsForEndCondition) == 0x000358, "Member 'AMinigameSettingsMachine_C::NumCollectItemsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoringPresets) == 0x000360, "Member 'AMinigameSettingsMachine_C::ScoringPresets' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedStats) == 0x000370, "Member 'AMinigameSettingsMachine_C::TrackedStats' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumAIKillsForEndCondition) == 0x000380, "Member 'AMinigameSettingsMachine_C::NumAIKillsForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoreForEndCondition) == 0x000384, "Member 'AMinigameSettingsMachine_C::ScoreForEndCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TotalRounds) == 0x000388, "Member 'AMinigameSettingsMachine_C::TotalRounds' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, NumObjectDestroysForWin) == 0x00038C, "Member 'AMinigameSettingsMachine_C::NumObjectDestroysForWin' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, WinnerDisplayTime) == 0x000390, "Member 'AMinigameSettingsMachine_C::WinnerDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ScoreDisplayTime) == 0x000394, "Member 'AMinigameSettingsMachine_C::ScoreDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat0) == 0x000398, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat0' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat1) == 0x00039C, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat1' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat2) == 0x0003A0, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat2' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat3) == 0x0003A4, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat3' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat4) == 0x0003A8, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat4' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStats) == 0x0003B0, "Member 'AMinigameSettingsMachine_C::TrackedScoreStats' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AvailableUIExtensions) == 0x0003C0, "Member 'AMinigameSettingsMachine_C::AvailableUIExtensions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CommonUIExtensions) == 0x0003D0, "Member 'AMinigameSettingsMachine_C::CommonUIExtensions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, UIExtensionSetting) == 0x0003F0, "Member 'AMinigameSettingsMachine_C::UIExtensionSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat0_Definition) == 0x0003F8, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat0_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat1_Definition) == 0x000400, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat1_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat2_Definition) == 0x000408, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat2_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat3_Definition) == 0x000410, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat3_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TrackedScoreStat4_Definition) == 0x000418, "Member 'AMinigameSettingsMachine_C::TrackedScoreStat4_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, UIExtensionSetting_Definition) == 0x000420, "Member 'AMinigameSettingsMachine_C::UIExtensionSetting_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamSetting) == 0x000428, "Member 'AMinigameSettingsMachine_C::TeamSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamSetting_Definition) == 0x000430, "Member 'AMinigameSettingsMachine_C::TeamSetting_Definition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bUseIngameScoreboard) == 0x000438, "Member 'AMinigameSettingsMachine_C::bUseIngameScoreboard' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, MinigameFullscreenMapWidgetType) == 0x000439, "Member 'AMinigameSettingsMachine_C::MinigameFullscreenMapWidgetType' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TimerDirection) == 0x00043C, "Member 'AMinigameSettingsMachine_C::TimerDirection' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, TeamRotationSetting) == 0x000440, "Member 'AMinigameSettingsMachine_C::TeamRotationSetting' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, RoundScoreDisplayTime) == 0x000444, "Member 'AMinigameSettingsMachine_C::RoundScoreDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, RoundWinnerDisplayTime) == 0x000448, "Member 'AMinigameSettingsMachine_C::RoundWinnerDisplayTime' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bStopwatchMode) == 0x00044C, "Member 'AMinigameSettingsMachine_C::bStopwatchMode' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bStableTeamCosmetics) == 0x00044D, "Member 'AMinigameSettingsMachine_C::bStableTeamCosmetics' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bShowCumulativeScoreOnHUD) == 0x00044E, "Member 'AMinigameSettingsMachine_C::bShowCumulativeScoreOnHUD' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, WinCondition) == 0x00044F, "Member 'AMinigameSettingsMachine_C::WinCondition' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, AllTeamsMustMatchEndConditions) == 0x000450, "Member 'AMinigameSettingsMachine_C::AllTeamsMustMatchEndConditions' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, EndGameOnMatchPointWin) == 0x000454, "Member 'AMinigameSettingsMachine_C::EndGameOnMatchPointWin' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DefaultClassSlot) == 0x000458, "Member 'AMinigameSettingsMachine_C::DefaultClassSlot' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ClassResetType) == 0x00045C, "Member 'AMinigameSettingsMachine_C::ClassResetType' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, PlayerPersistence) == 0x00045D, "Member 'AMinigameSettingsMachine_C::PlayerPersistence' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, OnlyAllowRespawningIfPlayerStartPadsFound) == 0x000460, "Member 'AMinigameSettingsMachine_C::OnlyAllowRespawningIfPlayerStartPadsFound' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, ShowCumulativeScoreboard) == 0x000464, "Member 'AMinigameSettingsMachine_C::ShowCumulativeScoreboard' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, bAllowFriendlyFire) == 0x000468, "Member 'AMinigameSettingsMachine_C::bAllowFriendlyFire' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, GameEndCallout) == 0x000469, "Member 'AMinigameSettingsMachine_C::GameEndCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, VictoryAudioIndex) == 0x00046C, "Member 'AMinigameSettingsMachine_C::VictoryAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DrawAudioIndex) == 0x000470, "Member 'AMinigameSettingsMachine_C::DrawAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, DefeatAudioIndex) == 0x000474, "Member 'AMinigameSettingsMachine_C::DefeatAudioIndex' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CustomVictoryCallout) == 0x000478, "Member 'AMinigameSettingsMachine_C::CustomVictoryCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, CustomDefeatCallout) == 0x000488, "Member 'AMinigameSettingsMachine_C::CustomDefeatCallout' has a wrong offset!");
static_assert(offsetof(AMinigameSettingsMachine_C, StartCountdownDuration) == 0x000498, "Member 'AMinigameSettingsMachine_C::StartCountdownDuration' has a wrong offset!");

}

