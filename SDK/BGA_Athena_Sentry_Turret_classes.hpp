#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_Sentry_Turret

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BGA_Athena_Sentry_Parent_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_Sentry_Turret.BGA_Athena_Sentry_Turret_C
// 0x0420 (0x0EE0 - 0x0AC0)
class ABGA_Athena_Sentry_Turret_C final : public ABGA_Athena_Sentry_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Athena_Sentry_Turret_C;         // 0x0AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Sight_Loop_Audio;                                  // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SentryTurret_MF;                                 // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BeaconParticles;                                   // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ScannerRay_Laser_Endpoint;                       // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAIPerceptionStimuliSourceComponent*    AIPerceptionStimuliSource;                         // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wire;                                              // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAthena_FactionSelection_AlterEgo_C*    Athena_FactionSelection_AlterEgo;                  // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_PG_Turret_Base;                                 // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TLAnimation_Emissive_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLAnimation_Blades_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLAnimation_RayAngle_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLAnimation_RayLength_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B14(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLAnimation_Animation_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B18(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TLAnimation__Direction_8DD4C3904EE67C29AD89DC8FC7D168E8; // 0x0B1C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8158[0x3];                                     // 0x0B1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TLAnimation;                                       // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLTargetRayScale_EmissiveScale_DC5F34AD4868927876D6B7B70F8ECB53; // 0x0B28(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TLTargetRayScale_Alpha_DC5F34AD4868927876D6B7B70F8ECB53; // 0x0B2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TLTargetRayScale__Direction_DC5F34AD4868927876D6B7B70F8ECB53; // 0x0B30(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8159[0x7];                                     // 0x0B31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TLTargetRayScale;                                  // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_Fire;                                        // 0x0B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ForwardFireOffset;                                 // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpwardFireOffset;                                  // 0x0B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MuzzleLocation;                                    // 0x0B58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0B64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_HitEffect;                                      // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           GEContext;                                         // 0x0B78(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FHitResult                             Hit;                                               // 0x0B90(0x008C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_815A[0x4];                                     // 0x0C1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Tracer;                                            // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPhysicalMaterial*, class USoundBase*> MAP_HitMaterialSound;                              // 0x0C28(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundBase*                             Fire_Sound;                                        // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UPhysicalMaterial*, class UParticleSystem*> MAP_HitMaterialFX;                                 // 0x0C80(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                RayStartingScale;                                  // 0x0CD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RayTargetScale;                                    // 0x0CDC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AggroColor;                                        // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TrackingColor;                                     // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SeekingColor;                                      // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetingLaserEdgeWidthEnd;                        // 0x0D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetingLaserEdgeWidthFront;                      // 0x0D1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScanningLaserEdgeWidthEnd;                         // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScanningLaserEdgeWidthFront;                       // 0x0D24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScanningLaserFalloff;                              // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetingLaserFalloff;                             // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetingLaserEdgeColor;                           // 0x0D30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetingLaserCenterColor;                         // 0x0D40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScanningLaserEdgeColor;                            // 0x0D50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScanningLaserCenterColor;                          // 0x0D60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WorldUpVector;                                     // 0x0D70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815B[0x4];                                     // 0x0D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_Firerate;                                      // 0x0D80(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                FireTargetLoc;                                     // 0x0DA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815C[0x4];                                     // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastHitActor;                                      // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitATarget;                                        // 0x0DB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815D[0x3];                                     // 0x0DB9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ParticleTrackingColor;                             // 0x0DBC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RayIsBeam;                                         // 0x0DCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_815E[0x3];                                     // 0x0DCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_AutoStopIfNotHitPawn;                          // 0x0DD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SecondaryRaysSpeed;                                // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_815F[0x4];                                     // 0x0DF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Sight_Sound;                                       // 0x0DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Tracking_Sound;                                    // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitch;                                       // 0x0E08(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         NoDamageDelay;                                     // 0x0E0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dormant;                                           // 0x0E10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ShowWires;                                         // 0x0E11(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_8160[0x2];                                     // 0x0E12(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WireYaw;                                           // 0x0E14(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Activate;                                       // 0x0E18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryRaysOpacity;                              // 0x0E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleLightOpacity;                              // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Stop_Watching_Sound;                               // 0x0E28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Diassemble_Sound;                                  // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Stop_Targeting_Sound;                              // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Sight_Sound_Playing;                            // 0x0E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Tracking_Sound_Playing;                         // 0x0E41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InSpyLTM;                                          // 0x0E42(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8161[0x5];                                     // 0x0E43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_Enabled;                                       // 0x0E48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           T_SpyLTMDefender;                                  // 0x0E68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Domant;                                         // 0x0E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8162[0x7];                                     // 0x0E71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Start_Sight_Sound;                                 // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SeekingColorFriendly;                              // 0x0E80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WireColor;                                         // 0x0E90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WindUpSoundDelay;                                  // 0x0EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_WindUp;                                         // 0x0EA4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8163[0x4];                                     // 0x0EAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WindupTimer;                                       // 0x0EB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LinkToActor;                                       // 0x0EB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShooting;                                        // 0x0EC0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8164[0x7];                                     // 0x0EC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_NoHit;                                       // 0x0EC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_PlayerPawn;                                      // 0x0ED0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentHiddenState;                                // 0x0ED8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ETraceTypeQuery                               LineTraceChannel;                                  // 0x0ED9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Athena_Sentry_Turret(int32 EntryPoint);
	void TrackedPawnWasSet();
	void ForceStartFire();
	void NoTargetStopFire();
	void LostTarget();
	void PlayWindUp();
	void SetLaserActive(bool bIsActive);
	void BPOnSentryStateChanged();
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void HideAndKill();
	void Update_Audio();
	void Stop_Tracking_Sound();
	void Stop_Sight_Sound();
	void Deactivate();
	void TurretDormantChange(bool Param_Dormant);
	void NoHitDelay();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void Stop_Current_SIght_Sounds();
	void Play_Tracking_Audio();
	void Play_Sight_Audio();
	void BndEvt__Athena_FactionSelection_AlterEgo_K2Node_ComponentBoundEvent_0_OnFactionSelected__DelegateSignature(const struct FGameplayTag& FactionTagOut);
	void PlayImpact();
	void Fire();
	void ReceiveBeginPlay();
	void ActivateRays();
	void DeactivateRays();
	void SetTurrentHiddentState(bool Hidden);
	void TargetedRayScale(ETimelineDirection Direction);
	void SetStartingColor();
	void ChangeLightColor();
	void OnReady_0A6BC1BB48546569EAAD1EBC05DEAC60(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void TLAnimation__SetRayHidden__EventFunc();
	void TLAnimation__UpdateFunc();
	void TLAnimation__FinishedFunc();
	void TLTargetRayScale__UpdateFunc();
	void TLTargetRayScale__FinishedFunc();
	void UserConstructionScript();
	void InitializeAngleRaysParameters();
	void OnRep_InSpyLTM();
	void OnRep_IsShooting();
	void OnRep_Dormant();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_Sentry_Turret_C">();
	}
	static class ABGA_Athena_Sentry_Turret_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_Sentry_Turret_C>();
	}
};
static_assert(alignof(ABGA_Athena_Sentry_Turret_C) == 0x000008, "Wrong alignment on ABGA_Athena_Sentry_Turret_C");
static_assert(sizeof(ABGA_Athena_Sentry_Turret_C) == 0x000EE0, "Wrong size on ABGA_Athena_Sentry_Turret_C");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, UberGraphFrame_BGA_Athena_Sentry_Turret_C) == 0x000AC0, "Member 'ABGA_Athena_Sentry_Turret_C::UberGraphFrame_BGA_Athena_Sentry_Turret_C' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Sight_Loop_Audio) == 0x000AC8, "Member 'ABGA_Athena_Sentry_Turret_C::Sight_Loop_Audio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, P_SentryTurret_MF) == 0x000AD0, "Member 'ABGA_Athena_Sentry_Turret_C::P_SentryTurret_MF' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, BeaconParticles) == 0x000AD8, "Member 'ABGA_Athena_Sentry_Turret_C::BeaconParticles' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, P_ScannerRay_Laser_Endpoint) == 0x000AE0, "Member 'ABGA_Athena_Sentry_Turret_C::P_ScannerRay_Laser_Endpoint' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, AIPerceptionStimuliSource) == 0x000AE8, "Member 'ABGA_Athena_Sentry_Turret_C::AIPerceptionStimuliSource' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Wire) == 0x000AF0, "Member 'ABGA_Athena_Sentry_Turret_C::Wire' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Athena_FactionSelection_AlterEgo) == 0x000AF8, "Member 'ABGA_Athena_Sentry_Turret_C::Athena_FactionSelection_AlterEgo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, SM_PG_Turret_Base) == 0x000B00, "Member 'ABGA_Athena_Sentry_Turret_C::SM_PG_Turret_Base' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation_Emissive_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B08, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation_Emissive_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation_Blades_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B0C, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation_Blades_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation_RayAngle_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B10, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation_RayAngle_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation_RayLength_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B14, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation_RayLength_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation_Animation_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B18, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation_Animation_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation__Direction_8DD4C3904EE67C29AD89DC8FC7D168E8) == 0x000B1C, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation__Direction_8DD4C3904EE67C29AD89DC8FC7D168E8' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLAnimation) == 0x000B20, "Member 'ABGA_Athena_Sentry_Turret_C::TLAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLTargetRayScale_EmissiveScale_DC5F34AD4868927876D6B7B70F8ECB53) == 0x000B28, "Member 'ABGA_Athena_Sentry_Turret_C::TLTargetRayScale_EmissiveScale_DC5F34AD4868927876D6B7B70F8ECB53' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLTargetRayScale_Alpha_DC5F34AD4868927876D6B7B70F8ECB53) == 0x000B2C, "Member 'ABGA_Athena_Sentry_Turret_C::TLTargetRayScale_Alpha_DC5F34AD4868927876D6B7B70F8ECB53' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLTargetRayScale__Direction_DC5F34AD4868927876D6B7B70F8ECB53) == 0x000B30, "Member 'ABGA_Athena_Sentry_Turret_C::TLTargetRayScale__Direction_DC5F34AD4868927876D6B7B70F8ECB53' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TLTargetRayScale) == 0x000B38, "Member 'ABGA_Athena_Sentry_Turret_C::TLTargetRayScale' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Timer_Fire) == 0x000B40, "Member 'ABGA_Athena_Sentry_Turret_C::Timer_Fire' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ForwardFireOffset) == 0x000B48, "Member 'ABGA_Athena_Sentry_Turret_C::ForwardFireOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, UpwardFireOffset) == 0x000B4C, "Member 'ABGA_Athena_Sentry_Turret_C::UpwardFireOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, HitActor) == 0x000B50, "Member 'ABGA_Athena_Sentry_Turret_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, MuzzleLocation) == 0x000B58, "Member 'ABGA_Athena_Sentry_Turret_C::MuzzleLocation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, HitLocation) == 0x000B64, "Member 'ABGA_Athena_Sentry_Turret_C::HitLocation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, GE_HitEffect) == 0x000B70, "Member 'ABGA_Athena_Sentry_Turret_C::GE_HitEffect' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, GEContext) == 0x000B78, "Member 'ABGA_Athena_Sentry_Turret_C::GEContext' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Hit) == 0x000B90, "Member 'ABGA_Athena_Sentry_Turret_C::Hit' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Tracer) == 0x000C20, "Member 'ABGA_Athena_Sentry_Turret_C::Tracer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, MAP_HitMaterialSound) == 0x000C28, "Member 'ABGA_Athena_Sentry_Turret_C::MAP_HitMaterialSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Fire_Sound) == 0x000C78, "Member 'ABGA_Athena_Sentry_Turret_C::Fire_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, MAP_HitMaterialFX) == 0x000C80, "Member 'ABGA_Athena_Sentry_Turret_C::MAP_HitMaterialFX' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, RayStartingScale) == 0x000CD0, "Member 'ABGA_Athena_Sentry_Turret_C::RayStartingScale' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, RayTargetScale) == 0x000CDC, "Member 'ABGA_Athena_Sentry_Turret_C::RayTargetScale' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, AggroColor) == 0x000CE8, "Member 'ABGA_Athena_Sentry_Turret_C::AggroColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TrackingColor) == 0x000CF8, "Member 'ABGA_Athena_Sentry_Turret_C::TrackingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, SeekingColor) == 0x000D08, "Member 'ABGA_Athena_Sentry_Turret_C::SeekingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TargetingLaserEdgeWidthEnd) == 0x000D18, "Member 'ABGA_Athena_Sentry_Turret_C::TargetingLaserEdgeWidthEnd' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TargetingLaserEdgeWidthFront) == 0x000D1C, "Member 'ABGA_Athena_Sentry_Turret_C::TargetingLaserEdgeWidthFront' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ScanningLaserEdgeWidthEnd) == 0x000D20, "Member 'ABGA_Athena_Sentry_Turret_C::ScanningLaserEdgeWidthEnd' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ScanningLaserEdgeWidthFront) == 0x000D24, "Member 'ABGA_Athena_Sentry_Turret_C::ScanningLaserEdgeWidthFront' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ScanningLaserFalloff) == 0x000D28, "Member 'ABGA_Athena_Sentry_Turret_C::ScanningLaserFalloff' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TargetingLaserFalloff) == 0x000D2C, "Member 'ABGA_Athena_Sentry_Turret_C::TargetingLaserFalloff' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TargetingLaserEdgeColor) == 0x000D30, "Member 'ABGA_Athena_Sentry_Turret_C::TargetingLaserEdgeColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, TargetingLaserCenterColor) == 0x000D40, "Member 'ABGA_Athena_Sentry_Turret_C::TargetingLaserCenterColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ScanningLaserEdgeColor) == 0x000D50, "Member 'ABGA_Athena_Sentry_Turret_C::ScanningLaserEdgeColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ScanningLaserCenterColor) == 0x000D60, "Member 'ABGA_Athena_Sentry_Turret_C::ScanningLaserCenterColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, WorldUpVector) == 0x000D70, "Member 'ABGA_Athena_Sentry_Turret_C::WorldUpVector' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Row_Firerate) == 0x000D80, "Member 'ABGA_Athena_Sentry_Turret_C::Row_Firerate' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, FireTargetLoc) == 0x000DA0, "Member 'ABGA_Athena_Sentry_Turret_C::FireTargetLoc' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, LastHitActor) == 0x000DB0, "Member 'ABGA_Athena_Sentry_Turret_C::LastHitActor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, HitATarget) == 0x000DB8, "Member 'ABGA_Athena_Sentry_Turret_C::HitATarget' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ParticleTrackingColor) == 0x000DBC, "Member 'ABGA_Athena_Sentry_Turret_C::ParticleTrackingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, RayIsBeam) == 0x000DCC, "Member 'ABGA_Athena_Sentry_Turret_C::RayIsBeam' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Row_AutoStopIfNotHitPawn) == 0x000DD0, "Member 'ABGA_Athena_Sentry_Turret_C::Row_AutoStopIfNotHitPawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, SecondaryRaysSpeed) == 0x000DF0, "Member 'ABGA_Athena_Sentry_Turret_C::SecondaryRaysSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Sight_Sound) == 0x000DF8, "Member 'ABGA_Athena_Sentry_Turret_C::Sight_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Tracking_Sound) == 0x000E00, "Member 'ABGA_Athena_Sentry_Turret_C::Tracking_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, CameraPitch) == 0x000E08, "Member 'ABGA_Athena_Sentry_Turret_C::CameraPitch' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, NoDamageDelay) == 0x000E0C, "Member 'ABGA_Athena_Sentry_Turret_C::NoDamageDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Dormant) == 0x000E10, "Member 'ABGA_Athena_Sentry_Turret_C::Dormant' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ShowWires) == 0x000E11, "Member 'ABGA_Athena_Sentry_Turret_C::ShowWires' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, WireYaw) == 0x000E14, "Member 'ABGA_Athena_Sentry_Turret_C::WireYaw' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, GC_Activate) == 0x000E18, "Member 'ABGA_Athena_Sentry_Turret_C::GC_Activate' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, SecondaryRaysOpacity) == 0x000E20, "Member 'ABGA_Athena_Sentry_Turret_C::SecondaryRaysOpacity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, ParticleLightOpacity) == 0x000E24, "Member 'ABGA_Athena_Sentry_Turret_C::ParticleLightOpacity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Stop_Watching_Sound) == 0x000E28, "Member 'ABGA_Athena_Sentry_Turret_C::Stop_Watching_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Diassemble_Sound) == 0x000E30, "Member 'ABGA_Athena_Sentry_Turret_C::Diassemble_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Stop_Targeting_Sound) == 0x000E38, "Member 'ABGA_Athena_Sentry_Turret_C::Stop_Targeting_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Is_Sight_Sound_Playing) == 0x000E40, "Member 'ABGA_Athena_Sentry_Turret_C::Is_Sight_Sound_Playing' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Is_Tracking_Sound_Playing) == 0x000E41, "Member 'ABGA_Athena_Sentry_Turret_C::Is_Tracking_Sound_Playing' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, InSpyLTM) == 0x000E42, "Member 'ABGA_Athena_Sentry_Turret_C::InSpyLTM' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Row_Enabled) == 0x000E48, "Member 'ABGA_Athena_Sentry_Turret_C::Row_Enabled' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, T_SpyLTMDefender) == 0x000E68, "Member 'ABGA_Athena_Sentry_Turret_C::T_SpyLTMDefender' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Is_Domant) == 0x000E70, "Member 'ABGA_Athena_Sentry_Turret_C::Is_Domant' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Start_Sight_Sound) == 0x000E78, "Member 'ABGA_Athena_Sentry_Turret_C::Start_Sight_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, SeekingColorFriendly) == 0x000E80, "Member 'ABGA_Athena_Sentry_Turret_C::SeekingColorFriendly' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, WireColor) == 0x000E90, "Member 'ABGA_Athena_Sentry_Turret_C::WireColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, WindUpSoundDelay) == 0x000EA0, "Member 'ABGA_Athena_Sentry_Turret_C::WindUpSoundDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, GC_WindUp) == 0x000EA4, "Member 'ABGA_Athena_Sentry_Turret_C::GC_WindUp' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, WindupTimer) == 0x000EB0, "Member 'ABGA_Athena_Sentry_Turret_C::WindupTimer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, LinkToActor) == 0x000EB8, "Member 'ABGA_Athena_Sentry_Turret_C::LinkToActor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, IsShooting) == 0x000EC0, "Member 'ABGA_Athena_Sentry_Turret_C::IsShooting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, Timer_NoHit) == 0x000EC8, "Member 'ABGA_Athena_Sentry_Turret_C::Timer_NoHit' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, T_PlayerPawn) == 0x000ED0, "Member 'ABGA_Athena_Sentry_Turret_C::T_PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, CurrentHiddenState) == 0x000ED8, "Member 'ABGA_Athena_Sentry_Turret_C::CurrentHiddenState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Turret_C, LineTraceChannel) == 0x000ED9, "Member 'ABGA_Athena_Sentry_Turret_C::LineTraceChannel' has a wrong offset!");

}

