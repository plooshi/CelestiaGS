#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AntelopeVehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AntelopeVehicle.AntelopeVehicle_C
// 0x04F0 (0x1EB0 - 0x19C0)
class AAntelopeVehicle_C final : public AFortAthenaAntelopeVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x19C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPassengerImpulseWeaponComponent_C*     ImpulseComponent;                                  // 0x19C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioHitPlayer;                       // 0x19D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioSpark;                                        // 0x19D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WheelBlur_BR;                                   // 0x19E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WheelBlur_BL;                                   // 0x19E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WheelBlur_FR;                                   // 0x19F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WheelBlur_FL;                                   // 0x19F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioEngineIdle;                                   // 0x1A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBoostCharge;                                  // 0x1A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioHorn;                                         // 0x1A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioHandbrakeSkid;                                // 0x1A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBoost;                                        // 0x1A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x1A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioScrape;                                       // 0x1A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioSkid;                                         // 0x1A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ATV_Engine_Ready;                                // 0x1A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BoostMeter;                                        // 0x1A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioSuspension;                      // 0x1A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailRight;                                        // 0x1A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailLeft;                                         // 0x1A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Vehicle_WheelDust;                      // 0x1A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioImpacts;                         // 0x1A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioEngineRevUp;                                  // 0x1A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         RearVectorThreshold;                               // 0x1A98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x1AB8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPickup*                            FortPickup;                                        // 0x1AC8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x1AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x1AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ObjectReference;                                   // 0x1AD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x1AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningAmount;                                     // 0x1AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B29[0x4];                                     // 0x1AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectiveImpulse;                                 // 0x1AF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2A[0x4];                                     // 0x1B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RumbleMultipier;                                   // 0x1B08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToLaunch;                               // 0x1B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchVelocity;                                 // 0x1B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngle;                                       // 0x1B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2B[0x4];                                     // 0x1B3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMultiplier;                                  // 0x1B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B2C[0x4];                                     // 0x1B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HitMinusZImpulseMultiplier;                        // 0x1B50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusLateralImpulseMultiplier;                  // 0x1B70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusMaxImpulseVelocity;                        // 0x1B90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HealthToDestroyProp;                               // 0x1BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x1BB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x1BB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2D[0x2];                                     // 0x1BB6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x1BB8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x1BC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerController*                      PassengerPlayerController;                         // 0x1BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchCharacterExtraVelocity;                      // 0x1BE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchCharacterVelocityScalar;                     // 0x1BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        BounceOverlapPawn;                                 // 0x1BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  BounceOverlapController;                           // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x1C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x1C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x1C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x1C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x1C20(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x1C30(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Debug_NoCameraShake;                               // 0x1C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2E[0x3];                                     // 0x1C41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostCameraOffsetLerpStart;                        // 0x1C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Boost;                                             // 0x1C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetBoostFX;                                      // 0x1C4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B2F[0x3];                                     // 0x1C4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructionAngle;                                  // 0x1C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PropDamageAmount;                                  // 0x1C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnBoostSound;                                      // 0x1C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorKickBoostScale;                               // 0x1C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceVector;                                      // 0x1C64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x1C70(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B30[0x4];                                     // 0x1C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorToDestroy;                                    // 0x1C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrailsActive;                                      // 0x1C88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B31[0x7];                                     // 0x1C89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 VehicleHitActor;                                   // 0x1C90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundBase*>                     OnBoostIncreaseSounds;                             // 0x1C98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAudioComponent*                        BoostIncreaseAudioComp;                            // 0x1CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnobstructedBounceVelocity;                        // 0x1CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedBounceVelocity;                          // 0x1CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x1CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x1CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B32[0x4];                                     // 0x1CCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HonkAudioComp;                                     // 0x1CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               BoostMeterMID_0;                                   // 0x1CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnBoostEndSound;                                   // 0x1CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DamagedEffect;                                     // 0x1CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnSmashSound;                                      // 0x1CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnBoostFailed;                                     // 0x1CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WaterDamageSound;                                  // 0x1D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpinBlurThreshold;                              // 0x1D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpinBlurThreshold;                              // 0x1D0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CacheWheelsBackOpacity_0;                          // 0x1D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CacheWheelsFrontOpacity_0;                         // 0x1D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SpecialHonkTimer;                                  // 0x1D18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialHonk;                                       // 0x1D20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IcedWheels;                                        // 0x1D21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8B33[0x6];                                     // 0x1D22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x1D28(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         SavedBoostTimeForMID;                              // 0x1DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageForMID;                                 // 0x1DE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedHeadlightStateForMID;                         // 0x1DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B34[0x4];                                     // 0x1DEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMID_0;                                         // 0x1DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Boost;                                          // 0x1DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            CooldownCueEvent;                                  // 0x1E00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitPlayerCue;                                      // 0x1E08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitFiendCue;                                       // 0x1E10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AFortWaterBodyActor*                    LastWaterBody;                                     // 0x1E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_WaterDamage;                                    // 0x1E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_WaterDamageDelay;                            // 0x1E28(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_WaterDamage;                                 // 0x1E30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDamageDelay;                                  // 0x1E38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDamageDepth;                                  // 0x1E3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDamageInterval;                               // 0x1E40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B35[0x4];                                     // 0x1E44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ROW_WaterDamageDelay;                              // 0x1E48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ROW_WaterDamageDepth;                              // 0x1E68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ROW_WaterDamageInterval;                           // 0x1E88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UParticleSystem*                        FX_WaterDamage;                                    // 0x1EA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AntelopeVehicle(int32 EntryPoint);
	void LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StartDriverCameraShake();
	void StartDriverRumble();
	void StopDriverRumble();
	void OnIsSprintingChanged();
	void OnPassengerFiredImpulseWeapon();
	void StartWaterDamage();
	void OnExitedWaterBody(class AFortWaterBodyActor* WaterBody);
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody);
	void ApplyWaterDamage();
	void EventOnHealthChanged();
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void ShowCooldownCue(class AFortPlayerPawn* Pawn, float Duration);
	void OnStopTick();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void PerformHonk(bool Param_SpecialHonk);
	void HonkMulticast(bool Param_SpecialHonk);
	void HonkToServer(bool Param_SpecialHonk);
	void SpecialHonkDone();
	void OnHonk();
	void BoostFailed();
	void SmashedThroughBuildingPiece(const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const class ABuildingActor* BuildingHitActor);
	void NaturalSlideEnd();
	void NaturalSlideBegin();
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void Handle_Spring_Compression_Audio();
	void ReceiveBeginPlay();
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NoShake();
	void BoostEnd();
	void BoostBegin();
	void OnSpringCompression();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Update_Damage_State(float Damage);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void PedalForceFeedback();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void UserConstructionScript();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude);
	void OnRep_CorrectiveImpulse();
	void OnRep_ImpactLocation();
	void DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold);
	void SendBoostTimeToMaterial(const float ParameterValue);
	void SendHeadlightStateToMaterial(const float ParameterValue);
	void SendDamageStateToMaterial(const float ParameterValue);
	void SendBoostMeterToMaterial();
	void AddCooldownCueEvent(class AFortPlayerPawn* Player_Pawn);
	void RemoveCooldownCueEvent(class AFortPlayerPawn* Player_Pawn);

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AntelopeVehicle_C">();
	}
	static class AAntelopeVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAntelopeVehicle_C>();
	}
};
static_assert(alignof(AAntelopeVehicle_C) == 0x000010, "Wrong alignment on AAntelopeVehicle_C");
static_assert(sizeof(AAntelopeVehicle_C) == 0x001EB0, "Wrong size on AAntelopeVehicle_C");
static_assert(offsetof(AAntelopeVehicle_C, UberGraphFrame) == 0x0019C0, "Member 'AAntelopeVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ImpulseComponent) == 0x0019C8, "Member 'AAntelopeVehicle_C::ImpulseComponent' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FortCollisionAudioHitPlayer) == 0x0019D0, "Member 'AAntelopeVehicle_C::FortCollisionAudioHitPlayer' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioSpark) == 0x0019D8, "Member 'AAntelopeVehicle_C::AudioSpark' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SM_WheelBlur_BR) == 0x0019E0, "Member 'AAntelopeVehicle_C::SM_WheelBlur_BR' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SM_WheelBlur_BL) == 0x0019E8, "Member 'AAntelopeVehicle_C::SM_WheelBlur_BL' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SM_WheelBlur_FR) == 0x0019F0, "Member 'AAntelopeVehicle_C::SM_WheelBlur_FR' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SM_WheelBlur_FL) == 0x0019F8, "Member 'AAntelopeVehicle_C::SM_WheelBlur_FL' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioEngineIdle) == 0x001A00, "Member 'AAntelopeVehicle_C::AudioEngineIdle' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioBoostCharge) == 0x001A08, "Member 'AAntelopeVehicle_C::AudioBoostCharge' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioHorn) == 0x001A10, "Member 'AAntelopeVehicle_C::AudioHorn' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioHandbrakeSkid) == 0x001A18, "Member 'AAntelopeVehicle_C::AudioHandbrakeSkid' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioBoost) == 0x001A20, "Member 'AAntelopeVehicle_C::AudioBoost' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioWind) == 0x001A28, "Member 'AAntelopeVehicle_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioScrape) == 0x001A30, "Member 'AAntelopeVehicle_C::AudioScrape' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioSkid) == 0x001A38, "Member 'AAntelopeVehicle_C::AudioSkid' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, P_ATV_Engine_Ready) == 0x001A40, "Member 'AAntelopeVehicle_C::P_ATV_Engine_Ready' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BoostMeter) == 0x001A48, "Member 'AAntelopeVehicle_C::BoostMeter' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FortCollisionAudioSuspension) == 0x001A50, "Member 'AAntelopeVehicle_C::FortCollisionAudioSuspension' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OverlapVolume) == 0x001A58, "Member 'AAntelopeVehicle_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, TrailRight) == 0x001A60, "Member 'AAntelopeVehicle_C::TrailRight' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, TrailLeft) == 0x001A68, "Member 'AAntelopeVehicle_C::TrailLeft' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, P_GolfCart_Vehicle_WheelDust) == 0x001A70, "Member 'AAntelopeVehicle_C::P_GolfCart_Vehicle_WheelDust' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FortCollisionAudioImpacts) == 0x001A78, "Member 'AAntelopeVehicle_C::FortCollisionAudioImpacts' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AudioEngineRevUp) == 0x001A80, "Member 'AAntelopeVehicle_C::AudioEngineRevUp' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnDeathSound) == 0x001A88, "Member 'AAntelopeVehicle_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, PassengerPawn) == 0x001A90, "Member 'AAntelopeVehicle_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, RearVectorThreshold) == 0x001A98, "Member 'AAntelopeVehicle_C::RearVectorThreshold' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, AttachedPickups) == 0x001AB8, "Member 'AAntelopeVehicle_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FortPickup) == 0x001AC8, "Member 'AAntelopeVehicle_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, MaxPickups) == 0x001AD0, "Member 'AAntelopeVehicle_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CurrentPickups) == 0x001AD4, "Member 'AAntelopeVehicle_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ObjectReference) == 0x001AD8, "Member 'AAntelopeVehicle_C::ObjectReference' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, DrivingPlayerController) == 0x001AE0, "Member 'AAntelopeVehicle_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, TurningAmount) == 0x001AE8, "Member 'AAntelopeVehicle_C::TurningAmount' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, DriverPawn) == 0x001AF0, "Member 'AAntelopeVehicle_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CorrectiveImpulse) == 0x001AF8, "Member 'AAntelopeVehicle_C::CorrectiveImpulse' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, RumbleMultipier) == 0x001B08, "Member 'AAntelopeVehicle_C::RumbleMultipier' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LastDriver) == 0x001B28, "Member 'AAntelopeVehicle_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, MinVelocityToLaunch) == 0x001B30, "Member 'AAntelopeVehicle_C::MinVelocityToLaunch' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, MaxLaunchVelocity) == 0x001B34, "Member 'AAntelopeVehicle_C::MaxLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LaunchAngle) == 0x001B38, "Member 'AAntelopeVehicle_C::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LastHitPlayer) == 0x001B40, "Member 'AAntelopeVehicle_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LaunchMultiplier) == 0x001B48, "Member 'AAntelopeVehicle_C::LaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HitMinusZImpulseMultiplier) == 0x001B50, "Member 'AAntelopeVehicle_C::HitMinusZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HitMinusLateralImpulseMultiplier) == 0x001B70, "Member 'AAntelopeVehicle_C::HitMinusLateralImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HitMinusMaxImpulseVelocity) == 0x001B90, "Member 'AAntelopeVehicle_C::HitMinusMaxImpulseVelocity' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HealthToDestroyProp) == 0x001BB0, "Member 'AAntelopeVehicle_C::HealthToDestroyProp' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, IgnoreHitLastDriver) == 0x001BB4, "Member 'AAntelopeVehicle_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, PassengerIsInstigator) == 0x001BB5, "Member 'AAntelopeVehicle_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, DoorMesh) == 0x001BB8, "Member 'AAntelopeVehicle_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CanLaunchPlayer) == 0x001BC0, "Member 'AAntelopeVehicle_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, PassengerPlayerController) == 0x001BE0, "Member 'AAntelopeVehicle_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LaunchCharacterExtraVelocity) == 0x001BE8, "Member 'AAntelopeVehicle_C::LaunchCharacterExtraVelocity' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LaunchCharacterVelocityScalar) == 0x001BF4, "Member 'AAntelopeVehicle_C::LaunchCharacterVelocityScalar' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BounceOverlapPawn) == 0x001BF8, "Member 'AAntelopeVehicle_C::BounceOverlapPawn' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BounceOverlapController) == 0x001C00, "Member 'AAntelopeVehicle_C::BounceOverlapController' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FinalBounceJumpHeight) == 0x001C08, "Member 'AAntelopeVehicle_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BounceHeight) == 0x001C0C, "Member 'AAntelopeVehicle_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, GE_PlayerLaunched) == 0x001C10, "Member 'AAntelopeVehicle_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LaunchForceFeedback) == 0x001C18, "Member 'AAntelopeVehicle_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, Passengers) == 0x001C20, "Member 'AAntelopeVehicle_C::Passengers' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BounceIgnoreList) == 0x001C30, "Member 'AAntelopeVehicle_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, Debug_NoCameraShake) == 0x001C40, "Member 'AAntelopeVehicle_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BoostCameraOffsetLerpStart) == 0x001C44, "Member 'AAntelopeVehicle_C::BoostCameraOffsetLerpStart' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, Boost) == 0x001C48, "Member 'AAntelopeVehicle_C::Boost' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ResetBoostFX) == 0x001C4C, "Member 'AAntelopeVehicle_C::ResetBoostFX' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, DestructionAngle) == 0x001C50, "Member 'AAntelopeVehicle_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, PropDamageAmount) == 0x001C54, "Member 'AAntelopeVehicle_C::PropDamageAmount' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnBoostSound) == 0x001C58, "Member 'AAntelopeVehicle_C::OnBoostSound' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ColorKickBoostScale) == 0x001C60, "Member 'AAntelopeVehicle_C::ColorKickBoostScale' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BounceVector) == 0x001C64, "Member 'AAntelopeVehicle_C::BounceVector' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ImpactLocation) == 0x001C70, "Member 'AAntelopeVehicle_C::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ActorToDestroy) == 0x001C80, "Member 'AAntelopeVehicle_C::ActorToDestroy' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, TrailsActive) == 0x001C88, "Member 'AAntelopeVehicle_C::TrailsActive' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, VehicleHitActor) == 0x001C90, "Member 'AAntelopeVehicle_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnBoostIncreaseSounds) == 0x001C98, "Member 'AAntelopeVehicle_C::OnBoostIncreaseSounds' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BoostIncreaseAudioComp) == 0x001CA8, "Member 'AAntelopeVehicle_C::BoostIncreaseAudioComp' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, InWaterFX) == 0x001CB0, "Member 'AAntelopeVehicle_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, UnobstructedBounceVelocity) == 0x001CB8, "Member 'AAntelopeVehicle_C::UnobstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ObstructedBounceVelocity) == 0x001CBC, "Member 'AAntelopeVehicle_C::ObstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, InWaterLoop) == 0x001CC0, "Member 'AAntelopeVehicle_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, EngineSoundMaxDistance) == 0x001CC8, "Member 'AAntelopeVehicle_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HonkAudioComp) == 0x001CD0, "Member 'AAntelopeVehicle_C::HonkAudioComp' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BoostMeterMID_0) == 0x001CD8, "Member 'AAntelopeVehicle_C::BoostMeterMID_0' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnBoostEndSound) == 0x001CE0, "Member 'AAntelopeVehicle_C::OnBoostEndSound' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, DamagedEffect) == 0x001CE8, "Member 'AAntelopeVehicle_C::DamagedEffect' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnSmashSound) == 0x001CF0, "Member 'AAntelopeVehicle_C::OnSmashSound' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, OnBoostFailed) == 0x001CF8, "Member 'AAntelopeVehicle_C::OnBoostFailed' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, WaterDamageSound) == 0x001D00, "Member 'AAntelopeVehicle_C::WaterDamageSound' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, MinSpinBlurThreshold) == 0x001D08, "Member 'AAntelopeVehicle_C::MinSpinBlurThreshold' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, MaxSpinBlurThreshold) == 0x001D0C, "Member 'AAntelopeVehicle_C::MaxSpinBlurThreshold' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CacheWheelsBackOpacity_0) == 0x001D10, "Member 'AAntelopeVehicle_C::CacheWheelsBackOpacity_0' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CacheWheelsFrontOpacity_0) == 0x001D14, "Member 'AAntelopeVehicle_C::CacheWheelsFrontOpacity_0' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SpecialHonkTimer) == 0x001D18, "Member 'AAntelopeVehicle_C::SpecialHonkTimer' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SpecialHonk) == 0x001D20, "Member 'AAntelopeVehicle_C::SpecialHonk' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, IcedWheels) == 0x001D21, "Member 'AAntelopeVehicle_C::IcedWheels' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, GCParamsEmpty) == 0x001D28, "Member 'AAntelopeVehicle_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SavedBoostTimeForMID) == 0x001DE0, "Member 'AAntelopeVehicle_C::SavedBoostTimeForMID' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SavedDamageForMID) == 0x001DE4, "Member 'AAntelopeVehicle_C::SavedDamageForMID' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, SavedHeadlightStateForMID) == 0x001DE8, "Member 'AAntelopeVehicle_C::SavedHeadlightStateForMID' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, BodyMID_0) == 0x001DF0, "Member 'AAntelopeVehicle_C::BodyMID_0' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, GE_Boost) == 0x001DF8, "Member 'AAntelopeVehicle_C::GE_Boost' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, CooldownCueEvent) == 0x001E00, "Member 'AAntelopeVehicle_C::CooldownCueEvent' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HitPlayerCue) == 0x001E08, "Member 'AAntelopeVehicle_C::HitPlayerCue' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, HitFiendCue) == 0x001E10, "Member 'AAntelopeVehicle_C::HitFiendCue' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, LastWaterBody) == 0x001E18, "Member 'AAntelopeVehicle_C::LastWaterBody' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, GE_WaterDamage) == 0x001E20, "Member 'AAntelopeVehicle_C::GE_WaterDamage' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, Timer_WaterDamageDelay) == 0x001E28, "Member 'AAntelopeVehicle_C::Timer_WaterDamageDelay' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, Timer_WaterDamage) == 0x001E30, "Member 'AAntelopeVehicle_C::Timer_WaterDamage' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, WaterDamageDelay) == 0x001E38, "Member 'AAntelopeVehicle_C::WaterDamageDelay' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, WaterDamageDepth) == 0x001E3C, "Member 'AAntelopeVehicle_C::WaterDamageDepth' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, WaterDamageInterval) == 0x001E40, "Member 'AAntelopeVehicle_C::WaterDamageInterval' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ROW_WaterDamageDelay) == 0x001E48, "Member 'AAntelopeVehicle_C::ROW_WaterDamageDelay' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ROW_WaterDamageDepth) == 0x001E68, "Member 'AAntelopeVehicle_C::ROW_WaterDamageDepth' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, ROW_WaterDamageInterval) == 0x001E88, "Member 'AAntelopeVehicle_C::ROW_WaterDamageInterval' has a wrong offset!");
static_assert(offsetof(AAntelopeVehicle_C, FX_WaterDamage) == 0x001EA8, "Member 'AAntelopeVehicle_C::FX_WaterDamage' has a wrong offset!");

}

