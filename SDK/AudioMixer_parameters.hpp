#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioMixer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AudioMixer_structs.hpp"


namespace SDK::Params
{

// Function AudioMixer.SynthComponent.SetLowPassFilterEnabled
// 0x0001 (0x0001 - 0x0000)
struct SynthComponent_SetLowPassFilterEnabled final
{
public:
	bool                                          InLowPassFilterEnabled;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetLowPassFilterEnabled) == 0x000001, "Wrong alignment on SynthComponent_SetLowPassFilterEnabled");
static_assert(sizeof(SynthComponent_SetLowPassFilterEnabled) == 0x000001, "Wrong size on SynthComponent_SetLowPassFilterEnabled");
static_assert(offsetof(SynthComponent_SetLowPassFilterEnabled, InLowPassFilterEnabled) == 0x000000, "Member 'SynthComponent_SetLowPassFilterEnabled::InLowPassFilterEnabled' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetLowPassFilterFrequency
// 0x0004 (0x0004 - 0x0000)
struct SynthComponent_SetLowPassFilterFrequency final
{
public:
	float                                         InLowPassFilterFrequency;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetLowPassFilterFrequency) == 0x000004, "Wrong alignment on SynthComponent_SetLowPassFilterFrequency");
static_assert(sizeof(SynthComponent_SetLowPassFilterFrequency) == 0x000004, "Wrong size on SynthComponent_SetLowPassFilterFrequency");
static_assert(offsetof(SynthComponent_SetLowPassFilterFrequency, InLowPassFilterFrequency) == 0x000000, "Member 'SynthComponent_SetLowPassFilterFrequency::InLowPassFilterFrequency' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetSubmixSend
// 0x0010 (0x0010 - 0x0000)
struct SynthComponent_SetSubmixSend final
{
public:
	class USoundSubmixBase*                       Submix;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EE7[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SynthComponent_SetSubmixSend) == 0x000008, "Wrong alignment on SynthComponent_SetSubmixSend");
static_assert(sizeof(SynthComponent_SetSubmixSend) == 0x000010, "Wrong size on SynthComponent_SetSubmixSend");
static_assert(offsetof(SynthComponent_SetSubmixSend, Submix) == 0x000000, "Member 'SynthComponent_SetSubmixSend::Submix' has a wrong offset!");
static_assert(offsetof(SynthComponent_SetSubmixSend, SendLevel) == 0x000008, "Member 'SynthComponent_SetSubmixSend::SendLevel' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SynthComponent_SetVolumeMultiplier final
{
public:
	float                                         VolumeMultiplier;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetVolumeMultiplier) == 0x000004, "Wrong alignment on SynthComponent_SetVolumeMultiplier");
static_assert(sizeof(SynthComponent_SetVolumeMultiplier) == 0x000004, "Wrong size on SynthComponent_SetVolumeMultiplier");
static_assert(offsetof(SynthComponent_SetVolumeMultiplier, VolumeMultiplier) == 0x000000, "Member 'SynthComponent_SetVolumeMultiplier::VolumeMultiplier' has a wrong offset!");

// Function AudioMixer.SynthComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SynthComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_IsPlaying) == 0x000001, "Wrong alignment on SynthComponent_IsPlaying");
static_assert(sizeof(SynthComponent_IsPlaying) == 0x000001, "Wrong size on SynthComponent_IsPlaying");
static_assert(offsetof(SynthComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'SynthComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_AddMasterSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddMasterSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_AddMasterSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddMasterSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect, SubmixEffectPreset) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddMasterSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSourceEffectChainEntry                Entry;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, Entry) == 0x000010, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::Entry' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_AddSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EE8[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddSubmixEffect) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_AddSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, SubmixEffectPreset) == 0x000010, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::SubmixEffectPreset' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_ClearMasterSubmixEffects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ClearMasterSubmixEffects");
static_assert(sizeof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_ClearMasterSubmixEffects");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ClearMasterSubmixEffects::WorldContextObject' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_ClearSubmixEffects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ClearSubmixEffects) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ClearSubmixEffects");
static_assert(sizeof(AudioMixerBlueprintLibrary_ClearSubmixEffects) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_ClearSubmixEffects");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffects, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffects, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffects::SoundSubmix' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
// 0x0030 (0x0030 - 0x0000)
struct AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Frequencies;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Magnitudes;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies) == 0x000030, "Wrong size on AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, Frequencies) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::Frequencies' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, Magnitudes) == 0x000018, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::Magnitudes' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, SubmixToAnalyze) == 0x000028, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::SubmixToAnalyze' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EE9[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
// 0x0030 (0x0030 - 0x0000)
struct AudioMixerBlueprintLibrary_GetPhaseForFrequencies final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Frequencies;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Phases;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetPhaseForFrequencies");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies) == 0x000030, "Wrong size on AudioMixerBlueprintLibrary_GetPhaseForFrequencies");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, Frequencies) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::Frequencies' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, Phases) == 0x000018, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::Phases' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, SubmixToAnalyze) == 0x000028, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::SubmixToAnalyze' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_IsAudioBusActive final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EEA[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_IsAudioBusActive) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_IsAudioBusActive");
static_assert(sizeof(AudioMixerBlueprintLibrary_IsAudioBusActive) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_IsAudioBusActive");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::AudioBus' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
// 0x0028 (0x0028 - 0x0000)
struct AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings final
{
public:
	int32                                         InNumBands;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumFrequency;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumFrequency;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EEB[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings) == 0x000028, "Wrong size on AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InNumBands) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InNumBands' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InMinimumFrequency) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InMinimumFrequency' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InMaximumFrequency) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InMaximumFrequency' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
// 0x0028 (0x0028 - 0x0000)
struct AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings final
{
public:
	int32                                         InNumSemitones;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicalNoteName                              InStartingMusicalNote;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EEC[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStartingOctave;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EED[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings) == 0x000028, "Wrong size on AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InNumSemitones) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InNumSemitones' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InStartingMusicalNote) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InStartingMusicalNote' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InStartingOctave) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InStartingOctave' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings final
{
public:
	EAudioSpectrumBandPresetType                  InBandPresetType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EEE[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNumBands;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InBandPresetType) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InBandPresetType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InNumBands) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InNumBands' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_PauseRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToPause;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PauseRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PauseRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_PauseRecordingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_PauseRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_PauseRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PauseRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_PauseRecordingOutput, SubmixToPause) == 0x000008, "Member 'AudioMixerBlueprintLibrary_PauseRecordingOutput::SubmixToPause' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback");
static_assert(sizeof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback, SoundCue) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback::SoundCue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_PrimeSoundForPlayback final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USoundWave* LoadedSoundWave, bool WasCancelled)> OnLoadCompletion;                                  // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PrimeSoundForPlayback");
static_assert(sizeof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_PrimeSoundForPlayback");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback, SoundWave) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PrimeSoundForPlayback::SoundWave' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback, OnLoadCompletion) == 0x000008, "Member 'AudioMixerBlueprintLibrary_PrimeSoundForPlayback::OnLoadCompletion' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect, SubmixEffectPreset) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EEF[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, EntryIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::EntryIndex' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, SubmixEffectPreset) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF0[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::SubmixChainIndex' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           InSoundSubmix;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF1[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix");
static_assert(sizeof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, InSoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::InSoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::SubmixChainIndex' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, SubmixEffectPreset) == 0x000018, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_ResumeRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToPause;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ResumeRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ResumeRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_ResumeRecordingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_ResumeRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_ResumeRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ResumeRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ResumeRecordingOutput, SubmixToPause) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ResumeRecordingOutput::SubmixToPause' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassed;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF2[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry");
static_assert(sizeof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, EntryIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::EntryIndex' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, bBypassed) == 0x000014, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::bBypassed' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_StartAnalyzingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTSize                                      FFTSize;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTPeakInterpolationMethod                   InterpolationMethod;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTWindowType                                WindowType;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF3[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HopSize;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioSpectrumType                            SpectrumType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartAnalyzingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartAnalyzingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartAnalyzingOutput) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_StartAnalyzingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, SubmixToAnalyze) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::SubmixToAnalyze' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, FFTSize) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::FFTSize' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, InterpolationMethod) == 0x000011, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::InterpolationMethod' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, WindowType) == 0x000012, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::WindowType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, HopSize) == 0x000014, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::HopSize' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, SpectrumType) == 0x000018, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::SpectrumType' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StartAudioBus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartAudioBus) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartAudioBus");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartAudioBus) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StartAudioBus");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAudioBus, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartAudioBus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAudioBus, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartAudioBus::AudioBus' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_StartRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundSubmix*                           SubmixToRecord;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartRecordingOutput) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_StartRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, ExpectedDuration) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::ExpectedDuration' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, SubmixToRecord) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::SubmixToRecord' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StopAnalyzingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToStopAnalyzing;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopAnalyzingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopAnalyzingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopAnalyzingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StopAnalyzingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAnalyzingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopAnalyzingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAnalyzingOutput, SubmixToStopAnalyzing) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopAnalyzingOutput::SubmixToStopAnalyzing' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StopAudioBus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopAudioBus) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopAudioBus");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopAudioBus) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StopAudioBus");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAudioBus, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopAudioBus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAudioBus, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopAudioBus::AudioBus' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
// 0x0048 (0x0048 - 0x0000)
struct AudioMixerBlueprintLibrary_StopRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioRecordingExportType                     ExportType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EF6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToRecord;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ExistingSoundWaveToOverwrite;                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopRecordingOutput) == 0x000048, "Wrong size on AudioMixerBlueprintLibrary_StopRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ExportType) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ExportType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, Param_Name) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::Param_Name' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, Path) == 0x000020, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::Path' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, SubmixToRecord) == 0x000030, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::SubmixToRecord' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ExistingSoundWaveToOverwrite) == 0x000038, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ExistingSoundWaveToOverwrite' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ReturnValue) == 0x000040, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_TrimAudioCache final
{
public:
	float                                         InMegabytesToFree;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_TrimAudioCache) == 0x000004, "Wrong alignment on AudioMixerBlueprintLibrary_TrimAudioCache");
static_assert(sizeof(AudioMixerBlueprintLibrary_TrimAudioCache) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_TrimAudioCache");
static_assert(offsetof(AudioMixerBlueprintLibrary_TrimAudioCache, InMegabytesToFree) == 0x000000, "Member 'AudioMixerBlueprintLibrary_TrimAudioCache::InMegabytesToFree' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_TrimAudioCache, ReturnValue) == 0x000004, "Member 'AudioMixerBlueprintLibrary_TrimAudioCache::ReturnValue' has a wrong offset!");

// Function AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
// 0x0008 (0x0008 - 0x0000)
struct SubmixEffectDynamicsProcessorPreset_SetExternalSubmix final
{
public:
	class USoundSubmix*                           Submix;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix) == 0x000008, "Wrong alignment on SubmixEffectDynamicsProcessorPreset_SetExternalSubmix");
static_assert(sizeof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix) == 0x000008, "Wrong size on SubmixEffectDynamicsProcessorPreset_SetExternalSubmix");
static_assert(offsetof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix, Submix) == 0x000000, "Member 'SubmixEffectDynamicsProcessorPreset_SetExternalSubmix::Submix' has a wrong offset!");

// Function AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
// 0x0050 (0x0050 - 0x0000)
struct SubmixEffectDynamicsProcessorPreset_SetSettings final
{
public:
	struct FSubmixEffectDynamicsProcessorSettings Param_Settings;                                    // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectDynamicsProcessorPreset_SetSettings) == 0x000008, "Wrong alignment on SubmixEffectDynamicsProcessorPreset_SetSettings");
static_assert(sizeof(SubmixEffectDynamicsProcessorPreset_SetSettings) == 0x000050, "Wrong size on SubmixEffectDynamicsProcessorPreset_SetSettings");
static_assert(offsetof(SubmixEffectDynamicsProcessorPreset_SetSettings, Param_Settings) == 0x000000, "Member 'SubmixEffectDynamicsProcessorPreset_SetSettings::Param_Settings' has a wrong offset!");

// Function AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
// 0x0010 (0x0010 - 0x0000)
struct SubmixEffectSubmixEQPreset_SetSettings final
{
public:
	struct FSubmixEffectSubmixEQSettings          InSettings;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectSubmixEQPreset_SetSettings) == 0x000008, "Wrong alignment on SubmixEffectSubmixEQPreset_SetSettings");
static_assert(sizeof(SubmixEffectSubmixEQPreset_SetSettings) == 0x000010, "Wrong size on SubmixEffectSubmixEQPreset_SetSettings");
static_assert(offsetof(SubmixEffectSubmixEQPreset_SetSettings, InSettings) == 0x000000, "Member 'SubmixEffectSubmixEQPreset_SetSettings::InSettings' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbPreset.SetSettings
// 0x0034 (0x0034 - 0x0000)
struct SubmixEffectReverbPreset_SetSettings final
{
public:
	struct FSubmixEffectReverbSettings            InSettings;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbPreset_SetSettings) == 0x000004, "Wrong alignment on SubmixEffectReverbPreset_SetSettings");
static_assert(sizeof(SubmixEffectReverbPreset_SetSettings) == 0x000034, "Wrong size on SubmixEffectReverbPreset_SetSettings");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettings, InSettings) == 0x000000, "Member 'SubmixEffectReverbPreset_SetSettings::InSettings' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
// 0x0010 (0x0010 - 0x0000)
struct SubmixEffectReverbPreset_SetSettingsWithReverbEffect final
{
public:
	const class UReverbEffect*                    InReverbEffect;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect) == 0x000008, "Wrong alignment on SubmixEffectReverbPreset_SetSettingsWithReverbEffect");
static_assert(sizeof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect) == 0x000010, "Wrong size on SubmixEffectReverbPreset_SetSettingsWithReverbEffect");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, InReverbEffect) == 0x000000, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::InReverbEffect' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, WetLevel) == 0x000008, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::WetLevel' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, DryLevel) == 0x00000C, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::DryLevel' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbFastPreset.SetSettings
// 0x0038 (0x0038 - 0x0000)
struct SubmixEffectReverbFastPreset_SetSettings final
{
public:
	struct FSubmixEffectReverbFastSettings        InSettings;                                        // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbFastPreset_SetSettings) == 0x000004, "Wrong alignment on SubmixEffectReverbFastPreset_SetSettings");
static_assert(sizeof(SubmixEffectReverbFastPreset_SetSettings) == 0x000038, "Wrong size on SubmixEffectReverbFastPreset_SetSettings");
static_assert(offsetof(SubmixEffectReverbFastPreset_SetSettings, InSettings) == 0x000000, "Member 'SubmixEffectReverbFastPreset_SetSettings::InSettings' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbFastPreset.SetSettingsWithReverbEffect
// 0x0010 (0x0010 - 0x0000)
struct SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect final
{
public:
	const class UReverbEffect*                    InReverbEffect;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect) == 0x000008, "Wrong alignment on SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect");
static_assert(sizeof(SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect) == 0x000010, "Wrong size on SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect");
static_assert(offsetof(SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect, InReverbEffect) == 0x000000, "Member 'SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect::InReverbEffect' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect, WetLevel) == 0x000008, "Member 'SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect::WetLevel' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect, DryLevel) == 0x00000C, "Member 'SubmixEffectReverbFastPreset_SetSettingsWithReverbEffect::DryLevel' has a wrong offset!");

}

