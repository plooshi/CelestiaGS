#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NitrogenRuntime

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum NitrogenRuntime.ENitrogenGamePhase
// NumValues: 0x0005
enum class ENitrogenGamePhase : uint8
{
	None                                     = 0,
	TeleportingPlayers                       = 1,
	Active                                   = 2,
	Finish                                   = 3,
	MAX                                      = 4,
};

// Enum NitrogenRuntime.ENitrogenScoreReason
// NumValues: 0x000C
enum class ENitrogenScoreReason : uint8
{
	None                                     = 0,
	WorldPickup                              = 1,
	EnemyDeathPickup                         = 2,
	FareReward_Base                          = 3,
	FareReward_Bonus_FastDelivery            = 4,
	FareReward_Bonus_Bulldozer               = 5,
	FareReward_Bonus_StuntDriving            = 6,
	FareReward_Bonus_SafeDriver              = 7,
	FareReward_Bonus_BumperCars              = 8,
	FareReward_Bonus_OffRoad                 = 9,
	FareReward_Bonus_SpeedDemon              = 10,
	ENitrogenScoreReason_MAX                 = 11,
};

// Enum NitrogenRuntime.EFareGenerationMethod
// NumValues: 0x0003
enum class EFareGenerationMethod : uint8
{
	Distance                                 = 0,
	POI                                      = 1,
	MAX                                      = 2,
};

// Enum NitrogenRuntime.ENitrogenBonusCondition
// NumValues: 0x0003
enum class ENitrogenBonusCondition : uint8
{
	MustMeetGoal                             = 0,
	MustNotExceedThreshold                   = 1,
	ENitrogenBonusCondition_MAX              = 2,
};

// Enum NitrogenRuntime.ENitrogenPassengerState
// NumValues: 0x0005
enum class ENitrogenPassengerState : uint8
{
	None                                     = 0,
	HailingCab                               = 1,
	VehicleSeated                            = 2,
	DroppedOff                               = 3,
	ENitrogenPassengerState_MAX              = 4,
};

// Enum NitrogenRuntime.ENitrogenPickupType
// NumValues: 0x0003
enum class ENitrogenPickupType : uint8
{
	None                                     = 0,
	Cashbag                                  = 1,
	MAX                                      = 2,
};

// Enum NitrogenRuntime.ENitrogenTraversePointMode
// NumValues: 0x0003
enum class ENitrogenTraversePointMode : uint8
{
	Pickup                                   = 0,
	DropOff                                  = 1,
	ENitrogenTraversePointMode_MAX           = 2,
};

// ScriptStruct NitrogenRuntime.NitrogenMapIcon
// 0x00A8 (0x00A8 - 0x0000)
struct FNitrogenMapIcon final
{
public:
	struct FSlateBrush                            MapIcon;                                           // 0x0000(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MapIconScale;                                      // 0x0088(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenMapIcon) == 0x000008, "Wrong alignment on FNitrogenMapIcon");
static_assert(sizeof(FNitrogenMapIcon) == 0x0000A8, "Wrong size on FNitrogenMapIcon");
static_assert(offsetof(FNitrogenMapIcon, MapIcon) == 0x000000, "Member 'FNitrogenMapIcon::MapIcon' has a wrong offset!");
static_assert(offsetof(FNitrogenMapIcon, MapIconScale) == 0x000088, "Member 'FNitrogenMapIcon::MapIconScale' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenMapPlacementIcon
// 0x0170 (0x0170 - 0x0000)
struct FNitrogenMapPlacementIcon final
{
public:
	struct FNitrogenMapIcon                       PlacementMapIcon;                                  // 0x0000(0x00A8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenMapIcon                       SquadmatePlacementMapIcon;                         // 0x00A8(0x00A8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumTeamScoreToShow;                            // 0x0150(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenMapPlacementIcon) == 0x000008, "Wrong alignment on FNitrogenMapPlacementIcon");
static_assert(sizeof(FNitrogenMapPlacementIcon) == 0x000170, "Wrong size on FNitrogenMapPlacementIcon");
static_assert(offsetof(FNitrogenMapPlacementIcon, PlacementMapIcon) == 0x000000, "Member 'FNitrogenMapPlacementIcon::PlacementMapIcon' has a wrong offset!");
static_assert(offsetof(FNitrogenMapPlacementIcon, SquadmatePlacementMapIcon) == 0x0000A8, "Member 'FNitrogenMapPlacementIcon::SquadmatePlacementMapIcon' has a wrong offset!");
static_assert(offsetof(FNitrogenMapPlacementIcon, MinimumTeamScoreToShow) == 0x000150, "Member 'FNitrogenMapPlacementIcon::MinimumTeamScoreToShow' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenVehicle
// 0x0010 (0x0010 - 0x0000)
struct FNitrogenVehicle final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerlessStartServerTime;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNitrogenVehicle) == 0x000008, "Wrong alignment on FNitrogenVehicle");
static_assert(sizeof(FNitrogenVehicle) == 0x000010, "Wrong size on FNitrogenVehicle");
static_assert(offsetof(FNitrogenVehicle, Vehicle) == 0x000000, "Member 'FNitrogenVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(FNitrogenVehicle, PlayerlessStartServerTime) == 0x000008, "Member 'FNitrogenVehicle::PlayerlessStartServerTime' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPOITraversePoints
// 0x0010 (0x0010 - 0x0000)
struct FNitrogenPOITraversePoints final
{
public:
	TArray<class ANitrogenTraversePoint*>         TraversePoints;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPOITraversePoints) == 0x000008, "Wrong alignment on FNitrogenPOITraversePoints");
static_assert(sizeof(FNitrogenPOITraversePoints) == 0x000010, "Wrong size on FNitrogenPOITraversePoints");
static_assert(offsetof(FNitrogenPOITraversePoints, TraversePoints) == 0x000000, "Member 'FNitrogenPOITraversePoints::TraversePoints' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPickupItemToDropOnDeath
// 0x00C0 (0x00C0 - 0x0000)
struct FNitrogenPickupItemToDropOnDeath final
{
public:
	struct FScalableFloat                         bEnabled;                                          // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               PickupItemDef;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ANitrogenPickup>            PickupClass;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TimeBeforeDespawn;                                 // 0x0030(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bHidePickupForDyingPlayerTeam;                     // 0x0050(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FScalableFloat>                 PlacementBasedPickupDropCount;                     // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         TossDistance;                                      // 0x0080(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinTeamScoreRequiredToDrop;                        // 0x00A0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPickupItemToDropOnDeath) == 0x000008, "Wrong alignment on FNitrogenPickupItemToDropOnDeath");
static_assert(sizeof(FNitrogenPickupItemToDropOnDeath) == 0x0000C0, "Wrong size on FNitrogenPickupItemToDropOnDeath");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, bEnabled) == 0x000000, "Member 'FNitrogenPickupItemToDropOnDeath::bEnabled' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, PickupItemDef) == 0x000020, "Member 'FNitrogenPickupItemToDropOnDeath::PickupItemDef' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, PickupClass) == 0x000028, "Member 'FNitrogenPickupItemToDropOnDeath::PickupClass' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, TimeBeforeDespawn) == 0x000030, "Member 'FNitrogenPickupItemToDropOnDeath::TimeBeforeDespawn' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, bHidePickupForDyingPlayerTeam) == 0x000050, "Member 'FNitrogenPickupItemToDropOnDeath::bHidePickupForDyingPlayerTeam' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, PlacementBasedPickupDropCount) == 0x000070, "Member 'FNitrogenPickupItemToDropOnDeath::PlacementBasedPickupDropCount' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, TossDistance) == 0x000080, "Member 'FNitrogenPickupItemToDropOnDeath::TossDistance' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupItemToDropOnDeath, MinTeamScoreRequiredToDrop) == 0x0000A0, "Member 'FNitrogenPickupItemToDropOnDeath::MinTeamScoreRequiredToDrop' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPickupCashbagData
// 0x0078 (0x0078 - 0x0000)
struct FNitrogenPickupCashbagData final
{
public:
	EFortRarity                                   ItemRarity;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         SelectionWeight;                                   // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinValue;                                          // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxValue;                                          // 0x0048(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class ANitrogenPickup>            PickupClass;                                       // 0x0068(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFortWorldItemDefinition*               PickupItemDef;                                     // 0x0070(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPickupCashbagData) == 0x000008, "Wrong alignment on FNitrogenPickupCashbagData");
static_assert(sizeof(FNitrogenPickupCashbagData) == 0x000078, "Wrong size on FNitrogenPickupCashbagData");
static_assert(offsetof(FNitrogenPickupCashbagData, ItemRarity) == 0x000000, "Member 'FNitrogenPickupCashbagData::ItemRarity' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupCashbagData, SelectionWeight) == 0x000008, "Member 'FNitrogenPickupCashbagData::SelectionWeight' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupCashbagData, MinValue) == 0x000028, "Member 'FNitrogenPickupCashbagData::MinValue' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupCashbagData, MaxValue) == 0x000048, "Member 'FNitrogenPickupCashbagData::MaxValue' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupCashbagData, PickupClass) == 0x000068, "Member 'FNitrogenPickupCashbagData::PickupClass' has a wrong offset!");
static_assert(offsetof(FNitrogenPickupCashbagData, PickupItemDef) == 0x000070, "Member 'FNitrogenPickupCashbagData::PickupItemDef' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPOIConnectionData
// 0x0068 (0x0068 - 0x0000)
struct FNitrogenPOIConnectionData final
{
public:
	struct FGameplayTag                           POITag;                                            // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         FareValue;                                         // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bEnabled;                                          // 0x0028(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MaxFares;                                          // 0x0048(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPOIConnectionData) == 0x000008, "Wrong alignment on FNitrogenPOIConnectionData");
static_assert(sizeof(FNitrogenPOIConnectionData) == 0x000068, "Wrong size on FNitrogenPOIConnectionData");
static_assert(offsetof(FNitrogenPOIConnectionData, POITag) == 0x000000, "Member 'FNitrogenPOIConnectionData::POITag' has a wrong offset!");
static_assert(offsetof(FNitrogenPOIConnectionData, FareValue) == 0x000008, "Member 'FNitrogenPOIConnectionData::FareValue' has a wrong offset!");
static_assert(offsetof(FNitrogenPOIConnectionData, bEnabled) == 0x000028, "Member 'FNitrogenPOIConnectionData::bEnabled' has a wrong offset!");
static_assert(offsetof(FNitrogenPOIConnectionData, MaxFares) == 0x000048, "Member 'FNitrogenPOIConnectionData::MaxFares' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenFareDistanceValue
// 0x0060 (0x0060 - 0x0000)
struct FNitrogenFareDistanceValue final
{
public:
	struct FScalableFloat                         FareValue;                                         // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         MinimumDistance;                                   // 0x0020(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         NumFares;                                          // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenFareDistanceValue) == 0x000008, "Wrong alignment on FNitrogenFareDistanceValue");
static_assert(sizeof(FNitrogenFareDistanceValue) == 0x000060, "Wrong size on FNitrogenFareDistanceValue");
static_assert(offsetof(FNitrogenFareDistanceValue, FareValue) == 0x000000, "Member 'FNitrogenFareDistanceValue::FareValue' has a wrong offset!");
static_assert(offsetof(FNitrogenFareDistanceValue, MinimumDistance) == 0x000020, "Member 'FNitrogenFareDistanceValue::MinimumDistance' has a wrong offset!");
static_assert(offsetof(FNitrogenFareDistanceValue, NumFares) == 0x000040, "Member 'FNitrogenFareDistanceValue::NumFares' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPOICombinationData
// 0x0020 (0x0020 - 0x0000)
struct FNitrogenPOICombinationData final
{
public:
	TArray<struct FNitrogenPOIConnectionData>     POIConnections;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNitrogenFareDistanceValue>     FareDistanceValues;                                // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPOICombinationData) == 0x000008, "Wrong alignment on FNitrogenPOICombinationData");
static_assert(sizeof(FNitrogenPOICombinationData) == 0x000020, "Wrong size on FNitrogenPOICombinationData");
static_assert(offsetof(FNitrogenPOICombinationData, POIConnections) == 0x000000, "Member 'FNitrogenPOICombinationData::POIConnections' has a wrong offset!");
static_assert(offsetof(FNitrogenPOICombinationData, FareDistanceValues) == 0x000010, "Member 'FNitrogenPOICombinationData::FareDistanceValues' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPOICombinationMap
// 0x0078 (0x0078 - 0x0000)
struct FNitrogenPOICombinationMap final
{
public:
	struct FScalableFloat                         bEnabled;                                          // 0x0000(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FNitrogenPOICombinationData> POICombinationMap;                                 // 0x0020(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EFareGenerationMethod                         FareGenerationMethod;                              // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422C[0x7];                                     // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNitrogenPOICombinationMap) == 0x000008, "Wrong alignment on FNitrogenPOICombinationMap");
static_assert(sizeof(FNitrogenPOICombinationMap) == 0x000078, "Wrong size on FNitrogenPOICombinationMap");
static_assert(offsetof(FNitrogenPOICombinationMap, bEnabled) == 0x000000, "Member 'FNitrogenPOICombinationMap::bEnabled' has a wrong offset!");
static_assert(offsetof(FNitrogenPOICombinationMap, POICombinationMap) == 0x000020, "Member 'FNitrogenPOICombinationMap::POICombinationMap' has a wrong offset!");
static_assert(offsetof(FNitrogenPOICombinationMap, FareGenerationMethod) == 0x000070, "Member 'FNitrogenPOICombinationMap::FareGenerationMethod' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenTeamData
// 0x0098 (0x0098 - 0x0000)
struct FNitrogenTeamData final
{
public:
	uint32                                        UpdateId;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENitrogenScoreReason                          ScoreReason;                                       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           ScoringPlayer;                                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TeamId;                                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422E[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamPlacement;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422F[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortTeamInfoAthena*                    TeamInfoAthena;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ENitrogenScoreReason, int32>             ReasonToScoreMap;                                  // 0x0028(0x0050)(RepSkip, NativeAccessSpecifierPublic)
	TArray<class AFortPlayerStateAthena*>         TeamPlayerStates;                                  // 0x0078(0x0010)(ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         TeamPlayerAccountIds;                              // 0x0088(0x0010)(ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenTeamData) == 0x000008, "Wrong alignment on FNitrogenTeamData");
static_assert(sizeof(FNitrogenTeamData) == 0x000098, "Wrong size on FNitrogenTeamData");
static_assert(offsetof(FNitrogenTeamData, UpdateId) == 0x000000, "Member 'FNitrogenTeamData::UpdateId' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, ScoreReason) == 0x000004, "Member 'FNitrogenTeamData::ScoreReason' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, ScoringPlayer) == 0x000008, "Member 'FNitrogenTeamData::ScoringPlayer' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamId) == 0x000010, "Member 'FNitrogenTeamData::TeamId' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamPlacement) == 0x000014, "Member 'FNitrogenTeamData::TeamPlacement' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamScore) == 0x000018, "Member 'FNitrogenTeamData::TeamScore' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamInfoAthena) == 0x000020, "Member 'FNitrogenTeamData::TeamInfoAthena' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, ReasonToScoreMap) == 0x000028, "Member 'FNitrogenTeamData::ReasonToScoreMap' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamPlayerStates) == 0x000078, "Member 'FNitrogenTeamData::TeamPlayerStates' has a wrong offset!");
static_assert(offsetof(FNitrogenTeamData, TeamPlayerAccountIds) == 0x000088, "Member 'FNitrogenTeamData::TeamPlayerAccountIds' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenRespawnData
// 0x0010 (0x0010 - 0x0000)
struct FNitrogenRespawnData final
{
public:
	class AFortSquadStart*                        RespawnSquadStart;                                 // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4230[0x8];                                     // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNitrogenRespawnData) == 0x000008, "Wrong alignment on FNitrogenRespawnData");
static_assert(sizeof(FNitrogenRespawnData) == 0x000010, "Wrong size on FNitrogenRespawnData");
static_assert(offsetof(FNitrogenRespawnData, RespawnSquadStart) == 0x000000, "Member 'FNitrogenRespawnData::RespawnSquadStart' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenSpawnData
// 0x0018 (0x0018 - 0x0000)
struct FNitrogenSpawnData final
{
public:
	uint8                                         SquadId;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4231[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AdditionalViewpointLocation;                       // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortSquadStart*                        SpawnSquadStart;                                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenSpawnData) == 0x000008, "Wrong alignment on FNitrogenSpawnData");
static_assert(sizeof(FNitrogenSpawnData) == 0x000018, "Wrong size on FNitrogenSpawnData");
static_assert(offsetof(FNitrogenSpawnData, SquadId) == 0x000000, "Member 'FNitrogenSpawnData::SquadId' has a wrong offset!");
static_assert(offsetof(FNitrogenSpawnData, AdditionalViewpointLocation) == 0x000004, "Member 'FNitrogenSpawnData::AdditionalViewpointLocation' has a wrong offset!");
static_assert(offsetof(FNitrogenSpawnData, SpawnSquadStart) == 0x000010, "Member 'FNitrogenSpawnData::SpawnSquadStart' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenPlayerGameplayAbilityOption
// 0x0028 (0x0028 - 0x0000)
struct FNitrogenPlayerGameplayAbilityOption final
{
public:
	TSubclassOf<class UFortGameplayAbility>       GameplayAbility;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         bEnabled;                                          // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenPlayerGameplayAbilityOption) == 0x000008, "Wrong alignment on FNitrogenPlayerGameplayAbilityOption");
static_assert(sizeof(FNitrogenPlayerGameplayAbilityOption) == 0x000028, "Wrong size on FNitrogenPlayerGameplayAbilityOption");
static_assert(offsetof(FNitrogenPlayerGameplayAbilityOption, GameplayAbility) == 0x000000, "Member 'FNitrogenPlayerGameplayAbilityOption::GameplayAbility' has a wrong offset!");
static_assert(offsetof(FNitrogenPlayerGameplayAbilityOption, bEnabled) == 0x000008, "Member 'FNitrogenPlayerGameplayAbilityOption::bEnabled' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenBonusStat
// 0x0130 (0x0130 - 0x0000)
struct FNitrogenBonusStat final
{
public:
	struct FScalableFloat                         bEnabled;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AwardPoints;                                       // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENitrogenBonusCondition                       AwardCondition;                                    // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENitrogenScoreReason                          ScoreReason;                                       // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4232[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MustMeetGoal_BonusCompleteDescription;             // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   MustNotExceedThreshold_BonusFailureDescription;    // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SkinGameplayTag;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TipEmojiTexture;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FarePortraitTexture;                               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Goal;                                              // 0x00A0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FScalableFloat                         Threshold;                                         // 0x00C0(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class AFortPlayerState*, float>          Values;                                            // 0x00E0(0x0050)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FNitrogenBonusStat) == 0x000008, "Wrong alignment on FNitrogenBonusStat");
static_assert(sizeof(FNitrogenBonusStat) == 0x000130, "Wrong size on FNitrogenBonusStat");
static_assert(offsetof(FNitrogenBonusStat, bEnabled) == 0x000000, "Member 'FNitrogenBonusStat::bEnabled' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, AwardPoints) == 0x000020, "Member 'FNitrogenBonusStat::AwardPoints' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, AwardCondition) == 0x000024, "Member 'FNitrogenBonusStat::AwardCondition' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, ScoreReason) == 0x000025, "Member 'FNitrogenBonusStat::ScoreReason' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, Name) == 0x000028, "Member 'FNitrogenBonusStat::Name' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, Description) == 0x000040, "Member 'FNitrogenBonusStat::Description' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, MustMeetGoal_BonusCompleteDescription) == 0x000058, "Member 'FNitrogenBonusStat::MustMeetGoal_BonusCompleteDescription' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, MustNotExceedThreshold_BonusFailureDescription) == 0x000070, "Member 'FNitrogenBonusStat::MustNotExceedThreshold_BonusFailureDescription' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, SkinGameplayTag) == 0x000088, "Member 'FNitrogenBonusStat::SkinGameplayTag' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, TipEmojiTexture) == 0x000090, "Member 'FNitrogenBonusStat::TipEmojiTexture' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, FarePortraitTexture) == 0x000098, "Member 'FNitrogenBonusStat::FarePortraitTexture' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, Goal) == 0x0000A0, "Member 'FNitrogenBonusStat::Goal' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, Threshold) == 0x0000C0, "Member 'FNitrogenBonusStat::Threshold' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStat, Values) == 0x0000E0, "Member 'FNitrogenBonusStat::Values' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenBonusStats
// 0x0738 (0x0738 - 0x0000)
struct FNitrogenBonusStats final
{
public:
	struct FNitrogenBonusStat                     VehicleBumpIntoVehicles;                           // 0x0000(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenBonusStat                     VehicleBuildingDestruction;                        // 0x0130(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenBonusStat                     VehicleDamageTaken;                                // 0x0260(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenBonusStat                     VehicleAirTime;                                    // 0x0390(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenBonusStat                     VehicleBoostDrivingTime;                           // 0x04C0(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FNitrogenBonusStat                     VehicleOffRoadTime;                                // 0x05F0(0x0130)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_4233[0x18];                                    // 0x0720(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNitrogenBonusStats) == 0x000008, "Wrong alignment on FNitrogenBonusStats");
static_assert(sizeof(FNitrogenBonusStats) == 0x000738, "Wrong size on FNitrogenBonusStats");
static_assert(offsetof(FNitrogenBonusStats, VehicleBumpIntoVehicles) == 0x000000, "Member 'FNitrogenBonusStats::VehicleBumpIntoVehicles' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStats, VehicleBuildingDestruction) == 0x000130, "Member 'FNitrogenBonusStats::VehicleBuildingDestruction' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStats, VehicleDamageTaken) == 0x000260, "Member 'FNitrogenBonusStats::VehicleDamageTaken' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStats, VehicleAirTime) == 0x000390, "Member 'FNitrogenBonusStats::VehicleAirTime' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStats, VehicleBoostDrivingTime) == 0x0004C0, "Member 'FNitrogenBonusStats::VehicleBoostDrivingTime' has a wrong offset!");
static_assert(offsetof(FNitrogenBonusStats, VehicleOffRoadTime) == 0x0005F0, "Member 'FNitrogenBonusStats::VehicleOffRoadTime' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenFareValueMeshTransformInfo
// 0x0010 (0x0010 - 0x0000)
struct FNitrogenFareValueMeshTransformInfo final
{
public:
	TArray<struct FTransform>                     MeshTransforms;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenFareValueMeshTransformInfo) == 0x000008, "Wrong alignment on FNitrogenFareValueMeshTransformInfo");
static_assert(sizeof(FNitrogenFareValueMeshTransformInfo) == 0x000010, "Wrong size on FNitrogenFareValueMeshTransformInfo");
static_assert(offsetof(FNitrogenFareValueMeshTransformInfo, MeshTransforms) == 0x000000, "Member 'FNitrogenFareValueMeshTransformInfo::MeshTransforms' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenFareRepData
// 0x0018 (0x0018 - 0x0000)
struct FNitrogenFareRepData final
{
public:
	class ANitrogenFare*                          CurrentFare;                                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardedPoints;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentBonusIndex;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentBonusValue;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNitrogenFareRepData) == 0x000008, "Wrong alignment on FNitrogenFareRepData");
static_assert(sizeof(FNitrogenFareRepData) == 0x000018, "Wrong size on FNitrogenFareRepData");
static_assert(offsetof(FNitrogenFareRepData, CurrentFare) == 0x000000, "Member 'FNitrogenFareRepData::CurrentFare' has a wrong offset!");
static_assert(offsetof(FNitrogenFareRepData, AwardedPoints) == 0x000008, "Member 'FNitrogenFareRepData::AwardedPoints' has a wrong offset!");
static_assert(offsetof(FNitrogenFareRepData, StartTime) == 0x00000C, "Member 'FNitrogenFareRepData::StartTime' has a wrong offset!");
static_assert(offsetof(FNitrogenFareRepData, CurrentBonusIndex) == 0x000010, "Member 'FNitrogenFareRepData::CurrentBonusIndex' has a wrong offset!");
static_assert(offsetof(FNitrogenFareRepData, CurrentBonusValue) == 0x000014, "Member 'FNitrogenFareRepData::CurrentBonusValue' has a wrong offset!");

// ScriptStruct NitrogenRuntime.NitrogenVehicleBoostFXVariable
// 0x0018 (0x0018 - 0x0000)
struct FNitrogenVehicleBoostFXVariable final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4234[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNitrogenVehicleBoostFXVariable) == 0x000008, "Wrong alignment on FNitrogenVehicleBoostFXVariable");
static_assert(sizeof(FNitrogenVehicleBoostFXVariable) == 0x000018, "Wrong size on FNitrogenVehicleBoostFXVariable");
static_assert(offsetof(FNitrogenVehicleBoostFXVariable, Name) == 0x000000, "Member 'FNitrogenVehicleBoostFXVariable::Name' has a wrong offset!");
static_assert(offsetof(FNitrogenVehicleBoostFXVariable, Value) == 0x000010, "Member 'FNitrogenVehicleBoostFXVariable::Value' has a wrong offset!");

}

