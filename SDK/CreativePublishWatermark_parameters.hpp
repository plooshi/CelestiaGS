#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CreativePublishWatermark

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function CreativePublishWatermark.CreativePublishWatermark_C.SetTextCollapseIfDefault
// 0x0048 (0x0048 - 0x0000)
struct CreativePublishWatermark_C_SetTextCollapseIfDefault final
{
public:
	class UTextBlock*                             Text_Widget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 InputText;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 DefaultText;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6449[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
};
static_assert(alignof(CreativePublishWatermark_C_SetTextCollapseIfDefault) == 0x000008, "Wrong alignment on CreativePublishWatermark_C_SetTextCollapseIfDefault");
static_assert(sizeof(CreativePublishWatermark_C_SetTextCollapseIfDefault) == 0x000048, "Wrong size on CreativePublishWatermark_C_SetTextCollapseIfDefault");
static_assert(offsetof(CreativePublishWatermark_C_SetTextCollapseIfDefault, Text_Widget) == 0x000000, "Member 'CreativePublishWatermark_C_SetTextCollapseIfDefault::Text_Widget' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_SetTextCollapseIfDefault, InputText) == 0x000008, "Member 'CreativePublishWatermark_C_SetTextCollapseIfDefault::InputText' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_SetTextCollapseIfDefault, DefaultText) == 0x000018, "Member 'CreativePublishWatermark_C_SetTextCollapseIfDefault::DefaultText' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_SetTextCollapseIfDefault, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000028, "Member 'CreativePublishWatermark_C_SetTextCollapseIfDefault::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_SetTextCollapseIfDefault, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'CreativePublishWatermark_C_SetTextCollapseIfDefault::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function CreativePublishWatermark.CreativePublishWatermark_C.Update Watermark
// 0x0078 (0x0078 - 0x0000)
struct CreativePublishWatermark_C_Update_Watermark final
{
public:
	class AFortVolume*                            Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CreatorName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CreativeMnemonic;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class AFortVolumeManager*                     CallFunc_GetVolumeManager_OutVolumeManager;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVolumeValidityResult                         CallFunc_GetVolumeManager_OutIsValid;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_644A[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ShouldShowPublishWatermarkForVolume_CreatorName; // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_ShouldShowPublishWatermarkForVolume_CreativeMnemonic; // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_ShouldShowPublishWatermarkForVolume_Title; // 0x0058(0x0018)()
	bool                                          CallFunc_ShouldShowPublishWatermarkForVolume_ReturnValue; // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(CreativePublishWatermark_C_Update_Watermark) == 0x000008, "Wrong alignment on CreativePublishWatermark_C_Update_Watermark");
static_assert(sizeof(CreativePublishWatermark_C_Update_Watermark) == 0x000078, "Wrong size on CreativePublishWatermark_C_Update_Watermark");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, Volume) == 0x000000, "Member 'CreativePublishWatermark_C_Update_Watermark::Volume' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CreatorName) == 0x000008, "Member 'CreativePublishWatermark_C_Update_Watermark::CreatorName' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CreativeMnemonic) == 0x000018, "Member 'CreativePublishWatermark_C_Update_Watermark::CreativeMnemonic' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_GetVolumeManager_OutVolumeManager) == 0x000028, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_GetVolumeManager_OutVolumeManager' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_GetVolumeManager_OutIsValid) == 0x000030, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_GetVolumeManager_OutIsValid' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, K2Node_SwitchEnum_CmpSuccess) == 0x000032, "Member 'CreativePublishWatermark_C_Update_Watermark::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_ShouldShowPublishWatermarkForVolume_CreatorName) == 0x000038, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_ShouldShowPublishWatermarkForVolume_CreatorName' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_ShouldShowPublishWatermarkForVolume_CreativeMnemonic) == 0x000048, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_ShouldShowPublishWatermarkForVolume_CreativeMnemonic' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_ShouldShowPublishWatermarkForVolume_Title) == 0x000058, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_ShouldShowPublishWatermarkForVolume_Title' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_Update_Watermark, CallFunc_ShouldShowPublishWatermarkForVolume_ReturnValue) == 0x000070, "Member 'CreativePublishWatermark_C_Update_Watermark::CallFunc_ShouldShowPublishWatermarkForVolume_ReturnValue' has a wrong offset!");

// Function CreativePublishWatermark.CreativePublishWatermark_C.OnLinkedVolumeChanged
// 0x0008 (0x0008 - 0x0000)
struct CreativePublishWatermark_C_OnLinkedVolumeChanged final
{
public:
	class AFortVolume*                            Volume;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CreativePublishWatermark_C_OnLinkedVolumeChanged) == 0x000008, "Wrong alignment on CreativePublishWatermark_C_OnLinkedVolumeChanged");
static_assert(sizeof(CreativePublishWatermark_C_OnLinkedVolumeChanged) == 0x000008, "Wrong size on CreativePublishWatermark_C_OnLinkedVolumeChanged");
static_assert(offsetof(CreativePublishWatermark_C_OnLinkedVolumeChanged, Volume) == 0x000000, "Member 'CreativePublishWatermark_C_OnLinkedVolumeChanged::Volume' has a wrong offset!");

// Function CreativePublishWatermark.CreativePublishWatermark_C.ExecuteUbergraph_CreativePublishWatermark
// 0x0058 (0x0058 - 0x0000)
struct CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_644B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            K2Node_CustomEvent_Volume;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AFortVolume* Volume)>    K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_644C[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena_1; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_644D[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            CallFunc_GetCreativePlotLinkedVolume_ReturnValue;  // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark) == 0x000008, "Wrong alignment on CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark");
static_assert(sizeof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark) == 0x000058, "Wrong size on CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, EntryPoint) == 0x000000, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::EntryPoint' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_CustomEvent_Volume) == 0x000008, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_CustomEvent_Volume' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, CallFunc_GetOwningPlayer_ReturnValue) == 0x000020, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000028, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000030, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_DynamicCast_AsFort_Player_Controller_Athena_1) == 0x000040, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_DynamicCast_AsFort_Player_Controller_Athena_1' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, K2Node_DynamicCast_bSuccess_1) == 0x000048, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark, CallFunc_GetCreativePlotLinkedVolume_ReturnValue) == 0x000050, "Member 'CreativePublishWatermark_C_ExecuteUbergraph_CreativePublishWatermark::CallFunc_GetCreativePlotLinkedVolume_ReturnValue' has a wrong offset!");

}

