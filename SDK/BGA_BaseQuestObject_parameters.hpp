#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_BaseQuestObject

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.ExecuteUbergraph_BGA_BaseQuestObject
// 0x00A8 (0x00A8 - 0x0000)
struct BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D55[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player_6;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player_5;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player_4;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_6;     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AchievedCount_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_RequiredCount_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player_3;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_5;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player_2;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Inialized;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D56[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_CustomEvent_Player_1;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Achieved_Count_1;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Goal_Count_1;                   // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_4;     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_FullyInitalized;        // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D57[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_3;     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_2;     // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_AchievedCount;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_RequiredCount;          // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_Player;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Achieved_Count;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Goal_Count;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_ComponentBoundEvent_PlayerController_1;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject");
static_assert(sizeof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject) == 0x0000A8, "Wrong size on BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, EntryPoint) == 0x000000, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::EntryPoint' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController) == 0x000008, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_6) == 0x000010, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_6' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_5) == 0x000018, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_5' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_4) == 0x000020, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_4' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_6) == 0x000028, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_6' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_AchievedCount_1) == 0x000030, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_AchievedCount_1' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_RequiredCount_1) == 0x000034, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_RequiredCount_1' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_3) == 0x000038, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_3' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_5) == 0x000040, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_5' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_2) == 0x000048, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_2' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Inialized) == 0x000050, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Inialized' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player_1) == 0x000058, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player_1' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Achieved_Count_1) == 0x000060, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Achieved_Count_1' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Goal_Count_1) == 0x000064, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Goal_Count_1' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_4) == 0x000068, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_4' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_FullyInitalized) == 0x000070, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_FullyInitalized' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_3) == 0x000078, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_3' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_2) == 0x000080, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_2' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_AchievedCount) == 0x000088, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_AchievedCount' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_RequiredCount) == 0x00008C, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_RequiredCount' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Player) == 0x000090, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Achieved_Count) == 0x000098, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Achieved_Count' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_CustomEvent_Goal_Count) == 0x00009C, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_CustomEvent_Goal_Count' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject, K2Node_ComponentBoundEvent_PlayerController_1) == 0x0000A0, "Member 'BGA_BaseQuestObject_C_ExecuteUbergraph_BGA_BaseQuestObject::K2Node_ComponentBoundEvent_PlayerController_1' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature::PlayerController' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature::PlayerController' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleCustomUpdateQuest
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_HandleCustomUpdateQuest final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Achieved_Count;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Goal_Count;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleCustomUpdateQuest) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleCustomUpdateQuest");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleCustomUpdateQuest) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_HandleCustomUpdateQuest");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateQuest, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateQuest::Player' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateQuest, Achieved_Count) == 0x000008, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateQuest::Achieved_Count' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateQuest, Goal_Count) == 0x00000C, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateQuest::Goal_Count' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AchievedCount;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredCount;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature::PlayerController' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature, AchievedCount) == 0x000008, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature::AchievedCount' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature, RequiredCount) == 0x00000C, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_0_QuestComponentCustomUpdatedOjective__DelegateSignature::RequiredCount' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_3_SimpleQuestComponentDelegate__DelegateSignature::PlayerController' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FullyInitalized;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature::PlayerController' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature, FullyInitalized) == 0x000008, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_QuestComponentCustomVisualsPassed__DelegateSignature::FullyInitalized' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleCustomUpdateObjective
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_HandleCustomUpdateObjective final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Achieved_Count;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Goal_Count;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleCustomUpdateObjective) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleCustomUpdateObjective");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleCustomUpdateObjective) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_HandleCustomUpdateObjective");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateObjective, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateObjective::Player' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateObjective, Achieved_Count) == 0x000008, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateObjective::Achieved_Count' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomUpdateObjective, Goal_Count) == 0x00000C, "Member 'BGA_BaseQuestObject_C_HandleCustomUpdateObjective::Goal_Count' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleCustomSetVisualsToPassed
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inialized;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed::Player' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed, Inialized) == 0x000008, "Member 'BGA_BaseQuestObject_C_HandleCustomSetVisualsToPassed::Inialized' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_5_SimpleQuestComponentDelegate__DelegateSignature::PlayerController' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleCustomSetVisualsToFailed
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleCustomSetVisualsToFailed::Player' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature final
{
public:
	class AFortPlayerController*                  PlayerController;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AchievedCount;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RequiredCount;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature");
static_assert(sizeof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature) == 0x000010, "Wrong size on BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature, PlayerController) == 0x000000, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature::PlayerController' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature, AchievedCount) == 0x000008, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature::AchievedCount' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature, RequiredCount) == 0x00000C, "Member 'BGA_BaseQuestObject_C_BndEvt__QuestComponent_K2Node_ComponentBoundEvent_6_QuestComponentCustomUpdatedOjective__DelegateSignature::RequiredCount' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleQuestNotReady
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_HandleQuestNotReady final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleQuestNotReady) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleQuestNotReady");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleQuestNotReady) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_HandleQuestNotReady");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleQuestNotReady, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleQuestNotReady::Player' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleQuestComponentSuccessEvent
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleQuestComponentSuccessEvent::Player' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.HandleQuestReady
// 0x0008 (0x0008 - 0x0000)
struct BGA_BaseQuestObject_C_HandleQuestReady final
{
public:
	class AFortPlayerController*                  Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_BaseQuestObject_C_HandleQuestReady) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_HandleQuestReady");
static_assert(sizeof(BGA_BaseQuestObject_C_HandleQuestReady) == 0x000008, "Wrong size on BGA_BaseQuestObject_C_HandleQuestReady");
static_assert(offsetof(BGA_BaseQuestObject_C_HandleQuestReady, Player) == 0x000000, "Member 'BGA_BaseQuestObject_C_HandleQuestReady::Player' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.ShouldDie
// 0x0020 (0x0020 - 0x0000)
struct BGA_BaseQuestObject_C_ShouldDie final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D58[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            EventInstigator;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_BaseQuestObject_C_ShouldDie) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_ShouldDie");
static_assert(sizeof(BGA_BaseQuestObject_C_ShouldDie) == 0x000020, "Wrong size on BGA_BaseQuestObject_C_ShouldDie");
static_assert(offsetof(BGA_BaseQuestObject_C_ShouldDie, Damage) == 0x000000, "Member 'BGA_BaseQuestObject_C_ShouldDie::Damage' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ShouldDie, EventInstigator) == 0x000008, "Member 'BGA_BaseQuestObject_C_ShouldDie::EventInstigator' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ShouldDie, DamageCauser) == 0x000010, "Member 'BGA_BaseQuestObject_C_ShouldDie::DamageCauser' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_ShouldDie, ReturnValue) == 0x000018, "Member 'BGA_BaseQuestObject_C_ShouldDie::ReturnValue' has a wrong offset!");

// Function BGA_BaseQuestObject.BGA_BaseQuestObject_C.BlueprintCanInteract
// 0x0030 (0x0030 - 0x0000)
struct BGA_BaseQuestObject_C_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETInteractionType                             InteractionType;                                   // 0x0009(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D59[0x5];                                     // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerAthena*            LocalFortPlayerController;                         // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInteractable_ReturnValue;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_BaseQuestObject_C_BlueprintCanInteract) == 0x000008, "Wrong alignment on BGA_BaseQuestObject_C_BlueprintCanInteract");
static_assert(sizeof(BGA_BaseQuestObject_C_BlueprintCanInteract) == 0x000030, "Wrong size on BGA_BaseQuestObject_C_BlueprintCanInteract");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, InteractionBeingAttempted) == 0x000008, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, InteractionType) == 0x000009, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, ReturnValue) == 0x00000A, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, LocalFortPlayerController) == 0x000010, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::LocalFortPlayerController' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, CallFunc_GetController_ReturnValue) == 0x000018, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000020, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_BaseQuestObject_C_BlueprintCanInteract, CallFunc_IsInteractable_ReturnValue) == 0x000029, "Member 'BGA_BaseQuestObject_C_BlueprintCanInteract::CallFunc_IsInteractable_ReturnValue' has a wrong offset!");

}

