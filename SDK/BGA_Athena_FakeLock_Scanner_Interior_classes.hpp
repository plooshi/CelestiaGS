#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_FakeLock_Scanner_Interior

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_Athena_Lock_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_FakeLock_Scanner_Interior.BGA_Athena_FakeLock_Scanner_Interior_C
// 0x0108 (0x08B8 - 0x07B0)
class ABGA_Athena_FakeLock_Scanner_Interior_C final : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAthena_FactionSelection_AlterEgo_C*    Athena_FactionSelection_AlterEgo;                  // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Lock;                                              // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortLinkToActorComponent*              FortLinkToActor;                                   // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionCollision;                              // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          CanFirstInteract;                                  // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CanSecondInteract;                                 // 0x07E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80E8[0x6];                                     // 0x07EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FirstInteractText;                                 // 0x07F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SecondInteractText;                                // 0x0808(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         FirstInteractTime;                                 // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondInteractTime;                                // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              LastInteractingPawn;                               // 0x0828(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxInteractAngle;                                  // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_80E9[0x4];                                     // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_SelfInteractEnabled;                           // 0x0838(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnUnlockedDispatcher;                              // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnLockedDispatcher;                                // 0x0868(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          AutoAttachToParentActors;                          // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_80EA[0x7];                                     // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABGA_Athena_Lock_Scanner_C*             AttachedScanner;                                   // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Pass;                                           // 0x0888(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Lock;                                        // 0x0890(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_Unlock;                                      // 0x08A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Athena_Lock                              FakeLockUseState;                                  // 0x08B0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          ActiveInSpyLTM;                                    // 0x08B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DestroyInNonSpyLTM;                                // 0x08B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnUnlockedDispatcher__DelegateSignature();
	void OnLockedDispatcher__DelegateSignature();
	void ExecuteUbergraph_BGA_Athena_FakeLock_Scanner_Interior(int32 EntryPoint);
	void OnFirstInteract();
	void SetLockVisuals(bool Usable);
	void ReceiveBeginPlay();
	void OnRealLockLocked();
	void OnRealLockUnlock();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void HideAndKill();
	void BndEvt__FortLinkToActor_K2Node_ComponentBoundEvent_0_OnLinkedActorDestroyed__DelegateSignature();
	void OnReady_99386E864CAAA4D78E0E5C8EE9818FB6(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void UserConstructionScript();
	void OnRep_FakeLockUseState();

	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_FakeLock_Scanner_Interior_C">();
	}
	static class ABGA_Athena_FakeLock_Scanner_Interior_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_FakeLock_Scanner_Interior_C>();
	}
};
static_assert(alignof(ABGA_Athena_FakeLock_Scanner_Interior_C) == 0x000008, "Wrong alignment on ABGA_Athena_FakeLock_Scanner_Interior_C");
static_assert(sizeof(ABGA_Athena_FakeLock_Scanner_Interior_C) == 0x0008B8, "Wrong size on ABGA_Athena_FakeLock_Scanner_Interior_C");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, UberGraphFrame) == 0x0007B0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Scene) == 0x0007B8, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Scene' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Athena_FactionSelection_AlterEgo) == 0x0007C0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Athena_FactionSelection_AlterEgo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, PointLight) == 0x0007C8, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Lock) == 0x0007D0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Lock' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, FortLinkToActor) == 0x0007D8, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::FortLinkToActor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, InteractionCollision) == 0x0007E0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::InteractionCollision' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, CanFirstInteract) == 0x0007E8, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::CanFirstInteract' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, CanSecondInteract) == 0x0007E9, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::CanSecondInteract' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, FirstInteractText) == 0x0007F0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::FirstInteractText' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, SecondInteractText) == 0x000808, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::SecondInteractText' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, FirstInteractTime) == 0x000820, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::FirstInteractTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, SecondInteractTime) == 0x000824, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::SecondInteractTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, LastInteractingPawn) == 0x000828, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::LastInteractingPawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, MaxInteractAngle) == 0x000830, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::MaxInteractAngle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Row_SelfInteractEnabled) == 0x000838, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Row_SelfInteractEnabled' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, OnUnlockedDispatcher) == 0x000858, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::OnUnlockedDispatcher' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, OnLockedDispatcher) == 0x000868, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::OnLockedDispatcher' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, AutoAttachToParentActors) == 0x000878, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::AutoAttachToParentActors' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, AttachedScanner) == 0x000880, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::AttachedScanner' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, GC_Pass) == 0x000888, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::GC_Pass' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Color_Lock) == 0x000890, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Color_Lock' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, Color_Unlock) == 0x0008A0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::Color_Unlock' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, FakeLockUseState) == 0x0008B0, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::FakeLockUseState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, ActiveInSpyLTM) == 0x0008B1, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::ActiveInSpyLTM' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_FakeLock_Scanner_Interior_C, DestroyInNonSpyLTM) == 0x0008B2, "Member 'ABGA_Athena_FakeLock_Scanner_Interior_C::DestroyInNonSpyLTM' has a wrong offset!");

}

