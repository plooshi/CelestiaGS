#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShoppingCartVehicleSK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass ShoppingCartVehicleSK.ShoppingCartVehicleSK_C
// 0x03A0 (0x1BB0 - 0x1810)
class AShoppingCartVehicleSK_C final : public AFortAthenaSKPushVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1810(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPassengerImpulseWeaponComponent_C*     ImpulseComponent;                                  // 0x1818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x1820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PawnStepUpCollision_Bottom;                        // 0x1828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapTrigger;                                    // 0x1830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PawnStepUpCollision;                               // 0x1838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x1840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudio;                                // 0x1848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioScrape;                                       // 0x1850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioInAir;                                        // 0x1858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioSkid;                                         // 0x1860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioCoast;                                        // 0x1868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovement;                                     // 0x1870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x1888(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPickup*                            FortPickup;                                        // 0x1898(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x18A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x18A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x18A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           CameraShake;                                       // 0x18B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x18B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeed;                                   // 0x18C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMin;                           // 0x18C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMax;                           // 0x18C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeYawFrequencyMultipier;                  // 0x18CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMin;                                      // 0x18D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMax;                                      // 0x18D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAirSmoothed;                                     // 0x18D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeSpeedCurvePow;                          // 0x18DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothedSpringCompression;                         // 0x18E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_891F[0x4];                                     // 0x18E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ScreenShakeMult;                                   // 0x18E8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         RumbleMulti;                                       // 0x1908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SparksRumbleMulti;                                 // 0x190C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCoastingCameraShake;                              // 0x1910(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8920[0x7];                                     // 0x1911(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x1928(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x1929(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8921[0x6];                                     // 0x192A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x1930(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PassengerCameraShakeMultiplier;                    // 0x1950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8922[0x4];                                     // 0x1954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           PassengerCameraShake;                              // 0x1958(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PassengerPlayerController;                         // 0x1960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x1968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjBackendName;                                    // 0x1970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1978(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x1980(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           HitPlayerCue;                                      // 0x1A38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitFiendCue;                                       // 0x1A40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         WheelDustFX_Cascade;                               // 0x1A48(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          WheelDustFX_Niagara;                               // 0x1A70(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFXSystemComponent*                     WheelDustFX_Component;                             // 0x1A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         OnDeathFX_Cascade;                                 // 0x1AA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          OnDeathFX_Niagara;                                 // 0x1AC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFXSystemAsset*                         OnDeathFX_System;                                  // 0x1AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         HitPlayerFX_Cascade;                               // 0x1AF8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          HitPlayerFX_Niagara;                               // 0x1B20(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFXSystemAsset*                         HitPlayerFX_System;                                // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UParticleSystem>         HitDustFX_Cascade;                                 // 0x1B50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UNiagaraSystem>          HitDustFX_Niagara;                                 // 0x1B78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFXSystemAsset*                         HitDustFX_System;                                  // 0x1BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ShoppingCartVehicleSK(int32 EntryPoint);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StopCoastCameraShake();
	void StartDriverCameraShake();
	void StartDriverRumble();
	void StopDriverRumble();
	void OnIsSprintingChanged();
	void OnIsCoastingChanged();
	void OnPassengerFiredImpulseWeapon();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void ReceiveBeginPlay();
	void OnStopTick();
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnSpringCompression();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Update_Damage_State(float Damage);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void PedalForceFeedback();
	void DropItems();
	void AttachToCart();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void UpdateMovementCosmeticParameters();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveTick(float DeltaSeconds);
	void OnLoaded_D134B88042A0DBD581371180D9559024(class UObject* Loaded);
	void OnLoaded_D134B88042A0DBD581371180F90B73AD(class UObject* Loaded);
	void OnLoaded_D134B88042A0DBD581371180351C9FE6(class UObject* Loaded);
	void OnLoaded_D134B88042A0DBD581371180874944B4(class UObject* Loaded);
	void UserConstructionScript();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude);
	void OnRep_CorrectiveImpulse();
	void IsLocalPlayerRiding(bool* Result);
	void UpdateDynamicCameraShake();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShoppingCartVehicleSK_C">();
	}
	static class AShoppingCartVehicleSK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShoppingCartVehicleSK_C>();
	}
};
static_assert(alignof(AShoppingCartVehicleSK_C) == 0x000010, "Wrong alignment on AShoppingCartVehicleSK_C");
static_assert(sizeof(AShoppingCartVehicleSK_C) == 0x001BB0, "Wrong size on AShoppingCartVehicleSK_C");
static_assert(offsetof(AShoppingCartVehicleSK_C, UberGraphFrame) == 0x001810, "Member 'AShoppingCartVehicleSK_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ImpulseComponent) == 0x001818, "Member 'AShoppingCartVehicleSK_C::ImpulseComponent' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, TextRender) == 0x001820, "Member 'AShoppingCartVehicleSK_C::TextRender' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PawnStepUpCollision_Bottom) == 0x001828, "Member 'AShoppingCartVehicleSK_C::PawnStepUpCollision_Bottom' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OverlapTrigger) == 0x001830, "Member 'AShoppingCartVehicleSK_C::OverlapTrigger' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PawnStepUpCollision) == 0x001838, "Member 'AShoppingCartVehicleSK_C::PawnStepUpCollision' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioWind) == 0x001840, "Member 'AShoppingCartVehicleSK_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, FortCollisionAudio) == 0x001848, "Member 'AShoppingCartVehicleSK_C::FortCollisionAudio' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioScrape) == 0x001850, "Member 'AShoppingCartVehicleSK_C::AudioScrape' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioInAir) == 0x001858, "Member 'AShoppingCartVehicleSK_C::AudioInAir' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioSkid) == 0x001860, "Member 'AShoppingCartVehicleSK_C::AudioSkid' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioCoast) == 0x001868, "Member 'AShoppingCartVehicleSK_C::AudioCoast' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AudioMovement) == 0x001870, "Member 'AShoppingCartVehicleSK_C::AudioMovement' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OnDeathSound) == 0x001878, "Member 'AShoppingCartVehicleSK_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerPawn) == 0x001880, "Member 'AShoppingCartVehicleSK_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AttachedPickups) == 0x001888, "Member 'AShoppingCartVehicleSK_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, FortPickup) == 0x001898, "Member 'AShoppingCartVehicleSK_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, MaxPickups) == 0x0018A0, "Member 'AShoppingCartVehicleSK_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CurrentPickups) == 0x0018A4, "Member 'AShoppingCartVehicleSK_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, DrivingPlayerController) == 0x0018A8, "Member 'AShoppingCartVehicleSK_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CameraShake) == 0x0018B0, "Member 'AShoppingCartVehicleSK_C::CameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, DriverPawn) == 0x0018B8, "Member 'AShoppingCartVehicleSK_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, NormalizedSpeed) == 0x0018C0, "Member 'AShoppingCartVehicleSK_C::NormalizedSpeed' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeFrequencyMin) == 0x0018C4, "Member 'AShoppingCartVehicleSK_C::ScreenShakeFrequencyMin' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeFrequencyMax) == 0x0018C8, "Member 'AShoppingCartVehicleSK_C::ScreenShakeFrequencyMax' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeYawFrequencyMultipier) == 0x0018CC, "Member 'AShoppingCartVehicleSK_C::ScreenShakeYawFrequencyMultipier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AmplitudeMin) == 0x0018D0, "Member 'AShoppingCartVehicleSK_C::AmplitudeMin' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, AmplitudeMax) == 0x0018D4, "Member 'AShoppingCartVehicleSK_C::AmplitudeMax' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, InAirSmoothed) == 0x0018D8, "Member 'AShoppingCartVehicleSK_C::InAirSmoothed' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CameraShakeSpeedCurvePow) == 0x0018DC, "Member 'AShoppingCartVehicleSK_C::CameraShakeSpeedCurvePow' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, SmoothedSpringCompression) == 0x0018E0, "Member 'AShoppingCartVehicleSK_C::SmoothedSpringCompression' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ScreenShakeMult) == 0x0018E8, "Member 'AShoppingCartVehicleSK_C::ScreenShakeMult' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, RumbleMulti) == 0x001908, "Member 'AShoppingCartVehicleSK_C::RumbleMulti' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, SparksRumbleMulti) == 0x00190C, "Member 'AShoppingCartVehicleSK_C::SparksRumbleMulti' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, bCoastingCameraShake) == 0x001910, "Member 'AShoppingCartVehicleSK_C::bCoastingCameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LastDriver) == 0x001918, "Member 'AShoppingCartVehicleSK_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, LastHitPlayer) == 0x001920, "Member 'AShoppingCartVehicleSK_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, IgnoreHitLastDriver) == 0x001928, "Member 'AShoppingCartVehicleSK_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerIsInstigator) == 0x001929, "Member 'AShoppingCartVehicleSK_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, CanLaunchPlayer) == 0x001930, "Member 'AShoppingCartVehicleSK_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerCameraShakeMultiplier) == 0x001950, "Member 'AShoppingCartVehicleSK_C::PassengerCameraShakeMultiplier' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerCameraShake) == 0x001958, "Member 'AShoppingCartVehicleSK_C::PassengerCameraShake' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, PassengerPlayerController) == 0x001960, "Member 'AShoppingCartVehicleSK_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, QuestItem) == 0x001968, "Member 'AShoppingCartVehicleSK_C::QuestItem' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, ObjBackendName) == 0x001970, "Member 'AShoppingCartVehicleSK_C::ObjBackendName' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, InWaterFX) == 0x001978, "Member 'AShoppingCartVehicleSK_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, GCParamsEmpty) == 0x001980, "Member 'AShoppingCartVehicleSK_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitPlayerCue) == 0x001A38, "Member 'AShoppingCartVehicleSK_C::HitPlayerCue' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitFiendCue) == 0x001A40, "Member 'AShoppingCartVehicleSK_C::HitFiendCue' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, WheelDustFX_Cascade) == 0x001A48, "Member 'AShoppingCartVehicleSK_C::WheelDustFX_Cascade' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, WheelDustFX_Niagara) == 0x001A70, "Member 'AShoppingCartVehicleSK_C::WheelDustFX_Niagara' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, WheelDustFX_Component) == 0x001A98, "Member 'AShoppingCartVehicleSK_C::WheelDustFX_Component' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OnDeathFX_Cascade) == 0x001AA0, "Member 'AShoppingCartVehicleSK_C::OnDeathFX_Cascade' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OnDeathFX_Niagara) == 0x001AC8, "Member 'AShoppingCartVehicleSK_C::OnDeathFX_Niagara' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, OnDeathFX_System) == 0x001AF0, "Member 'AShoppingCartVehicleSK_C::OnDeathFX_System' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitPlayerFX_Cascade) == 0x001AF8, "Member 'AShoppingCartVehicleSK_C::HitPlayerFX_Cascade' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitPlayerFX_Niagara) == 0x001B20, "Member 'AShoppingCartVehicleSK_C::HitPlayerFX_Niagara' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitPlayerFX_System) == 0x001B48, "Member 'AShoppingCartVehicleSK_C::HitPlayerFX_System' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitDustFX_Cascade) == 0x001B50, "Member 'AShoppingCartVehicleSK_C::HitDustFX_Cascade' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitDustFX_Niagara) == 0x001B78, "Member 'AShoppingCartVehicleSK_C::HitDustFX_Niagara' has a wrong offset!");
static_assert(offsetof(AShoppingCartVehicleSK_C, HitDustFX_System) == 0x001BA0, "Member 'AShoppingCartVehicleSK_C::HitDustFX_System' has a wrong offset!");

}

