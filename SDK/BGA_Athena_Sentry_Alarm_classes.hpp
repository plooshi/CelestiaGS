#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_Sentry_Alarm

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Enum_MANG_Security_ID_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "BGA_Athena_Sentry_Parent_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_Sentry_Alarm.BGA_Athena_Sentry_Alarm_C
// 0x01A0 (0x0C60 - 0x0AC0)
class ABGA_Athena_Sentry_Alarm_C final : public ABGA_Athena_Sentry_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Athena_Sentry_Alarm_C;          // 0x0AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Sentry_Alarm_Active;                             // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wires;                                             // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Sight_Audio_Loop;                                  // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               BeaconParticles;                                   // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightCone;                                         // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAthena_FactionSelection_AlterEgo_C*    Athena_FactionSelection_AlterEgo;                  // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Alpha_2F0B83BD4024A5467ED4F9AF4E3D1E3B; // 0x0B00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_2F0B83BD4024A5467ED4F9AF4E3D1E3B; // 0x0B04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8140[0x3];                                     // 0x0B05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_AlertLoop;                                      // 0x0B10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             AlertDispatcherAggro;                              // 0x0B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         ScanningLaserEdgeWidthEnd;                         // 0x0B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScanningLaserEdgeWidthFront;                       // 0x0B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScanningLaserFalloff;                              // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScanningLaserEdgeColor;                            // 0x0B34(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScanningLaserCenterColor;                          // 0x0B44(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_MANG_Security_ID                         Camera_ID;                                         // 0x0B54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8141[0x3];                                     // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TargetingLaserEdgeColor;                           // 0x0B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TargetingLaserCenterColor;                         // 0x0B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetedConeAngle;                                 // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryRaysSpeed;                                // 0x0B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sight_Sound;                                       // 0x0B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Tracking_Sound;                                    // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraPitch;                                       // 0x0B90(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         BaseYaw;                                           // 0x0B94(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          ShowWires;                                         // 0x0B98(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_8142[0x3];                                     // 0x0B99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LinkDistance;                                      // 0x0B9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WireRoll;                                          // 0x0BA0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           SeekingColor;                                      // 0x0BA4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TrackingColor;                                     // 0x0BB4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AggroColor;                                        // 0x0BC4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ParticleTrackingColor;                             // 0x0BD4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ParticleLightOpacity;                              // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryRaysOpacity;                              // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8143[0x4];                                     // 0x0BEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Stop_Targeting_Sound;                              // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Stop_Watching_Sound;                               // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Power_On_Sound;                                    // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Tracking_Sound_Playing;                         // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Domant;                                         // 0x0C09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Is_Sight_Sound_Playing;                            // 0x0C0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InSpyLTM;                                          // 0x0C0B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8144[0x4];                                     // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_Enabled;                                       // 0x0C10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           T_SpyLTMDefender;                                  // 0x0C30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Start_Sight_Sound;                                 // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           WiresEmissiveColor;                                // 0x0C40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_AlertAI;                                     // 0x0C50(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Time_AlertAI;                                      // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AlertDispatcherAggro__DelegateSignature(class AActor* Camera, Enum_MANG_Security_ID Param_Camera_ID, class AActor* TrackingPawn);
	void ExecuteUbergraph_BGA_Athena_Sentry_Alarm(int32 EntryPoint);
	void HandleAlertDispatcher();
	void AlertAI();
	void BPOnSentryStateChanged();
	void ChangeLightColor();
	void HideAndKill();
	void Stop_Sight_Sound();
	void Play_Power_On_Sound();
	void Stop_Tracking_Sound();
	void BuildingDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ForceAttachToWall();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void Update_Audio();
	void Stop_Current_SIght_Sounds();
	void Play_Tracking_Audio();
	void Play_Sight_Audio();
	void BndEvt__Athena_FactionSelection_AlterEgo_K2Node_ComponentBoundEvent_0_OnFactionSelected__DelegateSignature(const struct FGameplayTag& FactionTagOut);
	void SetAlert(bool Aggro);
	void ReceiveBeginPlay();
	void TargetedRayScale(ETimelineDirection Direction);
	void OnReady_4FB2C9374635E9A2451697AABA3C1D6B(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void UserConstructionScript();
	void InitializeAngleRaysParameters();
	void OnRep_InSpyLTM();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_Sentry_Alarm_C">();
	}
	static class ABGA_Athena_Sentry_Alarm_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_Sentry_Alarm_C>();
	}
};
static_assert(alignof(ABGA_Athena_Sentry_Alarm_C) == 0x000008, "Wrong alignment on ABGA_Athena_Sentry_Alarm_C");
static_assert(sizeof(ABGA_Athena_Sentry_Alarm_C) == 0x000C60, "Wrong size on ABGA_Athena_Sentry_Alarm_C");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, UberGraphFrame_BGA_Athena_Sentry_Alarm_C) == 0x000AC0, "Member 'ABGA_Athena_Sentry_Alarm_C::UberGraphFrame_BGA_Athena_Sentry_Alarm_C' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, P_Sentry_Alarm_Active) == 0x000AC8, "Member 'ABGA_Athena_Sentry_Alarm_C::P_Sentry_Alarm_Active' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Wires) == 0x000AD0, "Member 'ABGA_Athena_Sentry_Alarm_C::Wires' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Sight_Audio_Loop) == 0x000AD8, "Member 'ABGA_Athena_Sentry_Alarm_C::Sight_Audio_Loop' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, BeaconParticles) == 0x000AE0, "Member 'ABGA_Athena_Sentry_Alarm_C::BeaconParticles' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, SpotLight) == 0x000AE8, "Member 'ABGA_Athena_Sentry_Alarm_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, LightCone) == 0x000AF0, "Member 'ABGA_Athena_Sentry_Alarm_C::LightCone' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Athena_FactionSelection_AlterEgo) == 0x000AF8, "Member 'ABGA_Athena_Sentry_Alarm_C::Athena_FactionSelection_AlterEgo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Timeline_0_Alpha_2F0B83BD4024A5467ED4F9AF4E3D1E3B) == 0x000B00, "Member 'ABGA_Athena_Sentry_Alarm_C::Timeline_0_Alpha_2F0B83BD4024A5467ED4F9AF4E3D1E3B' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Timeline_0__Direction_2F0B83BD4024A5467ED4F9AF4E3D1E3B) == 0x000B04, "Member 'ABGA_Athena_Sentry_Alarm_C::Timeline_0__Direction_2F0B83BD4024A5467ED4F9AF4E3D1E3B' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Timeline_0) == 0x000B08, "Member 'ABGA_Athena_Sentry_Alarm_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, GC_AlertLoop) == 0x000B10, "Member 'ABGA_Athena_Sentry_Alarm_C::GC_AlertLoop' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, AlertDispatcherAggro) == 0x000B18, "Member 'ABGA_Athena_Sentry_Alarm_C::AlertDispatcherAggro' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ScanningLaserEdgeWidthEnd) == 0x000B28, "Member 'ABGA_Athena_Sentry_Alarm_C::ScanningLaserEdgeWidthEnd' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ScanningLaserEdgeWidthFront) == 0x000B2C, "Member 'ABGA_Athena_Sentry_Alarm_C::ScanningLaserEdgeWidthFront' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ScanningLaserFalloff) == 0x000B30, "Member 'ABGA_Athena_Sentry_Alarm_C::ScanningLaserFalloff' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ScanningLaserEdgeColor) == 0x000B34, "Member 'ABGA_Athena_Sentry_Alarm_C::ScanningLaserEdgeColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ScanningLaserCenterColor) == 0x000B44, "Member 'ABGA_Athena_Sentry_Alarm_C::ScanningLaserCenterColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Camera_ID) == 0x000B54, "Member 'ABGA_Athena_Sentry_Alarm_C::Camera_ID' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, TargetingLaserEdgeColor) == 0x000B58, "Member 'ABGA_Athena_Sentry_Alarm_C::TargetingLaserEdgeColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, TargetingLaserCenterColor) == 0x000B68, "Member 'ABGA_Athena_Sentry_Alarm_C::TargetingLaserCenterColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, TargetedConeAngle) == 0x000B78, "Member 'ABGA_Athena_Sentry_Alarm_C::TargetedConeAngle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, SecondaryRaysSpeed) == 0x000B7C, "Member 'ABGA_Athena_Sentry_Alarm_C::SecondaryRaysSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Sight_Sound) == 0x000B80, "Member 'ABGA_Athena_Sentry_Alarm_C::Sight_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Tracking_Sound) == 0x000B88, "Member 'ABGA_Athena_Sentry_Alarm_C::Tracking_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, CameraPitch) == 0x000B90, "Member 'ABGA_Athena_Sentry_Alarm_C::CameraPitch' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, BaseYaw) == 0x000B94, "Member 'ABGA_Athena_Sentry_Alarm_C::BaseYaw' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ShowWires) == 0x000B98, "Member 'ABGA_Athena_Sentry_Alarm_C::ShowWires' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, LinkDistance) == 0x000B9C, "Member 'ABGA_Athena_Sentry_Alarm_C::LinkDistance' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, WireRoll) == 0x000BA0, "Member 'ABGA_Athena_Sentry_Alarm_C::WireRoll' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, SeekingColor) == 0x000BA4, "Member 'ABGA_Athena_Sentry_Alarm_C::SeekingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, TrackingColor) == 0x000BB4, "Member 'ABGA_Athena_Sentry_Alarm_C::TrackingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, AggroColor) == 0x000BC4, "Member 'ABGA_Athena_Sentry_Alarm_C::AggroColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ParticleTrackingColor) == 0x000BD4, "Member 'ABGA_Athena_Sentry_Alarm_C::ParticleTrackingColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, ParticleLightOpacity) == 0x000BE4, "Member 'ABGA_Athena_Sentry_Alarm_C::ParticleLightOpacity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, SecondaryRaysOpacity) == 0x000BE8, "Member 'ABGA_Athena_Sentry_Alarm_C::SecondaryRaysOpacity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Stop_Targeting_Sound) == 0x000BF0, "Member 'ABGA_Athena_Sentry_Alarm_C::Stop_Targeting_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Stop_Watching_Sound) == 0x000BF8, "Member 'ABGA_Athena_Sentry_Alarm_C::Stop_Watching_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Power_On_Sound) == 0x000C00, "Member 'ABGA_Athena_Sentry_Alarm_C::Power_On_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Is_Tracking_Sound_Playing) == 0x000C08, "Member 'ABGA_Athena_Sentry_Alarm_C::Is_Tracking_Sound_Playing' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Is_Domant) == 0x000C09, "Member 'ABGA_Athena_Sentry_Alarm_C::Is_Domant' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Is_Sight_Sound_Playing) == 0x000C0A, "Member 'ABGA_Athena_Sentry_Alarm_C::Is_Sight_Sound_Playing' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, InSpyLTM) == 0x000C0B, "Member 'ABGA_Athena_Sentry_Alarm_C::InSpyLTM' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Row_Enabled) == 0x000C10, "Member 'ABGA_Athena_Sentry_Alarm_C::Row_Enabled' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, T_SpyLTMDefender) == 0x000C30, "Member 'ABGA_Athena_Sentry_Alarm_C::T_SpyLTMDefender' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Start_Sight_Sound) == 0x000C38, "Member 'ABGA_Athena_Sentry_Alarm_C::Start_Sight_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, WiresEmissiveColor) == 0x000C40, "Member 'ABGA_Athena_Sentry_Alarm_C::WiresEmissiveColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Timer_AlertAI) == 0x000C50, "Member 'ABGA_Athena_Sentry_Alarm_C::Timer_AlertAI' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_Sentry_Alarm_C, Time_AlertAI) == 0x000C58, "Member 'ABGA_Athena_Sentry_Alarm_C::Time_AlertAI' has a wrong offset!");

}

