#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameStat_TimeAlive

#include "Basic.hpp"


namespace SDK::Params
{

// Function MinigameStat_TimeAlive.MinigameStat_TimeAlive_C.Compare
// 0x001C (0x001C - 0x0000)
struct MinigameStat_TimeAlive_C_Compare final
{
public:
	int32                                         FirstScore;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SecondScore;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSecondValid;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsFirstValid;                                      // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6482[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameStat_TimeAlive_C_Compare) == 0x000004, "Wrong alignment on MinigameStat_TimeAlive_C_Compare");
static_assert(sizeof(MinigameStat_TimeAlive_C_Compare) == 0x00001C, "Wrong size on MinigameStat_TimeAlive_C_Compare");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, FirstScore) == 0x000000, "Member 'MinigameStat_TimeAlive_C_Compare::FirstScore' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, SecondScore) == 0x000004, "Member 'MinigameStat_TimeAlive_C_Compare::SecondScore' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, ReturnValue) == 0x000008, "Member 'MinigameStat_TimeAlive_C_Compare::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, IsSecondValid) == 0x00000C, "Member 'MinigameStat_TimeAlive_C_Compare::IsSecondValid' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, IsFirstValid) == 0x00000D, "Member 'MinigameStat_TimeAlive_C_Compare::IsFirstValid' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_BooleanAND_ReturnValue) == 0x00000F, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000010, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_Not_PreBool_ReturnValue_1) == 0x000011, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_BooleanAND_ReturnValue_1) == 0x000012, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameStat_TimeAlive_C_Compare, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000019, "Member 'MinigameStat_TimeAlive_C_Compare::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");

}

