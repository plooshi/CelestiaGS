#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GAT_ActiveAbility

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GAT_ActiveAbility.GAT_ActiveAbility_C
// 0x0030 (0x0AA8 - 0x0A78)
class UGAT_ActiveAbility_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A78(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FGameplayTag                           TC_AbilitiesGenericActiveAbilityActivate;          // 0x0A80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   N_SavedCollisionChannel;                           // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_KnockBackImmunity;                              // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            GEH_KnockBackImmunity;                             // 0x0A98(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerHolsterState;                               // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GAT_ActiveAbility(int32 EntryPoint);
	void K2_ActivateAbility();
	void SetPawnCollision(class AFortPawn* FortPawn, bool CollisionOn);
	void SetKnockbackImmunity(bool ImmunityOn);
	void ActiveAbilitySetup(class UAbilitySystemComponent* AbilitySystemIn, class UAbilitySystemComponent** AbilitySystemOut);
	void SetHolsterWeaponWithName(class AFortPawn* Target_Fort_Pawn, bool ShouldHolster, bool PlayEquipAnim, bool ShowDebugPrintName, bool* IsWeaponHolstered, bool* OperationSuccessful);
	void SendHeroAbilityActivationEvent();
	void EndAbilityWithReason(const class FString& Reason);

	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GAT_ActiveAbility_C">();
	}
	static class UGAT_ActiveAbility_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGAT_ActiveAbility_C>();
	}
};
static_assert(alignof(UGAT_ActiveAbility_C) == 0x000008, "Wrong alignment on UGAT_ActiveAbility_C");
static_assert(sizeof(UGAT_ActiveAbility_C) == 0x000AA8, "Wrong size on UGAT_ActiveAbility_C");
static_assert(offsetof(UGAT_ActiveAbility_C, UberGraphFrame) == 0x000A78, "Member 'UGAT_ActiveAbility_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGAT_ActiveAbility_C, TC_AbilitiesGenericActiveAbilityActivate) == 0x000A80, "Member 'UGAT_ActiveAbility_C::TC_AbilitiesGenericActiveAbilityActivate' has a wrong offset!");
static_assert(offsetof(UGAT_ActiveAbility_C, N_SavedCollisionChannel) == 0x000A88, "Member 'UGAT_ActiveAbility_C::N_SavedCollisionChannel' has a wrong offset!");
static_assert(offsetof(UGAT_ActiveAbility_C, GE_KnockBackImmunity) == 0x000A90, "Member 'UGAT_ActiveAbility_C::GE_KnockBackImmunity' has a wrong offset!");
static_assert(offsetof(UGAT_ActiveAbility_C, GEH_KnockBackImmunity) == 0x000A98, "Member 'UGAT_ActiveAbility_C::GEH_KnockBackImmunity' has a wrong offset!");
static_assert(offsetof(UGAT_ActiveAbility_C, bPlayerHolsterState) == 0x000AA0, "Member 'UGAT_ActiveAbility_C::bPlayerHolsterState' has a wrong offset!");

}

