#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MantisRuntime

#include "Basic.hpp"

#include "GameplayAbilities_classes.hpp"
#include "MantisRuntime_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FortniteGame_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class MantisRuntime.FortMantisData
// 0x0040 (0x0070 - 0x0030)
class UFortMantisData final : public UDataAsset
{
public:
	bool                                          bDetachCharacterRotationFromCamera;                // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_435C[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReattachCharacterRotationBlendTime;                // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReattachCharacterRotationBlendExponent;            // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindupCharacterRotationRate;                       // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExecutionCharacterRotationRate;                    // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryCharacterRotationRate;                     // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UFortGameplayAbility_Mantis> TechniqueAbility;                                  // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortMantisTechniqueData>       Techniques;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFortMantisTechniqueBranch>     Branches;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMantisData">();
	}
	static class UFortMantisData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMantisData>();
	}
};
static_assert(alignof(UFortMantisData) == 0x000008, "Wrong alignment on UFortMantisData");
static_assert(sizeof(UFortMantisData) == 0x000070, "Wrong size on UFortMantisData");
static_assert(offsetof(UFortMantisData, bDetachCharacterRotationFromCamera) == 0x000030, "Member 'UFortMantisData::bDetachCharacterRotationFromCamera' has a wrong offset!");
static_assert(offsetof(UFortMantisData, ReattachCharacterRotationBlendTime) == 0x000034, "Member 'UFortMantisData::ReattachCharacterRotationBlendTime' has a wrong offset!");
static_assert(offsetof(UFortMantisData, ReattachCharacterRotationBlendExponent) == 0x000038, "Member 'UFortMantisData::ReattachCharacterRotationBlendExponent' has a wrong offset!");
static_assert(offsetof(UFortMantisData, WindupCharacterRotationRate) == 0x00003C, "Member 'UFortMantisData::WindupCharacterRotationRate' has a wrong offset!");
static_assert(offsetof(UFortMantisData, ExecutionCharacterRotationRate) == 0x000040, "Member 'UFortMantisData::ExecutionCharacterRotationRate' has a wrong offset!");
static_assert(offsetof(UFortMantisData, RecoveryCharacterRotationRate) == 0x000044, "Member 'UFortMantisData::RecoveryCharacterRotationRate' has a wrong offset!");
static_assert(offsetof(UFortMantisData, TechniqueAbility) == 0x000048, "Member 'UFortMantisData::TechniqueAbility' has a wrong offset!");
static_assert(offsetof(UFortMantisData, Techniques) == 0x000050, "Member 'UFortMantisData::Techniques' has a wrong offset!");
static_assert(offsetof(UFortMantisData, Branches) == 0x000060, "Member 'UFortMantisData::Branches' has a wrong offset!");

// Class MantisRuntime.FortAbilityTask_ApplyRootMotionMantisForce
// 0x0020 (0x00D8 - 0x00B8)
class UFortAbilityTask_ApplyRootMotionMantisForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	FMulticastInlineDelegateProperty_             OnFinish;                                          // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x00C8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_435D[0x4];                                     // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           TechniqueMontage;                                  // 0x00D0(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UFortAbilityTask_ApplyRootMotionMantisForce* ApplyRootMotionMantisForce(class UGameplayAbility* OwningAbility, float Param_Duration, class UAnimMontage* Param_TechniqueMontage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAbilityTask_ApplyRootMotionMantisForce">();
	}
	static class UFortAbilityTask_ApplyRootMotionMantisForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAbilityTask_ApplyRootMotionMantisForce>();
	}
};
static_assert(alignof(UFortAbilityTask_ApplyRootMotionMantisForce) == 0x000008, "Wrong alignment on UFortAbilityTask_ApplyRootMotionMantisForce");
static_assert(sizeof(UFortAbilityTask_ApplyRootMotionMantisForce) == 0x0000D8, "Wrong size on UFortAbilityTask_ApplyRootMotionMantisForce");
static_assert(offsetof(UFortAbilityTask_ApplyRootMotionMantisForce, OnFinish) == 0x0000B8, "Member 'UFortAbilityTask_ApplyRootMotionMantisForce::OnFinish' has a wrong offset!");
static_assert(offsetof(UFortAbilityTask_ApplyRootMotionMantisForce, Duration) == 0x0000C8, "Member 'UFortAbilityTask_ApplyRootMotionMantisForce::Duration' has a wrong offset!");
static_assert(offsetof(UFortAbilityTask_ApplyRootMotionMantisForce, TechniqueMontage) == 0x0000D0, "Member 'UFortAbilityTask_ApplyRootMotionMantisForce::TechniqueMontage' has a wrong offset!");

// Class MantisRuntime.FortMantisPawnComponent
// 0x0120 (0x01D0 - 0x00B0)
class UFortMantisPawnComponent final : public UPawnComponent
{
public:
	uint8                                         Pad_435F[0x60];                                    // 0x00B0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UAnimMontage*, struct FFortMantisMontageData> MontageDataMap;                                    // 0x0110(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UFortMantisData*                        MantisData;                                        // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AFortWeapon*                            Weapon;                                            // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4360[0x60];                                    // 0x0170(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterMovementPreUpdate(class UCharacterMovementComponent* CharMoveComp, float DeltaSeconds);
	void OnPostPhysicsRotation(class UCharacterMovementComponent* CharMoveComp, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMantisPawnComponent">();
	}
	static class UFortMantisPawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMantisPawnComponent>();
	}
};
static_assert(alignof(UFortMantisPawnComponent) == 0x000008, "Wrong alignment on UFortMantisPawnComponent");
static_assert(sizeof(UFortMantisPawnComponent) == 0x0001D0, "Wrong size on UFortMantisPawnComponent");
static_assert(offsetof(UFortMantisPawnComponent, MontageDataMap) == 0x000110, "Member 'UFortMantisPawnComponent::MontageDataMap' has a wrong offset!");
static_assert(offsetof(UFortMantisPawnComponent, MantisData) == 0x000160, "Member 'UFortMantisPawnComponent::MantisData' has a wrong offset!");
static_assert(offsetof(UFortMantisPawnComponent, Weapon) == 0x000168, "Member 'UFortMantisPawnComponent::Weapon' has a wrong offset!");

// Class MantisRuntime.FortAnimNotify_Mantis
// 0x0008 (0x0040 - 0x0038)
class UFortAnimNotify_Mantis final : public UAnimNotify
{
public:
	EFortMantisNotifyEvent                        MantisNotifyEvent;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisBranchRule                         MantisBranchRule;                                  // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFortMantisBranchPath                         MantisBranchPath;                                  // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4363[0x5];                                     // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAnimNotify_Mantis">();
	}
	static class UFortAnimNotify_Mantis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAnimNotify_Mantis>();
	}
};
static_assert(alignof(UFortAnimNotify_Mantis) == 0x000008, "Wrong alignment on UFortAnimNotify_Mantis");
static_assert(sizeof(UFortAnimNotify_Mantis) == 0x000040, "Wrong size on UFortAnimNotify_Mantis");
static_assert(offsetof(UFortAnimNotify_Mantis, MantisNotifyEvent) == 0x000038, "Member 'UFortAnimNotify_Mantis::MantisNotifyEvent' has a wrong offset!");
static_assert(offsetof(UFortAnimNotify_Mantis, MantisBranchRule) == 0x000039, "Member 'UFortAnimNotify_Mantis::MantisBranchRule' has a wrong offset!");
static_assert(offsetof(UFortAnimNotify_Mantis, MantisBranchPath) == 0x00003A, "Member 'UFortAnimNotify_Mantis::MantisBranchPath' has a wrong offset!");

// Class MantisRuntime.FortAnimNotifyState_Mantis
// 0x0008 (0x0038 - 0x0030)
class UFortAnimNotifyState_Mantis final : public UAnimNotifyState
{
public:
	EFortMantisNotifyWindow                       MantisNotifyWindow;                                // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4364[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAnimNotifyState_Mantis">();
	}
	static class UFortAnimNotifyState_Mantis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAnimNotifyState_Mantis>();
	}
};
static_assert(alignof(UFortAnimNotifyState_Mantis) == 0x000008, "Wrong alignment on UFortAnimNotifyState_Mantis");
static_assert(sizeof(UFortAnimNotifyState_Mantis) == 0x000038, "Wrong size on UFortAnimNotifyState_Mantis");
static_assert(offsetof(UFortAnimNotifyState_Mantis, MantisNotifyWindow) == 0x000030, "Member 'UFortAnimNotifyState_Mantis::MantisNotifyWindow' has a wrong offset!");

// Class MantisRuntime.FortGameplayAbility_Mantis
// 0x0020 (0x0A98 - 0x0A78)
class UFortGameplayAbility_Mantis final : public UFortGameplayAbility
{
public:
	class UFortMantisPawnComponent*               MantisPawnComponent;                               // 0x0A78(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_PlayMontageAndWait*        MontageTask;                                       // 0x0A80(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortAbilityTask_ApplyRootMotionMantisForce* RootMotionTask;                                    // 0x0A88(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4365[0x8];                                     // 0x0A90(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnMantisTechniqueHit(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle, const struct FGameplayTag& ApplicationTag);
	void OnMontageCancelled();
	void OnMontageFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortGameplayAbility_Mantis">();
	}
	static class UFortGameplayAbility_Mantis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortGameplayAbility_Mantis>();
	}
};
static_assert(alignof(UFortGameplayAbility_Mantis) == 0x000008, "Wrong alignment on UFortGameplayAbility_Mantis");
static_assert(sizeof(UFortGameplayAbility_Mantis) == 0x000A98, "Wrong size on UFortGameplayAbility_Mantis");
static_assert(offsetof(UFortGameplayAbility_Mantis, MantisPawnComponent) == 0x000A78, "Member 'UFortGameplayAbility_Mantis::MantisPawnComponent' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_Mantis, MontageTask) == 0x000A80, "Member 'UFortGameplayAbility_Mantis::MontageTask' has a wrong offset!");
static_assert(offsetof(UFortGameplayAbility_Mantis, RootMotionTask) == 0x000A88, "Member 'UFortGameplayAbility_Mantis::RootMotionTask' has a wrong offset!");

// Class MantisRuntime.FortItemLayerAnimInstance_UncleBrolly
// 0x0070 (0x0330 - 0x02C0)
class UFortItemLayerAnimInstance_UncleBrolly final : public UFortItemLayerAnimInstance
{
public:
	struct FCachedAnimStateArray                  UmbrellaGliderOpenStateDataArray;                  // 0x02C0(0x0018)(Edit, NativeAccessSpecifierPublic)
	struct FVector                                WrapTranslation;                                   // 0x02D8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WrapRotation;                                      // 0x02E4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RootRotationOffset;                                // 0x02F0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LandingPredictedTimer;                             // 0x02FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUpdateYawCorrection;                        // 0x0300(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAcceleratingBeforeDodge;                       // 0x0301(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4366[0x2];                                     // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UncleBrollyDeployCurveValue;                       // 0x0304(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashChargeTier;                                    // 0x0308(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DashChargeAdditivePlayrate;                        // 0x030C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUmbrellaFailing;                                // 0x0310(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMeleeGuarding;                                  // 0x0311(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSprinting;                                      // 0x0312(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAir;                                          // 0x0313(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLandingPredicted;                               // 0x0314(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJumping;                                        // 0x0315(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDodging;                                        // 0x0316(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDodgingEast;                                    // 0x0317(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDodgingSouth;                                   // 0x0318(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDodgingWest;                                    // 0x0319(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashing;                                        // 0x031A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashCharging;                                   // 0x031B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashPredictingEnd;                              // 0x031C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChargeTier1;                                    // 0x031D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChargeTier2;                                    // 0x031E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChargeTier3;                                    // 0x031F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMeleeGuardingOrUmbrellaFailing;                   // 0x0320(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_to_GuardLoop;                  // 0x0321(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_to_GuardIntro;                 // 0x0322(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_GuardIntro_to_Default;                 // 0x0323(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpperBodyShouldPassThrough;                       // 0x0324(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUmbrellaGliderIsOpen;                             // 0x0325(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4367[0xA];                                     // 0x0326(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortItemLayerAnimInstance_UncleBrolly">();
	}
	static class UFortItemLayerAnimInstance_UncleBrolly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortItemLayerAnimInstance_UncleBrolly>();
	}
};
static_assert(alignof(UFortItemLayerAnimInstance_UncleBrolly) == 0x000010, "Wrong alignment on UFortItemLayerAnimInstance_UncleBrolly");
static_assert(sizeof(UFortItemLayerAnimInstance_UncleBrolly) == 0x000330, "Wrong size on UFortItemLayerAnimInstance_UncleBrolly");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, UmbrellaGliderOpenStateDataArray) == 0x0002C0, "Member 'UFortItemLayerAnimInstance_UncleBrolly::UmbrellaGliderOpenStateDataArray' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, WrapTranslation) == 0x0002D8, "Member 'UFortItemLayerAnimInstance_UncleBrolly::WrapTranslation' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, WrapRotation) == 0x0002E4, "Member 'UFortItemLayerAnimInstance_UncleBrolly::WrapRotation' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, RootRotationOffset) == 0x0002F0, "Member 'UFortItemLayerAnimInstance_UncleBrolly::RootRotationOffset' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, LandingPredictedTimer) == 0x0002FC, "Member 'UFortItemLayerAnimInstance_UncleBrolly::LandingPredictedTimer' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bShouldUpdateYawCorrection) == 0x000300, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bShouldUpdateYawCorrection' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bWasAcceleratingBeforeDodge) == 0x000301, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bWasAcceleratingBeforeDodge' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, UncleBrollyDeployCurveValue) == 0x000304, "Member 'UFortItemLayerAnimInstance_UncleBrolly::UncleBrollyDeployCurveValue' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, DashChargeTier) == 0x000308, "Member 'UFortItemLayerAnimInstance_UncleBrolly::DashChargeTier' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, DashChargeAdditivePlayrate) == 0x00030C, "Member 'UFortItemLayerAnimInstance_UncleBrolly::DashChargeAdditivePlayrate' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsUmbrellaFailing) == 0x000310, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsUmbrellaFailing' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsMeleeGuarding) == 0x000311, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsMeleeGuarding' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsSprinting) == 0x000312, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsSprinting' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsInAir) == 0x000313, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsInAir' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsLandingPredicted) == 0x000314, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsLandingPredicted' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsJumping) == 0x000315, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsJumping' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDodging) == 0x000316, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDodging' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDodgingEast) == 0x000317, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDodgingEast' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDodgingSouth) == 0x000318, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDodgingSouth' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDodgingWest) == 0x000319, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDodgingWest' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDashing) == 0x00031A, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDashing' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDashCharging) == 0x00031B, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDashCharging' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsDashPredictingEnd) == 0x00031C, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsDashPredictingEnd' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsChargeTier1) == 0x00031D, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsChargeTier1' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsChargeTier2) == 0x00031E, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsChargeTier2' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bIsChargeTier3) == 0x00031F, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bIsChargeTier3' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bMeleeGuardingOrUmbrellaFailing) == 0x000320, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bMeleeGuardingOrUmbrellaFailing' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bTransition_Default_to_GuardLoop) == 0x000321, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bTransition_Default_to_GuardLoop' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bTransition_Default_to_GuardIntro) == 0x000322, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bTransition_Default_to_GuardIntro' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bTransition_GuardIntro_to_Default) == 0x000323, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bTransition_GuardIntro_to_Default' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bUpperBodyShouldPassThrough) == 0x000324, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bUpperBodyShouldPassThrough' has a wrong offset!");
static_assert(offsetof(UFortItemLayerAnimInstance_UncleBrolly, bUmbrellaGliderIsOpen) == 0x000325, "Member 'UFortItemLayerAnimInstance_UncleBrolly::bUmbrellaGliderIsOpen' has a wrong offset!");

// Class MantisRuntime.FortMantisWeaponComponent
// 0x0010 (0x00C0 - 0x00B0)
class UFortMantisWeaponComponent final : public UFortWeaponComponent
{
public:
	class UFortMantisData*                        MantisData;                                        // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFortMantisPawnComponent*               MantisPawnComponent;                               // 0x00B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortMantisWeaponComponent">();
	}
	static class UFortMantisWeaponComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortMantisWeaponComponent>();
	}
};
static_assert(alignof(UFortMantisWeaponComponent) == 0x000008, "Wrong alignment on UFortMantisWeaponComponent");
static_assert(sizeof(UFortMantisWeaponComponent) == 0x0000C0, "Wrong size on UFortMantisWeaponComponent");
static_assert(offsetof(UFortMantisWeaponComponent, MantisData) == 0x0000B0, "Member 'UFortMantisWeaponComponent::MantisData' has a wrong offset!");
static_assert(offsetof(UFortMantisWeaponComponent, MantisPawnComponent) == 0x0000B8, "Member 'UFortMantisWeaponComponent::MantisPawnComponent' has a wrong offset!");

// Class MantisRuntime.UncleBrollyWeaponAnimInstance
// 0x0030 (0x02A0 - 0x0270)
class UUncleBrollyWeaponAnimInstance final : public UAnimInstance
{
public:
	TSubclassOf<class UAnimInstance>              UncleBrollyItemLayer;                              // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               UmbrellaRotation;                                  // 0x0270(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UmbrellaSpinSpeed;                                 // 0x027C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockDeployEndPlayrate;                            // 0x0280(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockDeployEndStartPosition;                       // 0x0284(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDodging;                                        // 0x0288(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingMeleeAnim;                               // 0x0289(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUmbrellaFailing;                                // 0x028A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMeleeGuarding;                                  // 0x028B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInAir;                                          // 0x028C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashing;                                        // 0x028D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSprinting;                                      // 0x028E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPredictingEnd;                                  // 0x028F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashCharging;                                   // 0x0290(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDashPredictingEnd;                              // 0x0291(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInAirAndMeleeGuarding;                            // 0x0292(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Default_to_DeployStart;                // 0x0293(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_DeployStart_to_Default;                // 0x0294(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_Fail_to_FailToDeploy;                  // 0x0295(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransition_FailLoop_to_DeployEnd;                 // 0x0296(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4368[0x9];                                     // 0x0297(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UncleBrollyWeaponAnimInstance">();
	}
	static class UUncleBrollyWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUncleBrollyWeaponAnimInstance>();
	}
};
static_assert(alignof(UUncleBrollyWeaponAnimInstance) == 0x000010, "Wrong alignment on UUncleBrollyWeaponAnimInstance");
static_assert(sizeof(UUncleBrollyWeaponAnimInstance) == 0x0002A0, "Wrong size on UUncleBrollyWeaponAnimInstance");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, UncleBrollyItemLayer) == 0x000268, "Member 'UUncleBrollyWeaponAnimInstance::UncleBrollyItemLayer' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, UmbrellaRotation) == 0x000270, "Member 'UUncleBrollyWeaponAnimInstance::UmbrellaRotation' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, UmbrellaSpinSpeed) == 0x00027C, "Member 'UUncleBrollyWeaponAnimInstance::UmbrellaSpinSpeed' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, BlockDeployEndPlayrate) == 0x000280, "Member 'UUncleBrollyWeaponAnimInstance::BlockDeployEndPlayrate' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, BlockDeployEndStartPosition) == 0x000284, "Member 'UUncleBrollyWeaponAnimInstance::BlockDeployEndStartPosition' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsDodging) == 0x000288, "Member 'UUncleBrollyWeaponAnimInstance::bIsDodging' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsPlayingMeleeAnim) == 0x000289, "Member 'UUncleBrollyWeaponAnimInstance::bIsPlayingMeleeAnim' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsUmbrellaFailing) == 0x00028A, "Member 'UUncleBrollyWeaponAnimInstance::bIsUmbrellaFailing' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsMeleeGuarding) == 0x00028B, "Member 'UUncleBrollyWeaponAnimInstance::bIsMeleeGuarding' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsInAir) == 0x00028C, "Member 'UUncleBrollyWeaponAnimInstance::bIsInAir' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsDashing) == 0x00028D, "Member 'UUncleBrollyWeaponAnimInstance::bIsDashing' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsSprinting) == 0x00028E, "Member 'UUncleBrollyWeaponAnimInstance::bIsSprinting' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsPredictingEnd) == 0x00028F, "Member 'UUncleBrollyWeaponAnimInstance::bIsPredictingEnd' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsDashCharging) == 0x000290, "Member 'UUncleBrollyWeaponAnimInstance::bIsDashCharging' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bIsDashPredictingEnd) == 0x000291, "Member 'UUncleBrollyWeaponAnimInstance::bIsDashPredictingEnd' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bInAirAndMeleeGuarding) == 0x000292, "Member 'UUncleBrollyWeaponAnimInstance::bInAirAndMeleeGuarding' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bTransition_Default_to_DeployStart) == 0x000293, "Member 'UUncleBrollyWeaponAnimInstance::bTransition_Default_to_DeployStart' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bTransition_DeployStart_to_Default) == 0x000294, "Member 'UUncleBrollyWeaponAnimInstance::bTransition_DeployStart_to_Default' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bTransition_Fail_to_FailToDeploy) == 0x000295, "Member 'UUncleBrollyWeaponAnimInstance::bTransition_Fail_to_FailToDeploy' has a wrong offset!");
static_assert(offsetof(UUncleBrollyWeaponAnimInstance, bTransition_FailLoop_to_DeployEnd) == 0x000296, "Member 'UUncleBrollyWeaponAnimInstance::bTransition_FailLoop_to_DeployEnd' has a wrong offset!");

}

