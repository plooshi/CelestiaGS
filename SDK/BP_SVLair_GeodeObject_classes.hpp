#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SVLair_GeodeObject

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SVLair_GeodeObject.BP_SVLair_GeodeObject_C
// 0x0080 (0x0C40 - 0x0BC0)
class ABP_SVLair_GeodeObject_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UParticleSystemComponent*               P_Geode_1_Vents_Smoke;                             // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RocketBits_Booster_SectionWhole;                   // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RocketBits_UpperTip;                               // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   RocketBits_LowerGreebles;                          // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MissileSilo_Stage2_Lower;                          // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Lights_Emissive_Value;                             // 0x0BF0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 LeadUp;                                            // 0x0C00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimespan                              Time_Until_Countdown_End;                          // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer;                                             // 0x0C18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 RocketComplete;                                    // 0x0C20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsRocketFinal;                                     // 0x0C30(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_82A6[0x3];                                     // 0x0C31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalSecondsRemaining;                             // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          One5MinuteReminder;                                // 0x0C38(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          FiveMinuteReminder;                                // 0x0C39(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)

public:
	void ExecuteUbergraph_BP_SVLair_GeodeObject(int32 EntryPoint);
	void ActivateVentSmoke();
	void ReceiveBeginPlay();
	void OnEventActive_D977B8A24E2BAC39BF0E798FD5E6CF3E(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_D977B8A24E2BAC39BF0E798FD5E6CF3E(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_D977B8A24E2BAC39BF0E798FD5E6CF3E(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnReady_7829643A49AB5584C56A9088F3E54021();
	void OnRep_IsRocketFinal();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SVLair_GeodeObject_C">();
	}
	static class ABP_SVLair_GeodeObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SVLair_GeodeObject_C>();
	}
};
static_assert(alignof(ABP_SVLair_GeodeObject_C) == 0x000008, "Wrong alignment on ABP_SVLair_GeodeObject_C");
static_assert(sizeof(ABP_SVLair_GeodeObject_C) == 0x000C40, "Wrong size on ABP_SVLair_GeodeObject_C");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, UberGraphFrame) == 0x000BC0, "Member 'ABP_SVLair_GeodeObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, P_Geode_1_Vents_Smoke) == 0x000BC8, "Member 'ABP_SVLair_GeodeObject_C::P_Geode_1_Vents_Smoke' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, RocketBits_Booster_SectionWhole) == 0x000BD0, "Member 'ABP_SVLair_GeodeObject_C::RocketBits_Booster_SectionWhole' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, RocketBits_UpperTip) == 0x000BD8, "Member 'ABP_SVLair_GeodeObject_C::RocketBits_UpperTip' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, RocketBits_LowerGreebles) == 0x000BE0, "Member 'ABP_SVLair_GeodeObject_C::RocketBits_LowerGreebles' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, MissileSilo_Stage2_Lower) == 0x000BE8, "Member 'ABP_SVLair_GeodeObject_C::MissileSilo_Stage2_Lower' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, Lights_Emissive_Value) == 0x000BF0, "Member 'ABP_SVLair_GeodeObject_C::Lights_Emissive_Value' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, LeadUp) == 0x000C00, "Member 'ABP_SVLair_GeodeObject_C::LeadUp' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, Time_Until_Countdown_End) == 0x000C10, "Member 'ABP_SVLair_GeodeObject_C::Time_Until_Countdown_End' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, Timer) == 0x000C18, "Member 'ABP_SVLair_GeodeObject_C::Timer' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, RocketComplete) == 0x000C20, "Member 'ABP_SVLair_GeodeObject_C::RocketComplete' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, IsRocketFinal) == 0x000C30, "Member 'ABP_SVLair_GeodeObject_C::IsRocketFinal' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, TotalSecondsRemaining) == 0x000C34, "Member 'ABP_SVLair_GeodeObject_C::TotalSecondsRemaining' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, One5MinuteReminder) == 0x000C38, "Member 'ABP_SVLair_GeodeObject_C::One5MinuteReminder' has a wrong offset!");
static_assert(offsetof(ABP_SVLair_GeodeObject_C, FiveMinuteReminder) == 0x000C39, "Member 'ABP_SVLair_GeodeObject_C::FiveMinuteReminder' has a wrong offset!");

}

