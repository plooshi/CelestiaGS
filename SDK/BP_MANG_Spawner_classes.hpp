#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MANG_Spawner

#include "Basic.hpp"

#include "Structure_MANG_Spawner_FinalSpawnData_structs.hpp"
#include "Enum_Athena_S12POI_Wars_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Structure_MANG_Spawner_SpawnGroupBuckets_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Structure_MANG_Spawner_AmmoCount_structs.hpp"
#include "Enum_MANG_Security_ID_structs.hpp"
#include "Enum_MANG_Types_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MANG_Spawner.BP_MANG_Spawner_C
// 0x04A8 (0x06C8 - 0x0220)
class ABP_MANG_Spawner_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        MusicAttenuationPreview;                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAthena_FactionSelection_AlterEgo_C*    Athena_FactionSelection_AlterEgo;                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMeshTrigger;                                 // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ChanceToSpawn;                              // 0x0250(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_MinAmountToSpawn;                           // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_MaxAmountToSpawn;                           // 0x0270(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        PatrolPointLocations;                              // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ChanceToSpawnShields;                       // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ChanceToSpawnHealth;                        // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ShieldChanceToSpawn;                               // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HealthChanceToSpawn;                               // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ShieldMinAmount;                            // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ShieldMaxAmount;                            // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_HealthMinAmount;                            // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_HealthMaxAmount;                            // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MinShieldCount;                                    // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxShieldCount;                                    // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinHealthCount;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxHealthCount;                                    // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DrawDebugLines;                                    // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9A[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugDuration;                                     // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortServerBotManagerAthena*            ServerBotManager;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortAthenaAIBotController*>     Spawned_Bots_Array;                                // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UFortAthenaAIBotCustomizationData*      ChosenBotData;                                     // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaAIBotController*             ChosenBotController;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaPatrolPath*                  ChosenPatrol;                                      // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FStructure_MANG_Spawner_SpawnGroupBuckets> SpawnGroupBuckets;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          UseDebugTriggerForSpawning;                        // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DebugRespawnOnQuickTimerWhenHenchmenAreDepleted;   // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9B[0x2];                                     // 0x0352(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugRespawnDelayAfterAllHenchmenAreDepleted;      // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldWaitForNavMeshBeforeSpawning;                // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9C[0x7];                                     // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_Faction_Alter;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Faction_Ego;                                    // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Faction_Default_POI_OilRig;                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Faction_Default_POI_MountainBase;               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Faction_Default_POI_SJI;                        // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Faction_Default_POI_Box;                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpawnerFactionTag;                                 // 0x0390(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CurrentlyPlayingMusic;                             // 0x0398(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          AllHenchmenDead;                                   // 0x03A0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HenchmenAlerted;                                   // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HenchmenCombat;                                    // 0x03A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9D[0x5];                                     // 0x03A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             MusicBackground;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicOminous;                                      // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicCombat;                                       // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicVictory;                                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortAthenaAIBotCustomizationData*> HenchmanTypesEgo;                                  // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UFortAthenaAIBotCustomizationData*> HenchmanTypesAlter;                                // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UFortAthenaAIBotCustomizationData*> HenchmanTypesDefault;                              // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ShouldPlayMusic;                                   // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D9E[0x3];                                     // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           TestForcedFactionTag;                              // 0x03FC(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D9F[0x4];                                     // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortAthenaAIBotCustomizationData*> HenchmanTypesDefaultBox;                           // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<Enum_Athena_S12POI_Wars, struct FScalableFloat> PerPOILocationMasterSpawnControl;                  // 0x0418(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ShouldPlayMusicDataRow;                            // 0x0468(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	EAlertLevel                                   HighestAIAlertLevel;                               // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugDisableMusic;                                 // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA0[0x6];                                     // 0x048A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_TimeSynthController_MANG_Default_C* MusicController;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAllHenchmenEliminated;                         // 0x0498(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          SpyLTM;                                            // 0x049C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EFortTeam                                     DefenseTeamSpyLTM;                                 // 0x049D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA1[0x2];                                     // 0x049E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SpyLTMPlaylistTags;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<Enum_Athena_S12POI_Wars, struct FScalableFloat> PerPOILeashRadius;                                 // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<Enum_Athena_S12POI_Wars, struct FScalableFloat> PerPOILocationMasterBossControl;                   // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnBossAtThisPOI;                                // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA2[0x7];                                     // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortAthenaAIBotController*>     LeashIterationList;                                // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AFortAthenaAIBotController*>     ListOfHenchmenThatStillRequireLeashing;            // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   BBKeyLeashLocation;                                // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BBKeyLeashRadius;                                  // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeashRadius;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA3[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStructure_MANG_Spawner_FinalSpawnData> FinalPrioritizedSpawnList;                         // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          AllowDropInv;                                      // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA4[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStructure_MANG_Spawner_AmmoCount> DeathDropAmmoListDefault;                          // 0x05A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FStructure_MANG_Spawner_AmmoCount> DeathDropAmmoListEgoAndAlter;                      // 0x05B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FStructure_MANG_Spawner_AmmoCount      ChosenDeathDropAmmo;                               // 0x05C0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	Enum_MANG_Security_ID                         ChosenCameraID;                                    // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA5[0x3];                                     // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChosenHenchmanTypeInt;                             // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnWithOptimizedCullDistance;                    // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA6[0x3];                                     // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfAIWeAreAllowedToSpawn;                     // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ShouldDropAmmo;                             // 0x05F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowDropAmmo;                                     // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DA7[0x7];                                     // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   Handle_DropInv;                                    // 0x0610(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_CullDistanceInterior;                       // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_CullDistanceExterior;                       // 0x0630(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_Default_BaseShield;                         // 0x0640(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_Boss_BaseShield;                            // 0x0650(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasSetupCamerasAndTurretsOnClient;                // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	Enum_MANG_Types                               BossHenchmanReplacementType;                       // 0x0661(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA8[0x6];                                     // 0x0662(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  LastVOTarget;                                      // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  VOTarget;                                          // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomIdleVOInt;                                   // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6DA9[0x4];                                     // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   Handle_ShouldApplyRepFrequencyOptimization;        // 0x0680(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FCurveTableRowHandle                   Handle_ShouldApplyRepFrequencyOptimization_Boss;   // 0x0690(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SpyLTMHenchmanNavFilter;                           // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckCalendarEvent;                                // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6DAA[0x7];                                     // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CalendarEventName;                                 // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CalendarEventMustHaveThisAcivitySettingToSpawnHenchmen; // 0x06C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MANG_Spawner(int32 EntryPoint);
	void TryToLeashAIAgain();
	void LeashAI();
	void IdleChatterLoop();
	void OnRoundResetEvent();
	void AlertDispatcherAggro_Event(class AActor* Camera, Enum_MANG_Security_ID Camera_ID, class AActor* TrackingPawn);
	void SetupAIDeathEvents();
	void TrySpawnAI();
	void AllAIDead();
	void ResetHenchmen();
	void ResetDoOnce();
	void OnDied_Henchman(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void BndEvt__StaticMeshTrigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void OnReady_086E76ED4BAB95CF20B6779EE9D0734E(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void AssignDataToVariables();
	void SpawnAndConfigureAI();
	void AssignPatrolToNPC(class AFortAthenaAIBotController* Controller, class AFortAthenaPatrolPath* Patrol);
	void SetSpawnGroupBucketsIntoPatrolsAndBotData();
	void WipeHenchmen();
	void RespawnHenchmen();
	void WipeAndRespawnHenchmen();
	void OnRep_CurrentlyPlayingMusic();
	void PlayMusic(class USoundBase* MusicToPlay);
	void GetMusicController(bool* Is_Valid, class ABP_TimeSynthController_MANG_Default_C** Music_Controller);
	void OnRep_ShouldCreateMusicController();
	void AuthorityConfigureMusicBP();
	void OnRep_TimeAllHenchmenEliminated();
	void SetupCameras();
	void SetupTurrets();
	void ApplyReplicationFrequencyOptimizations(class AFortGameModeAthena* GameModeAthena);

	void AreAllHenchmenEliminated(bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MANG_Spawner_C">();
	}
	static class ABP_MANG_Spawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MANG_Spawner_C>();
	}
};
static_assert(alignof(ABP_MANG_Spawner_C) == 0x000008, "Wrong alignment on ABP_MANG_Spawner_C");
static_assert(sizeof(ABP_MANG_Spawner_C) == 0x0006C8, "Wrong size on ABP_MANG_Spawner_C");
static_assert(offsetof(ABP_MANG_Spawner_C, UberGraphFrame) == 0x000220, "Member 'ABP_MANG_Spawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicAttenuationPreview) == 0x000228, "Member 'ABP_MANG_Spawner_C::MusicAttenuationPreview' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Athena_FactionSelection_AlterEgo) == 0x000230, "Member 'ABP_MANG_Spawner_C::Athena_FactionSelection_AlterEgo' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, StaticMeshTrigger) == 0x000238, "Member 'ABP_MANG_Spawner_C::StaticMeshTrigger' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, TextRender) == 0x000240, "Member 'ABP_MANG_Spawner_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DefaultSceneRoot) == 0x000248, "Member 'ABP_MANG_Spawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ChanceToSpawn) == 0x000250, "Member 'ABP_MANG_Spawner_C::Handle_ChanceToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_MinAmountToSpawn) == 0x000260, "Member 'ABP_MANG_Spawner_C::Handle_MinAmountToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_MaxAmountToSpawn) == 0x000270, "Member 'ABP_MANG_Spawner_C::Handle_MaxAmountToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, PatrolPointLocations) == 0x000280, "Member 'ABP_MANG_Spawner_C::PatrolPointLocations' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ChanceToSpawnShields) == 0x000290, "Member 'ABP_MANG_Spawner_C::Handle_ChanceToSpawnShields' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ChanceToSpawnHealth) == 0x0002A0, "Member 'ABP_MANG_Spawner_C::Handle_ChanceToSpawnHealth' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ShieldChanceToSpawn) == 0x0002B0, "Member 'ABP_MANG_Spawner_C::ShieldChanceToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HealthChanceToSpawn) == 0x0002B4, "Member 'ABP_MANG_Spawner_C::HealthChanceToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ShieldMinAmount) == 0x0002B8, "Member 'ABP_MANG_Spawner_C::Handle_ShieldMinAmount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ShieldMaxAmount) == 0x0002C8, "Member 'ABP_MANG_Spawner_C::Handle_ShieldMaxAmount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_HealthMinAmount) == 0x0002D8, "Member 'ABP_MANG_Spawner_C::Handle_HealthMinAmount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_HealthMaxAmount) == 0x0002E8, "Member 'ABP_MANG_Spawner_C::Handle_HealthMaxAmount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MinShieldCount) == 0x0002F8, "Member 'ABP_MANG_Spawner_C::MinShieldCount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MaxShieldCount) == 0x0002FC, "Member 'ABP_MANG_Spawner_C::MaxShieldCount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MinHealthCount) == 0x000300, "Member 'ABP_MANG_Spawner_C::MinHealthCount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MaxHealthCount) == 0x000304, "Member 'ABP_MANG_Spawner_C::MaxHealthCount' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DrawDebugLines) == 0x000308, "Member 'ABP_MANG_Spawner_C::DrawDebugLines' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DebugDuration) == 0x00030C, "Member 'ABP_MANG_Spawner_C::DebugDuration' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ServerBotManager) == 0x000310, "Member 'ABP_MANG_Spawner_C::ServerBotManager' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Spawned_Bots_Array) == 0x000318, "Member 'ABP_MANG_Spawner_C::Spawned_Bots_Array' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenBotData) == 0x000328, "Member 'ABP_MANG_Spawner_C::ChosenBotData' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenBotController) == 0x000330, "Member 'ABP_MANG_Spawner_C::ChosenBotController' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenPatrol) == 0x000338, "Member 'ABP_MANG_Spawner_C::ChosenPatrol' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpawnGroupBuckets) == 0x000340, "Member 'ABP_MANG_Spawner_C::SpawnGroupBuckets' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, UseDebugTriggerForSpawning) == 0x000350, "Member 'ABP_MANG_Spawner_C::UseDebugTriggerForSpawning' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DebugRespawnOnQuickTimerWhenHenchmenAreDepleted) == 0x000351, "Member 'ABP_MANG_Spawner_C::DebugRespawnOnQuickTimerWhenHenchmenAreDepleted' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DebugRespawnDelayAfterAllHenchmenAreDepleted) == 0x000354, "Member 'ABP_MANG_Spawner_C::DebugRespawnDelayAfterAllHenchmenAreDepleted' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ShouldWaitForNavMeshBeforeSpawning) == 0x000358, "Member 'ABP_MANG_Spawner_C::ShouldWaitForNavMeshBeforeSpawning' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Alter) == 0x000360, "Member 'ABP_MANG_Spawner_C::GE_Faction_Alter' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Ego) == 0x000368, "Member 'ABP_MANG_Spawner_C::GE_Faction_Ego' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Default_POI_OilRig) == 0x000370, "Member 'ABP_MANG_Spawner_C::GE_Faction_Default_POI_OilRig' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Default_POI_MountainBase) == 0x000378, "Member 'ABP_MANG_Spawner_C::GE_Faction_Default_POI_MountainBase' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Default_POI_SJI) == 0x000380, "Member 'ABP_MANG_Spawner_C::GE_Faction_Default_POI_SJI' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, GE_Faction_Default_POI_Box) == 0x000388, "Member 'ABP_MANG_Spawner_C::GE_Faction_Default_POI_Box' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpawnerFactionTag) == 0x000390, "Member 'ABP_MANG_Spawner_C::SpawnerFactionTag' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, CurrentlyPlayingMusic) == 0x000398, "Member 'ABP_MANG_Spawner_C::CurrentlyPlayingMusic' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, AllHenchmenDead) == 0x0003A0, "Member 'ABP_MANG_Spawner_C::AllHenchmenDead' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmenAlerted) == 0x0003A1, "Member 'ABP_MANG_Spawner_C::HenchmenAlerted' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmenCombat) == 0x0003A2, "Member 'ABP_MANG_Spawner_C::HenchmenCombat' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicBackground) == 0x0003A8, "Member 'ABP_MANG_Spawner_C::MusicBackground' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicOminous) == 0x0003B0, "Member 'ABP_MANG_Spawner_C::MusicOminous' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicCombat) == 0x0003B8, "Member 'ABP_MANG_Spawner_C::MusicCombat' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicVictory) == 0x0003C0, "Member 'ABP_MANG_Spawner_C::MusicVictory' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmanTypesEgo) == 0x0003C8, "Member 'ABP_MANG_Spawner_C::HenchmanTypesEgo' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmanTypesAlter) == 0x0003D8, "Member 'ABP_MANG_Spawner_C::HenchmanTypesAlter' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmanTypesDefault) == 0x0003E8, "Member 'ABP_MANG_Spawner_C::HenchmanTypesDefault' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ShouldPlayMusic) == 0x0003F8, "Member 'ABP_MANG_Spawner_C::ShouldPlayMusic' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, TestForcedFactionTag) == 0x0003FC, "Member 'ABP_MANG_Spawner_C::TestForcedFactionTag' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HenchmanTypesDefaultBox) == 0x000408, "Member 'ABP_MANG_Spawner_C::HenchmanTypesDefaultBox' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, PerPOILocationMasterSpawnControl) == 0x000418, "Member 'ABP_MANG_Spawner_C::PerPOILocationMasterSpawnControl' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ShouldPlayMusicDataRow) == 0x000468, "Member 'ABP_MANG_Spawner_C::ShouldPlayMusicDataRow' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, HighestAIAlertLevel) == 0x000488, "Member 'ABP_MANG_Spawner_C::HighestAIAlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DebugDisableMusic) == 0x000489, "Member 'ABP_MANG_Spawner_C::DebugDisableMusic' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, MusicController) == 0x000490, "Member 'ABP_MANG_Spawner_C::MusicController' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, TimeAllHenchmenEliminated) == 0x000498, "Member 'ABP_MANG_Spawner_C::TimeAllHenchmenEliminated' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpyLTM) == 0x00049C, "Member 'ABP_MANG_Spawner_C::SpyLTM' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DefenseTeamSpyLTM) == 0x00049D, "Member 'ABP_MANG_Spawner_C::DefenseTeamSpyLTM' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpyLTMPlaylistTags) == 0x0004A0, "Member 'ABP_MANG_Spawner_C::SpyLTMPlaylistTags' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, PerPOILeashRadius) == 0x0004A8, "Member 'ABP_MANG_Spawner_C::PerPOILeashRadius' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, PerPOILocationMasterBossControl) == 0x0004F8, "Member 'ABP_MANG_Spawner_C::PerPOILocationMasterBossControl' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpawnBossAtThisPOI) == 0x000548, "Member 'ABP_MANG_Spawner_C::SpawnBossAtThisPOI' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, LeashIterationList) == 0x000550, "Member 'ABP_MANG_Spawner_C::LeashIterationList' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ListOfHenchmenThatStillRequireLeashing) == 0x000560, "Member 'ABP_MANG_Spawner_C::ListOfHenchmenThatStillRequireLeashing' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, BBKeyLeashLocation) == 0x000570, "Member 'ABP_MANG_Spawner_C::BBKeyLeashLocation' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, BBKeyLeashRadius) == 0x000578, "Member 'ABP_MANG_Spawner_C::BBKeyLeashRadius' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, LeashRadius) == 0x000580, "Member 'ABP_MANG_Spawner_C::LeashRadius' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, FinalPrioritizedSpawnList) == 0x000588, "Member 'ABP_MANG_Spawner_C::FinalPrioritizedSpawnList' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, AllowDropInv) == 0x000598, "Member 'ABP_MANG_Spawner_C::AllowDropInv' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DeathDropAmmoListDefault) == 0x0005A0, "Member 'ABP_MANG_Spawner_C::DeathDropAmmoListDefault' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, DeathDropAmmoListEgoAndAlter) == 0x0005B0, "Member 'ABP_MANG_Spawner_C::DeathDropAmmoListEgoAndAlter' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenDeathDropAmmo) == 0x0005C0, "Member 'ABP_MANG_Spawner_C::ChosenDeathDropAmmo' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenCameraID) == 0x0005E8, "Member 'ABP_MANG_Spawner_C::ChosenCameraID' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, ChosenHenchmanTypeInt) == 0x0005EC, "Member 'ABP_MANG_Spawner_C::ChosenHenchmanTypeInt' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpawnWithOptimizedCullDistance) == 0x0005F0, "Member 'ABP_MANG_Spawner_C::SpawnWithOptimizedCullDistance' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, NumberOfAIWeAreAllowedToSpawn) == 0x0005F4, "Member 'ABP_MANG_Spawner_C::NumberOfAIWeAreAllowedToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ShouldDropAmmo) == 0x0005F8, "Member 'ABP_MANG_Spawner_C::Handle_ShouldDropAmmo' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, AllowDropAmmo) == 0x000608, "Member 'ABP_MANG_Spawner_C::AllowDropAmmo' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_DropInv) == 0x000610, "Member 'ABP_MANG_Spawner_C::Handle_DropInv' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_CullDistanceInterior) == 0x000620, "Member 'ABP_MANG_Spawner_C::Handle_CullDistanceInterior' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_CullDistanceExterior) == 0x000630, "Member 'ABP_MANG_Spawner_C::Handle_CullDistanceExterior' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_Default_BaseShield) == 0x000640, "Member 'ABP_MANG_Spawner_C::Handle_Default_BaseShield' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_Boss_BaseShield) == 0x000650, "Member 'ABP_MANG_Spawner_C::Handle_Boss_BaseShield' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, bHasSetupCamerasAndTurretsOnClient) == 0x000660, "Member 'ABP_MANG_Spawner_C::bHasSetupCamerasAndTurretsOnClient' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, BossHenchmanReplacementType) == 0x000661, "Member 'ABP_MANG_Spawner_C::BossHenchmanReplacementType' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, LastVOTarget) == 0x000668, "Member 'ABP_MANG_Spawner_C::LastVOTarget' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, VOTarget) == 0x000670, "Member 'ABP_MANG_Spawner_C::VOTarget' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, RandomIdleVOInt) == 0x000678, "Member 'ABP_MANG_Spawner_C::RandomIdleVOInt' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ShouldApplyRepFrequencyOptimization) == 0x000680, "Member 'ABP_MANG_Spawner_C::Handle_ShouldApplyRepFrequencyOptimization' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, Handle_ShouldApplyRepFrequencyOptimization_Boss) == 0x000690, "Member 'ABP_MANG_Spawner_C::Handle_ShouldApplyRepFrequencyOptimization_Boss' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, SpyLTMHenchmanNavFilter) == 0x0006A0, "Member 'ABP_MANG_Spawner_C::SpyLTMHenchmanNavFilter' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, CheckCalendarEvent) == 0x0006A8, "Member 'ABP_MANG_Spawner_C::CheckCalendarEvent' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, CalendarEventName) == 0x0006B0, "Member 'ABP_MANG_Spawner_C::CalendarEventName' has a wrong offset!");
static_assert(offsetof(ABP_MANG_Spawner_C, CalendarEventMustHaveThisAcivitySettingToSpawnHenchmen) == 0x0006C0, "Member 'ABP_MANG_Spawner_C::CalendarEventMustHaveThisAcivitySettingToSpawnHenchmen' has a wrong offset!");

}

