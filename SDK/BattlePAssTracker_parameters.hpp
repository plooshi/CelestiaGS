#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattlePAssTracker

#include "Basic.hpp"


namespace SDK::Params
{

// Function BattlePAssTracker.BattlePassTracker_C.HandleButtonIn
// 0x0008 (0x0008 - 0x0000)
struct BattlePassTracker_C_HandleButtonIn final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BattlePassTracker_C_HandleButtonIn) == 0x000008, "Wrong alignment on BattlePassTracker_C_HandleButtonIn");
static_assert(sizeof(BattlePassTracker_C_HandleButtonIn) == 0x000008, "Wrong size on BattlePassTracker_C_HandleButtonIn");
static_assert(offsetof(BattlePassTracker_C_HandleButtonIn, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'BattlePassTracker_C_HandleButtonIn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function BattlePAssTracker.BattlePassTracker_C.HandleInitialState
// 0x0040 (0x0040 - 0x0000)
struct BattlePassTracker_C_HandleInitialState final
{
public:
	class UBattlePassItemTracker_C*               K2Node_DynamicCast_AsBattle_Pass_Item_Tracker;     // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74FE[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassItemTracker_C*               K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_1;   // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_74FF[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassItemTracker_C*               K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_2;   // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7500[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBattlePassItemTracker_C*               K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_3;   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BattlePassTracker_C_HandleInitialState) == 0x000008, "Wrong alignment on BattlePassTracker_C_HandleInitialState");
static_assert(sizeof(BattlePassTracker_C_HandleInitialState) == 0x000040, "Wrong size on BattlePassTracker_C_HandleInitialState");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_AsBattle_Pass_Item_Tracker) == 0x000000, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_AsBattle_Pass_Item_Tracker' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_1) == 0x000010, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_1' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_bSuccess_1) == 0x000018, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_2) == 0x000020, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_2' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_bSuccess_2) == 0x000028, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_3) == 0x000030, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_AsBattle_Pass_Item_Tracker_3' has a wrong offset!");
static_assert(offsetof(BattlePassTracker_C_HandleInitialState, K2Node_DynamicCast_bSuccess_3) == 0x000038, "Member 'BattlePassTracker_C_HandleInitialState::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

}

