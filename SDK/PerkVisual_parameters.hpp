#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PerkVisual

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function PerkVisual.PerkVisual_C.ExecuteUbergraph_PerkVisual
// 0x0188 (0x0188 - 0x0000)
struct PerkVisual_C_ExecuteUbergraph_PerkVisual final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E7[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpyTechItemDefinition*             K2Node_CustomEvent_Spy_Tech_Item_Def;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetLargePreviewImage_ReturnValue;         // 0x0020(0x0028)(HasGetValueTypeHash)
	EFortRarity                                   CallFunc_GetRarity_ReturnValue;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79E8[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Temp_object_Variable;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_DynamicCast_AsTexture_2D;                   // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79E9[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x006C(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_79EA[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x00A8(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0118(0x0070)(ConstParm)
};
static_assert(alignof(PerkVisual_C_ExecuteUbergraph_PerkVisual) == 0x000008, "Wrong alignment on PerkVisual_C_ExecuteUbergraph_PerkVisual");
static_assert(sizeof(PerkVisual_C_ExecuteUbergraph_PerkVisual) == 0x000188, "Wrong size on PerkVisual_C_ExecuteUbergraph_PerkVisual");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, EntryPoint) == 0x000000, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::EntryPoint' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_Event_IsDesignTime) == 0x000014, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_CustomEvent_Spy_Tech_Item_Def) == 0x000018, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_CustomEvent_Spy_Tech_Item_Def' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, CallFunc_GetLargePreviewImage_ReturnValue) == 0x000020, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::CallFunc_GetLargePreviewImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, CallFunc_GetRarity_ReturnValue) == 0x000048, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::CallFunc_GetRarity_ReturnValue' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, Temp_object_Variable) == 0x000050, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_CustomEvent_Loaded) == 0x000058, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_DynamicCast_AsTexture_2D) == 0x000060, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_DynamicCast_AsTexture_2D' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_Event_MyGeometry) == 0x00006C, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_Event_MouseEvent_1) == 0x0000A8, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ExecuteUbergraph_PerkVisual, K2Node_Event_MouseEvent) == 0x000118, "Member 'PerkVisual_C_ExecuteUbergraph_PerkVisual::K2Node_Event_MouseEvent' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct PerkVisual_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PerkVisual_C_OnMouseLeave) == 0x000008, "Wrong alignment on PerkVisual_C_OnMouseLeave");
static_assert(sizeof(PerkVisual_C_OnMouseLeave) == 0x000070, "Wrong size on PerkVisual_C_OnMouseLeave");
static_assert(offsetof(PerkVisual_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'PerkVisual_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct PerkVisual_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(PerkVisual_C_OnMouseEnter) == 0x000008, "Wrong alignment on PerkVisual_C_OnMouseEnter");
static_assert(sizeof(PerkVisual_C_OnMouseEnter) == 0x0000A8, "Wrong size on PerkVisual_C_OnMouseEnter");
static_assert(offsetof(PerkVisual_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'PerkVisual_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'PerkVisual_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct PerkVisual_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(PerkVisual_C_PreConstruct) == 0x000001, "Wrong alignment on PerkVisual_C_PreConstruct");
static_assert(sizeof(PerkVisual_C_PreConstruct) == 0x000001, "Wrong size on PerkVisual_C_PreConstruct");
static_assert(offsetof(PerkVisual_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'PerkVisual_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.Set Spy Perk Item Def
// 0x0008 (0x0008 - 0x0000)
struct PerkVisual_C_Set_Spy_Perk_Item_Def final
{
public:
	class UFortSpyTechItemDefinition*             Spy_Tech_Item_Def;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_Set_Spy_Perk_Item_Def) == 0x000008, "Wrong alignment on PerkVisual_C_Set_Spy_Perk_Item_Def");
static_assert(sizeof(PerkVisual_C_Set_Spy_Perk_Item_Def) == 0x000008, "Wrong size on PerkVisual_C_Set_Spy_Perk_Item_Def");
static_assert(offsetof(PerkVisual_C_Set_Spy_Perk_Item_Def, Spy_Tech_Item_Def) == 0x000000, "Member 'PerkVisual_C_Set_Spy_Perk_Item_Def::Spy_Tech_Item_Def' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305
// 0x0008 (0x0008 - 0x0000)
struct PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305 final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305) == 0x000008, "Wrong alignment on PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305");
static_assert(sizeof(PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305) == 0x000008, "Wrong size on PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305");
static_assert(offsetof(PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305, Loaded) == 0x000000, "Member 'PerkVisual_C_OnLoaded_C75D0FD04AA7C3CE32752CB66B6BD305::Loaded' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.UpdateSwitcher
// 0x0010 (0x0010 - 0x0000)
struct PerkVisual_C_UpdateSwitcher final
{
public:
	bool                                          IsPassive;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79EB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_UpdateSwitcher) == 0x000004, "Wrong alignment on PerkVisual_C_UpdateSwitcher");
static_assert(sizeof(PerkVisual_C_UpdateSwitcher) == 0x000010, "Wrong size on PerkVisual_C_UpdateSwitcher");
static_assert(offsetof(PerkVisual_C_UpdateSwitcher, IsPassive) == 0x000000, "Member 'PerkVisual_C_UpdateSwitcher::IsPassive' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_UpdateSwitcher, Temp_bool_Variable) == 0x000001, "Member 'PerkVisual_C_UpdateSwitcher::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_UpdateSwitcher, Temp_int_Variable) == 0x000004, "Member 'PerkVisual_C_UpdateSwitcher::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_UpdateSwitcher, Temp_int_Variable_1) == 0x000008, "Member 'PerkVisual_C_UpdateSwitcher::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_UpdateSwitcher, K2Node_Select_Default) == 0x00000C, "Member 'PerkVisual_C_UpdateSwitcher::K2Node_Select_Default' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.ShowLabel
// 0x0005 (0x0005 - 0x0000)
struct PerkVisual_C_ShowLabel final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_ShowLabel) == 0x000001, "Wrong alignment on PerkVisual_C_ShowLabel");
static_assert(sizeof(PerkVisual_C_ShowLabel) == 0x000005, "Wrong size on PerkVisual_C_ShowLabel");
static_assert(offsetof(PerkVisual_C_ShowLabel, Show) == 0x000000, "Member 'PerkVisual_C_ShowLabel::Show' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ShowLabel, Temp_bool_Variable) == 0x000001, "Member 'PerkVisual_C_ShowLabel::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ShowLabel, Temp_byte_Variable) == 0x000002, "Member 'PerkVisual_C_ShowLabel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ShowLabel, Temp_byte_Variable_1) == 0x000003, "Member 'PerkVisual_C_ShowLabel::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(PerkVisual_C_ShowLabel, K2Node_Select_Default) == 0x000004, "Member 'PerkVisual_C_ShowLabel::K2Node_Select_Default' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.GetItem
// 0x0008 (0x0008 - 0x0000)
struct PerkVisual_C_GetItem final
{
public:
	class UFortSpyTechItemDefinition*             Param_SpyTechItemDef;                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_GetItem) == 0x000008, "Wrong alignment on PerkVisual_C_GetItem");
static_assert(sizeof(PerkVisual_C_GetItem) == 0x000008, "Wrong size on PerkVisual_C_GetItem");
static_assert(offsetof(PerkVisual_C_GetItem, Param_SpyTechItemDef) == 0x000000, "Member 'PerkVisual_C_GetItem::Param_SpyTechItemDef' has a wrong offset!");

// Function PerkVisual.PerkVisual_C.SetShear
// 0x0004 (0x0004 - 0x0000)
struct PerkVisual_C_SetShear final
{
public:
	int32                                         ShearAmount;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(PerkVisual_C_SetShear) == 0x000004, "Wrong alignment on PerkVisual_C_SetShear");
static_assert(sizeof(PerkVisual_C_SetShear) == 0x000004, "Wrong size on PerkVisual_C_SetShear");
static_assert(offsetof(PerkVisual_C_SetShear, ShearAmount) == 0x000000, "Member 'PerkVisual_C_SetShear::ShearAmount' has a wrong offset!");

}

