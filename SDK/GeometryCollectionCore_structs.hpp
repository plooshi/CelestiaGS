#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometryCollectionCore

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum GeometryCollectionCore.EGeometryCollectionCacheType
// NumValues: 0x0005
enum class EGeometryCollectionCacheType : uint8
{
	None                                     = 0,
	Record                                   = 1,
	Play                                     = 2,
	RecordAndPlay                            = 3,
	EGeometryCollectionCacheType_MAX         = 4,
};

// ScriptStruct GeometryCollectionCore.SolverCollisionData
// 0x006C (0x006C - 0x0000)
struct FSolverCollisionData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AccumulatedImpulse;                                // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity1;                                         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity2;                                         // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity1;                                  // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity2;                                  // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass1;                                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass2;                                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelsetIndex;                                     // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelsetIndexMesh;                                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolverCollisionData) == 0x000004, "Wrong alignment on FSolverCollisionData");
static_assert(sizeof(FSolverCollisionData) == 0x00006C, "Wrong size on FSolverCollisionData");
static_assert(offsetof(FSolverCollisionData, Location) == 0x000000, "Member 'FSolverCollisionData::Location' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, AccumulatedImpulse) == 0x00000C, "Member 'FSolverCollisionData::AccumulatedImpulse' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, Normal) == 0x000018, "Member 'FSolverCollisionData::Normal' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, Velocity1) == 0x000024, "Member 'FSolverCollisionData::Velocity1' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, Velocity2) == 0x000030, "Member 'FSolverCollisionData::Velocity2' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, AngularVelocity1) == 0x00003C, "Member 'FSolverCollisionData::AngularVelocity1' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, AngularVelocity2) == 0x000048, "Member 'FSolverCollisionData::AngularVelocity2' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, Mass1) == 0x000054, "Member 'FSolverCollisionData::Mass1' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, Mass2) == 0x000058, "Member 'FSolverCollisionData::Mass2' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, ParticleIndex) == 0x00005C, "Member 'FSolverCollisionData::ParticleIndex' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, LevelsetIndex) == 0x000060, "Member 'FSolverCollisionData::LevelsetIndex' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, ParticleIndexMesh) == 0x000064, "Member 'FSolverCollisionData::ParticleIndexMesh' has a wrong offset!");
static_assert(offsetof(FSolverCollisionData, LevelsetIndexMesh) == 0x000068, "Member 'FSolverCollisionData::LevelsetIndexMesh' has a wrong offset!");

// ScriptStruct GeometryCollectionCore.SolverBreakingData
// 0x0030 (0x0030 - 0x0000)
struct FSolverBreakingData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolverBreakingData) == 0x000004, "Wrong alignment on FSolverBreakingData");
static_assert(sizeof(FSolverBreakingData) == 0x000030, "Wrong size on FSolverBreakingData");
static_assert(offsetof(FSolverBreakingData, Location) == 0x000000, "Member 'FSolverBreakingData::Location' has a wrong offset!");
static_assert(offsetof(FSolverBreakingData, Velocity) == 0x00000C, "Member 'FSolverBreakingData::Velocity' has a wrong offset!");
static_assert(offsetof(FSolverBreakingData, AngularVelocity) == 0x000018, "Member 'FSolverBreakingData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FSolverBreakingData, Mass) == 0x000024, "Member 'FSolverBreakingData::Mass' has a wrong offset!");
static_assert(offsetof(FSolverBreakingData, ParticleIndex) == 0x000028, "Member 'FSolverBreakingData::ParticleIndex' has a wrong offset!");
static_assert(offsetof(FSolverBreakingData, ParticleIndexMesh) == 0x00002C, "Member 'FSolverBreakingData::ParticleIndexMesh' has a wrong offset!");

// ScriptStruct GeometryCollectionCore.SolverTrailingData
// 0x0030 (0x0030 - 0x0000)
struct FSolverTrailingData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AngularVelocity;                                   // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex;                                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndexMesh;                                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSolverTrailingData) == 0x000004, "Wrong alignment on FSolverTrailingData");
static_assert(sizeof(FSolverTrailingData) == 0x000030, "Wrong size on FSolverTrailingData");
static_assert(offsetof(FSolverTrailingData, Location) == 0x000000, "Member 'FSolverTrailingData::Location' has a wrong offset!");
static_assert(offsetof(FSolverTrailingData, Velocity) == 0x00000C, "Member 'FSolverTrailingData::Velocity' has a wrong offset!");
static_assert(offsetof(FSolverTrailingData, AngularVelocity) == 0x000018, "Member 'FSolverTrailingData::AngularVelocity' has a wrong offset!");
static_assert(offsetof(FSolverTrailingData, Mass) == 0x000024, "Member 'FSolverTrailingData::Mass' has a wrong offset!");
static_assert(offsetof(FSolverTrailingData, ParticleIndex) == 0x000028, "Member 'FSolverTrailingData::ParticleIndex' has a wrong offset!");
static_assert(offsetof(FSolverTrailingData, ParticleIndexMesh) == 0x00002C, "Member 'FSolverTrailingData::ParticleIndexMesh' has a wrong offset!");

// ScriptStruct GeometryCollectionCore.RecordedFrame
// 0x00B8 (0x00B8 - 0x0000)
struct FRecordedFrame final
{
public:
	TArray<struct FTransform>                     Transforms;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TransformIndices;                                  // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PreviousTransformIndices;                          // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  DisabledFlags;                                     // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolverCollisionData>           CollisionS;                                        // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSolverBreakingData>            Breakings;                                         // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<struct FSolverTrailingData>              Trailings;                                         // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4854[0x4];                                     // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRecordedFrame) == 0x000008, "Wrong alignment on FRecordedFrame");
static_assert(sizeof(FRecordedFrame) == 0x0000B8, "Wrong size on FRecordedFrame");
static_assert(offsetof(FRecordedFrame, Transforms) == 0x000000, "Member 'FRecordedFrame::Transforms' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, TransformIndices) == 0x000010, "Member 'FRecordedFrame::TransformIndices' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, PreviousTransformIndices) == 0x000020, "Member 'FRecordedFrame::PreviousTransformIndices' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, DisabledFlags) == 0x000030, "Member 'FRecordedFrame::DisabledFlags' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, CollisionS) == 0x000040, "Member 'FRecordedFrame::CollisionS' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Breakings) == 0x000050, "Member 'FRecordedFrame::Breakings' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Trailings) == 0x000060, "Member 'FRecordedFrame::Trailings' has a wrong offset!");
static_assert(offsetof(FRecordedFrame, Timestamp) == 0x0000B0, "Member 'FRecordedFrame::Timestamp' has a wrong offset!");

// ScriptStruct GeometryCollectionCore.RecordedTransformTrack
// 0x0010 (0x0010 - 0x0000)
struct FRecordedTransformTrack final
{
public:
	TArray<struct FRecordedFrame>                 Records;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRecordedTransformTrack) == 0x000008, "Wrong alignment on FRecordedTransformTrack");
static_assert(sizeof(FRecordedTransformTrack) == 0x000010, "Wrong size on FRecordedTransformTrack");
static_assert(offsetof(FRecordedTransformTrack, Records) == 0x000000, "Member 'FRecordedTransformTrack::Records' has a wrong offset!");

}

