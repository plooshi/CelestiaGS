#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LatencyUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// Class LatencyUI.LatencyGraph
// 0x0040 (0x0270 - 0x0230)
class ULatencyGraph : public UUserWidget
{
public:
	struct FColor                                 TotalLatencyLineColor;                             // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 GameLatencyLineColor;                              // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 RenderLatencyLineColor;                            // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DriverLatencyLineColor;                            // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 OSWorkQueueLatencyLineColor;                       // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 GPURenderLatencyLineColor;                         // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 BackgroundColor;                                   // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxLatencyToGraph;                                 // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DesiredSize;                                       // 0x0250(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A28[0x18];                                    // 0x0258(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LatencyGraph">();
	}
	static class ULatencyGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULatencyGraph>();
	}
};
static_assert(alignof(ULatencyGraph) == 0x000008, "Wrong alignment on ULatencyGraph");
static_assert(sizeof(ULatencyGraph) == 0x000270, "Wrong size on ULatencyGraph");
static_assert(offsetof(ULatencyGraph, TotalLatencyLineColor) == 0x000230, "Member 'ULatencyGraph::TotalLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, GameLatencyLineColor) == 0x000234, "Member 'ULatencyGraph::GameLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, RenderLatencyLineColor) == 0x000238, "Member 'ULatencyGraph::RenderLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, DriverLatencyLineColor) == 0x00023C, "Member 'ULatencyGraph::DriverLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, OSWorkQueueLatencyLineColor) == 0x000240, "Member 'ULatencyGraph::OSWorkQueueLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, GPURenderLatencyLineColor) == 0x000244, "Member 'ULatencyGraph::GPURenderLatencyLineColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, BackgroundColor) == 0x000248, "Member 'ULatencyGraph::BackgroundColor' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, MaxLatencyToGraph) == 0x00024C, "Member 'ULatencyGraph::MaxLatencyToGraph' has a wrong offset!");
static_assert(offsetof(ULatencyGraph, DesiredSize) == 0x000250, "Member 'ULatencyGraph::DesiredSize' has a wrong offset!");

// Class LatencyUI.LatencyWidget
// 0x00F0 (0x0320 - 0x0230)
class ULatencyWidget : public UUserWidget
{
public:
	uint8                                         Pad_4A29[0x8];                                     // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonTextBlock*                       TotalLatencyUI;                                    // 0x0238(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       GameLatencyUI;                                     // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       RenderLatencyUI;                                   // 0x0248(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       OSWorkLatencyUI;                                   // 0x0250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       DriverLatencyUI;                                   // 0x0258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       GPURenderLatencyUI;                                // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonTextBlock*                       TweakLatencyUI;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A2A[0xB0];                                    // 0x0270(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartTimer();
	void StopTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LatencyWidget">();
	}
	static class ULatencyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULatencyWidget>();
	}
};
static_assert(alignof(ULatencyWidget) == 0x000008, "Wrong alignment on ULatencyWidget");
static_assert(sizeof(ULatencyWidget) == 0x000320, "Wrong size on ULatencyWidget");
static_assert(offsetof(ULatencyWidget, TotalLatencyUI) == 0x000238, "Member 'ULatencyWidget::TotalLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, GameLatencyUI) == 0x000240, "Member 'ULatencyWidget::GameLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, RenderLatencyUI) == 0x000248, "Member 'ULatencyWidget::RenderLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, OSWorkLatencyUI) == 0x000250, "Member 'ULatencyWidget::OSWorkLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, DriverLatencyUI) == 0x000258, "Member 'ULatencyWidget::DriverLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, GPURenderLatencyUI) == 0x000260, "Member 'ULatencyWidget::GPURenderLatencyUI' has a wrong offset!");
static_assert(offsetof(ULatencyWidget, TweakLatencyUI) == 0x000268, "Member 'ULatencyWidget::TweakLatencyUI' has a wrong offset!");

}

