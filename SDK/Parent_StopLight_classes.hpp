#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Parent_StopLight

#include "Basic.hpp"

#include "Parent_BuildingPropActor_classes.hpp"
#include "Engine_structs.hpp"
#include "StopLight_Struct_structs.hpp"
#include "DayPhaseFloats_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Parent_StopLight.Parent_StopLight_C
// 0x0168 (0x0E08 - 0x0CA0)
class AParent_StopLight_C : public AParent_BuildingPropActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_Parent_StopLight_C;                 // 0x0CA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DebugWind_0;                                       // 0x0CA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82D6[0x7];                                     // 0x0CA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalMaterials_0;                               // 0x0CB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             IntenseWindMaterialsForPreview_0;                  // 0x0CC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wind_Intensity_Debug_Mesh_0;                       // 0x0CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Debug_TempMaterial_0;                              // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Debug_Wind_Intensity_0;                            // 0x0CE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DebugWindYaw_0;                                    // 0x0CE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Light_Intensity_Over_Time_of_Day__0;               // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FDayPhaseFloats                        Emissive_Intensity_Over_Time_of_Day_0;             // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CodeControlled_NumberOfMaterials_0;                // 0x0D08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82D7[0x4];                                     // 0x0D0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLinearColor>                   CodeControlled_EmissiveColor_0;                    // 0x0D10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<float>                                 CodeControlled_LightConeOpacity_0;                 // 0x0D20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Animate_Emissive_and_Lights_Over_Time_0;           // 0x0D30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_82D8[0x3];                                     // 0x0D31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Day_Phase_Transition_Length_0;                     // 0x0D34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x0D38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82D9[0x3];                                     // 0x0D39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Last_successful_index;                             // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Light_Vector;                                      // 0x0D40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<struct FStopLight_Struct>              LightArrays;                                       // 0x0D50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ULightComponent*>                TempLightArray;                                    // 0x0D60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<int32>                                 IncrementingNumber;                                // 0x0D70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Mod_Number;                                        // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewVar_1;                                          // 0x0D84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Light_intensity;                                   // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         IntersectionID;                                    // 0x0D8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RandomIntersectionTimeOffset;                      // 0x0D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_82DA[0x4];                                     // 0x0D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStopLight_Struct                      Temp_Variable;                                     // 0x0D98(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewVar_2;                                          // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Light_has_run_once;                                // 0x0DCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_82DB[0x3];                                     // 0x0DCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStopLight_Struct                      NewVar_3;                                          // 0x0DD0(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time_Per_Light_Phase;                              // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Parent_StopLight(int32 EntryPoint);
	void Switchlights();
	void Begin_Working();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Parent_StopLight_C">();
	}
	static class AParent_StopLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AParent_StopLight_C>();
	}
};
static_assert(alignof(AParent_StopLight_C) == 0x000008, "Wrong alignment on AParent_StopLight_C");
static_assert(sizeof(AParent_StopLight_C) == 0x000E08, "Wrong size on AParent_StopLight_C");
static_assert(offsetof(AParent_StopLight_C, UberGraphFrame_Parent_StopLight_C) == 0x000CA0, "Member 'AParent_StopLight_C::UberGraphFrame_Parent_StopLight_C' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, DebugWind_0) == 0x000CA8, "Member 'AParent_StopLight_C::DebugWind_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, OriginalMaterials_0) == 0x000CB0, "Member 'AParent_StopLight_C::OriginalMaterials_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IntenseWindMaterialsForPreview_0) == 0x000CC0, "Member 'AParent_StopLight_C::IntenseWindMaterialsForPreview_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Wind_Intensity_Debug_Mesh_0) == 0x000CD0, "Member 'AParent_StopLight_C::Wind_Intensity_Debug_Mesh_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Debug_TempMaterial_0) == 0x000CD8, "Member 'AParent_StopLight_C::Debug_TempMaterial_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Debug_Wind_Intensity_0) == 0x000CE0, "Member 'AParent_StopLight_C::Debug_Wind_Intensity_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, DebugWindYaw_0) == 0x000CE4, "Member 'AParent_StopLight_C::DebugWindYaw_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_Intensity_Over_Time_of_Day__0) == 0x000CE8, "Member 'AParent_StopLight_C::Light_Intensity_Over_Time_of_Day__0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Emissive_Intensity_Over_Time_of_Day_0) == 0x000CF8, "Member 'AParent_StopLight_C::Emissive_Intensity_Over_Time_of_Day_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_NumberOfMaterials_0) == 0x000D08, "Member 'AParent_StopLight_C::CodeControlled_NumberOfMaterials_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_EmissiveColor_0) == 0x000D10, "Member 'AParent_StopLight_C::CodeControlled_EmissiveColor_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, CodeControlled_LightConeOpacity_0) == 0x000D20, "Member 'AParent_StopLight_C::CodeControlled_LightConeOpacity_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Animate_Emissive_and_Lights_Over_Time_0) == 0x000D30, "Member 'AParent_StopLight_C::Animate_Emissive_and_Lights_Over_Time_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Day_Phase_Transition_Length_0) == 0x000D34, "Member 'AParent_StopLight_C::Day_Phase_Transition_Length_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_0) == 0x000D38, "Member 'AParent_StopLight_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Last_successful_index) == 0x000D3C, "Member 'AParent_StopLight_C::Last_successful_index' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_Vector) == 0x000D40, "Member 'AParent_StopLight_C::Light_Vector' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, LightArrays) == 0x000D50, "Member 'AParent_StopLight_C::LightArrays' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, TempLightArray) == 0x000D60, "Member 'AParent_StopLight_C::TempLightArray' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IncrementingNumber) == 0x000D70, "Member 'AParent_StopLight_C::IncrementingNumber' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Mod_Number) == 0x000D80, "Member 'AParent_StopLight_C::Mod_Number' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_1) == 0x000D84, "Member 'AParent_StopLight_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_intensity) == 0x000D88, "Member 'AParent_StopLight_C::Light_intensity' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, IntersectionID) == 0x000D8C, "Member 'AParent_StopLight_C::IntersectionID' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, RandomIntersectionTimeOffset) == 0x000D90, "Member 'AParent_StopLight_C::RandomIntersectionTimeOffset' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Temp_Variable) == 0x000D98, "Member 'AParent_StopLight_C::Temp_Variable' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_2) == 0x000DC8, "Member 'AParent_StopLight_C::NewVar_2' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Light_has_run_once) == 0x000DCC, "Member 'AParent_StopLight_C::Light_has_run_once' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, NewVar_3) == 0x000DD0, "Member 'AParent_StopLight_C::NewVar_3' has a wrong offset!");
static_assert(offsetof(AParent_StopLight_C, Time_Per_Light_Phase) == 0x000E00, "Member 'AParent_StopLight_C::Time_Per_Light_Phase' has a wrong offset!");

}

