#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Recreation_Park_Swing03

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Recreation_Park_Swing03.Recreation_Park_Swing03_C.ExecuteUbergraph_Recreation_Park_Swing03
// 0x01C8 (0x01C8 - 0x0000)
struct Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E0E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_Event_MyComp;                               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Other;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_OtherComp;                            // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelfMoved;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E0F[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Event_HitLocation_1;                        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal_1;                          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_NormalImpulse;                        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_Hit;                                  // 0x0048(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_Event_Damage;                               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      K2Node_Event_DamageType;                           // 0x00D8(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitLocation;                          // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_HitNormal;                            // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_Event_HitComponent;                         // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_BoneName;                             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Event_ShotFromDirection;                    // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E10[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x0128(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsSimulatingPhysics_ReturnValue;          // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E11[0x3];                                     // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03) == 0x000008, "Wrong alignment on Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03");
static_assert(sizeof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03) == 0x0001C8, "Wrong size on Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, EntryPoint) == 0x000000, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::EntryPoint' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_MyComp) == 0x000008, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_MyComp' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_Other) == 0x000010, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_Other' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_OtherComp) == 0x000018, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_OtherComp' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_bSelfMoved) == 0x000020, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_bSelfMoved' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitLocation_1) == 0x000024, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitLocation_1' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitNormal_1) == 0x000030, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitNormal_1' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_NormalImpulse) == 0x00003C, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_NormalImpulse' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_Hit) == 0x000048, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_Hit' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_Damage) == 0x0000D4, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_DamageType) == 0x0000D8, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_DamageType' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitLocation) == 0x0000E0, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitLocation' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitNormal) == 0x0000EC, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitNormal' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitComponent) == 0x0000F8, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitComponent' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_BoneName) == 0x000100, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_BoneName' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_ShotFromDirection) == 0x000108, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_ShotFromDirection' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_InstigatedBy) == 0x000118, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_DamageCauser) == 0x000120, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, K2Node_Event_HitInfo) == 0x000128, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, CallFunc_IsSimulatingPhysics_ReturnValue) == 0x0001B4, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::CallFunc_IsSimulatingPhysics_ReturnValue' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0001B8, "Member 'Recreation_Park_Swing03_C_ExecuteUbergraph_Recreation_Park_Swing03::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");

// Function Recreation_Park_Swing03.Recreation_Park_Swing03_C.ReceivePointDamage
// 0x00E8 (0x00E8 - 0x0000)
struct Recreation_Park_Swing03_C_ReceivePointDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E12[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ShotFromDirection;                                 // 0x0038(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6E13[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0058(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Recreation_Park_Swing03_C_ReceivePointDamage) == 0x000008, "Wrong alignment on Recreation_Park_Swing03_C_ReceivePointDamage");
static_assert(sizeof(Recreation_Park_Swing03_C_ReceivePointDamage) == 0x0000E8, "Wrong size on Recreation_Park_Swing03_C_ReceivePointDamage");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, Damage) == 0x000000, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::Damage' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, DamageType) == 0x000008, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::DamageType' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, HitLocation) == 0x000010, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, HitNormal) == 0x00001C, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::HitNormal' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, HitComponent) == 0x000028, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::HitComponent' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, BoneName) == 0x000030, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::BoneName' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, ShotFromDirection) == 0x000038, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, InstigatedBy) == 0x000048, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, DamageCauser) == 0x000050, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceivePointDamage, HitInfo) == 0x000058, "Member 'Recreation_Park_Swing03_C_ReceivePointDamage::HitInfo' has a wrong offset!");

// Function Recreation_Park_Swing03.Recreation_Park_Swing03_C.ReceiveHit
// 0x00D0 (0x00D0 - 0x0000)
struct Recreation_Park_Swing03_C_ReceiveHit final
{
public:
	class UPrimitiveComponent*                    MyComp;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSelfMoved;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6E14[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0034(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0040(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(Recreation_Park_Swing03_C_ReceiveHit) == 0x000008, "Wrong alignment on Recreation_Park_Swing03_C_ReceiveHit");
static_assert(sizeof(Recreation_Park_Swing03_C_ReceiveHit) == 0x0000D0, "Wrong size on Recreation_Park_Swing03_C_ReceiveHit");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, MyComp) == 0x000000, "Member 'Recreation_Park_Swing03_C_ReceiveHit::MyComp' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, Other) == 0x000008, "Member 'Recreation_Park_Swing03_C_ReceiveHit::Other' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, OtherComp) == 0x000010, "Member 'Recreation_Park_Swing03_C_ReceiveHit::OtherComp' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, bSelfMoved) == 0x000018, "Member 'Recreation_Park_Swing03_C_ReceiveHit::bSelfMoved' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, HitLocation) == 0x00001C, "Member 'Recreation_Park_Swing03_C_ReceiveHit::HitLocation' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, HitNormal) == 0x000028, "Member 'Recreation_Park_Swing03_C_ReceiveHit::HitNormal' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, NormalImpulse) == 0x000034, "Member 'Recreation_Park_Swing03_C_ReceiveHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(Recreation_Park_Swing03_C_ReceiveHit, Hit) == 0x000040, "Member 'Recreation_Park_Swing03_C_ReceiveHit::Hit' has a wrong offset!");

}

