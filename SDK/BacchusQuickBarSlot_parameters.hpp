#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BacchusQuickBarSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ItemDisplayStyle_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.StartOngoingUse
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarSlot_C_StartOngoingUse final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_StartOngoingUse) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_StartOngoingUse");
static_assert(sizeof(BacchusQuickbarSlot_C_StartOngoingUse) == 0x000004, "Wrong size on BacchusQuickbarSlot_C_StartOngoingUse");
static_assert(offsetof(BacchusQuickbarSlot_C_StartOngoingUse, PointerIndex) == 0x000000, "Member 'BacchusQuickbarSlot_C_StartOngoingUse::PointerIndex' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.ExecuteUbergraph_BacchusQuickbarSlot
// 0x01F0 (0x01F0 - 0x0000)
struct BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A38[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A39[0x5];                                     // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue_1;                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EFortQuickBars QuickbarIndex, TArray<int32>& ChangedSlots)> K2Node_CreateDelegate_OutputDelegate;              // 0x0050(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3A[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimatedBoxScaleFactor;         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3B[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3C[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bSelected;                            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3D[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent_1;                       // 0x0098(0x0070)()
	class UDragDropOperation*                     K2Node_Event_Operation_1;                          // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaInventoryDragDrop_C*             K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop;   // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3E[0x6];                                     // 0x011A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0120(0x0070)(ConstParm)
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemDisplayStyle                             Temp_byte_Variable_2;                              // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3F[0x7];                                     // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaInventoryDragDrop_C*             K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop_1; // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A40[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItem*                         K2Node_DynamicCast_AsFort_World_Item;              // 0x01B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A41[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumInStack_ReturnValue;                // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDragItemDroppable_Is_Droppable;         // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortQuickBars                                K2Node_CustomEvent_QuickbarIndex;                  // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A42[0x6];                                     // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_CustomEvent_ChangedSlots;                   // 0x01D0(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         K2Node_Event_PointerIndex_1;                       // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PointerIndex;                         // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot");
static_assert(sizeof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot) == 0x0001F0, "Wrong size on BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, EntryPoint) == 0x000000, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable) == 0x000008, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_1) == 0x000010, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_2) == 0x000018, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_3) == 0x000020, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_4) == 0x000028, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_5) == 0x000030, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_bool_Variable) == 0x000038, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_byte_Variable) == 0x000039, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_byte_Variable_1) == 0x00003A, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_GetContext_ReturnValue) == 0x000040, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_GetContext_ReturnValue_1) == 0x000048, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_GetContext_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_CreateDelegate_OutputDelegate) == 0x000050, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_IsDesignTime) == 0x000060, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_CustomEvent_AnimatedBoxScaleFactor) == 0x000064, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_CustomEvent_AnimatedBoxScaleFactor' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_object_Variable_6) == 0x000068, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_SwitchEnum_CmpSuccess) == 0x000070, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_PlayAnimation_ReturnValue) == 0x000078, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_GetEndTime_ReturnValue) == 0x000080, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_PlayAnimation_ReturnValue_1) == 0x000088, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_bSelected) == 0x000090, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_bSelected' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_PointerEvent_1) == 0x000098, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_PointerEvent_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_Operation_1) == 0x000108, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_Operation_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop) == 0x000110, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Select_Default) == 0x000119, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_PointerEvent) == 0x000120, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_Operation) == 0x000190, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, Temp_byte_Variable_2) == 0x000198, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop_1) == 0x0001A0, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_bSuccess_1) == 0x0001A8, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Select_Default_1) == 0x0001B0, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_AsFort_World_Item) == 0x0001B8, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_AsFort_World_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_DynamicCast_bSuccess_2) == 0x0001C0, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_GetNumInStack_ReturnValue) == 0x0001C4, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_GetNumInStack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_IsDragItemDroppable_Is_Droppable) == 0x0001C8, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_IsDragItemDroppable_Is_Droppable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_CustomEvent_QuickbarIndex) == 0x0001C9, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_CustomEvent_QuickbarIndex' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_CustomEvent_ChangedSlots) == 0x0001D0, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_CustomEvent_ChangedSlots' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_PointerIndex_1) == 0x0001E0, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_PointerIndex_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, K2Node_Event_PointerIndex) == 0x0001E4, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::K2Node_Event_PointerIndex' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_Not_PreBool_ReturnValue) == 0x0001E8, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot, CallFunc_BooleanAND_ReturnValue) == 0x0001E9, "Member 'BacchusQuickbarSlot_C_ExecuteUbergraph_BacchusQuickbarSlot::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.EndInteraction
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarSlot_C_EndInteraction final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_EndInteraction) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_EndInteraction");
static_assert(sizeof(BacchusQuickbarSlot_C_EndInteraction) == 0x000004, "Wrong size on BacchusQuickbarSlot_C_EndInteraction");
static_assert(offsetof(BacchusQuickbarSlot_C_EndInteraction, PointerIndex) == 0x000000, "Member 'BacchusQuickbarSlot_C_EndInteraction::PointerIndex' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Handle OnQuickbarContentsChanged
// 0x0018 (0x0018 - 0x0000)
struct BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged final
{
public:
	EFortQuickBars                                QuickbarIndex;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A43[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ChangedSlots;                                      // 0x0008(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged");
static_assert(sizeof(BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged) == 0x000018, "Wrong size on BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged, QuickbarIndex) == 0x000000, "Member 'BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged::QuickbarIndex' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged, ChangedSlots) == 0x000008, "Member 'BacchusQuickbarSlot_C_Handle_OnQuickbarContentsChanged::ChangedSlots' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.OnDragCancelled
// 0x0078 (0x0078 - 0x0000)
struct BacchusQuickbarSlot_C_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_OnDragCancelled) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_OnDragCancelled");
static_assert(sizeof(BacchusQuickbarSlot_C_OnDragCancelled) == 0x000078, "Wrong size on BacchusQuickbarSlot_C_OnDragCancelled");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'BacchusQuickbarSlot_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragCancelled, Operation) == 0x000070, "Member 'BacchusQuickbarSlot_C_OnDragCancelled::Operation' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.OnDragLeave
// 0x0078 (0x0078 - 0x0000)
struct BacchusQuickbarSlot_C_OnDragLeave final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_OnDragLeave) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_OnDragLeave");
static_assert(sizeof(BacchusQuickbarSlot_C_OnDragLeave) == 0x000078, "Wrong size on BacchusQuickbarSlot_C_OnDragLeave");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragLeave, PointerEvent) == 0x000000, "Member 'BacchusQuickbarSlot_C_OnDragLeave::PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragLeave, Operation) == 0x000070, "Member 'BacchusQuickbarSlot_C_OnDragLeave::Operation' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.SetSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct BacchusQuickbarSlot_C_SetSlotSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_SetSlotSelected) == 0x000001, "Wrong alignment on BacchusQuickbarSlot_C_SetSlotSelected");
static_assert(sizeof(BacchusQuickbarSlot_C_SetSlotSelected) == 0x000001, "Wrong size on BacchusQuickbarSlot_C_SetSlotSelected");
static_assert(offsetof(BacchusQuickbarSlot_C_SetSlotSelected, bSelected) == 0x000000, "Member 'BacchusQuickbarSlot_C_SetSlotSelected::bSelected' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.SetAnimatedBoxScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor final
{
public:
	float                                         Param_AnimatedBoxScaleFactor;                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(sizeof(BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong size on BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor");
static_assert(offsetof(BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor, Param_AnimatedBoxScaleFactor) == 0x000000, "Member 'BacchusQuickbarSlot_C_SetAnimatedBoxScaleFactor::Param_AnimatedBoxScaleFactor' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct BacchusQuickbarSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_PreConstruct) == 0x000001, "Wrong alignment on BacchusQuickbarSlot_C_PreConstruct");
static_assert(sizeof(BacchusQuickbarSlot_C_PreConstruct) == 0x000001, "Wrong size on BacchusQuickbarSlot_C_PreConstruct");
static_assert(offsetof(BacchusQuickbarSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'BacchusQuickbarSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.InitializeCooldowns
// 0x0010 (0x0010 - 0x0000)
struct BacchusQuickbarSlot_C_InitializeCooldowns final
{
public:
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_InitializeCooldowns) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_InitializeCooldowns");
static_assert(sizeof(BacchusQuickbarSlot_C_InitializeCooldowns) == 0x000010, "Wrong size on BacchusQuickbarSlot_C_InitializeCooldowns");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeCooldowns, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000000, "Member 'BacchusQuickbarSlot_C_InitializeCooldowns::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeCooldowns, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'BacchusQuickbarSlot_C_InitializeCooldowns::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.UpdateItemBoxSize
// 0x0001 (0x0001 - 0x0000)
struct BacchusQuickbarSlot_C_UpdateItemBoxSize final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_UpdateItemBoxSize) == 0x000001, "Wrong alignment on BacchusQuickbarSlot_C_UpdateItemBoxSize");
static_assert(sizeof(BacchusQuickbarSlot_C_UpdateItemBoxSize) == 0x000001, "Wrong size on BacchusQuickbarSlot_C_UpdateItemBoxSize");
static_assert(offsetof(BacchusQuickbarSlot_C_UpdateItemBoxSize, Item_Type_To_Show) == 0x000000, "Member 'BacchusQuickbarSlot_C_UpdateItemBoxSize::Item_Type_To_Show' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.InitializeInvalidation
// 0x0010 (0x0010 - 0x0000)
struct BacchusQuickbarSlot_C_InitializeInvalidation final
{
public:
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureState                           CallFunc_GetFeatureState_OutFeatureState;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureStateReason                     CallFunc_GetFeatureState_OutReason;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_InitializeInvalidation) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_InitializeInvalidation");
static_assert(sizeof(BacchusQuickbarSlot_C_InitializeInvalidation) == 0x000010, "Wrong size on BacchusQuickbarSlot_C_InitializeInvalidation");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeInvalidation, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'BacchusQuickbarSlot_C_InitializeInvalidation::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeInvalidation, CallFunc_GetFeatureState_OutFeatureState) == 0x000008, "Member 'BacchusQuickbarSlot_C_InitializeInvalidation::CallFunc_GetFeatureState_OutFeatureState' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeInvalidation, CallFunc_GetFeatureState_OutReason) == 0x000009, "Member 'BacchusQuickbarSlot_C_InitializeInvalidation::CallFunc_GetFeatureState_OutReason' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_InitializeInvalidation, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'BacchusQuickbarSlot_C_InitializeInvalidation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.OnDragDetected
// 0x00D0 (0x00D0 - 0x0000)
struct BacchusQuickbarSlot_C_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaInventoryDragDrop_C*             CallFunc_CreateDragDropOperation_ReturnValue;      // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A44[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAthenaInventoryDragVisual_C*           CallFunc_Create_ReturnValue;                       // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_OnDragDetected) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_OnDragDetected");
static_assert(sizeof(BacchusQuickbarSlot_C_OnDragDetected) == 0x0000D0, "Wrong size on BacchusQuickbarSlot_C_OnDragDetected");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'BacchusQuickbarSlot_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'BacchusQuickbarSlot_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, Operation) == 0x0000A8, "Member 'BacchusQuickbarSlot_C_OnDragDetected::Operation' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, CallFunc_CreateDragDropOperation_ReturnValue) == 0x0000B0, "Member 'BacchusQuickbarSlot_C_OnDragDetected::CallFunc_CreateDragDropOperation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, CallFunc_IsValid_ReturnValue) == 0x0000B8, "Member 'BacchusQuickbarSlot_C_OnDragDetected::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, CallFunc_MakeLiteralByte_ReturnValue) == 0x0000B9, "Member 'BacchusQuickbarSlot_C_OnDragDetected::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, CallFunc_GetOwningPlayer_ReturnValue) == 0x0000C0, "Member 'BacchusQuickbarSlot_C_OnDragDetected::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragDetected, CallFunc_Create_ReturnValue) == 0x0000C8, "Member 'BacchusQuickbarSlot_C_OnDragDetected::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.OnDragOver
// 0x00E8 (0x00E8 - 0x0000)
struct BacchusQuickbarSlot_C_OnDragOver final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A45[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              K2Node_DynamicCast_AsFort_Item;                    // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A46[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaInventoryDragDrop_C*             K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop;   // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A47[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanSwapItem_ReturnValue;                  // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_OnDragOver) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_OnDragOver");
static_assert(sizeof(BacchusQuickbarSlot_C_OnDragOver) == 0x0000E8, "Wrong size on BacchusQuickbarSlot_C_OnDragOver");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, MyGeometry) == 0x000000, "Member 'BacchusQuickbarSlot_C_OnDragOver::MyGeometry' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, PointerEvent) == 0x000038, "Member 'BacchusQuickbarSlot_C_OnDragOver::PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, Operation) == 0x0000A8, "Member 'BacchusQuickbarSlot_C_OnDragOver::Operation' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, ReturnValue) == 0x0000B0, "Member 'BacchusQuickbarSlot_C_OnDragOver::ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, CallFunc_Not_PreBool_ReturnValue) == 0x0000B1, "Member 'BacchusQuickbarSlot_C_OnDragOver::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, K2Node_DynamicCast_AsFort_Item) == 0x0000B8, "Member 'BacchusQuickbarSlot_C_OnDragOver::K2Node_DynamicCast_AsFort_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BacchusQuickbarSlot_C_OnDragOver::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop) == 0x0000C8, "Member 'BacchusQuickbarSlot_C_OnDragOver::K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'BacchusQuickbarSlot_C_OnDragOver::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, CallFunc_GetContext_ReturnValue) == 0x0000D8, "Member 'BacchusQuickbarSlot_C_OnDragOver::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDragOver, CallFunc_CanSwapItem_ReturnValue) == 0x0000E0, "Member 'BacchusQuickbarSlot_C_OnDragOver::CallFunc_CanSwapItem_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.OnDrop
// 0x00F0 (0x00F0 - 0x0000)
struct BacchusQuickbarSlot_C_OnDrop final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0070)(BlueprintVisible, BlueprintReadOnly, Parm)
	class UDragDropOperation*                     Operation;                                         // 0x00A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A48[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaInventoryDragDrop_C*             K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop;   // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A49[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              K2Node_DynamicCast_AsFort_Item;                    // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4A[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PointerEvent_GetPointerIndex_ReturnValue; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4B[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DropItemOnQuickBar_ReturnValue;           // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_OnDrop) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_OnDrop");
static_assert(sizeof(BacchusQuickbarSlot_C_OnDrop) == 0x0000F0, "Wrong size on BacchusQuickbarSlot_C_OnDrop");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, MyGeometry) == 0x000000, "Member 'BacchusQuickbarSlot_C_OnDrop::MyGeometry' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, PointerEvent) == 0x000038, "Member 'BacchusQuickbarSlot_C_OnDrop::PointerEvent' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, Operation) == 0x0000A8, "Member 'BacchusQuickbarSlot_C_OnDrop::Operation' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, ReturnValue) == 0x0000B0, "Member 'BacchusQuickbarSlot_C_OnDrop::ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop) == 0x0000B8, "Member 'BacchusQuickbarSlot_C_OnDrop::K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BacchusQuickbarSlot_C_OnDrop::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, K2Node_DynamicCast_AsFort_Item) == 0x0000C8, "Member 'BacchusQuickbarSlot_C_OnDrop::K2Node_DynamicCast_AsFort_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, K2Node_DynamicCast_bSuccess_1) == 0x0000D0, "Member 'BacchusQuickbarSlot_C_OnDrop::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, CallFunc_PointerEvent_GetPointerIndex_ReturnValue) == 0x0000D4, "Member 'BacchusQuickbarSlot_C_OnDrop::CallFunc_PointerEvent_GetPointerIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, CallFunc_Not_PreBool_ReturnValue) == 0x0000D8, "Member 'BacchusQuickbarSlot_C_OnDrop::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, CallFunc_GetContext_ReturnValue) == 0x0000E0, "Member 'BacchusQuickbarSlot_C_OnDrop::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000E8, "Member 'BacchusQuickbarSlot_C_OnDrop::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_OnDrop, CallFunc_DropItemOnQuickBar_ReturnValue) == 0x0000E9, "Member 'BacchusQuickbarSlot_C_OnDrop::CallFunc_DropItemOnQuickBar_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.SetHovered
// 0x0002 (0x0002 - 0x0000)
struct BacchusQuickbarSlot_C_SetHovered final
{
public:
	bool                                          NewHovered;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_SetHovered) == 0x000001, "Wrong alignment on BacchusQuickbarSlot_C_SetHovered");
static_assert(sizeof(BacchusQuickbarSlot_C_SetHovered) == 0x000002, "Wrong size on BacchusQuickbarSlot_C_SetHovered");
static_assert(offsetof(BacchusQuickbarSlot_C_SetHovered, NewHovered) == 0x000000, "Member 'BacchusQuickbarSlot_C_SetHovered::NewHovered' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_SetHovered, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000001, "Member 'BacchusQuickbarSlot_C_SetHovered::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.IsDragItemDroppable
// 0x0030 (0x0030 - 0x0000)
struct BacchusQuickbarSlot_C_IsDragItemDroppable final
{
public:
	class UDragDropOperation*                     Drag_Drop_Object;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Droppable;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4C[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAthenaInventoryDragDrop_C*             K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop;   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4D[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItem*                         K2Node_DynamicCast_AsFort_World_Item;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanBeDropped_ReturnValue;                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_IsDragItemDroppable) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_IsDragItemDroppable");
static_assert(sizeof(BacchusQuickbarSlot_C_IsDragItemDroppable) == 0x000030, "Wrong size on BacchusQuickbarSlot_C_IsDragItemDroppable");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, Drag_Drop_Object) == 0x000000, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::Drag_Drop_Object' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, Is_Droppable) == 0x000008, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::Is_Droppable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop) == 0x000010, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::K2Node_DynamicCast_AsAthena_Inventory_Drag_Drop' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, K2Node_DynamicCast_AsFort_World_Item) == 0x000020, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::K2Node_DynamicCast_AsFort_World_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_IsDragItemDroppable, CallFunc_CanBeDropped_ReturnValue) == 0x000029, "Member 'BacchusQuickbarSlot_C_IsDragItemDroppable::CallFunc_CanBeDropped_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Create Quantity Selector Widget
// 0x0038 (0x0038 - 0x0000)
struct BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget final
{
public:
	class UFortWorldItem*                         Param_Item;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Confirmation_Text;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         CallFunc_GetNumInStack_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UQuantitySelector_C*                    CallFunc_Create_ReturnValue;                       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget");
static_assert(sizeof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget) == 0x000038, "Wrong size on BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, Param_Item) == 0x000000, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::Param_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, Confirmation_Text) == 0x000008, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::Confirmation_Text' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, CallFunc_GetNumInStack_ReturnValue) == 0x000020, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::CallFunc_GetNumInStack_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, CallFunc_Divide_IntInt_ReturnValue) == 0x000024, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, CallFunc_GetOwningPlayer_ReturnValue) == 0x000028, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget, CallFunc_Create_ReturnValue) == 0x000030, "Member 'BacchusQuickbarSlot_C_Create_Quantity_Selector_Widget::CallFunc_Create_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Handle Drop Item Confirmation Callback
// 0x0028 (0x0028 - 0x0000)
struct BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback final
{
public:
	int32                                         Chosen_Quanitity;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortItem*                              Param_Item;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItem*                         K2Node_DynamicCast_AsFort_World_Item;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4F[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortInventoryContext*                  CallFunc_GetContext_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback");
static_assert(sizeof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback) == 0x000028, "Wrong size on BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback, Chosen_Quanitity) == 0x000000, "Member 'BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback::Chosen_Quanitity' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback, Param_Item) == 0x000008, "Member 'BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback::Param_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback, K2Node_DynamicCast_AsFort_World_Item) == 0x000010, "Member 'BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback::K2Node_DynamicCast_AsFort_World_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback, CallFunc_GetContext_ReturnValue) == 0x000020, "Member 'BacchusQuickbarSlot_C_Handle_Drop_Item_Confirmation_Callback::CallFunc_GetContext_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Destroy Quanitity Selector Widget
// 0x0001 (0x0001 - 0x0000)
struct BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget) == 0x000001, "Wrong alignment on BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget");
static_assert(sizeof(BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget) == 0x000001, "Wrong size on BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget");
static_assert(offsetof(BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BacchusQuickbarSlot_C_Destroy_Quanitity_Selector_Widget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.End Interaction_BP
// 0x000C (0x000C - 0x0000)
struct BacchusQuickbarSlot_C_End_Interaction_BP final
{
public:
	int32                                         Pointer_Index;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DragAttempted;                                     // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDragDropping_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_End_Interaction_BP) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_End_Interaction_BP");
static_assert(sizeof(BacchusQuickbarSlot_C_End_Interaction_BP) == 0x00000C, "Wrong size on BacchusQuickbarSlot_C_End_Interaction_BP");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, Pointer_Index) == 0x000000, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::Pointer_Index' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, DragAttempted) == 0x000004, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::DragAttempted' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_Not_PreBool_ReturnValue_1) == 0x000006, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_BooleanAND_ReturnValue_1) == 0x000008, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_IsDragDropping_ReturnValue) == 0x000009, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_IsDragDropping_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_BooleanAND_ReturnValue_2) == 0x00000A, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_End_Interaction_BP, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BacchusQuickbarSlot_C_End_Interaction_BP::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.StartOngoingUse_BP
// 0x0004 (0x0004 - 0x0000)
struct BacchusQuickbarSlot_C_StartOngoingUse_BP final
{
public:
	int32                                         PointerIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_StartOngoingUse_BP) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_StartOngoingUse_BP");
static_assert(sizeof(BacchusQuickbarSlot_C_StartOngoingUse_BP) == 0x000004, "Wrong size on BacchusQuickbarSlot_C_StartOngoingUse_BP");
static_assert(offsetof(BacchusQuickbarSlot_C_StartOngoingUse_BP, PointerIndex) == 0x000000, "Member 'BacchusQuickbarSlot_C_StartOngoingUse_BP::PointerIndex' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Update Item Box Size Native
// 0x002C (0x002C - 0x0000)
struct BacchusQuickbarSlot_C_Update_Item_Box_Size_Native final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A50[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotSizeForItem_ReturnValue;           // 0x0004(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native) == 0x000004, "Wrong alignment on BacchusQuickbarSlot_C_Update_Item_Box_Size_Native");
static_assert(sizeof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native) == 0x00002C, "Wrong size on BacchusQuickbarSlot_C_Update_Item_Box_Size_Native");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_GetSlotSizeForItem_ReturnValue) == 0x000004, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_GetSlotSizeForItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00000C, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_BreakVector2D_X) == 0x000014, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_BreakVector2D_Y) == 0x000018, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_BreakVector2D_X_1) == 0x00001C, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_BreakVector2D_Y_1) == 0x000020, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_Lerp_ReturnValue) == 0x000024, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Update_Item_Box_Size_Native, CallFunc_Lerp_ReturnValue_1) == 0x000028, "Member 'BacchusQuickbarSlot_C_Update_Item_Box_Size_Native::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");

// Function BacchusQuickBarSlot.BacchusQuickbarSlot_C.Setup Multi Slot Indicators
// 0x00B8 (0x00B8 - 0x0000)
struct BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators final
{
public:
	TArray<class UBorder*>                        Indicator_Slots;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetRarityColor_ReturnValue_1;             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A51[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBorder*                                CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A52[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_GetFirstLocalFortPlayerController_ReturnValue; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortQuickBars                                CallFunc_FindItem_OutQuickBar;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A53[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FindItem_OutSlot;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindItem_ReturnValue;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A54[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A55[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBorder*>                        K2Node_MakeArray_Array;                            // 0x0090(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	uint8                                         CallFunc_GetNumberOfSlotsTaken_ReturnValue;        // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_ByteByte_ReturnValue;             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A56[0x2];                                     // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A57[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators) == 0x000008, "Wrong alignment on BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators");
static_assert(sizeof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators) == 0x0000B8, "Wrong size on BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, Indicator_Slots) == 0x000000, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::Indicator_Slots' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Subtract_IntInt_ReturnValue) == 0x000014, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_GetRarityColor_ReturnValue) == 0x000018, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_GetRarityColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_GetRarityColor_ReturnValue_1) == 0x000028, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_GetRarityColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, Temp_int_Variable) == 0x000038, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, K2Node_MakeStruct_LinearColor) == 0x00003C, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Array_Get_Item) == 0x000050, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, Temp_int_Variable_1) == 0x00005C, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000068, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_GetFirstLocalFortPlayerController_ReturnValue) == 0x000070, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_GetFirstLocalFortPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_FindItem_OutQuickBar) == 0x000078, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_FindItem_OutQuickBar' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_FindItem_OutSlot) == 0x00007C, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_FindItem_OutSlot' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_FindItem_ReturnValue) == 0x000080, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_FindItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000084, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000088, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, K2Node_MakeArray_Array) == 0x000090, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_GetNumberOfSlotsTaken_ReturnValue) == 0x0000A0, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_GetNumberOfSlotsTaken_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Greater_ByteByte_ReturnValue) == 0x0000A1, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Greater_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Conv_ByteToInt_ReturnValue) == 0x0000A4, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Greater_IntInt_ReturnValue) == 0x0000AC, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x0000B0, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_BooleanAND_ReturnValue) == 0x0000B4, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x0000B5, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B6, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators, CallFunc_IsValid_ReturnValue) == 0x0000B7, "Member 'BacchusQuickbarSlot_C_Setup_Multi_Slot_Indicators::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

