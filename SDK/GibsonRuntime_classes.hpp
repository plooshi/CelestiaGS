#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GibsonRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GibsonRuntime_structs.hpp"


namespace SDK
{

// Class GibsonRuntime.FortAthenaAISpawnerDataComponent_GibsonAffiliation
// 0x0008 (0x0038 - 0x0030)
class UFortAthenaAISpawnerDataComponent_GibsonAffiliation final : public UFortAthenaAISpawnerDataComponent_AIBotAffiliation
{
public:
	int32                                         SquadId;                                           // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F51[0x4];                                     // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaAISpawnerDataComponent_GibsonAffiliation">();
	}
	static class UFortAthenaAISpawnerDataComponent_GibsonAffiliation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortAthenaAISpawnerDataComponent_GibsonAffiliation>();
	}
};
static_assert(alignof(UFortAthenaAISpawnerDataComponent_GibsonAffiliation) == 0x000008, "Wrong alignment on UFortAthenaAISpawnerDataComponent_GibsonAffiliation");
static_assert(sizeof(UFortAthenaAISpawnerDataComponent_GibsonAffiliation) == 0x000038, "Wrong size on UFortAthenaAISpawnerDataComponent_GibsonAffiliation");
static_assert(offsetof(UFortAthenaAISpawnerDataComponent_GibsonAffiliation, SquadId) == 0x000030, "Member 'UFortAthenaAISpawnerDataComponent_GibsonAffiliation::SquadId' has a wrong offset!");

// Class GibsonRuntime.FortAthenaMutator_Gibson
// 0x0230 (0x04A0 - 0x0270)
class AFortAthenaMutator_Gibson final : public AFortAthenaMutator
{
public:
	TArray<class AActor*>                         FoundPatrolPaths;                                  // 0x0270(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAthenaAISpawner*                       CachedAISpawner;                                   // 0x0280(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         GibsonMutatorEnabled;                              // 0x0288(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FName                                   PatrolPathTagName;                                 // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   ForbiddenSpawnPatrolPointTagName;                  // 0x02B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinDurationBeforeFirstSpawn;                       // 0x02B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxDurationBeforeFirstSpawn;                       // 0x02D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UNavigationQueryFilter>     SpawnNavigationFilterClass;                        // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     ReinforcementActorClass;                           // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxConcurrentSquadCount;                           // 0x0308(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinSquadSpawnPerReinforcementWave;                 // 0x0328(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxSquadSpawnPerReinforcementWave;                 // 0x0348(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MinDurationReinforcementWave;                      // 0x0368(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         MaxDurationReinforcementWave;                      // 0x0388(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SpawningRadiusAroundSquad;                         // 0x03A8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UDataTable>>      SquadCompositionLibrary;                           // 0x03C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FScalableFloat                         SquadCompositionLibraryWeight;                     // 0x03D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UFortServerBotManagerAthena*            CachedBotManager;                                  // 0x03F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<uint8, bool>                             SquadsDataMap;                                     // 0x0400(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FMutatorGibsonPathInfo>         PatrolPathsInfo;                                   // 0x0450(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FMutatorGibsonPendingReinforcement> PendingReinforcements;                             // 0x0460(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AFortPlayerPawnAthena>> LastPlayerPawnsDBNO;                               // 0x0470(0x0010)(ZeroConstructor, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F52[0x10];                                    // 0x0480(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         CurrentMaxSquadCount;                              // 0x0490(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CurrentSquadAliveCount;                            // 0x0491(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         CurrentPatrolPathValidCount;                       // 0x0492(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F53[0x1];                                     // 0x0493(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedSquadCompositionTotalWeight;                 // 0x0494(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bIsInitialSpawnDone : 1;                           // 0x0498(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_3F54[0x7];                                     // 0x0499(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnGamePhaseStepChanged(const TScriptInterface<class IFortSafeZoneInterface>& SafeZoneInterface, const EAthenaGamePhaseStep GamePhaseStep);
	void OnMutatorReady();
	void OnPlayerPawnDBNOStateChanged(class AFortPawn* InPlayer, bool bInIsDBNO);
	void OnSafeZoneUpdated();
	void OnServerGameMemberRemoved(uint8 InSquadId, uint8 InTeamIndex, class AFortPlayerStateAthena* ChangedPS);
	void SpawnReinforcementSquad(const class AActor* ReinforcementSpawner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortAthenaMutator_Gibson">();
	}
	static class AFortAthenaMutator_Gibson* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAthenaMutator_Gibson>();
	}
};
static_assert(alignof(AFortAthenaMutator_Gibson) == 0x000008, "Wrong alignment on AFortAthenaMutator_Gibson");
static_assert(sizeof(AFortAthenaMutator_Gibson) == 0x0004A0, "Wrong size on AFortAthenaMutator_Gibson");
static_assert(offsetof(AFortAthenaMutator_Gibson, FoundPatrolPaths) == 0x000270, "Member 'AFortAthenaMutator_Gibson::FoundPatrolPaths' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CachedAISpawner) == 0x000280, "Member 'AFortAthenaMutator_Gibson::CachedAISpawner' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, GibsonMutatorEnabled) == 0x000288, "Member 'AFortAthenaMutator_Gibson::GibsonMutatorEnabled' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, PatrolPathTagName) == 0x0002A8, "Member 'AFortAthenaMutator_Gibson::PatrolPathTagName' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, ForbiddenSpawnPatrolPointTagName) == 0x0002B0, "Member 'AFortAthenaMutator_Gibson::ForbiddenSpawnPatrolPointTagName' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MinDurationBeforeFirstSpawn) == 0x0002B8, "Member 'AFortAthenaMutator_Gibson::MinDurationBeforeFirstSpawn' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MaxDurationBeforeFirstSpawn) == 0x0002D8, "Member 'AFortAthenaMutator_Gibson::MaxDurationBeforeFirstSpawn' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, SpawnNavigationFilterClass) == 0x0002F8, "Member 'AFortAthenaMutator_Gibson::SpawnNavigationFilterClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, ReinforcementActorClass) == 0x000300, "Member 'AFortAthenaMutator_Gibson::ReinforcementActorClass' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MaxConcurrentSquadCount) == 0x000308, "Member 'AFortAthenaMutator_Gibson::MaxConcurrentSquadCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MinSquadSpawnPerReinforcementWave) == 0x000328, "Member 'AFortAthenaMutator_Gibson::MinSquadSpawnPerReinforcementWave' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MaxSquadSpawnPerReinforcementWave) == 0x000348, "Member 'AFortAthenaMutator_Gibson::MaxSquadSpawnPerReinforcementWave' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MinDurationReinforcementWave) == 0x000368, "Member 'AFortAthenaMutator_Gibson::MinDurationReinforcementWave' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, MaxDurationReinforcementWave) == 0x000388, "Member 'AFortAthenaMutator_Gibson::MaxDurationReinforcementWave' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, SpawningRadiusAroundSquad) == 0x0003A8, "Member 'AFortAthenaMutator_Gibson::SpawningRadiusAroundSquad' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, SquadCompositionLibrary) == 0x0003C8, "Member 'AFortAthenaMutator_Gibson::SquadCompositionLibrary' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, SquadCompositionLibraryWeight) == 0x0003D8, "Member 'AFortAthenaMutator_Gibson::SquadCompositionLibraryWeight' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CachedBotManager) == 0x0003F8, "Member 'AFortAthenaMutator_Gibson::CachedBotManager' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, SquadsDataMap) == 0x000400, "Member 'AFortAthenaMutator_Gibson::SquadsDataMap' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, PatrolPathsInfo) == 0x000450, "Member 'AFortAthenaMutator_Gibson::PatrolPathsInfo' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, PendingReinforcements) == 0x000460, "Member 'AFortAthenaMutator_Gibson::PendingReinforcements' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, LastPlayerPawnsDBNO) == 0x000470, "Member 'AFortAthenaMutator_Gibson::LastPlayerPawnsDBNO' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CurrentMaxSquadCount) == 0x000490, "Member 'AFortAthenaMutator_Gibson::CurrentMaxSquadCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CurrentSquadAliveCount) == 0x000491, "Member 'AFortAthenaMutator_Gibson::CurrentSquadAliveCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CurrentPatrolPathValidCount) == 0x000492, "Member 'AFortAthenaMutator_Gibson::CurrentPatrolPathValidCount' has a wrong offset!");
static_assert(offsetof(AFortAthenaMutator_Gibson, CachedSquadCompositionTotalWeight) == 0x000494, "Member 'AFortAthenaMutator_Gibson::CachedSquadCompositionTotalWeight' has a wrong offset!");

// Class GibsonRuntime.FortCheatManager_Gibson
// 0x0000 (0x0038 - 0x0038)
class UFortCheatManager_Gibson final : public UFortCheatManager_Coupled
{
public:
	void GibsonForcePodSpawn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortCheatManager_Gibson">();
	}
	static class UFortCheatManager_Gibson* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortCheatManager_Gibson>();
	}
};
static_assert(alignof(UFortCheatManager_Gibson) == 0x000008, "Wrong alignment on UFortCheatManager_Gibson");
static_assert(sizeof(UFortCheatManager_Gibson) == 0x000038, "Wrong size on UFortCheatManager_Gibson");

}

