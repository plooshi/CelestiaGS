#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HoagieVehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "HoagieDirectionalBoost_Enum_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "HoagieRuntime_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass HoagieVehicle.HoagieVehicle_C
// 0x06B0 (0x2170 - 0x1AC0)
class AHoagieVehicle_C final : public AFortHoagieVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       TailRotorAssist;                                   // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   AudioControllerBP;                                 // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      RotorWashFX;                                       // 0x1AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      DamageFX;                                          // 0x1AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Hoagie_Idle_FX;                                    // 0x1AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Flashing_Running_LIghts_Flashing_BCA1D3334E4569441FA68AA28D936C3B; // 0x1AF0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Flashing_Running_LIghts__Direction_BCA1D3334E4569441FA68AA28D936C3B; // 0x1AF4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A7E[0x3];                                     // 0x1AF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Flashing_Running_LIghts;                           // 0x1AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalRumble_RumbleIntensity_F067DA02439B733C472619A4F799478F; // 0x1B00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CriticalRumble__Direction_F067DA02439B733C472619A4F799478F; // 0x1B04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A7F[0x3];                                     // 0x1B05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CriticalRumble;                                    // 0x1B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleOnAscentDecent_RumbleIntensity_A60CA3C044574D39A0C6A2980D1716CD; // 0x1B10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RumbleOnAscentDecent__Direction_A60CA3C044574D39A0C6A2980D1716CD; // 0x1B14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A80[0x3];                                     // 0x1B15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RumbleOnAscentDecent;                              // 0x1B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fuel_Gauge_Off_NewTrack_0_1B6FECAD48CD614C29B211B880819DC7; // 0x1B20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Fuel_Gauge_Off__Direction_1B6FECAD48CD614C29B211B880819DC7; // 0x1B24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A81[0x3];                                     // 0x1B25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Fuel_Gauge_Off;                                    // 0x1B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelGaugeOn_NewTrack_0_3F07DD6A4D5274E9C83A0FAC6E525406; // 0x1B30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FuelGaugeOn__Direction_3F07DD6A4D5274E9C83A0FAC6E525406; // 0x1B34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A82[0x3];                                     // 0x1B35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FuelGaugeOn;                                       // 0x1B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoosterFades_Fade_Lerp_189599C44DED461370F117A84AC63CBB; // 0x1B40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoosterFades__Direction_189599C44DED461370F117A84AC63CBB; // 0x1B44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A83[0x3];                                     // 0x1B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoosterFades;                                      // 0x1B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumble_Intensity_6A7B24F34B936F74329958AD3FCE1BE0; // 0x1B50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostRumble__Direction_6A7B24F34B936F74329958AD3FCE1BE0; // 0x1B54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A84[0x3];                                     // 0x1B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostRumble;                                       // 0x1B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        Pilot;                                             // 0x1B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PilotController;                                   // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LastExitedActor;                                   // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitPickaxePawn;                                    // 0x1B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerHitByRotors;                                 // 0x1B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                PassengerPawns;                                    // 0x1B88(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                RecentlyExitedActors;                              // 0x1B98(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LastHitPlayer;                                     // 0x1BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStarting;                                        // 0x1BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A85[0x3];                                     // 0x1BB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotorPlaySpeed;                                    // 0x1BB4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           AltimeterTimer;                                    // 0x1BB8(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         AltimeterTraceDistance;                            // 0x1BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAltitude;                                   // 0x1BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoosting;                                        // 0x1BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A86[0x7];                                     // 0x1BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USK_Hoagie_Protomesh_AnimBP_C*          HoagieAnimBP;                                      // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCritical;                                        // 0x1BD8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLocalPlayerPassenger;                            // 0x1BD9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          HasPilot;                                          // 0x1BDA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A87[0x1];                                     // 0x1BDB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageValue;                                       // 0x1BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DamageEffect;                                      // 0x1BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedImpulsePlayerMulti;                           // 0x1BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedToLaunchPlayer;                            // 0x1BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassiveRumbleIntensity;                            // 0x1BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AscendRumble;                                      // 0x1BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DecendRumble;                                      // 0x1BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassiveRumble;                                     // 0x1BFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorLaunchPlayerVelocity;                         // 0x1C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastCollisionTime;                                 // 0x1C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTimeBetweenCollision;                           // 0x1C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickaxeImpulseMinZ;                                // 0x1C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickaxeImpulseXYMulti;                             // 0x1C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldPickaxeImpulse;                              // 0x1C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldSpawnGlass;                                  // 0x1C18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeRadius;                                     // 0x1C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeakpointDamageMultiplier;                         // 0x1C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SkidIntensity;                                     // 0x1C24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExitLaunchMultiplier;                              // 0x1C28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PickaxeImpulse;                                    // 0x1C2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CriticalFlashTimer;                                // 0x1C38(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   NewVar_1;                                          // 0x1C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CriticalFireEffect;                                // 0x1C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeFlight;                                 // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeSpeed;                                  // 0x1C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SmallJoltCameraShake;                              // 0x1C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeBoost;                                  // 0x1C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeCritical;                               // 0x1C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           FlightCameraShake;                                 // 0x1C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           SpeedCameraShake;                                  // 0x1C80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           RotorSkidTimer;                                    // 0x1C88(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ExitedActorsTimer;                                 // 0x1C90(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RecentlyExitTag;                                   // 0x1C98(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Rayfire_handle;                                    // 0x1CA0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ray_End_Position;                                  // 0x1CA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Ray_Start_Position;                                // 0x1CB4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Hit_Normal_Array;                                  // 0x1CC0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FHitResult                             WashHitResult;                                     // 0x1CD0(0x008C)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          Hit;                                               // 0x1D5C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A88[0x3];                                     // 0x1D5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Raycasting_Interval;                               // 0x1D60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Print;                                       // 0x1D64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GlassFrontDestroyed;                               // 0x1D65(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          GlassLeftDestroyed;                                // 0x1D66(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          GlassRightDestroyed;                               // 0x1D67(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	struct FGameplayTag                           GC_HitPlayer;                                      // 0x1D68(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HitFiend;                                       // 0x1D70(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Altitude_In_Range;                             // 0x1D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A89[0x4];                                     // 0x1D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           RotorImpactCameraShake;                            // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Explode_DamagePlayer;                           // 0x1D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Explode_DamageBuilding;                         // 0x1D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeDamageVehicle;                           // 0x1D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Hit_DestroyProp;                                // 0x1DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Theta;                                             // 0x1DA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x1DAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Raycast_offset;                                    // 0x1DB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A8A[0x4];                                     // 0x1DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           BoostCameraShake;                                  // 0x1DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           CriticalCameraShake;                               // 0x1DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHoagieDirectionalBoost_Enum                  BoostDirectionENUM;                                // 0x1DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A8B[0x3];                                     // 0x1DD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FowardHighValue;                                   // 0x1DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightHighValue;                                    // 0x1DD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostDeadZone;                                     // 0x1DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WashAltAlpha;                                      // 0x1DE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A8C[0x4];                                     // 0x1DE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FX_GlassShatterBoneSocketNames;                    // 0x1DE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    FX_GlassShatterMeshes;                             // 0x1DF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      RotorWashObjects;                                  // 0x1E08(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         WashFXStartSpeed;                                  // 0x1E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A8D[0x4];                                     // 0x1E1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectContextHandle           CritContext;                                       // 0x1E20(0x0018)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FGameplayTag                           GC_ExplodeShake;                                   // 0x1E38(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GC_ParamsEmpty;                                    // 0x1E40(0x00B8)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	class UNiagaraSystem*                         NS_Hoagie_Scrape_LandingSkids;                     // 0x1EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, float>                      Damage_Thresholds;                                 // 0x1F00(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_RotorHit_DamageBuilding_Outer;                  // 0x1F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RotorHit_DamageSelf_Outer;                      // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RotorHit_DamageSelf_Inner;                      // 0x1F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RotorHit_DamageBuilding_Inner;                  // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Hotfix_ExplodeRadius;                              // 0x1F70(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UClass*                                 GE_BodyHit_DamagePlayer;                           // 0x1F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Hotfix_ShouldSpawnGlass;                           // 0x1F98(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_ShouldPickaxeImpulse;                       // 0x1FB8(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_PickaxeImpulseXYMulti;                      // 0x1FD8(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_PickaxeImpulseMinZ;                         // 0x1FF8(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_AscendRumble;                               // 0x2018(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_DecendRumble;                               // 0x2038(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_PassiveRumble;                              // 0x2058(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_RotorLaunchPlayerVelocity;                  // 0x2078(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_MinSpeedToLaunchPlayer;                     // 0x2098(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         Hotfix_SpeedImpulsePlayerMulti;                    // 0x20B8(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UClass*                                 GE_RecentlyExit;                                   // 0x20D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Hotfix_WeakpointDamageMultiplier;                  // 0x20E0(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UClass*                                 GE_WeakpointCritDamage;                            // 0x2100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_HoagieExplode;                                  // 0x2108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotorWashActive;                                 // 0x2110(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          ShouldRumbleDown;                                  // 0x2111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShouldRumbleUp;                                    // 0x2112(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RumbleLarge;                                       // 0x2113(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RumbeSmall;                                        // 0x2114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A8E[0x3];                                     // 0x2115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FX_CritHit;                                        // 0x2118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HeliRotorSocket;                                   // 0x2120(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_8A8F[0x7];                                     // 0x2121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FX_RotorScrapes;                                   // 0x2128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerIsADS;                                       // 0x2130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8A90[0x7];                                     // 0x2131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Hotfix_ExitLaunchMultiplier;                       // 0x2138(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFXSystemComponent*                     BoostActive;                                       // 0x2158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 LastDamageCauser;                                  // 0x2160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_HoagieVehicle(int32 EntryPoint);
	void OnDamageablePartHealthChanged_Event(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, const bool bNewlyDisabled, const bool bNewlyEnabled);
	void Running_LIghts_Off();
	void Running_LIghts_On();
	void LocalPassengerADS(bool AimDownsights);
	void Rayfire();
	void BndEvt__PontoonsComponent_K2Node_ComponentBoundEvent_3_OnPontoonEnteredWater__DelegateSignature(const struct FSphericalPontoon& Pontoon);
	void OnDamagePlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void StopSkidRumble();
	void RotorSkidRumble();
	void SpawnCritFX();
	void CriticalRumbleStop();
	void CriticalRumbleStart();
	void SetMainRotorRotation(float Degrees);
	void SetTailRotorRotation(float Degrees);
	void SetRotorWashActive(bool bActive);
	void SetupNative();
	void OnCritRotor(float Damage, const struct FVector& ImpactLocation, class AController* DamageInstigator, class AActor* DamageCauser, bool bMainRotor);
	void OnRotorDamagePlayer(const struct FHitResult& Impact);
	void Fuel_Fade_Out();
	void Booster_Fades_Out();
	void Booster_Fades_In();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void OnStopTick();
	void OnHonk();
	void LocalPassengerMatSwap();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void StopBoostRumble();
	void OnTickRotors(float RotorAngleDegrees);
	void UpdatePassiveRumble();
	void StopPassiveRumble();
	void StartPassiveRumble();
	void CheckHitGlass(const class FString& ComponentName);
	void StopRotorHitCamera();
	void RotorHitHaptics();
	void DestroyHoagie();
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Param_Hit);
	void OnExplode();
	void On_Rotor_Damage_Dealt_Outer_FX(const struct FVector& Impact_Point, const struct FRotator& Rotation);
	void StopPilotCameraShake();
	void HitWithPickaxe(const struct FVector& HitDirection);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void StartDriverCameraShake();
	void ResetRotorDamage();
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void StartCriticalFire();
	void OnStartCriticalHealth();
	void UpdateDamageState(float Damage);
	void EventOnHealthChanged();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRotorDamageDealtOuter(const struct FHitResult& Impact);
	void OnRotorDamageDealtInner(const struct FHitResult& Impact);
	void OnRotorsStop();
	void OnBoostFinished();
	void OnBoostStarted();
	void OnBoostReady();
	void AltimeterTrace();
	void EventStartUp();
	void ReceiveTick(float DeltaSeconds);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void ReceiveBeginPlay();
	void Flashing_Running_LIghts__UpdateFunc();
	void Flashing_Running_LIghts__FinishedFunc();
	void CriticalRumble__UpdateFunc();
	void CriticalRumble__FinishedFunc();
	void RumbleOnAscentDecent__UpdateFunc();
	void RumbleOnAscentDecent__FinishedFunc();
	void FuelGaugeOn__UpdateFunc();
	void FuelGaugeOn__FinishedFunc();
	void Fuel_Gauge_Off__UpdateFunc();
	void Fuel_Gauge_Off__FinishedFunc();
	void BoosterFades__UpdateFunc();
	void BoosterFades__FinishedFunc();
	void BoostRumble__UpdateFunc();
	void BoostRumble__FinishedFunc();
	void UserConstructionScript();
	void ManagePilotEnter(class AFortPlayerPawn* Param_Pilot);
	void ManagePassengerEnter(class AFortPlayerPawn* PlayerPawn);
	void ManagePilotExit();
	void ManagePassengerExit(class AFortPlayerPawn* PlayerPawn);
	bool ShouldDamageBuilding(class ABuildingActor* BuildingActor, float MaxHealth);
	void FindBoostCameraShake();
	void FX_DestroyGlass(int32 BoneSocketIndex);
	void HoagieVehicle_AutoGenFunc(float CriticalDamage, const struct FGameplayTagContainer& DamageTags, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void Set_Damage_State_Thresholds();
	void Spawn_ImpactEffect_Skid(const struct FVector& Hit_Location, const struct FVector& Hit_Normal, float Impact_Magnitude, EPhysicalSurface Physical_Material);
	void HandleCriticalDamage(class APlayerController* Param_Instigator, float Damage, const struct FVector& Origin, class AActor* Damage_Causer);
	void GetIsRotorWashActive(bool* Active);
	void OnRep_IsRotorWashActive();
	void SpawnGlassDestroyedFX(int32 Glass_Destroyed);
	void OnRep_NewVar_0();
	void WeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void Spawn_Booster();
	void Despawn_Booster();
	void GlassDestroyed(class FName ShapeName);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"HoagieVehicle_C">();
	}
	static class AHoagieVehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHoagieVehicle_C>();
	}
};
static_assert(alignof(AHoagieVehicle_C) == 0x000010, "Wrong alignment on AHoagieVehicle_C");
static_assert(sizeof(AHoagieVehicle_C) == 0x002170, "Wrong size on AHoagieVehicle_C");
static_assert(offsetof(AHoagieVehicle_C, UberGraphFrame) == 0x001AC0, "Member 'AHoagieVehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, TailRotorAssist) == 0x001AC8, "Member 'AHoagieVehicle_C::TailRotorAssist' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, AudioControllerBP) == 0x001AD0, "Member 'AHoagieVehicle_C::AudioControllerBP' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorWashFX) == 0x001AD8, "Member 'AHoagieVehicle_C::RotorWashFX' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, DamageFX) == 0x001AE0, "Member 'AHoagieVehicle_C::DamageFX' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hoagie_Idle_FX) == 0x001AE8, "Member 'AHoagieVehicle_C::Hoagie_Idle_FX' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Flashing_Running_LIghts_Flashing_BCA1D3334E4569441FA68AA28D936C3B) == 0x001AF0, "Member 'AHoagieVehicle_C::Flashing_Running_LIghts_Flashing_BCA1D3334E4569441FA68AA28D936C3B' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Flashing_Running_LIghts__Direction_BCA1D3334E4569441FA68AA28D936C3B) == 0x001AF4, "Member 'AHoagieVehicle_C::Flashing_Running_LIghts__Direction_BCA1D3334E4569441FA68AA28D936C3B' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Flashing_Running_LIghts) == 0x001AF8, "Member 'AHoagieVehicle_C::Flashing_Running_LIghts' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalRumble_RumbleIntensity_F067DA02439B733C472619A4F799478F) == 0x001B00, "Member 'AHoagieVehicle_C::CriticalRumble_RumbleIntensity_F067DA02439B733C472619A4F799478F' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalRumble__Direction_F067DA02439B733C472619A4F799478F) == 0x001B04, "Member 'AHoagieVehicle_C::CriticalRumble__Direction_F067DA02439B733C472619A4F799478F' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalRumble) == 0x001B08, "Member 'AHoagieVehicle_C::CriticalRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RumbleOnAscentDecent_RumbleIntensity_A60CA3C044574D39A0C6A2980D1716CD) == 0x001B10, "Member 'AHoagieVehicle_C::RumbleOnAscentDecent_RumbleIntensity_A60CA3C044574D39A0C6A2980D1716CD' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RumbleOnAscentDecent__Direction_A60CA3C044574D39A0C6A2980D1716CD) == 0x001B14, "Member 'AHoagieVehicle_C::RumbleOnAscentDecent__Direction_A60CA3C044574D39A0C6A2980D1716CD' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RumbleOnAscentDecent) == 0x001B18, "Member 'AHoagieVehicle_C::RumbleOnAscentDecent' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Fuel_Gauge_Off_NewTrack_0_1B6FECAD48CD614C29B211B880819DC7) == 0x001B20, "Member 'AHoagieVehicle_C::Fuel_Gauge_Off_NewTrack_0_1B6FECAD48CD614C29B211B880819DC7' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Fuel_Gauge_Off__Direction_1B6FECAD48CD614C29B211B880819DC7) == 0x001B24, "Member 'AHoagieVehicle_C::Fuel_Gauge_Off__Direction_1B6FECAD48CD614C29B211B880819DC7' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Fuel_Gauge_Off) == 0x001B28, "Member 'AHoagieVehicle_C::Fuel_Gauge_Off' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FuelGaugeOn_NewTrack_0_3F07DD6A4D5274E9C83A0FAC6E525406) == 0x001B30, "Member 'AHoagieVehicle_C::FuelGaugeOn_NewTrack_0_3F07DD6A4D5274E9C83A0FAC6E525406' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FuelGaugeOn__Direction_3F07DD6A4D5274E9C83A0FAC6E525406) == 0x001B34, "Member 'AHoagieVehicle_C::FuelGaugeOn__Direction_3F07DD6A4D5274E9C83A0FAC6E525406' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FuelGaugeOn) == 0x001B38, "Member 'AHoagieVehicle_C::FuelGaugeOn' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoosterFades_Fade_Lerp_189599C44DED461370F117A84AC63CBB) == 0x001B40, "Member 'AHoagieVehicle_C::BoosterFades_Fade_Lerp_189599C44DED461370F117A84AC63CBB' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoosterFades__Direction_189599C44DED461370F117A84AC63CBB) == 0x001B44, "Member 'AHoagieVehicle_C::BoosterFades__Direction_189599C44DED461370F117A84AC63CBB' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoosterFades) == 0x001B48, "Member 'AHoagieVehicle_C::BoosterFades' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostRumble_Intensity_6A7B24F34B936F74329958AD3FCE1BE0) == 0x001B50, "Member 'AHoagieVehicle_C::BoostRumble_Intensity_6A7B24F34B936F74329958AD3FCE1BE0' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostRumble__Direction_6A7B24F34B936F74329958AD3FCE1BE0) == 0x001B54, "Member 'AHoagieVehicle_C::BoostRumble__Direction_6A7B24F34B936F74329958AD3FCE1BE0' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostRumble) == 0x001B58, "Member 'AHoagieVehicle_C::BoostRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Pilot) == 0x001B60, "Member 'AHoagieVehicle_C::Pilot' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PilotController) == 0x001B68, "Member 'AHoagieVehicle_C::PilotController' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, LastExitedActor) == 0x001B70, "Member 'AHoagieVehicle_C::LastExitedActor' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, HitPickaxePawn) == 0x001B78, "Member 'AHoagieVehicle_C::HitPickaxePawn' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PlayerHitByRotors) == 0x001B80, "Member 'AHoagieVehicle_C::PlayerHitByRotors' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PassengerPawns) == 0x001B88, "Member 'AHoagieVehicle_C::PassengerPawns' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RecentlyExitedActors) == 0x001B98, "Member 'AHoagieVehicle_C::RecentlyExitedActors' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, LastHitPlayer) == 0x001BA8, "Member 'AHoagieVehicle_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, IsStarting) == 0x001BB0, "Member 'AHoagieVehicle_C::IsStarting' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorPlaySpeed) == 0x001BB4, "Member 'AHoagieVehicle_C::RotorPlaySpeed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, AltimeterTimer) == 0x001BB8, "Member 'AHoagieVehicle_C::AltimeterTimer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, AltimeterTraceDistance) == 0x001BC0, "Member 'AHoagieVehicle_C::AltimeterTraceDistance' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CurrentAltitude) == 0x001BC4, "Member 'AHoagieVehicle_C::CurrentAltitude' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, IsBoosting) == 0x001BC8, "Member 'AHoagieVehicle_C::IsBoosting' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, HoagieAnimBP) == 0x001BD0, "Member 'AHoagieVehicle_C::HoagieAnimBP' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, IsCritical) == 0x001BD8, "Member 'AHoagieVehicle_C::IsCritical' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, IsLocalPlayerPassenger) == 0x001BD9, "Member 'AHoagieVehicle_C::IsLocalPlayerPassenger' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, HasPilot) == 0x001BDA, "Member 'AHoagieVehicle_C::HasPilot' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, DamageValue) == 0x001BDC, "Member 'AHoagieVehicle_C::DamageValue' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, DamageEffect) == 0x001BE0, "Member 'AHoagieVehicle_C::DamageEffect' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, SpeedImpulsePlayerMulti) == 0x001BE8, "Member 'AHoagieVehicle_C::SpeedImpulsePlayerMulti' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, MinSpeedToLaunchPlayer) == 0x001BEC, "Member 'AHoagieVehicle_C::MinSpeedToLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PassiveRumbleIntensity) == 0x001BF0, "Member 'AHoagieVehicle_C::PassiveRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, AscendRumble) == 0x001BF4, "Member 'AHoagieVehicle_C::AscendRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, DecendRumble) == 0x001BF8, "Member 'AHoagieVehicle_C::DecendRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PassiveRumble) == 0x001BFC, "Member 'AHoagieVehicle_C::PassiveRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorLaunchPlayerVelocity) == 0x001C00, "Member 'AHoagieVehicle_C::RotorLaunchPlayerVelocity' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, LastCollisionTime) == 0x001C04, "Member 'AHoagieVehicle_C::LastCollisionTime' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, MinTimeBetweenCollision) == 0x001C08, "Member 'AHoagieVehicle_C::MinTimeBetweenCollision' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PickaxeImpulseMinZ) == 0x001C0C, "Member 'AHoagieVehicle_C::PickaxeImpulseMinZ' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PickaxeImpulseXYMulti) == 0x001C10, "Member 'AHoagieVehicle_C::PickaxeImpulseXYMulti' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ShouldPickaxeImpulse) == 0x001C14, "Member 'AHoagieVehicle_C::ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ShouldSpawnGlass) == 0x001C18, "Member 'AHoagieVehicle_C::ShouldSpawnGlass' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ExplodeRadius) == 0x001C1C, "Member 'AHoagieVehicle_C::ExplodeRadius' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, WeakpointDamageMultiplier) == 0x001C20, "Member 'AHoagieVehicle_C::WeakpointDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, SkidIntensity) == 0x001C24, "Member 'AHoagieVehicle_C::SkidIntensity' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ExitLaunchMultiplier) == 0x001C28, "Member 'AHoagieVehicle_C::ExitLaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PickaxeImpulse) == 0x001C2C, "Member 'AHoagieVehicle_C::PickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalFlashTimer) == 0x001C38, "Member 'AHoagieVehicle_C::CriticalFlashTimer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, NewVar_1) == 0x001C40, "Member 'AHoagieVehicle_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalFireEffect) == 0x001C48, "Member 'AHoagieVehicle_C::CriticalFireEffect' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CameraShakeFlight) == 0x001C50, "Member 'AHoagieVehicle_C::CameraShakeFlight' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CameraShakeSpeed) == 0x001C58, "Member 'AHoagieVehicle_C::CameraShakeSpeed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, SmallJoltCameraShake) == 0x001C60, "Member 'AHoagieVehicle_C::SmallJoltCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CameraShakeBoost) == 0x001C68, "Member 'AHoagieVehicle_C::CameraShakeBoost' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CameraShakeCritical) == 0x001C70, "Member 'AHoagieVehicle_C::CameraShakeCritical' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FlightCameraShake) == 0x001C78, "Member 'AHoagieVehicle_C::FlightCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, SpeedCameraShake) == 0x001C80, "Member 'AHoagieVehicle_C::SpeedCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorSkidTimer) == 0x001C88, "Member 'AHoagieVehicle_C::RotorSkidTimer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ExitedActorsTimer) == 0x001C90, "Member 'AHoagieVehicle_C::ExitedActorsTimer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RecentlyExitTag) == 0x001C98, "Member 'AHoagieVehicle_C::RecentlyExitTag' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Rayfire_handle) == 0x001CA0, "Member 'AHoagieVehicle_C::Rayfire_handle' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Ray_End_Position) == 0x001CA8, "Member 'AHoagieVehicle_C::Ray_End_Position' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Ray_Start_Position) == 0x001CB4, "Member 'AHoagieVehicle_C::Ray_Start_Position' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hit_Normal_Array) == 0x001CC0, "Member 'AHoagieVehicle_C::Hit_Normal_Array' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, WashHitResult) == 0x001CD0, "Member 'AHoagieVehicle_C::WashHitResult' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hit) == 0x001D5C, "Member 'AHoagieVehicle_C::Hit' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Raycasting_Interval) == 0x001D60, "Member 'AHoagieVehicle_C::Raycasting_Interval' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Debug_Print) == 0x001D64, "Member 'AHoagieVehicle_C::Debug_Print' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GlassFrontDestroyed) == 0x001D65, "Member 'AHoagieVehicle_C::GlassFrontDestroyed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GlassLeftDestroyed) == 0x001D66, "Member 'AHoagieVehicle_C::GlassLeftDestroyed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GlassRightDestroyed) == 0x001D67, "Member 'AHoagieVehicle_C::GlassRightDestroyed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GC_HitPlayer) == 0x001D68, "Member 'AHoagieVehicle_C::GC_HitPlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GC_HitFiend) == 0x001D70, "Member 'AHoagieVehicle_C::GC_HitFiend' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Max_Altitude_In_Range) == 0x001D78, "Member 'AHoagieVehicle_C::Max_Altitude_In_Range' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorImpactCameraShake) == 0x001D80, "Member 'AHoagieVehicle_C::RotorImpactCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_Explode_DamagePlayer) == 0x001D88, "Member 'AHoagieVehicle_C::GE_Explode_DamagePlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_Explode_DamageBuilding) == 0x001D90, "Member 'AHoagieVehicle_C::GE_Explode_DamageBuilding' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_ExplodeDamageVehicle) == 0x001D98, "Member 'AHoagieVehicle_C::GE_ExplodeDamageVehicle' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_Hit_DestroyProp) == 0x001DA0, "Member 'AHoagieVehicle_C::GE_Hit_DestroyProp' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Theta) == 0x001DA8, "Member 'AHoagieVehicle_C::Theta' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Radius) == 0x001DAC, "Member 'AHoagieVehicle_C::Radius' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Raycast_offset) == 0x001DB0, "Member 'AHoagieVehicle_C::Raycast_offset' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostCameraShake) == 0x001DC0, "Member 'AHoagieVehicle_C::BoostCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CriticalCameraShake) == 0x001DC8, "Member 'AHoagieVehicle_C::CriticalCameraShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostDirectionENUM) == 0x001DD0, "Member 'AHoagieVehicle_C::BoostDirectionENUM' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FowardHighValue) == 0x001DD4, "Member 'AHoagieVehicle_C::FowardHighValue' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RightHighValue) == 0x001DD8, "Member 'AHoagieVehicle_C::RightHighValue' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostDeadZone) == 0x001DDC, "Member 'AHoagieVehicle_C::BoostDeadZone' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, WashAltAlpha) == 0x001DE0, "Member 'AHoagieVehicle_C::WashAltAlpha' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FX_GlassShatterBoneSocketNames) == 0x001DE8, "Member 'AHoagieVehicle_C::FX_GlassShatterBoneSocketNames' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FX_GlassShatterMeshes) == 0x001DF8, "Member 'AHoagieVehicle_C::FX_GlassShatterMeshes' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RotorWashObjects) == 0x001E08, "Member 'AHoagieVehicle_C::RotorWashObjects' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, WashFXStartSpeed) == 0x001E18, "Member 'AHoagieVehicle_C::WashFXStartSpeed' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, CritContext) == 0x001E20, "Member 'AHoagieVehicle_C::CritContext' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GC_ExplodeShake) == 0x001E38, "Member 'AHoagieVehicle_C::GC_ExplodeShake' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GC_ParamsEmpty) == 0x001E40, "Member 'AHoagieVehicle_C::GC_ParamsEmpty' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, NS_Hoagie_Scrape_LandingSkids) == 0x001EF8, "Member 'AHoagieVehicle_C::NS_Hoagie_Scrape_LandingSkids' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Damage_Thresholds) == 0x001F00, "Member 'AHoagieVehicle_C::Damage_Thresholds' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_RotorHit_DamageBuilding_Outer) == 0x001F50, "Member 'AHoagieVehicle_C::GE_RotorHit_DamageBuilding_Outer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_RotorHit_DamageSelf_Outer) == 0x001F58, "Member 'AHoagieVehicle_C::GE_RotorHit_DamageSelf_Outer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_RotorHit_DamageSelf_Inner) == 0x001F60, "Member 'AHoagieVehicle_C::GE_RotorHit_DamageSelf_Inner' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_RotorHit_DamageBuilding_Inner) == 0x001F68, "Member 'AHoagieVehicle_C::GE_RotorHit_DamageBuilding_Inner' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_ExplodeRadius) == 0x001F70, "Member 'AHoagieVehicle_C::Hotfix_ExplodeRadius' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_BodyHit_DamagePlayer) == 0x001F90, "Member 'AHoagieVehicle_C::GE_BodyHit_DamagePlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_ShouldSpawnGlass) == 0x001F98, "Member 'AHoagieVehicle_C::Hotfix_ShouldSpawnGlass' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_ShouldPickaxeImpulse) == 0x001FB8, "Member 'AHoagieVehicle_C::Hotfix_ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_PickaxeImpulseXYMulti) == 0x001FD8, "Member 'AHoagieVehicle_C::Hotfix_PickaxeImpulseXYMulti' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_PickaxeImpulseMinZ) == 0x001FF8, "Member 'AHoagieVehicle_C::Hotfix_PickaxeImpulseMinZ' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_AscendRumble) == 0x002018, "Member 'AHoagieVehicle_C::Hotfix_AscendRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_DecendRumble) == 0x002038, "Member 'AHoagieVehicle_C::Hotfix_DecendRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_PassiveRumble) == 0x002058, "Member 'AHoagieVehicle_C::Hotfix_PassiveRumble' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_RotorLaunchPlayerVelocity) == 0x002078, "Member 'AHoagieVehicle_C::Hotfix_RotorLaunchPlayerVelocity' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_MinSpeedToLaunchPlayer) == 0x002098, "Member 'AHoagieVehicle_C::Hotfix_MinSpeedToLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_SpeedImpulsePlayerMulti) == 0x0020B8, "Member 'AHoagieVehicle_C::Hotfix_SpeedImpulsePlayerMulti' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_RecentlyExit) == 0x0020D8, "Member 'AHoagieVehicle_C::GE_RecentlyExit' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_WeakpointDamageMultiplier) == 0x0020E0, "Member 'AHoagieVehicle_C::Hotfix_WeakpointDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, GE_WeakpointCritDamage) == 0x002100, "Member 'AHoagieVehicle_C::GE_WeakpointCritDamage' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FX_HoagieExplode) == 0x002108, "Member 'AHoagieVehicle_C::FX_HoagieExplode' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, IsRotorWashActive) == 0x002110, "Member 'AHoagieVehicle_C::IsRotorWashActive' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ShouldRumbleDown) == 0x002111, "Member 'AHoagieVehicle_C::ShouldRumbleDown' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, ShouldRumbleUp) == 0x002112, "Member 'AHoagieVehicle_C::ShouldRumbleUp' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RumbleLarge) == 0x002113, "Member 'AHoagieVehicle_C::RumbleLarge' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, RumbeSmall) == 0x002114, "Member 'AHoagieVehicle_C::RumbeSmall' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FX_CritHit) == 0x002118, "Member 'AHoagieVehicle_C::FX_CritHit' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, HeliRotorSocket) == 0x002120, "Member 'AHoagieVehicle_C::HeliRotorSocket' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, FX_RotorScrapes) == 0x002128, "Member 'AHoagieVehicle_C::FX_RotorScrapes' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, PlayerIsADS) == 0x002130, "Member 'AHoagieVehicle_C::PlayerIsADS' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, Hotfix_ExitLaunchMultiplier) == 0x002138, "Member 'AHoagieVehicle_C::Hotfix_ExitLaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, BoostActive) == 0x002158, "Member 'AHoagieVehicle_C::BoostActive' has a wrong offset!");
static_assert(offsetof(AHoagieVehicle_C, LastDamageCauser) == 0x002160, "Member 'AHoagieVehicle_C::LastDamageCauser' has a wrong offset!");

}

