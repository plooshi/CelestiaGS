#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_DanceFloorSounds_Large

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "B_DanceFloorSounds_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_DanceFloorSounds_Large.B_DanceFloorSounds_Large_C
// 0x0030 (0x0258 - 0x0228)
class AB_DanceFloorSounds_Large_C final : public AB_DanceFloorSounds_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          PawnVolume;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LPF_Fader_LPF_Normalized_731B387C490136B27D9BCE85F4B7846D; // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LPF_Fader__Direction_731B387C490136B27D9BCE85F4B7846D; // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8735[0x3];                                     // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LPF_Fader;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FaderTime;                                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPFMin;                                            // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LPFMax;                                            // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_DanceFloorSounds_Large(int32 EntryPoint);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void LPF_Fader__UpdateFunc();
	void LPF_Fader__FinishedFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_DanceFloorSounds_Large_C">();
	}
	static class AB_DanceFloorSounds_Large_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_DanceFloorSounds_Large_C>();
	}
};
static_assert(alignof(AB_DanceFloorSounds_Large_C) == 0x000008, "Wrong alignment on AB_DanceFloorSounds_Large_C");
static_assert(sizeof(AB_DanceFloorSounds_Large_C) == 0x000258, "Wrong size on AB_DanceFloorSounds_Large_C");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, UberGraphFrame) == 0x000228, "Member 'AB_DanceFloorSounds_Large_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, PawnVolume) == 0x000230, "Member 'AB_DanceFloorSounds_Large_C::PawnVolume' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, LPF_Fader_LPF_Normalized_731B387C490136B27D9BCE85F4B7846D) == 0x000238, "Member 'AB_DanceFloorSounds_Large_C::LPF_Fader_LPF_Normalized_731B387C490136B27D9BCE85F4B7846D' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, LPF_Fader__Direction_731B387C490136B27D9BCE85F4B7846D) == 0x00023C, "Member 'AB_DanceFloorSounds_Large_C::LPF_Fader__Direction_731B387C490136B27D9BCE85F4B7846D' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, LPF_Fader) == 0x000240, "Member 'AB_DanceFloorSounds_Large_C::LPF_Fader' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, FaderTime) == 0x000248, "Member 'AB_DanceFloorSounds_Large_C::FaderTime' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, LPFMin) == 0x00024C, "Member 'AB_DanceFloorSounds_Large_C::LPFMin' has a wrong offset!");
static_assert(offsetof(AB_DanceFloorSounds_Large_C, LPFMax) == 0x000250, "Member 'AB_DanceFloorSounds_Large_C::LPFMax' has a wrong offset!");

}

