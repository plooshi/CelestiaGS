#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniChallengeEntry

#include "Basic.hpp"

#include "MiniChallengeEntry_classes.hpp"
#include "MiniChallengeEntry_parameters.hpp"


namespace SDK
{

// Function MiniChallengeEntry.MiniChallengeEntry_C.ToastFinished__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::ToastFinished__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "ToastFinished__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.TriggerXpToast__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::TriggerXpToast__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "TriggerXpToast__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.ExecuteUbergraph_MiniChallengeEntry
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniChallengeEntry_C::ExecuteUbergraph_MiniChallengeEntry(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "ExecuteUbergraph_MiniChallengeEntry");

	Params::MiniChallengeEntry_C_ExecuteUbergraph_MiniChallengeEntry Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.Play Refresh to New
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::Play_Refresh_to_New()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "Play Refresh to New");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.Play Complete
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::Play_Complete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "Play Complete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.Play Fill to Complete Post
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::Play_Fill_to_Complete_Post()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "Play Fill to Complete Post");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.ResetProgressData
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::ResetProgressData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "ResetProgressData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.UpdateQuestDescription
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Description                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UMiniChallengeEntry_C::UpdateQuestDescription(const class FText& Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "UpdateQuestDescription");

	Params::MiniChallengeEntry_C_UpdateQuestDescription Parms{};

	Parms.Description = move(Description);

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.SequenceEvent_0
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::SequenceEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "SequenceEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.FadeToastAway
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::FadeToastAway()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "FadeToastAway");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.OnToastFinished
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::OnToastFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "OnToastFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.CompetionToast
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::CompetionToast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "CompetionToast");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UMiniChallengeEntry_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "PreConstruct");

	Params::MiniChallengeEntry_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UMiniChallengeEntry_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.OnDeltaProgressToCompleteFinished
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::OnDeltaProgressToCompleteFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "OnDeltaProgressToCompleteFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.OnDeltaProgressFinished
// (BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::OnDeltaProgressFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "OnDeltaProgressFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.SetXpValue
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   XpRewardValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniChallengeEntry_C::SetXpValue(int32 XpRewardValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "SetXpValue");

	Params::MiniChallengeEntry_C_SetXpValue Parms{};

	Parms.XpRewardValue = XpRewardValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.TriggerNewQuestGranted
// (Event, Protected, BlueprintEvent)

void UMiniChallengeEntry_C::TriggerNewQuestGranted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "TriggerNewQuestGranted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.UpdateProgressBar
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Param_LastKnownCount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_AchivedCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Param_GoalCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UMiniChallengeEntry_C::UpdateProgressBar(int32 Param_LastKnownCount, int32 Param_AchivedCount, int32 Param_GoalCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "UpdateProgressBar");

	Params::MiniChallengeEntry_C_UpdateProgressBar Parms{};

	Parms.Param_LastKnownCount = Param_LastKnownCount;
	Parms.Param_AchivedCount = Param_AchivedCount;
	Parms.Param_GoalCount = Param_GoalCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.QuestCompletedFinishFill
// (Event, Public, BlueprintEvent)

void UMiniChallengeEntry_C::QuestCompletedFinishFill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "QuestCompletedFinishFill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.StyleAsFirstTimeBoosted
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::StyleAsFirstTimeBoosted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "StyleAsFirstTimeBoosted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.StyleAsNormal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::StyleAsNormal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "StyleAsNormal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function MiniChallengeEntry.MiniChallengeEntry_C.SequenceEvent__ENTRYPOINTMiniChallengeEntry_0
// (Public, BlueprintCallable, BlueprintEvent)

void UMiniChallengeEntry_C::SequenceEvent__ENTRYPOINTMiniChallengeEntry_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniChallengeEntry_C", "SequenceEvent__ENTRYPOINTMiniChallengeEntry_0");

	UObject::ProcessEvent(Func, nullptr);
}

}

