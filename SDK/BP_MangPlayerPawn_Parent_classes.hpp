#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MangPlayerPawn_Parent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BP_PlayerPawn_Athena_Phoebe_classes.hpp"
#include "Enum_MANG_Security_ID_structs.hpp"
#include "Structure_MANG_StealthMeter_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MangPlayerPawn_Parent.BP_MangPlayerPawn_Parent_C
// 0x0110 (0x3C20 - 0x3B10)
class ABP_MangPlayerPawn_Parent_C : public ABP_PlayerPawn_Athena_Phoebe_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_MangPlayerPawn_Parent_C;         // 0x3B10(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortAthenaAlertStateComponent*         FortAthenaAlertState;                              // 0x3B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VOAudioComponent;                                  // 0x3B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VoiceComponent_MANG_C*              BP_VoiceComponent_MANG;                            // 0x3B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PatrolLayerAnimBP;                                 // 0x3B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFortPatrolAnimSetWeaponPair>   PatrolAnimSetPairs;                                // 0x3B38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UFortPatrolAnimAsset*                   CurrentPatrolAnimAsset;                            // 0x3B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultAdditiveHitReactionMontage;                 // 0x3B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DefaultFullbodyHitReactionMontage;                 // 0x3B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortAbilitySet*                        HitReactAbilitySetHACK;                            // 0x3B60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   AlertLevel;                                        // 0x3B68(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	EAlertLevel                                   OldAlertLevel;                                     // 0x3B69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_MANG_Security_ID                         Camera_ID;                                         // 0x3B6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8117[0x5];                                     // 0x3B6B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_NPC_Status_Stressed_Infinite;                   // 0x3B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_NPC_Status_Stressed_Cooldown;                   // 0x3B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayCueAlertState;                             // 0x3B80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RemoveDisguise;                                 // 0x3B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TC_DisguiseTag;                                    // 0x3B90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               AmmoDefToSpawn;                                    // 0x3B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmmoCountToDrop;                                   // 0x3BA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDropAmmo;                                    // 0x3BA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8118[0x3];                                     // 0x3BA5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NewVar_1;                                          // 0x3BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistanceToTargetToPlayCombatAlertAnimation;     // 0x3BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8119[0x4];                                     // 0x3BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class USoundBase*>  AlertSFXMap;                                       // 0x3BB8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FStructure_MANG_StealthMeter           StealthMeterPawn;                                  // 0x3C08(0x0008)(Edit, BlueprintVisible, Net, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldDoFullAnimationUpdate;                      // 0x3C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_811A[0x3];                                     // 0x3C11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NewVar_2;                                          // 0x3C14(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_MangPlayerPawn_Parent(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void IdlePatrolVO();
	void OnDBNOStateChanged_Event(class AFortPawn* FortPawn, bool bInIsDBNO);
	void GameplayCue_Player_Interrogation_Voice_PickedUp(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__CapsuleComponent_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnCharacterCustomizationCompleted(class AFortPlayerPawn* Pawn);
	void UpdatePatrolAnimSet(class AFortWeapon* NewWeapon);
	void OnRep_AlertLevel();
	void GetCurrentFullbodyHitReactionMontage(class UAnimMontage** CurrentMontage);
	void PlayVoiceComponentSoundByTag(const struct FGameplayTag& SoundBankTag);
	void Set_Alerted_State_Gameplay_Cue(bool Alerted, bool Combat);
	void AlertLevelChanged(EAlertLevel Param_OldAlertLevel, EAlertLevel NewAlertLevel);
	void SetAmmoToSpawnOnDeath(class UFortWorldItemDefinition* AmmoDefinition, int32 Count, bool Param_ShouldDropAmmo);
	void DebugControlResistanceInfo();
	void InitializeAnimInstanceSettings();
	class UAnimMontage* GetAdditiveHitReactsMontage();
	void GetStateTagFromAlertLevel(struct FGameplayTag* NewParam);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MangPlayerPawn_Parent_C">();
	}
	static class ABP_MangPlayerPawn_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_MangPlayerPawn_Parent_C>();
	}
};
static_assert(alignof(ABP_MangPlayerPawn_Parent_C) == 0x000010, "Wrong alignment on ABP_MangPlayerPawn_Parent_C");
static_assert(sizeof(ABP_MangPlayerPawn_Parent_C) == 0x003C20, "Wrong size on ABP_MangPlayerPawn_Parent_C");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, UberGraphFrame_BP_MangPlayerPawn_Parent_C) == 0x003B10, "Member 'ABP_MangPlayerPawn_Parent_C::UberGraphFrame_BP_MangPlayerPawn_Parent_C' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, FortAthenaAlertState) == 0x003B18, "Member 'ABP_MangPlayerPawn_Parent_C::FortAthenaAlertState' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, VOAudioComponent) == 0x003B20, "Member 'ABP_MangPlayerPawn_Parent_C::VOAudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, BP_VoiceComponent_MANG) == 0x003B28, "Member 'ABP_MangPlayerPawn_Parent_C::BP_VoiceComponent_MANG' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, PatrolLayerAnimBP) == 0x003B30, "Member 'ABP_MangPlayerPawn_Parent_C::PatrolLayerAnimBP' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, PatrolAnimSetPairs) == 0x003B38, "Member 'ABP_MangPlayerPawn_Parent_C::PatrolAnimSetPairs' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, CurrentPatrolAnimAsset) == 0x003B48, "Member 'ABP_MangPlayerPawn_Parent_C::CurrentPatrolAnimAsset' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, DefaultAdditiveHitReactionMontage) == 0x003B50, "Member 'ABP_MangPlayerPawn_Parent_C::DefaultAdditiveHitReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, DefaultFullbodyHitReactionMontage) == 0x003B58, "Member 'ABP_MangPlayerPawn_Parent_C::DefaultFullbodyHitReactionMontage' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, HitReactAbilitySetHACK) == 0x003B60, "Member 'ABP_MangPlayerPawn_Parent_C::HitReactAbilitySetHACK' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, AlertLevel) == 0x003B68, "Member 'ABP_MangPlayerPawn_Parent_C::AlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, OldAlertLevel) == 0x003B69, "Member 'ABP_MangPlayerPawn_Parent_C::OldAlertLevel' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, Camera_ID) == 0x003B6A, "Member 'ABP_MangPlayerPawn_Parent_C::Camera_ID' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, GE_NPC_Status_Stressed_Infinite) == 0x003B70, "Member 'ABP_MangPlayerPawn_Parent_C::GE_NPC_Status_Stressed_Infinite' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, GE_NPC_Status_Stressed_Cooldown) == 0x003B78, "Member 'ABP_MangPlayerPawn_Parent_C::GE_NPC_Status_Stressed_Cooldown' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, GameplayCueAlertState) == 0x003B80, "Member 'ABP_MangPlayerPawn_Parent_C::GameplayCueAlertState' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, GE_RemoveDisguise) == 0x003B88, "Member 'ABP_MangPlayerPawn_Parent_C::GE_RemoveDisguise' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, TC_DisguiseTag) == 0x003B90, "Member 'ABP_MangPlayerPawn_Parent_C::TC_DisguiseTag' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, AmmoDefToSpawn) == 0x003B98, "Member 'ABP_MangPlayerPawn_Parent_C::AmmoDefToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, AmmoCountToDrop) == 0x003BA0, "Member 'ABP_MangPlayerPawn_Parent_C::AmmoCountToDrop' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, ShouldDropAmmo) == 0x003BA4, "Member 'ABP_MangPlayerPawn_Parent_C::ShouldDropAmmo' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, NewVar_1) == 0x003BA8, "Member 'ABP_MangPlayerPawn_Parent_C::NewVar_1' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, MinDistanceToTargetToPlayCombatAlertAnimation) == 0x003BB0, "Member 'ABP_MangPlayerPawn_Parent_C::MinDistanceToTargetToPlayCombatAlertAnimation' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, AlertSFXMap) == 0x003BB8, "Member 'ABP_MangPlayerPawn_Parent_C::AlertSFXMap' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, StealthMeterPawn) == 0x003C08, "Member 'ABP_MangPlayerPawn_Parent_C::StealthMeterPawn' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, bShouldDoFullAnimationUpdate) == 0x003C10, "Member 'ABP_MangPlayerPawn_Parent_C::bShouldDoFullAnimationUpdate' has a wrong offset!");
static_assert(offsetof(ABP_MangPlayerPawn_Parent_C, NewVar_2) == 0x003C14, "Member 'ABP_MangPlayerPawn_Parent_C::NewVar_2' has a wrong offset!");

}

