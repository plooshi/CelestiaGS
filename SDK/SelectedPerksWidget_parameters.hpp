#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SelectedPerksWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function SelectedPerksWidget.SelectedPerksWidget_C.ItemFocused__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SelectedPerksWidget_C_ItemFocused__DelegateSignature final
{
public:
	class UFortSpyTechItemDefinition*             SpyTechItemDef;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hide;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SelectedPerksWidget_C_ItemFocused__DelegateSignature) == 0x000008, "Wrong alignment on SelectedPerksWidget_C_ItemFocused__DelegateSignature");
static_assert(sizeof(SelectedPerksWidget_C_ItemFocused__DelegateSignature) == 0x000010, "Wrong size on SelectedPerksWidget_C_ItemFocused__DelegateSignature");
static_assert(offsetof(SelectedPerksWidget_C_ItemFocused__DelegateSignature, SpyTechItemDef) == 0x000000, "Member 'SelectedPerksWidget_C_ItemFocused__DelegateSignature::SpyTechItemDef' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ItemFocused__DelegateSignature, Hide) == 0x000008, "Member 'SelectedPerksWidget_C_ItemFocused__DelegateSignature::Hide' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.PerksUpdated__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct SelectedPerksWidget_C_PerksUpdated__DelegateSignature final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_PerksUpdated__DelegateSignature) == 0x000004, "Wrong alignment on SelectedPerksWidget_C_PerksUpdated__DelegateSignature");
static_assert(sizeof(SelectedPerksWidget_C_PerksUpdated__DelegateSignature) == 0x000004, "Wrong size on SelectedPerksWidget_C_PerksUpdated__DelegateSignature");
static_assert(offsetof(SelectedPerksWidget_C_PerksUpdated__DelegateSignature, Count) == 0x000000, "Member 'SelectedPerksWidget_C_PerksUpdated__DelegateSignature::Count' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.ExecuteUbergraph_SelectedPerksWidget
// 0x0108 (0x0108 - 0x0000)
struct SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79ED[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79EE[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPerkVisual_C*>                  K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79EF[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x0028(0x0070)(ConstParm)
	int32                                         CallFunc_GetActiveCount_Count;                     // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPerkVisual_C*                          CallFunc_Array_Get_Item;                           // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSpyTechItemDefinition*             CallFunc_Array_Get_Item_1;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F0[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpyTechItemDefinition*             CallFunc_Array_Get_Item_2;                         // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F1[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F2[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F3[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVerbosePerkVisual_C*>           K2Node_MakeArray_Array_1;                          // 0x00E0(0x0010)(ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   CallFunc_Array_Get_Item_3;                         // 0x00F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F4[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget) == 0x000008, "Wrong alignment on SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget");
static_assert(sizeof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget) == 0x000108, "Wrong size on SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, EntryPoint) == 0x000000, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_bool_Variable) == 0x000004, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Array_Index_Variable) == 0x000008, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, K2Node_MakeArray_Array) == 0x000010, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, K2Node_Event_MouseEvent) == 0x000028, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_GetActiveCount_Count) == 0x000098, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_GetActiveCount_Count' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Loop_Counter_Variable) == 0x00009C, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Array_Index_Variable_1) == 0x0000A4, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Get_Item) == 0x0000A8, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Get_Item_1) == 0x0000B0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000B8, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0000B9, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Get_Item_2) == 0x0000C0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, K2Node_Event_IsDesignTime) == 0x0000C8, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Loop_Counter_Variable_1) == 0x0000CC, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Less_IntInt_ReturnValue) == 0x0000D0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000D4, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Variable) == 0x0000D8, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, K2Node_MakeArray_Array_1) == 0x0000E0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Get_Item_3) == 0x0000F0, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Array_Length_ReturnValue_1) == 0x0000F8, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, Temp_int_Variable_1) == 0x0000FC, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, CallFunc_Less_IntInt_ReturnValue_1) == 0x000100, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget, K2Node_Select_Default) == 0x000104, "Member 'SelectedPerksWidget_C_ExecuteUbergraph_SelectedPerksWidget::K2Node_Select_Default' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct SelectedPerksWidget_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SelectedPerksWidget_C_PreConstruct) == 0x000001, "Wrong alignment on SelectedPerksWidget_C_PreConstruct");
static_assert(sizeof(SelectedPerksWidget_C_PreConstruct) == 0x000001, "Wrong size on SelectedPerksWidget_C_PreConstruct");
static_assert(offsetof(SelectedPerksWidget_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'SelectedPerksWidget_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct SelectedPerksWidget_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(SelectedPerksWidget_C_OnMouseLeave) == 0x000008, "Wrong alignment on SelectedPerksWidget_C_OnMouseLeave");
static_assert(sizeof(SelectedPerksWidget_C_OnMouseLeave) == 0x000070, "Wrong size on SelectedPerksWidget_C_OnMouseLeave");
static_assert(offsetof(SelectedPerksWidget_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'SelectedPerksWidget_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.GetActiveCount
// 0x0008 (0x0008 - 0x0000)
struct SelectedPerksWidget_C_GetActiveCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_GetActiveCount) == 0x000004, "Wrong alignment on SelectedPerksWidget_C_GetActiveCount");
static_assert(sizeof(SelectedPerksWidget_C_GetActiveCount) == 0x000008, "Wrong size on SelectedPerksWidget_C_GetActiveCount");
static_assert(offsetof(SelectedPerksWidget_C_GetActiveCount, Count) == 0x000000, "Member 'SelectedPerksWidget_C_GetActiveCount::Count' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetActiveCount, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'SelectedPerksWidget_C_GetActiveCount::CallFunc_Array_Length_ReturnValue' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.SetHitTestState
// 0x0005 (0x0005 - 0x0000)
struct SelectedPerksWidget_C_SetHitTestState final
{
public:
	bool                                          HitTestable;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_SetHitTestState) == 0x000001, "Wrong alignment on SelectedPerksWidget_C_SetHitTestState");
static_assert(sizeof(SelectedPerksWidget_C_SetHitTestState) == 0x000005, "Wrong size on SelectedPerksWidget_C_SetHitTestState");
static_assert(offsetof(SelectedPerksWidget_C_SetHitTestState, HitTestable) == 0x000000, "Member 'SelectedPerksWidget_C_SetHitTestState::HitTestable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_SetHitTestState, Temp_bool_Variable) == 0x000001, "Member 'SelectedPerksWidget_C_SetHitTestState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_SetHitTestState, Temp_byte_Variable) == 0x000002, "Member 'SelectedPerksWidget_C_SetHitTestState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_SetHitTestState, Temp_byte_Variable_1) == 0x000003, "Member 'SelectedPerksWidget_C_SetHitTestState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_SetHitTestState, K2Node_Select_Default) == 0x000004, "Member 'SelectedPerksWidget_C_SetHitTestState::K2Node_Select_Default' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.ShowLabels
// 0x0001 (0x0001 - 0x0000)
struct SelectedPerksWidget_C_ShowLabels final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SelectedPerksWidget_C_ShowLabels) == 0x000001, "Wrong alignment on SelectedPerksWidget_C_ShowLabels");
static_assert(sizeof(SelectedPerksWidget_C_ShowLabels) == 0x000001, "Wrong size on SelectedPerksWidget_C_ShowLabels");
static_assert(offsetof(SelectedPerksWidget_C_ShowLabels, Show) == 0x000000, "Member 'SelectedPerksWidget_C_ShowLabels::Show' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.GetItem
// 0x0040 (0x0040 - 0x0000)
struct SelectedPerksWidget_C_GetItem final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79F5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpyTechItemDefinition*             SpyTechItemDef;                                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79F6[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortSpyTechItemDefinition*             CallFunc_GetItem_SpyTechItemDef;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSpyTechItemDefinition*             CallFunc_GetItem_SpyTechItemDef_1;                 // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSpyTechItemDefinition*             CallFunc_GetItem_SpyTechItemDef_2;                 // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSpyTechItemDefinition*             CallFunc_GetItem_SpyTechItemDef_3;                 // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortSpyTechItemDefinition*             CallFunc_GetItem_SpyTechItemDef_4;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_GetItem) == 0x000008, "Wrong alignment on SelectedPerksWidget_C_GetItem");
static_assert(sizeof(SelectedPerksWidget_C_GetItem) == 0x000040, "Wrong size on SelectedPerksWidget_C_GetItem");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, Param_Index) == 0x000000, "Member 'SelectedPerksWidget_C_GetItem::Param_Index' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, SpyTechItemDef) == 0x000008, "Member 'SelectedPerksWidget_C_GetItem::SpyTechItemDef' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, K2Node_SwitchInteger_CmpSuccess) == 0x000010, "Member 'SelectedPerksWidget_C_GetItem::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, CallFunc_GetItem_SpyTechItemDef) == 0x000018, "Member 'SelectedPerksWidget_C_GetItem::CallFunc_GetItem_SpyTechItemDef' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, CallFunc_GetItem_SpyTechItemDef_1) == 0x000020, "Member 'SelectedPerksWidget_C_GetItem::CallFunc_GetItem_SpyTechItemDef_1' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, CallFunc_GetItem_SpyTechItemDef_2) == 0x000028, "Member 'SelectedPerksWidget_C_GetItem::CallFunc_GetItem_SpyTechItemDef_2' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, CallFunc_GetItem_SpyTechItemDef_3) == 0x000030, "Member 'SelectedPerksWidget_C_GetItem::CallFunc_GetItem_SpyTechItemDef_3' has a wrong offset!");
static_assert(offsetof(SelectedPerksWidget_C_GetItem, CallFunc_GetItem_SpyTechItemDef_4) == 0x000038, "Member 'SelectedPerksWidget_C_GetItem::CallFunc_GetItem_SpyTechItemDef_4' has a wrong offset!");

// Function SelectedPerksWidget.SelectedPerksWidget_C.GetItems
// 0x0010 (0x0010 - 0x0000)
struct SelectedPerksWidget_C_GetItems final
{
public:
	TArray<class UFortSpyTechItemDefinition*>     SpyTechItemDefs;                                   // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(SelectedPerksWidget_C_GetItems) == 0x000008, "Wrong alignment on SelectedPerksWidget_C_GetItems");
static_assert(sizeof(SelectedPerksWidget_C_GetItems) == 0x000010, "Wrong size on SelectedPerksWidget_C_GetItems");
static_assert(offsetof(SelectedPerksWidget_C_GetItems, SpyTechItemDefs) == 0x000000, "Member 'SelectedPerksWidget_C_GetItems::SpyTechItemDefs' has a wrong offset!");

}

