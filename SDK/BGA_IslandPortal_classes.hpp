#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_IslandPortal

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_IslandPortal.BGA_IslandPortal_C
// 0x0490 (0x0F48 - 0x0AB8)
class ABGA_IslandPortal_C final : public AFortAthenaCreativePortal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0AB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       CodeScreenLookAtSphere;                            // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PortalLookAtSphere;                                // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HUD_Visibility_Volume;                             // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Code_Entry_Screen;                                 // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base_Mesh;                                         // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        PortalHUDDetails_PointerOrigin;                    // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       UI_PortalInfoPlate;                                // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ThumbnailPlane;                                    // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop_Gold;                             // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  RiftPostProcess;                                   // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessRadius;                                 // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_RiftClosingUp;                                   // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop;                                  // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rift;                                           // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Looping;                                     // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Open_D988993744202060C85FC18A08065960;  // 0x0B48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_D988993744202060C85FC18A08065960; // 0x0B4C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A31[0x3];                                     // 0x0B4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E; // 0x0B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E; // 0x0B5C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A32[0x3];                                     // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VectorScale;                                       // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DeathEffects;                                      // 0x0B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRift;                                       // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RiftDestroyed;                                     // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0B80(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        EnterRift;                                         // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 VehicleActor;                                      // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FallingAnimation;                                  // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportHeight;                                    // 0x0BA0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HangTime;                                          // 0x0BC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TeleportDelay;                                     // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A33[0x4];                                     // 0x0BE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                PassengerArray;                                    // 0x0BE8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UParticleSystem*                        CrackExitRift;                                     // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerExitSkyCrack;                                // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ActorOriginalLocation;                             // 0x0C08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawnHeightMultiplier;                          // 0x0C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectiveBackendName;                              // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               RiftPortalLocationsQuest;                          // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreativeMode;                                      // 0x0C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A34[0x7];                                     // 0x0C31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlapActor;                                      // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RiftLocationNum;                                   // 0x0C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ActorRotation;                                     // 0x0C44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FScalableFloat                         ShouldSpawnRift_;                                  // 0x0C50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         TeleportExitDistance_0;                            // 0x0C70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PortalCount;                                       // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A35[0x4];                                     // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         XPortalSeparation;                                 // 0x0C98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         StarterIslandTeleportHeight;                       // 0x0CB8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bCanPlayerInteract;                                // 0x0CD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A36[0x7];                                     // 0x0CD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         YPortalSeparation;                                 // 0x0CE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerControllerAthena*            PendingTeleport;                                   // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMyPortal;                                        // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A37[0x7];                                     // 0x0D09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Enter_Rift_Gold;                                   // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PortalLightPillar_C*                Beacon;                                            // 0x0D18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UIDistanceCheckTimer;                              // 0x0D20(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         UIShowDistance;                                    // 0x0D28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A38[0x4];                                     // 0x0D2C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   UI_InteractionDisplayWidgetSoftClass;              // 0x0D30(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   UI_PortalInfoPlateSoftClass;                       // 0x0D58(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdatePlayerName;                                  // 0x0D80(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePlayerPop;                                   // 0x0D90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateIslandName;                                  // 0x0DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdatePortalUIVis;                                 // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandSelectSoftClass;                          // 0x0DC0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandSelectClass;                              // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartSkydiving;                                    // 0x0DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A39[0x7];                                     // 0x0DF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdateIsCuratedPortal;                             // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftClassPtr<class UClass>                   UI_IslandCodeEntrySoftClass;                       // 0x0E08(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 UI_IslandCodeEntryClass;                           // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateDescription;                                 // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             UpdateLinkCode;                                    // 0x0E48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsBeingDisplayed;                                 // 0x0E58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3A[0x3];                                     // 0x0E59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThumbnailWorldSizeScale;                           // 0x0E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OwnedThumbnailColor;                               // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnownedThumbnailColor;                             // 0x0E70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   OverrideName;                                      // 0x0E80(0x0018)(Edit, BlueprintVisible)
	bool                                          bAlwaysDisplay;                                    // 0x0E98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3B[0x7];                                     // 0x0E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             IsBeingInteractedWith;                             // 0x0EA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UUserWidget*                            DisplayedWidget;                                   // 0x0EB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CloseShownUI;                                      // 0x0EB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class APawn*>                          LocalPawnsInRange;                                 // 0x0EC8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, AdvancedDisplay, HasGetValueTypeHash)
	float                                         LookAtUpdateTimeSecs;                              // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A3C[0x4];                                     // 0x0EDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LookAtCodeScreenHandle;                            // 0x0EE0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorNotHighlighted;                         // 0x0EE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorCanUpdate;                              // 0x0EF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorLocked;                                 // 0x0F08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ScreenColorDisabled;                               // 0x0F18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseCodeEntryScreen;                               // 0x0F28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bPlayerMustInteractToUsePortal;                    // 0x0F29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bEnableBaseAndCodeEntryInteractions;               // 0x0F2A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3D[0x5];                                     // 0x0F2B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             UpdateLocalPlayerLookingAtScreen;                  // 0x0F30(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bLocalPlayerLookingAtScreen;                       // 0x0F40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bLocalPlayerLookingAtPortal;                       // 0x0F41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)

public:
	void UpdatePlayerName__DelegateSignature(const class FText& NewPlayerName);
	void UpdatePlayerPop__DelegateSignature(int32 NewPop);
	void UpdateIslandName__DelegateSignature(const class FText& NewIslandName);
	void UpdatePortalUIVis__DelegateSignature(bool Show, bool WasHidden, float Distance);
	void UpdateIsCuratedPortal__DelegateSignature(bool bIsCurated, bool bIsLinkCode, bool bIsUserInitiatedLoad);
	void UpdateDescription__DelegateSignature(const class FText& Description);
	void UpdateLinkCode__DelegateSignature(const class FString& LinkCode);
	void IsBeingInteractedWith__DelegateSignature(bool IsInteracting);
	void CloseShownUI__DelegateSignature();
	void UpdateLocalPlayerLookingAtScreen__DelegateSignature(bool bPlayerLookingAtScreen);
	void ExecuteUbergraph_BGA_IslandPortal(int32 EntryPoint);
	void ErrorStateChanged();
	void ServerOnInteractWithIslandPortal(const class AFortPlayerPawn* InteractingPawn);
	void BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnReceivedNewIslandInfo();
	void BroadcastIsBeingInteractedWith(bool IsInteracting);
	void Play_Teleport_Audio();
	void SetupPortalForThumbnailDisplay();
	void OnThumbnailTextureReady();
	void Play_Rift_Exit_Sound(const struct FVector& Location);
	void ClientSaveDisplayChanged(bool bSaving);
	void CuratedPortalChanged();
	void UpdatePortal();
	void PortalOpenChanged();
	void TeleportToCreativeHub();
	void DisplayNameChanged();
	void PopulationChanged();
	void CheckShouldDisplayUI();
	void OwningPlayerChanged();
	void CheckIsMyPortal(bool Param_IsMyPortal);
	void EvaluateOverlap();
	void ClientTeleportToLobbyIsland(class AFortPlayerController* RequestingController);
	void NotifyTeleportedPlayerPawn(class AFortPlayerPawn* Param_PlayerPawn, bool bTeleportedToIslandStart);
	void LoadIslandUI(class AFortPlayerPawn* InteractingPawn);
	void NotifyTeleportedVehicle(class AActor* Param_VehicleActor);
	void OverlappingOnBeginPlay(class AActor* Actor);
	void PlayCosmeticFX(const struct FVector& DestinationLocation);
	void PlayTeleportFX(const struct FVector& PlayerLocation, const struct FVector& DestinationLocation);
	void ReceiveBeginPlay();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnLoaded_E60F9B1D4E758E4EA443468A995679B2(class UClass* Loaded);
	void OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5(class UClass* Loaded);
	void OnLoaded_A43955A14A20383F466DF18A87BBA501(class UClass* Loaded);
	void OnLoaded_25EC650C4A5067360B49BC87DAFA1B71(class UClass* Loaded);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void VectorScale__UpdateFunc();
	void VectorScale__FinishedFunc();
	void PlayExpandOrCollapseAudio(bool Expand);
	void OnRep_TeleportLocation();
	void OnRep_Vehicle();
	void OnRep_PlayerPawn();
	void CheckForRiftLocUpdate(class AController* InController);
	void UseRiftQuestUpdate(class AController* InController);
	void GetPortalPosition(struct FVector* Location);
	bool BlueprintOnLocalInteract(class AFortPlayerPawn* InteractingPawn);
	void TeleportToLobbyIsland(class AFortPlayerController* RequestingController);
	void SetPortalUIVisibility(bool Show, float Distance);
	void UpdatePopulationDisplay();
	void UpdateNameDisplay();
	struct FVector ScaleThumbnailPlaneByTextureSize();
	void CanUseHUDInteract(bool* CanInteract);
	void CloseAndClearDisplayedWidget();
	void ClearDisplayedWidget();
	void StartOrEndQuery();
	void QueryPlayerLookAt();
	void UpdateCodeEntryScreen(bool bForceScreenUpdate);
	void UpdateCodeEntryVisibility();
	void UpdateBaseVisibility();
	void LocalPlayerEnteredRange(class APawn* LocalPawn);
	void LocalPlayerExitedRange(class APawn* LocalPawn);
	void LocalPlayerRangeCheck(class AActor* OverlappingActor, bool bEnteredRange);
	void StartTeleport(class AActor* Param_OverlapActor);
	void UpdateInfoPlatePointer();
	void StartTeleportByInteractionOnServer(class AActor* Param_OverlapActor);
	void DetermineWherePlayerIsLooking(class APawn* Pawn, bool* bIsLookingAtScreen, bool* bIsLookingAtPortal);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	void PortalTeleportsByInteraction(bool* bRequiresInteraction) const;
	void PortalUsesCodeScreen(bool* bUsesCodeScreen) const;
	void IsLookingAtSphere(class USphereComponent* LookAtSphere, const struct FVector& Eyes_View_Point_Location, const struct FRotator& Eyes_View_Point_Rotation, bool* bIsLookingAtSphere) const;
	void CanModifyPortal(bool* bCanModify) const;
	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;
	bool IconPlacementNeedsUpdate() const;
	bool BlueprintUseMobileHighlight() const;
	bool BlueprintDisplayMobileInteractPrompt() const;
	void MobileInteractIsValid(bool* bIsValid) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_IslandPortal_C">();
	}
	static class ABGA_IslandPortal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_IslandPortal_C>();
	}
};
static_assert(alignof(ABGA_IslandPortal_C) == 0x000008, "Wrong alignment on ABGA_IslandPortal_C");
static_assert(sizeof(ABGA_IslandPortal_C) == 0x000F48, "Wrong size on ABGA_IslandPortal_C");
static_assert(offsetof(ABGA_IslandPortal_C, UberGraphFrame) == 0x000AB8, "Member 'ABGA_IslandPortal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CodeScreenLookAtSphere) == 0x000AC0, "Member 'ABGA_IslandPortal_C::CodeScreenLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalLookAtSphere) == 0x000AC8, "Member 'ABGA_IslandPortal_C::PortalLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, HUD_Visibility_Volume) == 0x000AD0, "Member 'ABGA_IslandPortal_C::HUD_Visibility_Volume' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Code_Entry_Screen) == 0x000AD8, "Member 'ABGA_IslandPortal_C::Code_Entry_Screen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Base_Mesh) == 0x000AE0, "Member 'ABGA_IslandPortal_C::Base_Mesh' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalHUDDetails_PointerOrigin) == 0x000AE8, "Member 'ABGA_IslandPortal_C::PortalHUDDetails_PointerOrigin' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlate) == 0x000AF0, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlate' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailPlane) == 0x000AF8, "Member 'ABGA_IslandPortal_C::ThumbnailPlane' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop_Gold) == 0x000B00, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPostProcess) == 0x000B08, "Member 'ABGA_IslandPortal_C::RiftPostProcess' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PostProcessRadius) == 0x000B10, "Member 'ABGA_IslandPortal_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_RiftClosingUp) == 0x000B18, "Member 'ABGA_IslandPortal_C::P_RiftClosingUp' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, P_Rift_Idle_Loop) == 0x000B20, "Member 'ABGA_IslandPortal_C::P_Rift_Idle_Loop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapCapsule) == 0x000B28, "Member 'ABGA_IslandPortal_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Capsule) == 0x000B30, "Member 'ABGA_IslandPortal_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, SM_Rift) == 0x000B38, "Member 'ABGA_IslandPortal_C::SM_Rift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Audio_Looping) == 0x000B40, "Member 'ABGA_IslandPortal_C::Audio_Looping' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0_Open_D988993744202060C85FC18A08065960) == 0x000B48, "Member 'ABGA_IslandPortal_C::Timeline_0_Open_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0__Direction_D988993744202060C85FC18A08065960) == 0x000B4C, "Member 'ABGA_IslandPortal_C::Timeline_0__Direction_D988993744202060C85FC18A08065960' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Timeline_0) == 0x000B50, "Member 'ABGA_IslandPortal_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E) == 0x000B58, "Member 'ABGA_IslandPortal_C::VectorScale_Open_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E) == 0x000B5C, "Member 'ABGA_IslandPortal_C::VectorScale__Direction_7AB95DD3448038155AB954ABBF1B806E' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VectorScale) == 0x000B60, "Member 'ABGA_IslandPortal_C::VectorScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DeathEffects) == 0x000B68, "Member 'ABGA_IslandPortal_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnteredRift) == 0x000B70, "Member 'ABGA_IslandPortal_C::EnteredRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftDestroyed) == 0x000B78, "Member 'ABGA_IslandPortal_C::RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerPawn) == 0x000B80, "Member 'ABGA_IslandPortal_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, EnterRift) == 0x000B88, "Member 'ABGA_IslandPortal_C::EnterRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, VehicleActor) == 0x000B90, "Member 'ABGA_IslandPortal_C::VehicleActor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, FallingAnimation) == 0x000B98, "Member 'ABGA_IslandPortal_C::FallingAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportHeight) == 0x000BA0, "Member 'ABGA_IslandPortal_C::TeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, HangTime) == 0x000BC0, "Member 'ABGA_IslandPortal_C::HangTime' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportDelay) == 0x000BE0, "Member 'ABGA_IslandPortal_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PassengerArray) == 0x000BE8, "Member 'ABGA_IslandPortal_C::PassengerArray' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CrackExitRift) == 0x000BF8, "Member 'ABGA_IslandPortal_C::CrackExitRift' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PlayerExitSkyCrack) == 0x000C00, "Member 'ABGA_IslandPortal_C::PlayerExitSkyCrack' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorOriginalLocation) == 0x000C08, "Member 'ABGA_IslandPortal_C::ActorOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, MaxSpawnHeightMultiplier) == 0x000C14, "Member 'ABGA_IslandPortal_C::MaxSpawnHeightMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, QuestItem) == 0x000C18, "Member 'ABGA_IslandPortal_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ObjectiveBackendName) == 0x000C20, "Member 'ABGA_IslandPortal_C::ObjectiveBackendName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftPortalLocationsQuest) == 0x000C28, "Member 'ABGA_IslandPortal_C::RiftPortalLocationsQuest' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CreativeMode) == 0x000C30, "Member 'ABGA_IslandPortal_C::CreativeMode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverlapActor) == 0x000C38, "Member 'ABGA_IslandPortal_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, RiftLocationNum) == 0x000C40, "Member 'ABGA_IslandPortal_C::RiftLocationNum' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ActorRotation) == 0x000C44, "Member 'ABGA_IslandPortal_C::ActorRotation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ShouldSpawnRift_) == 0x000C50, "Member 'ABGA_IslandPortal_C::ShouldSpawnRift_' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, TeleportExitDistance_0) == 0x000C70, "Member 'ABGA_IslandPortal_C::TeleportExitDistance_0' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PortalCount) == 0x000C90, "Member 'ABGA_IslandPortal_C::PortalCount' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, XPortalSeparation) == 0x000C98, "Member 'ABGA_IslandPortal_C::XPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StarterIslandTeleportHeight) == 0x000CB8, "Member 'ABGA_IslandPortal_C::StarterIslandTeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bCanPlayerInteract) == 0x000CD8, "Member 'ABGA_IslandPortal_C::bCanPlayerInteract' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, YPortalSeparation) == 0x000CE0, "Member 'ABGA_IslandPortal_C::YPortalSeparation' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, PendingTeleport) == 0x000D00, "Member 'ABGA_IslandPortal_C::PendingTeleport' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, IsMyPortal) == 0x000D08, "Member 'ABGA_IslandPortal_C::IsMyPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Enter_Rift_Gold) == 0x000D10, "Member 'ABGA_IslandPortal_C::Enter_Rift_Gold' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, Beacon) == 0x000D18, "Member 'ABGA_IslandPortal_C::Beacon' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIDistanceCheckTimer) == 0x000D20, "Member 'ABGA_IslandPortal_C::UIDistanceCheckTimer' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UIShowDistance) == 0x000D28, "Member 'ABGA_IslandPortal_C::UIShowDistance' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_InteractionDisplayWidgetSoftClass) == 0x000D30, "Member 'ABGA_IslandPortal_C::UI_InteractionDisplayWidgetSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_PortalInfoPlateSoftClass) == 0x000D58, "Member 'ABGA_IslandPortal_C::UI_PortalInfoPlateSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerName) == 0x000D80, "Member 'ABGA_IslandPortal_C::UpdatePlayerName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePlayerPop) == 0x000D90, "Member 'ABGA_IslandPortal_C::UpdatePlayerPop' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIslandName) == 0x000DA0, "Member 'ABGA_IslandPortal_C::UpdateIslandName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdatePortalUIVis) == 0x000DB0, "Member 'ABGA_IslandPortal_C::UpdatePortalUIVis' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectSoftClass) == 0x000DC0, "Member 'ABGA_IslandPortal_C::UI_IslandSelectSoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandSelectClass) == 0x000DE8, "Member 'ABGA_IslandPortal_C::UI_IslandSelectClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, StartSkydiving) == 0x000DF0, "Member 'ABGA_IslandPortal_C::StartSkydiving' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateIsCuratedPortal) == 0x000DF8, "Member 'ABGA_IslandPortal_C::UpdateIsCuratedPortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntrySoftClass) == 0x000E08, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntrySoftClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UI_IslandCodeEntryClass) == 0x000E30, "Member 'ABGA_IslandPortal_C::UI_IslandCodeEntryClass' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateDescription) == 0x000E38, "Member 'ABGA_IslandPortal_C::UpdateDescription' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateLinkCode) == 0x000E48, "Member 'ABGA_IslandPortal_C::UpdateLinkCode' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bIsBeingDisplayed) == 0x000E58, "Member 'ABGA_IslandPortal_C::bIsBeingDisplayed' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ThumbnailWorldSizeScale) == 0x000E5C, "Member 'ABGA_IslandPortal_C::ThumbnailWorldSizeScale' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OwnedThumbnailColor) == 0x000E60, "Member 'ABGA_IslandPortal_C::OwnedThumbnailColor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UnownedThumbnailColor) == 0x000E70, "Member 'ABGA_IslandPortal_C::UnownedThumbnailColor' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, OverrideName) == 0x000E80, "Member 'ABGA_IslandPortal_C::OverrideName' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bAlwaysDisplay) == 0x000E98, "Member 'ABGA_IslandPortal_C::bAlwaysDisplay' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, IsBeingInteractedWith) == 0x000EA0, "Member 'ABGA_IslandPortal_C::IsBeingInteractedWith' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, DisplayedWidget) == 0x000EB0, "Member 'ABGA_IslandPortal_C::DisplayedWidget' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, CloseShownUI) == 0x000EB8, "Member 'ABGA_IslandPortal_C::CloseShownUI' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LocalPawnsInRange) == 0x000EC8, "Member 'ABGA_IslandPortal_C::LocalPawnsInRange' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LookAtUpdateTimeSecs) == 0x000ED8, "Member 'ABGA_IslandPortal_C::LookAtUpdateTimeSecs' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, LookAtCodeScreenHandle) == 0x000EE0, "Member 'ABGA_IslandPortal_C::LookAtCodeScreenHandle' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorNotHighlighted) == 0x000EE8, "Member 'ABGA_IslandPortal_C::ScreenColorNotHighlighted' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorCanUpdate) == 0x000EF8, "Member 'ABGA_IslandPortal_C::ScreenColorCanUpdate' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorLocked) == 0x000F08, "Member 'ABGA_IslandPortal_C::ScreenColorLocked' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, ScreenColorDisabled) == 0x000F18, "Member 'ABGA_IslandPortal_C::ScreenColorDisabled' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bUseCodeEntryScreen) == 0x000F28, "Member 'ABGA_IslandPortal_C::bUseCodeEntryScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bPlayerMustInteractToUsePortal) == 0x000F29, "Member 'ABGA_IslandPortal_C::bPlayerMustInteractToUsePortal' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bEnableBaseAndCodeEntryInteractions) == 0x000F2A, "Member 'ABGA_IslandPortal_C::bEnableBaseAndCodeEntryInteractions' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, UpdateLocalPlayerLookingAtScreen) == 0x000F30, "Member 'ABGA_IslandPortal_C::UpdateLocalPlayerLookingAtScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bLocalPlayerLookingAtScreen) == 0x000F40, "Member 'ABGA_IslandPortal_C::bLocalPlayerLookingAtScreen' has a wrong offset!");
static_assert(offsetof(ABGA_IslandPortal_C, bLocalPlayerLookingAtPortal) == 0x000F41, "Member 'ABGA_IslandPortal_C::bLocalPlayerLookingAtPortal' has a wrong offset!");

}

