#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Trophy_TrophyProp

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AmbientAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function Trophy_TrophyProp.Trophy_TrophyProp_C.ExecuteUbergraph_Trophy_TrophyProp
// 0x01A8 (0x01A8 - 0x0000)
struct Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6602[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAmbientAudioSubsystem*                 CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags)> K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_6603[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   K2Node_CustomEvent_GameState;                      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortPlaylist*                    K2Node_CustomEvent_Playlist;                       // 0x0038(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  K2Node_CustomEvent_PlaylistContextTags;            // 0x0040(0x0020)(ConstParm)
	struct FGameplayTagContainer                  Temp_struct_Variable;                              // 0x0060(0x0020)()
	class UFortPlaylist*                          Temp_object_Variable;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortGameStateAthena*                   Temp_object_Variable_1;                            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortAsyncAction_CurrentPlaylistReady*  CallFunc_PlaylistDataReadyAsync_ReturnValue;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6604[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_AmbientName;                    // 0x009C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAmbientAudioEntryActionType                  K2Node_CustomEvent_ActionType;                     // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6605[0x2];                                     // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName AmbientName, EAmbientAudioEntryActionType ActionType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_Event_Damage;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6606[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  K2Node_Event_DamageTags;                           // 0x00C0(0x0020)(ConstParm)
	struct FVector                                K2Node_Event_Momentum;                             // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x00EC(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AFortPawn*                              K2Node_Event_InstigatedBy;                         // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           K2Node_Event_EffectContext;                        // 0x0188(0x0018)()
	bool                                          CallFunc_IsPlaying_ReturnValue;                    // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp) == 0x000008, "Wrong alignment on Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp");
static_assert(sizeof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp) == 0x0001A8, "Wrong size on Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, EntryPoint) == 0x000000, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::EntryPoint' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000008, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000010, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CustomEvent_GameState) == 0x000030, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CustomEvent_GameState' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CustomEvent_Playlist) == 0x000038, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CustomEvent_Playlist' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CustomEvent_PlaylistContextTags) == 0x000040, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CustomEvent_PlaylistContextTags' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, Temp_struct_Variable) == 0x000060, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, Temp_object_Variable) == 0x000080, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, Temp_object_Variable_1) == 0x000088, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, CallFunc_PlaylistDataReadyAsync_ReturnValue) == 0x000090, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::CallFunc_PlaylistDataReadyAsync_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CustomEvent_AmbientName) == 0x00009C, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CustomEvent_AmbientName' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CustomEvent_ActionType) == 0x0000A4, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CustomEvent_ActionType' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_SwitchName_CmpSuccess) == 0x0000A5, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000A8, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_Damage) == 0x0000B8, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_DamageTags) == 0x0000C0, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_DamageTags' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_Momentum) == 0x0000E0, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_Momentum' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_HitInfo) == 0x0000EC, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_InstigatedBy) == 0x000178, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_DamageCauser) == 0x000180, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, K2Node_Event_EffectContext) == 0x000188, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::K2Node_Event_EffectContext' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp, CallFunc_IsPlaying_ReturnValue) == 0x0001A0, "Member 'Trophy_TrophyProp_C_ExecuteUbergraph_Trophy_TrophyProp::CallFunc_IsPlaying_ReturnValue' has a wrong offset!");

// Function Trophy_TrophyProp.Trophy_TrophyProp_C.OnDeathPlayEffects
// 0x00E8 (0x00E8 - 0x0000)
struct Trophy_TrophyProp_C_OnDeathPlayEffects final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6607[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0034(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AFortPawn*                              InstigatedBy;                                      // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(Trophy_TrophyProp_C_OnDeathPlayEffects) == 0x000008, "Wrong alignment on Trophy_TrophyProp_C_OnDeathPlayEffects");
static_assert(sizeof(Trophy_TrophyProp_C_OnDeathPlayEffects) == 0x0000E8, "Wrong size on Trophy_TrophyProp_C_OnDeathPlayEffects");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, Damage) == 0x000000, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::Damage' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, DamageTags) == 0x000008, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::DamageTags' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, Momentum) == 0x000028, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::Momentum' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, HitInfo) == 0x000034, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::HitInfo' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, InstigatedBy) == 0x0000C0, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::InstigatedBy' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, DamageCauser) == 0x0000C8, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::DamageCauser' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnDeathPlayEffects, EffectContext) == 0x0000D0, "Member 'Trophy_TrophyProp_C_OnDeathPlayEffects::EffectContext' has a wrong offset!");

// Function Trophy_TrophyProp.Trophy_TrophyProp_C.On Entry Changed
// 0x000C (0x000C - 0x0000)
struct Trophy_TrophyProp_C_On_Entry_Changed final
{
public:
	class FName                                   AmbientName;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAmbientAudioEntryActionType                  ActionType;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Trophy_TrophyProp_C_On_Entry_Changed) == 0x000004, "Wrong alignment on Trophy_TrophyProp_C_On_Entry_Changed");
static_assert(sizeof(Trophy_TrophyProp_C_On_Entry_Changed) == 0x00000C, "Wrong size on Trophy_TrophyProp_C_On_Entry_Changed");
static_assert(offsetof(Trophy_TrophyProp_C_On_Entry_Changed, AmbientName) == 0x000000, "Member 'Trophy_TrophyProp_C_On_Entry_Changed::AmbientName' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_On_Entry_Changed, ActionType) == 0x000008, "Member 'Trophy_TrophyProp_C_On_Entry_Changed::ActionType' has a wrong offset!");

// Function Trophy_TrophyProp.Trophy_TrophyProp_C.OnReady_215D095540CEF3098CC624AFA3A8CEAA
// 0x0030 (0x0030 - 0x0000)
struct Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA) == 0x000008, "Wrong alignment on Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA");
static_assert(sizeof(Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA) == 0x000030, "Wrong size on Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA");
static_assert(offsetof(Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA, GameState) == 0x000000, "Member 'Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA::GameState' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA, Playlist) == 0x000008, "Member 'Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA::Playlist' has a wrong offset!");
static_assert(offsetof(Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA, PlaylistContextTags) == 0x000010, "Member 'Trophy_TrophyProp_C_OnReady_215D095540CEF3098CC624AFA3A8CEAA::PlaylistContextTags' has a wrong offset!");

}

