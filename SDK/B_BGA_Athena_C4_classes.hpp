#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BGA_Athena_C4

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_BGA_Athena_C4.B_BGA_Athena_C4_C
// 0x0130 (0x08E0 - 0x07B0)
class AB_BGA_Athena_C4_C final : public ABuildingGameplayActorC4
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortWaterInteractionComponent*         FortWaterInteraction;                              // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_ProximityMine_Beacon_01;                         // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_C4_Explosive;                                   // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Root_Sphere_Collision;                             // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjectileMovement1;                               // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Land_Sound;                                        // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Impact_Loc;                                        // 0x07E8(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitNormal;                                         // 0x07F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EventExplosion;                                    // 0x0800(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ExplosionRangeDefaultTag;                          // 0x0808(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Activation_Radius;                                 // 0x0810(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Activation_Delay;                                  // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PostThrowEndDelay;                                 // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplosionRadius;                                   // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bExploded;                                         // 0x0820(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDead_;                                           // 0x0821(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_822D[0x6];                                     // 0x0822(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        Player_Owner;                                      // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ExplosionLevel;                                    // 0x0830(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_822E[0x4];                                     // 0x0834(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ExplosionForceFeedbackNear;                        // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   ExplosionForceFeedbackFar;                         // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Explosion_Sound;                                   // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PreExplosion_Sound;                                // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationInAir;                                     // 0x0858(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bExplodeOnDeath;                                   // 0x0864(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bDestroyOnDeath;                                   // 0x0865(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_822F[0x2];                                     // 0x0866(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         FoundBuildingOnDied;                               // 0x0868(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bResumeSimulation;                                 // 0x0878(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          bTriggeredExplosion;                               // 0x0879(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8230[0x6];                                     // 0x087A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        Original_Player_Owner;                             // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HandleHitPassed;                                   // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8231[0x3];                                     // 0x0889(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SphereOverlapRadius;                               // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBetweenStructureDestruction;                  // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AllowExplode_;                                     // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8232[0x3];                                     // 0x0895(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandedTime;                                        // 0x0898(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayedLandingSound;                               // 0x089C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8233[0x3];                                     // 0x089D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InteractText;                                      // 0x08A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InWater;                                           // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8234[0x7];                                     // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FX_HitWater;                                       // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_HitWater;                                    // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_Explode;                                        // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_ExplodeWater;                                   // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_BGA_Athena_C4(int32 EntryPoint);
	void BndEvt__FortWaterInteraction_K2Node_ComponentBoundEvent_0_WaterInteractionOnEnterWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);
	void MinePlacedForceCall();
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ExplodeOnOwnerDeath(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void TriggeredExplosion(float DelayForChainExplode);
	void BaseDestroyed(class AActor* DestroyedActor);
	void BaseDied(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void SetExplosion(int32 Explosion_Level, float Param_Activation_Radius, class AFortPlayerPawn* PlayerPawn);
	void DamageExplode(class AFortPlayerPawnAthena* DamageOwner);
	void ReceiveBeginPlay();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& Param_HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetProjectile(float Init_Speed, float Gravity, float Param_Activation_Delay);
	void UserConstructionScript();
	void OnRep_IsDead_();
	void HandleHitBuildingWall(class UObject* Object, class UPrimitiveComponent* Comp);
	void HandleWasAttachedToWall(class UObject* Object);
	void OnRep_bResumeSimulation();
	void OnRep_bTriggeredExplosion();
	void HandleHitVehicleOrCube(class UObject* Object, class USceneComponent* Component);
	void HandleHitSupplyDrop(class UObject* Object, class UPrimitiveComponent* Component);
	void HandleHits(class UObject* Object, class UPrimitiveComponent* Comp);
	void OnRep_LandedTime();
	void OnRep_Impact_Loc();
	void HandleHitBuildingActor(class UObject* Object);

	struct FTransform GetTargetingSourceTransform(EFortAbilityTargetingSource Source) const;
	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BGA_Athena_C4_C">();
	}
	static class AB_BGA_Athena_C4_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BGA_Athena_C4_C>();
	}
};
static_assert(alignof(AB_BGA_Athena_C4_C) == 0x000008, "Wrong alignment on AB_BGA_Athena_C4_C");
static_assert(sizeof(AB_BGA_Athena_C4_C) == 0x0008E0, "Wrong size on AB_BGA_Athena_C4_C");
static_assert(offsetof(AB_BGA_Athena_C4_C, UberGraphFrame) == 0x0007B0, "Member 'AB_BGA_Athena_C4_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, FortWaterInteraction) == 0x0007B8, "Member 'AB_BGA_Athena_C4_C::FortWaterInteraction' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, P_ProximityMine_Beacon_01) == 0x0007C0, "Member 'AB_BGA_Athena_C4_C::P_ProximityMine_Beacon_01' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, SM_C4_Explosive) == 0x0007C8, "Member 'AB_BGA_Athena_C4_C::SM_C4_Explosive' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Root_Sphere_Collision) == 0x0007D0, "Member 'AB_BGA_Athena_C4_C::Root_Sphere_Collision' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ProjectileMovement1) == 0x0007D8, "Member 'AB_BGA_Athena_C4_C::ProjectileMovement1' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Land_Sound) == 0x0007E0, "Member 'AB_BGA_Athena_C4_C::Land_Sound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Impact_Loc) == 0x0007E8, "Member 'AB_BGA_Athena_C4_C::Impact_Loc' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, HitNormal) == 0x0007F4, "Member 'AB_BGA_Athena_C4_C::HitNormal' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, EventExplosion) == 0x000800, "Member 'AB_BGA_Athena_C4_C::EventExplosion' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ExplosionRangeDefaultTag) == 0x000808, "Member 'AB_BGA_Athena_C4_C::ExplosionRangeDefaultTag' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Activation_Radius) == 0x000810, "Member 'AB_BGA_Athena_C4_C::Activation_Radius' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Activation_Delay) == 0x000814, "Member 'AB_BGA_Athena_C4_C::Activation_Delay' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, PostThrowEndDelay) == 0x000818, "Member 'AB_BGA_Athena_C4_C::PostThrowEndDelay' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ExplosionRadius) == 0x00081C, "Member 'AB_BGA_Athena_C4_C::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bExploded) == 0x000820, "Member 'AB_BGA_Athena_C4_C::bExploded' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, IsDead_) == 0x000821, "Member 'AB_BGA_Athena_C4_C::IsDead_' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Player_Owner) == 0x000828, "Member 'AB_BGA_Athena_C4_C::Player_Owner' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ExplosionLevel) == 0x000830, "Member 'AB_BGA_Athena_C4_C::ExplosionLevel' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ExplosionForceFeedbackNear) == 0x000838, "Member 'AB_BGA_Athena_C4_C::ExplosionForceFeedbackNear' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, ExplosionForceFeedbackFar) == 0x000840, "Member 'AB_BGA_Athena_C4_C::ExplosionForceFeedbackFar' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Explosion_Sound) == 0x000848, "Member 'AB_BGA_Athena_C4_C::Explosion_Sound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, PreExplosion_Sound) == 0x000850, "Member 'AB_BGA_Athena_C4_C::PreExplosion_Sound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, RotationInAir) == 0x000858, "Member 'AB_BGA_Athena_C4_C::RotationInAir' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bExplodeOnDeath) == 0x000864, "Member 'AB_BGA_Athena_C4_C::bExplodeOnDeath' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bDestroyOnDeath) == 0x000865, "Member 'AB_BGA_Athena_C4_C::bDestroyOnDeath' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, FoundBuildingOnDied) == 0x000868, "Member 'AB_BGA_Athena_C4_C::FoundBuildingOnDied' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bResumeSimulation) == 0x000878, "Member 'AB_BGA_Athena_C4_C::bResumeSimulation' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bTriggeredExplosion) == 0x000879, "Member 'AB_BGA_Athena_C4_C::bTriggeredExplosion' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Original_Player_Owner) == 0x000880, "Member 'AB_BGA_Athena_C4_C::Original_Player_Owner' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, HandleHitPassed) == 0x000888, "Member 'AB_BGA_Athena_C4_C::HandleHitPassed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, SphereOverlapRadius) == 0x00088C, "Member 'AB_BGA_Athena_C4_C::SphereOverlapRadius' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, DelayBetweenStructureDestruction) == 0x000890, "Member 'AB_BGA_Athena_C4_C::DelayBetweenStructureDestruction' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, AllowExplode_) == 0x000894, "Member 'AB_BGA_Athena_C4_C::AllowExplode_' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, LandedTime) == 0x000898, "Member 'AB_BGA_Athena_C4_C::LandedTime' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, bPlayedLandingSound) == 0x00089C, "Member 'AB_BGA_Athena_C4_C::bPlayedLandingSound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, InteractText) == 0x0008A0, "Member 'AB_BGA_Athena_C4_C::InteractText' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, InWater) == 0x0008B8, "Member 'AB_BGA_Athena_C4_C::InWater' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, FX_HitWater) == 0x0008C0, "Member 'AB_BGA_Athena_C4_C::FX_HitWater' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, Sound_HitWater) == 0x0008C8, "Member 'AB_BGA_Athena_C4_C::Sound_HitWater' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, FX_Explode) == 0x0008D0, "Member 'AB_BGA_Athena_C4_C::FX_Explode' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_C4_C, FX_ExplodeWater) == 0x0008D8, "Member 'AB_BGA_Athena_C4_C::FX_ExplodeWater' has a wrong offset!");

}

