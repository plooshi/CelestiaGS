#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MeatballVehicle_L

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FluidForceDynamic_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass MeatballVehicle_L.MeatballVehicle_L_C
// 0x05E0 (0x1FE0 - 0x1A00)
class AMeatballVehicle_L_C final : public AFortMeatballVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1A00(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Snow_Landscape_Interaction_System;                 // 0x1A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleSeatWeaponComponent*        FortVehicleSeatWeapon;                             // 0x1A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeatballCollisionBody;                             // 0x1A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioHitPlayer;                       // 0x1A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Muzzle_Flash;                           // 0x1A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Boost_Ready;                            // 0x1A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Meatball_Boost_Ready1;                           // 0x1A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Dirt_Cascade;                                      // 0x1A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   AudioController;                                   // 0x1A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Boost_R;                                         // 0x1A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Boost_L;                                         // 0x1A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_BoostEnd_R;                                      // 0x1A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_BoostEnd_L;                                      // 0x1A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45; // 0x1A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45; // 0x1A7C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F7F[0x3];                                     // 0x1A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD; // 0x1A88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD; // 0x1A8C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD; // 0x1A90(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F80[0x7];                                     // 0x1A91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostTimeline;                                     // 0x1A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LocalPlayerPawn;                                   // 0x1AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController_0;                         // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      PassengerPlayerController;                         // 0x1AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                PassengerPawns;                                    // 0x1AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 HitPickaxePawn;                                    // 0x1AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpecialHonk;                                       // 0x1AE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F81[0x7];                                     // 0x1AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpecialHonkTimer;                                  // 0x1AF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DamagedEffect;                                     // 0x1B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioSpark;                                        // 0x1B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x1B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WaterEnterSound;                                   // 0x1B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InWaterLoopSound;                                  // 0x1B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CheckWaterTimer;                                   // 0x1B30(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WaterSplashBurstFX;                                // 0x1B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterLoopingFX;                                  // 0x1B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        VehicleDestroyedFX;                                // 0x1B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageForMID;                                 // 0x1B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F82[0x4];                                     // 0x1B54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMID;                                           // 0x1B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleIntensity;                                   // 0x1B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F83[0x4];                                     // 0x1B64(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           DriverCameraShake_0;                               // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           PassengerCameraShake;                              // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Driver_CameraShake;                                // 0x1B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Passenger_CameraShake;                             // 0x1B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleMaxSpeed_DESIGNTIME;                        // 0x1B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinForwardSpeedForSideWake;                        // 0x1B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Bias;                                         // 0x1B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F84[0x4];                                     // 0x1B94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBoostEndSound;                                   // 0x1B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BoostSound;                                        // 0x1BA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BoostFailedSound;                                  // 0x1BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SmallJoltCameraShake;                              // 0x1BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WaterImpactCameraShake;                            // 0x1BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinImpactToShake;                                  // 0x1BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F85[0x4];                                     // 0x1BC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShake*                           CameraShakeWaterImpact;                            // 0x1BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAirSmoothed;                                     // 0x1BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SmoothedSpringCompression;                         // 0x1BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeFrequencyMin;                           // 0x1BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScreenShakeYawFrequencyMultipier;                  // 0x1BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PassengerCameraShakeMultiplier;                    // 0x1BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Current_MaxSpringCompression;                      // 0x1BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringFudgeValue;                                  // 0x1BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeed;                                   // 0x1BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraShakeSpeedCurvePow;                          // 0x1BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMin;                                      // 0x1BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmplitudeMax;                                      // 0x1BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoostingCameraShake;                               // 0x1BFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F86[0x3];                                     // 0x1BFD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                FluidSimBP;                                        // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFluidForceDynamic                     WaterForceSettings;                                // 0x1C08(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          BoostCameraActive;                                 // 0x1C78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F87[0x3];                                     // 0x1C79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostRumbleIntensity;                              // 0x1C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxBoostFOV;                                       // 0x1C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F88[0x4];                                     // 0x1C84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DriverGE;                                          // 0x1C88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 PassengerGE;                                       // 0x1C90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLegendary;                                       // 0x1C98(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_6F89[0x3];                                     // 0x1C99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_VehicleScreenDrips;                             // 0x1C9C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         WaterEntryMaxMagnitude;                            // 0x1CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Forward_Intensity;                                 // 0x1CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Right_Intensity;                                   // 0x1CAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLazyUpdateVector;                           // 0x1CB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BoostSoundWrapPriority;                            // 0x1CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedForwardSpeedKmh;                         // 0x1CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8A[0x4];                                     // 0x1CC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             EngineOnSound;                                     // 0x1CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EngineOffSound;                                    // 0x1CD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IsInAirMultiplier;                                 // 0x1CD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8B[0x4];                                     // 0x1CDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BoostGuageMIC;                                     // 0x1CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBoosting;                                        // 0x1CE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F8C[0x3];                                     // 0x1CE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Boost;                                             // 0x1CEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x1CF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PickaxeImpulseStrength;                            // 0x1CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_ShouldLaunchPlayer;                            // 0x1CF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GC_HitPlayer;                                      // 0x1D18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GC_ParamsEmpty;                                    // 0x1D20(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           GC_HitFiend;                                       // 0x1DD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABuildingActor*                         HitBuildingActor;                                  // 0x1DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DestructionAngle;                                  // 0x1DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpeedImpulsePlayerMulti;                           // 0x1DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedToLaunchPlayer;                            // 0x1DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldLaunchPlayer;                                // 0x1DF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_PickaxeImpulseStrength;                        // 0x1DF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_MinSpeedLaunchPlayer;                          // 0x1E18(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_SpeedImpulseMultiplier;                        // 0x1E38(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MinSpeedToDamage;                                  // 0x1E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8D[0x4];                                     // 0x1E5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_MinSpeedToDamage;                              // 0x1E60(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PickaxeForwardImpulseZ_Multiplier;                 // 0x1E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PickaxeImpulse;                                    // 0x1E84(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldPickaxeImpulse;                              // 0x1E90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8E[0x4];                                     // 0x1E94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ShouldPickaxeImpulse;                          // 0x1E98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_PickaxeImpulseZ_Multiplier;                    // 0x1EB8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCameraShake*                           OnLand_CameraShake;                                // 0x1ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 OnLandCameraShake;                                 // 0x1EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DamageOnLandTimer;                                 // 0x1EE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         ShouldDamageOnLand;                                // 0x1EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F8F[0x4];                                     // 0x1EF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ShouldDamageOnLand;                            // 0x1EF8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LandCameraSpeedForShakes;                          // 0x1F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraMaxFrequency;                            // 0x1F1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraMinFrequency;                            // 0x1F20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraRot_Amp;                                 // 0x1F24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraY_Amp;                                   // 0x1F28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraZ_Amp;                                   // 0x1F2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandCameraShakeFalloff;                            // 0x1F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LandDamageFrequency;                               // 0x1F34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LandDamageTimer;                                   // 0x1F38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         BoatDamageOnLand;                                  // 0x1F40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F90[0x4];                                     // 0x1F44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_BoatDamageOnLand;                              // 0x1F48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         LandRumbleIntensity_0;                             // 0x1F68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F91[0x4];                                     // 0x1F6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeedForRumble;                          // 0x1F78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RumbleIntensityPow;                                // 0x1F7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LargeRumble;                                       // 0x1F80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F92[0x3];                                     // 0x1F81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FFdelay;                                           // 0x1F84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurnIntensity;                                     // 0x1F88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTurnIntensity;                                  // 0x1F8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinIn;                                             // 0x1F90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxIn;                                             // 0x1F94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinOut;                                            // 0x1F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxOut;                                            // 0x1F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pow;                                               // 0x1FA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F93[0x4];                                     // 0x1FA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UForceFeedbackEffect*                   ForceFeedbackWeaponFire;                           // 0x1FA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        BoostAudioComponent;                               // 0x1FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Snow_;                                          // 0x1FB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F94[0x7];                                     // 0x1FB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x1FC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDebugSnowCurve;                                   // 0x1FC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6F95[0x7];                                     // 0x1FC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ApolloSnowSetup_C*                  Set_up_snow_reference;                             // 0x1FD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Set_up_Snow_Amount;                                // 0x1FD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DirtSpawnRate;                                     // 0x1FDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_MeatballVehicle_L(int32 EntryPoint);
	void BndEvt__PontoonsComponent_K2Node_ComponentBoundEvent_5_OnPontoonEnteredWater__DelegateSignature(const struct FSphericalPontoon& Pontoon);
	void BndEvt__PontoonsComponent_K2Node_ComponentBoundEvent_3_OnPontoonExitedWater__DelegateSignature(const struct FSphericalPontoon& Pontoon);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void FireFF(class UFortGameplayAbility* GameplayAbility, const struct FGameplayTagContainer& AbilityTags);
	void StopStartupRumble();
	void StopTurnRumbleBP();
	void StartTurnRumble();
	void PlayStartupFF();
	void StartLandRumble();
	void StopLandRumbleBP();
	void LandDamage();
	void LandDamageEvent();
	void OnLandShakeEnd();
	void OnLandShake();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void HitWithPickaxe(const struct FVector& HitDirection);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void RefreshDamageState();
	void ReceiveBeginPlay();
	void EventOnHealthChanged();
	void UpdateDamageState(float Damage);
	void Check_for_Boost_Ready();
	void Entered_Water_Mid();
	void Entered_Water_Engine();
	void Exited_Water_Engine();
	void Exited_Water_Mid();
	void Audio_Tick_Update();
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void LightningSpark(class FName EventName, float EmitterTime, const struct FVector& Location, const struct FVector& Velocity);
	void BoostCameraReverse();
	void StartBoostRumble();
	void BoostRumbleEnd();
	void UpdateBoostRumble();
	void ReverseBoostTimeline();
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void CheckWater();
	void OnBoostFailed();
	void OnBoostFinished();
	void OnBoostStarted();
	void ReceiveTick(float DeltaSeconds);
	void OnStopTick();
	void StopDriverCameraShakeBP();
	void StartDriverCameraShake();
	void StopDriverRumble();
	void StartDriverRumble();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void BoostTimeline__UpdateFunc();
	void BoostTimeline__FinishedFunc();
	void UserConstructionScript();
	void SendDamageStateToMaterial(float Param_Value);
	void ManageStateDriverEnter(class AFortPlayerPawn* Param_DriverPawn);
	void ManageStatePassengerEnter(class AFortPlayerPawn* Param_PassengerPawn);
	void ManageStateDriverExit(class AFortPlayerPawn* PlayerPawn);
	void ManageStatePassengerExit(class AFortPlayerPawn* PlayerPawn);
	void PlayHapticsOnHit(float HitMagnitude);
	void UpdateDynamicCameraShake();
	void OnRep_IsLegendary();
	void IsNiagaraEffectsEnabled(bool* IsEnabled);
	void DetermineWaterMovementForLazyUpdateMesh(float Forward_Dot, float Right_Dot, struct FVector* Output__Vector);
	void CalculateTurnSpeed(float* TurnDirection, float* TurnSpeed);
	void NiagaraUserVariables();
	bool CanDamageBuilding(const struct FHitResult& Hit);
	bool IsOnGround();
	void OnRep_LandDamageFrequency();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"MeatballVehicle_L_C">();
	}
	static class AMeatballVehicle_L_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMeatballVehicle_L_C>();
	}
};
static_assert(alignof(AMeatballVehicle_L_C) == 0x000010, "Wrong alignment on AMeatballVehicle_L_C");
static_assert(sizeof(AMeatballVehicle_L_C) == 0x001FE0, "Wrong size on AMeatballVehicle_L_C");
static_assert(offsetof(AMeatballVehicle_L_C, UberGraphFrame) == 0x001A00, "Member 'AMeatballVehicle_L_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Snow_Landscape_Interaction_System) == 0x001A08, "Member 'AMeatballVehicle_L_C::Snow_Landscape_Interaction_System' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FortVehicleSeatWeapon) == 0x001A10, "Member 'AMeatballVehicle_L_C::FortVehicleSeatWeapon' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MeatballCollisionBody) == 0x001A18, "Member 'AMeatballVehicle_L_C::MeatballCollisionBody' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FortCollisionAudioHitPlayer) == 0x001A20, "Member 'AMeatballVehicle_L_C::FortCollisionAudioHitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Muzzle_Flash) == 0x001A28, "Member 'AMeatballVehicle_L_C::P_Meatball_Muzzle_Flash' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Boost_Ready) == 0x001A30, "Member 'AMeatballVehicle_L_C::P_Meatball_Boost_Ready' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Meatball_Boost_Ready1) == 0x001A38, "Member 'AMeatballVehicle_L_C::P_Meatball_Boost_Ready1' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Dirt_Cascade) == 0x001A40, "Member 'AMeatballVehicle_L_C::Dirt_Cascade' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AudioController) == 0x001A48, "Member 'AMeatballVehicle_L_C::AudioController' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Boost_R) == 0x001A50, "Member 'AMeatballVehicle_L_C::P_Boost_R' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_Boost_L) == 0x001A58, "Member 'AMeatballVehicle_L_C::P_Boost_L' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_BoostEnd_R) == 0x001A60, "Member 'AMeatballVehicle_L_C::P_BoostEnd_R' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, P_BoostEnd_L) == 0x001A68, "Member 'AMeatballVehicle_L_C::P_BoostEnd_L' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OverlapVolume) == 0x001A70, "Member 'AMeatballVehicle_L_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45) == 0x001A78, "Member 'AMeatballVehicle_L_C::Timeline_0_NewTrack_0_7906805348581A63C02104AD8E4AFD45' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45) == 0x001A7C, "Member 'AMeatballVehicle_L_C::Timeline_0__Direction_7906805348581A63C02104AD8E4AFD45' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Timeline_0) == 0x001A80, "Member 'AMeatballVehicle_L_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD) == 0x001A88, "Member 'AMeatballVehicle_L_C::BoostTimeline_Rumble_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD) == 0x001A8C, "Member 'AMeatballVehicle_L_C::BoostTimeline_FoV_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD) == 0x001A90, "Member 'AMeatballVehicle_L_C::BoostTimeline__Direction_FA04381447AE3F527025F494D33449BD' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostTimeline) == 0x001A98, "Member 'AMeatballVehicle_L_C::BoostTimeline' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LocalPlayerPawn) == 0x001AA0, "Member 'AMeatballVehicle_L_C::LocalPlayerPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverPawn) == 0x001AA8, "Member 'AMeatballVehicle_L_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DrivingPlayerController_0) == 0x001AB0, "Member 'AMeatballVehicle_L_C::DrivingPlayerController_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LastHitPlayer) == 0x001AB8, "Member 'AMeatballVehicle_L_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerPawn) == 0x001AC0, "Member 'AMeatballVehicle_L_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerPlayerController) == 0x001AC8, "Member 'AMeatballVehicle_L_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerPawns) == 0x001AD0, "Member 'AMeatballVehicle_L_C::PassengerPawns' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, HitPickaxePawn) == 0x001AE0, "Member 'AMeatballVehicle_L_C::HitPickaxePawn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpecialHonk) == 0x001AE8, "Member 'AMeatballVehicle_L_C::SpecialHonk' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpecialHonkTimer) == 0x001AF0, "Member 'AMeatballVehicle_L_C::SpecialHonkTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnDeathSound) == 0x001AF8, "Member 'AMeatballVehicle_L_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamagedEffect) == 0x001B00, "Member 'AMeatballVehicle_L_C::DamagedEffect' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AudioSpark) == 0x001B08, "Member 'AMeatballVehicle_L_C::AudioSpark' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterFX) == 0x001B10, "Member 'AMeatballVehicle_L_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoop) == 0x001B18, "Member 'AMeatballVehicle_L_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterEnterSound) == 0x001B20, "Member 'AMeatballVehicle_L_C::WaterEnterSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoopSound) == 0x001B28, "Member 'AMeatballVehicle_L_C::InWaterLoopSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CheckWaterTimer) == 0x001B30, "Member 'AMeatballVehicle_L_C::CheckWaterTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterSplashBurstFX) == 0x001B38, "Member 'AMeatballVehicle_L_C::WaterSplashBurstFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InWaterLoopingFX) == 0x001B40, "Member 'AMeatballVehicle_L_C::InWaterLoopingFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, VehicleDestroyedFX) == 0x001B48, "Member 'AMeatballVehicle_L_C::VehicleDestroyedFX' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SavedDamageForMID) == 0x001B50, "Member 'AMeatballVehicle_L_C::SavedDamageForMID' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BodyMID) == 0x001B58, "Member 'AMeatballVehicle_L_C::BodyMID' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, RumbleIntensity) == 0x001B60, "Member 'AMeatballVehicle_L_C::RumbleIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverCameraShake_0) == 0x001B68, "Member 'AMeatballVehicle_L_C::DriverCameraShake_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerCameraShake) == 0x001B70, "Member 'AMeatballVehicle_L_C::PassengerCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Driver_CameraShake) == 0x001B78, "Member 'AMeatballVehicle_L_C::Driver_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Passenger_CameraShake) == 0x001B80, "Member 'AMeatballVehicle_L_C::Passenger_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, VehicleMaxSpeed_DESIGNTIME) == 0x001B88, "Member 'AMeatballVehicle_L_C::VehicleMaxSpeed_DESIGNTIME' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinForwardSpeedForSideWake) == 0x001B8C, "Member 'AMeatballVehicle_L_C::MinForwardSpeedForSideWake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Turn_Bias) == 0x001B90, "Member 'AMeatballVehicle_L_C::Turn_Bias' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnBoostEndSound) == 0x001B98, "Member 'AMeatballVehicle_L_C::OnBoostEndSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostSound) == 0x001BA0, "Member 'AMeatballVehicle_L_C::BoostSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostFailedSound) == 0x001BA8, "Member 'AMeatballVehicle_L_C::BoostFailedSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SmallJoltCameraShake) == 0x001BB0, "Member 'AMeatballVehicle_L_C::SmallJoltCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterImpactCameraShake) == 0x001BB8, "Member 'AMeatballVehicle_L_C::WaterImpactCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinImpactToShake) == 0x001BC0, "Member 'AMeatballVehicle_L_C::MinImpactToShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CameraShakeWaterImpact) == 0x001BC8, "Member 'AMeatballVehicle_L_C::CameraShakeWaterImpact' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, InAirSmoothed) == 0x001BD0, "Member 'AMeatballVehicle_L_C::InAirSmoothed' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SmoothedSpringCompression) == 0x001BD4, "Member 'AMeatballVehicle_L_C::SmoothedSpringCompression' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ScreenShakeFrequencyMin) == 0x001BD8, "Member 'AMeatballVehicle_L_C::ScreenShakeFrequencyMin' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ScreenShakeYawFrequencyMultipier) == 0x001BDC, "Member 'AMeatballVehicle_L_C::ScreenShakeYawFrequencyMultipier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerCameraShakeMultiplier) == 0x001BE0, "Member 'AMeatballVehicle_L_C::PassengerCameraShakeMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Current_MaxSpringCompression) == 0x001BE4, "Member 'AMeatballVehicle_L_C::Current_MaxSpringCompression' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpringFudgeValue) == 0x001BE8, "Member 'AMeatballVehicle_L_C::SpringFudgeValue' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedSpeed) == 0x001BEC, "Member 'AMeatballVehicle_L_C::NormalizedSpeed' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CameraShakeSpeedCurvePow) == 0x001BF0, "Member 'AMeatballVehicle_L_C::CameraShakeSpeedCurvePow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AmplitudeMin) == 0x001BF4, "Member 'AMeatballVehicle_L_C::AmplitudeMin' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, AmplitudeMax) == 0x001BF8, "Member 'AMeatballVehicle_L_C::AmplitudeMax' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostingCameraShake) == 0x001BFC, "Member 'AMeatballVehicle_L_C::BoostingCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FluidSimBP) == 0x001C00, "Member 'AMeatballVehicle_L_C::FluidSimBP' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterForceSettings) == 0x001C08, "Member 'AMeatballVehicle_L_C::WaterForceSettings' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostCameraActive) == 0x001C78, "Member 'AMeatballVehicle_L_C::BoostCameraActive' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostRumbleIntensity) == 0x001C7C, "Member 'AMeatballVehicle_L_C::BoostRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxBoostFOV) == 0x001C80, "Member 'AMeatballVehicle_L_C::MaxBoostFOV' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DriverGE) == 0x001C88, "Member 'AMeatballVehicle_L_C::DriverGE' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PassengerGE) == 0x001C90, "Member 'AMeatballVehicle_L_C::PassengerGE' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsLegendary) == 0x001C98, "Member 'AMeatballVehicle_L_C::IsLegendary' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_VehicleScreenDrips) == 0x001C9C, "Member 'AMeatballVehicle_L_C::GC_VehicleScreenDrips' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, WaterEntryMaxMagnitude) == 0x001CA4, "Member 'AMeatballVehicle_L_C::WaterEntryMaxMagnitude' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Forward_Intensity) == 0x001CA8, "Member 'AMeatballVehicle_L_C::Forward_Intensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Right_Intensity) == 0x001CAC, "Member 'AMeatballVehicle_L_C::Right_Intensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, CurrentLazyUpdateVector) == 0x001CB0, "Member 'AMeatballVehicle_L_C::CurrentLazyUpdateVector' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostSoundWrapPriority) == 0x001CBC, "Member 'AMeatballVehicle_L_C::BoostSoundWrapPriority' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedForwardSpeedKmh) == 0x001CC0, "Member 'AMeatballVehicle_L_C::NormalizedForwardSpeedKmh' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, EngineOnSound) == 0x001CC8, "Member 'AMeatballVehicle_L_C::EngineOnSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, EngineOffSound) == 0x001CD0, "Member 'AMeatballVehicle_L_C::EngineOffSound' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsInAirMultiplier) == 0x001CD8, "Member 'AMeatballVehicle_L_C::IsInAirMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostGuageMIC) == 0x001CE0, "Member 'AMeatballVehicle_L_C::BoostGuageMIC' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, IsBoosting) == 0x001CE8, "Member 'AMeatballVehicle_L_C::IsBoosting' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Boost) == 0x001CEC, "Member 'AMeatballVehicle_L_C::Boost' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamageValue) == 0x001CF0, "Member 'AMeatballVehicle_L_C::DamageValue' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeImpulseStrength) == 0x001CF4, "Member 'AMeatballVehicle_L_C::PickaxeImpulseStrength' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldLaunchPlayer) == 0x001CF8, "Member 'AMeatballVehicle_L_C::Row_ShouldLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_HitPlayer) == 0x001D18, "Member 'AMeatballVehicle_L_C::GC_HitPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_ParamsEmpty) == 0x001D20, "Member 'AMeatballVehicle_L_C::GC_ParamsEmpty' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, GC_HitFiend) == 0x001DD8, "Member 'AMeatballVehicle_L_C::GC_HitFiend' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, HitBuildingActor) == 0x001DE0, "Member 'AMeatballVehicle_L_C::HitBuildingActor' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DestructionAngle) == 0x001DE8, "Member 'AMeatballVehicle_L_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, SpeedImpulsePlayerMulti) == 0x001DEC, "Member 'AMeatballVehicle_L_C::SpeedImpulsePlayerMulti' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinSpeedToLaunchPlayer) == 0x001DF0, "Member 'AMeatballVehicle_L_C::MinSpeedToLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldLaunchPlayer) == 0x001DF4, "Member 'AMeatballVehicle_L_C::ShouldLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_PickaxeImpulseStrength) == 0x001DF8, "Member 'AMeatballVehicle_L_C::Row_PickaxeImpulseStrength' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_MinSpeedLaunchPlayer) == 0x001E18, "Member 'AMeatballVehicle_L_C::Row_MinSpeedLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_SpeedImpulseMultiplier) == 0x001E38, "Member 'AMeatballVehicle_L_C::Row_SpeedImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinSpeedToDamage) == 0x001E58, "Member 'AMeatballVehicle_L_C::MinSpeedToDamage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_MinSpeedToDamage) == 0x001E60, "Member 'AMeatballVehicle_L_C::Row_MinSpeedToDamage' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeForwardImpulseZ_Multiplier) == 0x001E80, "Member 'AMeatballVehicle_L_C::PickaxeForwardImpulseZ_Multiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, PickaxeImpulse) == 0x001E84, "Member 'AMeatballVehicle_L_C::PickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldPickaxeImpulse) == 0x001E90, "Member 'AMeatballVehicle_L_C::ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldPickaxeImpulse) == 0x001E98, "Member 'AMeatballVehicle_L_C::Row_ShouldPickaxeImpulse' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_PickaxeImpulseZ_Multiplier) == 0x001EB8, "Member 'AMeatballVehicle_L_C::Row_PickaxeImpulseZ_Multiplier' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnLand_CameraShake) == 0x001ED8, "Member 'AMeatballVehicle_L_C::OnLand_CameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, OnLandCameraShake) == 0x001EE0, "Member 'AMeatballVehicle_L_C::OnLandCameraShake' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DamageOnLandTimer) == 0x001EE8, "Member 'AMeatballVehicle_L_C::DamageOnLandTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ShouldDamageOnLand) == 0x001EF0, "Member 'AMeatballVehicle_L_C::ShouldDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_ShouldDamageOnLand) == 0x001EF8, "Member 'AMeatballVehicle_L_C::Row_ShouldDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraSpeedForShakes) == 0x001F18, "Member 'AMeatballVehicle_L_C::LandCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraMaxFrequency) == 0x001F1C, "Member 'AMeatballVehicle_L_C::LandCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraMinFrequency) == 0x001F20, "Member 'AMeatballVehicle_L_C::LandCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraRot_Amp) == 0x001F24, "Member 'AMeatballVehicle_L_C::LandCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraY_Amp) == 0x001F28, "Member 'AMeatballVehicle_L_C::LandCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraZ_Amp) == 0x001F2C, "Member 'AMeatballVehicle_L_C::LandCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandCameraShakeFalloff) == 0x001F30, "Member 'AMeatballVehicle_L_C::LandCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandDamageFrequency) == 0x001F34, "Member 'AMeatballVehicle_L_C::LandDamageFrequency' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandDamageTimer) == 0x001F38, "Member 'AMeatballVehicle_L_C::LandDamageTimer' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoatDamageOnLand) == 0x001F40, "Member 'AMeatballVehicle_L_C::BoatDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Row_BoatDamageOnLand) == 0x001F48, "Member 'AMeatballVehicle_L_C::Row_BoatDamageOnLand' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LandRumbleIntensity_0) == 0x001F68, "Member 'AMeatballVehicle_L_C::LandRumbleIntensity_0' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LastDriver) == 0x001F70, "Member 'AMeatballVehicle_L_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, NormalizedSpeedForRumble) == 0x001F78, "Member 'AMeatballVehicle_L_C::NormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, RumbleIntensityPow) == 0x001F7C, "Member 'AMeatballVehicle_L_C::RumbleIntensityPow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, LargeRumble) == 0x001F80, "Member 'AMeatballVehicle_L_C::LargeRumble' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, FFdelay) == 0x001F84, "Member 'AMeatballVehicle_L_C::FFdelay' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, TurnIntensity) == 0x001F88, "Member 'AMeatballVehicle_L_C::TurnIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinTurnIntensity) == 0x001F8C, "Member 'AMeatballVehicle_L_C::MinTurnIntensity' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinIn) == 0x001F90, "Member 'AMeatballVehicle_L_C::MinIn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxIn) == 0x001F94, "Member 'AMeatballVehicle_L_C::MaxIn' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MinOut) == 0x001F98, "Member 'AMeatballVehicle_L_C::MinOut' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, MaxOut) == 0x001F9C, "Member 'AMeatballVehicle_L_C::MaxOut' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Pow) == 0x001FA0, "Member 'AMeatballVehicle_L_C::Pow' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, ForceFeedbackWeaponFire) == 0x001FA8, "Member 'AMeatballVehicle_L_C::ForceFeedbackWeaponFire' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, BoostAudioComponent) == 0x001FB0, "Member 'AMeatballVehicle_L_C::BoostAudioComponent' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Is_Snow_) == 0x001FB8, "Member 'AMeatballVehicle_L_C::Is_Snow_' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Curve) == 0x001FC0, "Member 'AMeatballVehicle_L_C::Curve' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, bDebugSnowCurve) == 0x001FC8, "Member 'AMeatballVehicle_L_C::bDebugSnowCurve' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Set_up_snow_reference) == 0x001FD0, "Member 'AMeatballVehicle_L_C::Set_up_snow_reference' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, Set_up_Snow_Amount) == 0x001FD8, "Member 'AMeatballVehicle_L_C::Set_up_Snow_Amount' has a wrong offset!");
static_assert(offsetof(AMeatballVehicle_L_C, DirtSpawnRate) == 0x001FDC, "Member 'AMeatballVehicle_L_C::DirtSpawnRate' has a wrong offset!");

}

