#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Basic file containing function-implementations from Basic.hpp

#include "pch.h"
#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "CoreUObject_structs.hpp"

namespace SDK
{

class UClass* BasicFilesImpleUtils::FindClassByName(const char *Name)
{
	return UObject::FindClassFast(Name);
}

class UClass* BasicFilesImpleUtils::FindClassByFullName(const char *Name)
{
	return UObject::FindClass(Name);
}

xstring BasicFilesImpleUtils::GetObjectName(class UClass* Class)
{
	return Class->GetName();
}

int32 BasicFilesImpleUtils::GetObjectIndex(class UClass* Class)
{
	return Class->Index;
}

class UObject* BasicFilesImpleUtils::GetObjectByIndex(int32 Index)
{
	return UObject::GObjects->GetByIndex(Index);
}

UFunction* BasicFilesImpleUtils::FindFunctionByFName(const FName* Name)
{
	for (int i = 0; i < UObject::GObjects->Num(); ++i)
	{
		UObject* Object = UObject::GObjects->GetByIndex(i);

		if (!Object)
			continue;

		if (Object->Name == *Name)
			return static_cast<UFunction*>(Object);
	}

	return nullptr;
}


// Predefined Function

class UObject* FWeakObjectPtr::Get() const
{
	return UObject::GObjects->GetByIndex(ObjectIndex);
}


// Predefined Function

class UObject* FWeakObjectPtr::operator->() const
{
	return UObject::GObjects->GetByIndex(ObjectIndex);
}


// Predefined Function

bool FWeakObjectPtr::operator==(const FWeakObjectPtr& Other) const
{
	return ObjectIndex == Other.ObjectIndex;
}


// Predefined Function

bool FWeakObjectPtr::operator!=(const FWeakObjectPtr& Other) const
{
	return ObjectIndex != Other.ObjectIndex;
}


// Predefined Function

bool FWeakObjectPtr::operator==(const class UObject* Other) const
{
	return ObjectIndex == Other->Index;
}


// Predefined Function

bool FWeakObjectPtr::operator!=(const class UObject* Other) const
{
	return ObjectIndex != Other->Index;
}

class UClass* StaticBPGeneratedClassByName(const char* Name, int32& Index) {
	if (Index == 0) {
		auto Class = reinterpret_cast<class UClass*>(BasicFilesImpleUtils::FindClassByName(Name));
		if (Class) Index = BasicFilesImpleUtils::GetObjectIndex(Class);
		return Class;
	}
	else {
		auto Class = reinterpret_cast<class UClass*>(BasicFilesImpleUtils::GetObjectByIndex(Index));
		if (!Class || BasicFilesImpleUtils::GetObjectName(Class) != Name) {
			Class = BasicFilesImpleUtils::FindClassByName(Name);
			if (Class) Index = BasicFilesImpleUtils::GetObjectIndex(Class);
		}
		return Class;
	}
}

class UClass* StaticBPGeneratedClassByFullName(const char* Name, int32& Index) {
	if (Index == 0) {
		auto Class = reinterpret_cast<class UClass*>(BasicFilesImpleUtils::FindClassByFullName(Name));
		if (Class) Index = BasicFilesImpleUtils::GetObjectIndex(Class);
		return Class;
	}
	else {
		auto Class = reinterpret_cast<class UClass*>(BasicFilesImpleUtils::GetObjectByIndex(Index));
		if (!Class || BasicFilesImpleUtils::GetObjectName(Class) != Name) {
			Class = BasicFilesImpleUtils::FindClassByFullName(Name);
			if (Class) Index = BasicFilesImpleUtils::GetObjectIndex(Class);
		}
		return Class;
	}
}

}

