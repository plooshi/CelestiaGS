#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VotingFramework

#include "Basic.hpp"

#include "VotingFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "MeshNetwork_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class VotingFramework.VoteBroadcasterComponent
// 0x03C0 (0x05C0 - 0x0200)
class UVoteBroadcasterComponent final : public UMeshNetworkComponent
{
public:
	TArray<struct FVoteSessionSettings>           VoteSessionSettingsList;                           // 0x0200(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVoteSessionRuntimeArray               VoteSessionRuntimeList;                            // 0x0210(0x0120)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FVoteRuntimeArray                      VoteRuntimeList;                                   // 0x0330(0x0120)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FVoteSelectionResultsArray             VoteResultsList;                                   // 0x0450(0x0120)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FUniqueNetIdRepl, struct FCastedVote> PlayerCastedVotesMap;                              // 0x0570(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ServerSubmitVotesAggregated(class FName VoteSessionId, class FName VoteId, class FName VoteSelectionId, int32 VoteDelta);
	void VoteEnd(class FName VoteSessionId, class FName VoteId, class FName WinningVoteSelectionId);
	void VoteSessionComplete(class FName VoteSessionId);
	void VoteSessionSetup(class FName VoteSessionId, class FName StartingVoteId, EVoteSessionNetworkType NetworkType);
	void VoteSessionShutdown(class FName VoteSessionId);
	void VoteSetup(class FName VoteSessionId, class FName VoteId);
	void VoteStart(class FName VoteSessionId, class FName VoteId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoteBroadcasterComponent">();
	}
	static class UVoteBroadcasterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoteBroadcasterComponent>();
	}
};
static_assert(alignof(UVoteBroadcasterComponent) == 0x000008, "Wrong alignment on UVoteBroadcasterComponent");
static_assert(sizeof(UVoteBroadcasterComponent) == 0x0005C0, "Wrong size on UVoteBroadcasterComponent");
static_assert(offsetof(UVoteBroadcasterComponent, VoteSessionSettingsList) == 0x000200, "Member 'UVoteBroadcasterComponent::VoteSessionSettingsList' has a wrong offset!");
static_assert(offsetof(UVoteBroadcasterComponent, VoteSessionRuntimeList) == 0x000210, "Member 'UVoteBroadcasterComponent::VoteSessionRuntimeList' has a wrong offset!");
static_assert(offsetof(UVoteBroadcasterComponent, VoteRuntimeList) == 0x000330, "Member 'UVoteBroadcasterComponent::VoteRuntimeList' has a wrong offset!");
static_assert(offsetof(UVoteBroadcasterComponent, VoteResultsList) == 0x000450, "Member 'UVoteBroadcasterComponent::VoteResultsList' has a wrong offset!");
static_assert(offsetof(UVoteBroadcasterComponent, PlayerCastedVotesMap) == 0x000570, "Member 'UVoteBroadcasterComponent::PlayerCastedVotesMap' has a wrong offset!");

// Class VotingFramework.VoteDispatchSubsystem
// 0x00A0 (0x00D0 - 0x0030)
class UVoteDispatchSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_4850[0x90];                                    // 0x0030(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVoteSelectionResults>          VotingResults;                                     // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoteDispatchSubsystem">();
	}
	static class UVoteDispatchSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoteDispatchSubsystem>();
	}
};
static_assert(alignof(UVoteDispatchSubsystem) == 0x000008, "Wrong alignment on UVoteDispatchSubsystem");
static_assert(sizeof(UVoteDispatchSubsystem) == 0x0000D0, "Wrong size on UVoteDispatchSubsystem");
static_assert(offsetof(UVoteDispatchSubsystem, VotingResults) == 0x0000C0, "Member 'UVoteDispatchSubsystem::VotingResults' has a wrong offset!");

// Class VotingFramework.VoteInitiationActor
// 0x0010 (0x0230 - 0x0220)
class AVoteInitiationActor final : public AInfo
{
public:
	uint8                                         Pad_4851[0x8];                                     // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoteBroadcasterComponent*              VoteBroadcasterComponent;                          // 0x0228(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoteInitiationActor">();
	}
	static class AVoteInitiationActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVoteInitiationActor>();
	}
};
static_assert(alignof(AVoteInitiationActor) == 0x000008, "Wrong alignment on AVoteInitiationActor");
static_assert(sizeof(AVoteInitiationActor) == 0x000230, "Wrong size on AVoteInitiationActor");
static_assert(offsetof(AVoteInitiationActor, VoteBroadcasterComponent) == 0x000228, "Member 'AVoteInitiationActor::VoteBroadcasterComponent' has a wrong offset!");

// Class VotingFramework.VoteListenerComponent
// 0x00E0 (0x0190 - 0x00B0)
class UVoteListenerComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnVoteSessionSetupEvent;                           // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteSessionVotingEvent;                          // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteSetupEvent;                                  // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteStartEvent;                                  // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteChangeEvent;                                 // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteEndEvent;                                    // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteSessionCompleteEvent;                        // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVoteSessionShutdownEvent;                        // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequestedVoteSessionIds;                           // 0x0130(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequestedVoteIds;                                  // 0x0150(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequestedVoteSelectionIds;                         // 0x0170(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoteListenerComponent">();
	}
	static class UVoteListenerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoteListenerComponent>();
	}
};
static_assert(alignof(UVoteListenerComponent) == 0x000008, "Wrong alignment on UVoteListenerComponent");
static_assert(sizeof(UVoteListenerComponent) == 0x000190, "Wrong size on UVoteListenerComponent");
static_assert(offsetof(UVoteListenerComponent, OnVoteSessionSetupEvent) == 0x0000B0, "Member 'UVoteListenerComponent::OnVoteSessionSetupEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteSessionVotingEvent) == 0x0000C0, "Member 'UVoteListenerComponent::OnVoteSessionVotingEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteSetupEvent) == 0x0000D0, "Member 'UVoteListenerComponent::OnVoteSetupEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteStartEvent) == 0x0000E0, "Member 'UVoteListenerComponent::OnVoteStartEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteChangeEvent) == 0x0000F0, "Member 'UVoteListenerComponent::OnVoteChangeEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteEndEvent) == 0x000100, "Member 'UVoteListenerComponent::OnVoteEndEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteSessionCompleteEvent) == 0x000110, "Member 'UVoteListenerComponent::OnVoteSessionCompleteEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, OnVoteSessionShutdownEvent) == 0x000120, "Member 'UVoteListenerComponent::OnVoteSessionShutdownEvent' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, RequestedVoteSessionIds) == 0x000130, "Member 'UVoteListenerComponent::RequestedVoteSessionIds' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, RequestedVoteIds) == 0x000150, "Member 'UVoteListenerComponent::RequestedVoteIds' has a wrong offset!");
static_assert(offsetof(UVoteListenerComponent, RequestedVoteSelectionIds) == 0x000170, "Member 'UVoteListenerComponent::RequestedVoteSelectionIds' has a wrong offset!");

// Class VotingFramework.VoteResponderComponent
// 0x0078 (0x0208 - 0x0190)
class UVoteResponderComponent final : public UVoteListenerComponent
{
public:
	TArray<struct FVoteSelection>                 SupportedVoteSelections;                           // 0x0190(0x0010)(Edit, Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldLockVotingAfterCasted;                      // 0x01A0(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4852[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FUniqueNetIdRepl, struct FCastedVote> PlayerCastedVotesMap;                              // 0x01A8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class FName                                   ActiveVoteSessionId;                               // 0x01F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ActiveVoteId;                                      // 0x0200(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CastDefaultVoteSelection(const class APlayerState* InPlayerState);
	void CastManualVoteSelection(const class APlayerState* InPlayerState, const struct FGameplayTag& VoteSelection);
	void CastManualVoteSelectionAtIndex(const class APlayerState* InPlayerState, const int32 SelectionIndex);
	void ServerCastVoteSelection(const struct FUniqueNetIdRepl& InUserId, const struct FCastedVote& CastedVote);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoteResponderComponent">();
	}
	static class UVoteResponderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoteResponderComponent>();
	}
};
static_assert(alignof(UVoteResponderComponent) == 0x000008, "Wrong alignment on UVoteResponderComponent");
static_assert(sizeof(UVoteResponderComponent) == 0x000208, "Wrong size on UVoteResponderComponent");
static_assert(offsetof(UVoteResponderComponent, SupportedVoteSelections) == 0x000190, "Member 'UVoteResponderComponent::SupportedVoteSelections' has a wrong offset!");
static_assert(offsetof(UVoteResponderComponent, bShouldLockVotingAfterCasted) == 0x0001A0, "Member 'UVoteResponderComponent::bShouldLockVotingAfterCasted' has a wrong offset!");
static_assert(offsetof(UVoteResponderComponent, PlayerCastedVotesMap) == 0x0001A8, "Member 'UVoteResponderComponent::PlayerCastedVotesMap' has a wrong offset!");
static_assert(offsetof(UVoteResponderComponent, ActiveVoteSessionId) == 0x0001F8, "Member 'UVoteResponderComponent::ActiveVoteSessionId' has a wrong offset!");
static_assert(offsetof(UVoteResponderComponent, ActiveVoteId) == 0x000200, "Member 'UVoteResponderComponent::ActiveVoteId' has a wrong offset!");

}

