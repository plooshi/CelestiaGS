#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_FloppingRabbit_Weap_Athena

#include "Basic.hpp"


namespace SDK::Params
{

// Function B_FloppingRabbit_Weap_Athena.B_FloppingRabbit_Weap_Athena_C.ExecuteUbergraph_B_FloppingRabbit_Weap_Athena
// 0x0008 (0x0008 - 0x0000)
struct B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena) == 0x000004, "Wrong alignment on B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena");
static_assert(sizeof(B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena) == 0x000008, "Wrong size on B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena, EntryPoint) == 0x000000, "Member 'B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'B_FloppingRabbit_Weap_Athena_C_ExecuteUbergraph_B_FloppingRabbit_Weap_Athena::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function B_FloppingRabbit_Weap_Athena.B_FloppingRabbit_Weap_Athena_C.DetermineFishLootTierNameAndSetLootForSpawner
// 0x0030 (0x0030 - 0x0000)
struct B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner final
{
public:
	bool                                          bIsExplosion;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55EB[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55EC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortFishingInterface> K2Node_DynamicCast_AsFort_Fishing_Interface;       // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55ED[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_DetermineFishLootTierNameAndSetLootForSpawner_ReturnValue; // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner) == 0x000008, "Wrong alignment on B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner");
static_assert(sizeof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner) == 0x000030, "Wrong size on B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner, bIsExplosion) == 0x000000, "Member 'B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner::bIsExplosion' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner, ReturnValue) == 0x000004, "Member 'B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner, K2Node_DynamicCast_AsFort_Fishing_Interface) == 0x000010, "Member 'B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner::K2Node_DynamicCast_AsFort_Fishing_Interface' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner, CallFunc_DetermineFishLootTierNameAndSetLootForSpawner_ReturnValue) == 0x000024, "Member 'B_FloppingRabbit_Weap_Athena_C_DetermineFishLootTierNameAndSetLootForSpawner::CallFunc_DetermineFishLootTierNameAndSetLootForSpawner_ReturnValue' has a wrong offset!");

}

