#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPWaveLIbrary

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "WaveSpectrumSettings_structs.hpp"
#include "Water_structs.hpp"
#include "BeachSettings_structs.hpp"
#include "WaveParams_structs.hpp"


namespace SDK::Params
{

// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave
// 0x00E0 (0x00E0 - 0x0000)
struct BPWaveLIbrary_C_Gerstner_Wave final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K;                                                 // 0x000C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         W;                                                 // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         A;                                                 // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Steepness;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase_Offset;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              XY;                                                // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x003C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_2;     // 0x00B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_3;     // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Gerstner_Wave) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Gerstner_Wave");
static_assert(sizeof(BPWaveLIbrary_C_Gerstner_Wave) == 0x0000E0, "Wrong size on BPWaveLIbrary_C_Gerstner_Wave");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, Pos) == 0x000000, "Member 'BPWaveLIbrary_C_Gerstner_Wave::Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, K) == 0x00000C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::K' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, W) == 0x000014, "Member 'BPWaveLIbrary_C_Gerstner_Wave::W' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, A) == 0x000018, "Member 'BPWaveLIbrary_C_Gerstner_Wave::A' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, Steepness) == 0x00001C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::Steepness' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, Phase_Offset) == 0x000020, "Member 'BPWaveLIbrary_C_Gerstner_Wave::Phase_Offset' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, __WorldContext) == 0x000028, "Member 'BPWaveLIbrary_C_Gerstner_Wave::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, XY) == 0x000030, "Member 'BPWaveLIbrary_C_Gerstner_Wave::XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, Z) == 0x000038, "Member 'BPWaveLIbrary_C_Gerstner_Wave::Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, Normal) == 0x00003C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_GetPI_ReturnValue) == 0x000048, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00004C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000050, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Normal2D_ReturnValue) == 0x000054, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00005C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000060, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_DotProduct2D_ReturnValue) == 0x00006C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Lerp_ReturnValue) == 0x000078, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00007C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000080, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Sqrt_ReturnValue) == 0x000084, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000088, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Add_FloatFloat_ReturnValue) == 0x00008C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000090, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Sin_ReturnValue) == 0x000094, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Cos_ReturnValue) == 0x000098, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x00009C, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000A0, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000A8, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000AC, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_Vector2DFloat_ReturnValue_2) == 0x0000B4, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_Vector2DFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000BC, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_Multiply_Vector2DFloat_ReturnValue_3) == 0x0000C0, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_Multiply_Vector2DFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_BreakVector2D_X) == 0x0000C8, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_BreakVector2D_Y) == 0x0000CC, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave, CallFunc_MakeVector_ReturnValue) == 0x0000D0, "Member 'BPWaveLIbrary_C_Gerstner_Wave::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave_MPC_Deep
// 0x00F0 (0x00F0 - 0x0000)
struct BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveParams                            Wave_Params;                                       // 0x000C(0x001C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase_Offset;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              XY;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Pos;                                          // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Time;                                         // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Sine;                                         // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0064(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_2;     // 0x00C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_3;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep");
static_assert(sizeof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep) == 0x0000F0, "Wrong size on BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Pos) == 0x000000, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Wave_Params) == 0x00000C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Wave_Params' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Time) == 0x000028, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Phase_Offset) == 0x00002C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Phase_Offset' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, __WorldContext) == 0x000030, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, XY) == 0x000038, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Z) == 0x000040, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Normal) == 0x000044, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Wave_Pos) == 0x000050, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Wave_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Wave_Time) == 0x000054, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Wave_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, Wave_Sine) == 0x000058, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::Wave_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_GetPI_ReturnValue) == 0x00005C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000060, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Normal2D_ReturnValue) == 0x000064, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00006C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000070, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000078, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_DotProduct2D_ReturnValue) == 0x00007C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000080, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000084, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Lerp_ReturnValue) == 0x000088, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00008C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000090, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Sqrt_ReturnValue) == 0x000094, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000098, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Add_FloatFloat_ReturnValue) == 0x00009C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000A0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Sin_ReturnValue) == 0x0000A4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Cos_ReturnValue) == 0x0000A8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000AC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000B0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000B8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000BC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_Vector2DFloat_ReturnValue_2) == 0x0000C4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_Vector2DFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000CC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_Multiply_Vector2DFloat_ReturnValue_3) == 0x0000D0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_Multiply_Vector2DFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_BreakVector2D_X) == 0x0000D8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_BreakVector2D_Y) == 0x0000DC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep, CallFunc_MakeVector_ReturnValue) == 0x0000E0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Deep::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Exp2
// 0x0028 (0x0028 - 0x0000)
struct BPWaveLIbrary_C_Exp2 final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Density;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewParam;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Exp_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Exp2) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Exp2");
static_assert(sizeof(BPWaveLIbrary_C_Exp2) == 0x000028, "Wrong size on BPWaveLIbrary_C_Exp2");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, Depth) == 0x000000, "Member 'BPWaveLIbrary_C_Exp2::Depth' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, Density) == 0x000004, "Member 'BPWaveLIbrary_C_Exp2::Density' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, __WorldContext) == 0x000008, "Member 'BPWaveLIbrary_C_Exp2::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, NewParam) == 0x000010, "Member 'BPWaveLIbrary_C_Exp2::NewParam' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BPWaveLIbrary_C_Exp2::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BPWaveLIbrary_C_Exp2::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, CallFunc_Exp_ReturnValue) == 0x00001C, "Member 'BPWaveLIbrary_C_Exp2::CallFunc_Exp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Exp2, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BPWaveLIbrary_C_Exp2::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Wavelength to Wavespeed
// 0x0028 (0x0028 - 0x0000)
struct BPWaveLIbrary_C_Wavelength_to_Wavespeed final
{
public:
	float                                         Wavelength;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Wavelength_to_Wavespeed) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Wavelength_to_Wavespeed");
static_assert(sizeof(BPWaveLIbrary_C_Wavelength_to_Wavespeed) == 0x000028, "Wrong size on BPWaveLIbrary_C_Wavelength_to_Wavespeed");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, Wavelength) == 0x000000, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::Wavelength' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, __WorldContext) == 0x000008, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, S) == 0x000010, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::S' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, CallFunc_GetPI_ReturnValue) == 0x000014, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wavelength_to_Wavespeed, CallFunc_Sqrt_ReturnValue) == 0x000024, "Member 'BPWaveLIbrary_C_Wavelength_to_Wavespeed::CallFunc_Sqrt_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Wave Rotation Setup
// 0x00F0 (0x00F0 - 0x0000)
struct BPWaveLIbrary_C_Wave_Rotation_Setup final
{
public:
	float                                         Wave_Pos;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Time;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crash_Offset;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wavelength;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wave_Direction;                                    // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Local_Pivot;                                       // 0x001C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Beach_X_Pos;                                       // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Break_Distance;                                    // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Sine;                                         // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Crest_Power;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start_Crash_Power;                                 // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End_Crash_Power;                                   // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxRotation;                                       // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD2[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotation_Angle;                                    // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                World_Pivot;                                       // 0x0054(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Raw_Shore_Mask;                                    // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue_1;                      // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Wave_Rotation_Setup) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Wave_Rotation_Setup");
static_assert(sizeof(BPWaveLIbrary_C_Wave_Rotation_Setup) == 0x0000F0, "Wrong size on BPWaveLIbrary_C_Wave_Rotation_Setup");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Wave_Pos) == 0x000000, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Wave_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Wave_Time) == 0x000004, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Wave_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Crash_Offset) == 0x000008, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Crash_Offset' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Wavelength) == 0x00000C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Wavelength' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Wave_Direction) == 0x000010, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Wave_Direction' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Local_Pivot) == 0x00001C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Local_Pivot' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Beach_X_Pos) == 0x000028, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Beach_X_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Break_Distance) == 0x00002C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Break_Distance' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Wave_Sine) == 0x000030, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Wave_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Crest_Power) == 0x000034, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Crest_Power' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Start_Crash_Power) == 0x000038, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Start_Crash_Power' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, End_Crash_Power) == 0x00003C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::End_Crash_Power' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, MaxRotation) == 0x000040, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::MaxRotation' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, __WorldContext) == 0x000048, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Rotation_Angle) == 0x000050, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Rotation_Angle' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, World_Pivot) == 0x000054, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::World_Pivot' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, Raw_Shore_Mask) == 0x000060, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::Raw_Shore_Mask' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_GetPI_ReturnValue) == 0x000064, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_FMax_ReturnValue) == 0x000068, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00006C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000070, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000074, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_GetPI_ReturnValue_1) == 0x000078, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_GetPI_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Add_FloatFloat_ReturnValue) == 0x00007C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000080, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000084, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000088, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00008C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_FFloor_ReturnValue) == 0x000090, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000094, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000098, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00009C, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A0, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Add_VectorVector_ReturnValue) == 0x0000AC, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000B8, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0000C0, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_FClamp_ReturnValue) == 0x0000C4, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0000C8, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000CC, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000D0, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x0000D4, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0000D8, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000DC, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Lerp_ReturnValue) == 0x0000E0, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Lerp_ReturnValue_1) == 0x0000E4, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Wave_Rotation_Setup, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000E8, "Member 'BPWaveLIbrary_C_Wave_Rotation_Setup::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Finalize Gerstner Normal
// 0x0040 (0x0040 - 0x0000)
struct BPWaveLIbrary_C_Finalize_Gerstner_Normal final
{
public:
	struct FVector                                N;                                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD3[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                N_;                                                // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Finalize_Gerstner_Normal) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Finalize_Gerstner_Normal");
static_assert(sizeof(BPWaveLIbrary_C_Finalize_Gerstner_Normal) == 0x000040, "Wrong size on BPWaveLIbrary_C_Finalize_Gerstner_Normal");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, N) == 0x000000, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::N' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, __WorldContext) == 0x000010, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, N_) == 0x000018, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::N_' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, CallFunc_BreakVector_X) == 0x000024, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, CallFunc_BreakVector_Y) == 0x000028, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Finalize_Gerstner_Normal, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BPWaveLIbrary_C_Finalize_Gerstner_Normal::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Rotation from Normal
// 0x0098 (0x0098 - 0x0000)
struct BPWaveLIbrary_C_Rotation_from_Normal final
{
public:
	struct FVector                                X_Vector;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Z_Vector__Normal_;                                 // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Additional_Tilt;                                   // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Additional_Pitch;                                  // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotator;                                           // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromXY_ReturnValue;                // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPWaveLIbrary_C_Rotation_from_Normal) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Rotation_from_Normal");
static_assert(sizeof(BPWaveLIbrary_C_Rotation_from_Normal) == 0x000098, "Wrong size on BPWaveLIbrary_C_Rotation_from_Normal");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, X_Vector) == 0x000000, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::X_Vector' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, Z_Vector__Normal_) == 0x00000C, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::Z_Vector__Normal_' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, Additional_Tilt) == 0x000018, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::Additional_Tilt' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, Additional_Pitch) == 0x00001C, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::Additional_Pitch' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, __WorldContext) == 0x000020, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, Rotator) == 0x000028, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::Rotator' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_Cross_VectorVector_ReturnValue) == 0x000034, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_Normal_ReturnValue) == 0x000040, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00004C, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000058, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_Normal_ReturnValue_1) == 0x000064, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_RotateAngleAxis_ReturnValue) == 0x000070, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x00007C, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Rotation_from_Normal, CallFunc_MakeRotFromXY_ReturnValue) == 0x000088, "Member 'BPWaveLIbrary_C_Rotation_from_Normal::CallFunc_MakeRotFromXY_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner 3 Waves
// 0x01D0 (0x01D0 - 0x0000)
struct BPWaveLIbrary_C_Gerstner_3_Waves final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num_Waves;                                         // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWaveParams>                    Wave_Array;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Depth;                                       // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Break_Tangent;                                     // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Break_Cos;                                         // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              XY;                                                // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0044(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_0_Pos;                                        // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_0_Time;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_0_Sine;                                       // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveParams                            CallFunc_Array_Get_Item;                           // 0x0068(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveParams                            CallFunc_Array_Get_Item_1;                         // 0x0084(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Gerstner_Wave_MPC_Deep_XY;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Z;                 // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Gerstner_Wave_MPC_Deep_Normal;            // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos;          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time;         // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine;         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_1;      // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveParams                            CallFunc_Array_Get_Item_2;                         // 0x00E4(0x001C)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Gerstner_Wave_MPC_Deep_XY_1;              // 0x010C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Z_1;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Gerstner_Wave_MPC_Deep_Normal_1;          // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos_1;        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time_1;       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine_1;       // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_2;      // 0x013C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Dot_VectorVector_ReturnValue;             // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Gerstner_Wave_MPC_Shallow_XY;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Shallow_Z;              // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Gerstner_Wave_MPC_Shallow_Normal;         // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Pos;       // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Time;      // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Sine;      // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue_3;      // 0x0174(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Finalize_Gerstner_Normal_N_;              // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Gerstner_3_Waves) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Gerstner_3_Waves");
static_assert(sizeof(BPWaveLIbrary_C_Gerstner_3_Waves) == 0x0001D0, "Wrong size on BPWaveLIbrary_C_Gerstner_3_Waves");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Pos) == 0x000000, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Num_Waves) == 0x00000C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Num_Waves' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Wave_Array) == 0x000010, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Wave_Array' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Time) == 0x000020, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Water_Depth) == 0x000024, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Water_Depth' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Break_Tangent) == 0x000028, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Break_Tangent' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Break_Cos) == 0x00002C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Break_Cos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, __WorldContext) == 0x000030, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, XY) == 0x000038, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Z) == 0x000040, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Normal) == 0x000044, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Wave_0_Pos) == 0x000050, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Wave_0_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Wave_0_Time) == 0x000054, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Wave_0_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, Wave_0_Sine) == 0x000058, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::Wave_0_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_GetPI_ReturnValue) == 0x00005C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000064, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Array_Get_Item) == 0x000068, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Array_Get_Item_1) == 0x000084, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_XY) == 0x0000A0, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Z) == 0x0000A8, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Normal) == 0x0000AC, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos) == 0x0000B8, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time) == 0x0000BC, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine) == 0x0000C0, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000C4, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x0000C8, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000D4, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Conv_Vector2DToVector_ReturnValue_1) == 0x0000D8, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Conv_Vector2DToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Array_Get_Item_2) == 0x0000E4, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Cross_VectorVector_ReturnValue) == 0x000100, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_XY_1) == 0x00010C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_XY_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Z_1) == 0x000114, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Z_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Normal_1) == 0x000118, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Normal_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos_1) == 0x000124, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Pos_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time_1) == 0x000128, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Time_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine_1) == 0x00012C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Deep_Wave_Sine_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Normal_ReturnValue) == 0x000130, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Conv_Vector2DToVector_ReturnValue_2) == 0x00013C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Conv_Vector2DToVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Dot_VectorVector_ReturnValue) == 0x000148, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x00014C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_XY) == 0x000150, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_Z) == 0x000158, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_Normal) == 0x00015C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Pos) == 0x000168, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Time) == 0x00016C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Sine) == 0x000170, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Gerstner_Wave_MPC_Shallow_Wave_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Conv_Vector2DToVector_ReturnValue_3) == 0x000174, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Conv_Vector2DToVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Add_VectorVector_ReturnValue) == 0x000180, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Add_VectorVector_ReturnValue_1) == 0x00018C, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000198, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0001A4, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_Finalize_Gerstner_Normal_N_) == 0x0001B0, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_Finalize_Gerstner_Normal_N_' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_BreakVector_X) == 0x0001BC, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_BreakVector_Y) == 0x0001C0, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_BreakVector_Z) == 0x0001C4, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_3_Waves, CallFunc_MakeVector2D_ReturnValue) == 0x0001C8, "Member 'BPWaveLIbrary_C_Gerstner_3_Waves::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Gerstner Wave_MPC_Shallow
// 0x00F8 (0x00F8 - 0x0000)
struct BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveParams                            Wave_Params;                                       // 0x000C(0x001C)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Time;                                              // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Phase_Offset;                                      // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Water_Depth__wave0_only_;                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD4[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              XY;                                                // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Z;                                                 // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x004C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Pos;                                          // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Time;                                         // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Sine;                                         // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPI_ReturnValue;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0094(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DotProduct2D_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sin_ReturnValue;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Cos_ReturnValue;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x00BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_1;     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_2;     // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue_3;     // 0x00DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow");
static_assert(sizeof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow) == 0x0000F8, "Wrong size on BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Pos) == 0x000000, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Wave_Params) == 0x00000C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Wave_Params' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Time) == 0x000028, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Phase_Offset) == 0x00002C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Phase_Offset' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Water_Depth__wave0_only_) == 0x000030, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Water_Depth__wave0_only_' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, __WorldContext) == 0x000038, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, XY) == 0x000040, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::XY' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Z) == 0x000048, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Z' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Normal) == 0x00004C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Normal' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Wave_Pos) == 0x000058, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Wave_Pos' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Wave_Time) == 0x00005C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Wave_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, Wave_Sine) == 0x000060, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::Wave_Sine' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_GetPI_ReturnValue) == 0x000064, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000068, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Sqrt_ReturnValue) == 0x000070, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000074, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00007C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000080, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000084, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000088, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Add_FloatFloat_ReturnValue) == 0x00008C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000090, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Normal2D_ReturnValue) == 0x000094, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Lerp_ReturnValue) == 0x00009C, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_DotProduct2D_ReturnValue) == 0x0000A0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_DotProduct2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0000A4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0000A8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000AC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Sin_ReturnValue) == 0x0000B0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Sin_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Cos_ReturnValue) == 0x0000B4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Cos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0000B8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x0000BC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0000C4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_Vector2DFloat_ReturnValue_1) == 0x0000C8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_Vector2DFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_Vector2DFloat_ReturnValue_2) == 0x0000D0, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_Vector2DFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0000D8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_Multiply_Vector2DFloat_ReturnValue_3) == 0x0000DC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_Multiply_Vector2DFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_BreakVector2D_X) == 0x0000E4, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_BreakVector2D_Y) == 0x0000E8, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow, CallFunc_MakeVector_ReturnValue) == 0x0000EC, "Member 'BPWaveLIbrary_C_Gerstner_Wave_MPC_Shallow::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Water Depth to Wavespeed
// 0x0020 (0x0020 - 0x0000)
struct BPWaveLIbrary_C_Water_Depth_to_Wavespeed final
{
public:
	float                                         Water_Depth;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5BD5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Sqrt_ReturnValue;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Water_Depth_to_Wavespeed");
static_assert(sizeof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed) == 0x000020, "Wrong size on BPWaveLIbrary_C_Water_Depth_to_Wavespeed");
static_assert(offsetof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed, Water_Depth) == 0x000000, "Member 'BPWaveLIbrary_C_Water_Depth_to_Wavespeed::Water_Depth' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed, __WorldContext) == 0x000008, "Member 'BPWaveLIbrary_C_Water_Depth_to_Wavespeed::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed, S) == 0x000010, "Member 'BPWaveLIbrary_C_Water_Depth_to_Wavespeed::S' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BPWaveLIbrary_C_Water_Depth_to_Wavespeed::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Water_Depth_to_Wavespeed, CallFunc_Sqrt_ReturnValue) == 0x000018, "Member 'BPWaveLIbrary_C_Water_Depth_to_Wavespeed::CallFunc_Sqrt_ReturnValue' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Harvest Wave Params
// 0x0068 (0x0068 - 0x0000)
struct BPWaveLIbrary_C_Harvest_Wave_Params final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PivotData;                                         // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Manual_Time;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBeachSettings                         Beach_Settings;                                    // 0x0018(0x0030)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWaveParams>                    Waves;                                             // 0x0048(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FWaveParams>                    K2Node_MakeArray_Array;                            // 0x0058(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Harvest_Wave_Params) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Harvest_Wave_Params");
static_assert(sizeof(BPWaveLIbrary_C_Harvest_Wave_Params) == 0x000068, "Wrong size on BPWaveLIbrary_C_Harvest_Wave_Params");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, __WorldContext) == 0x000000, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, PivotData) == 0x000008, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::PivotData' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, Manual_Time) == 0x000014, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::Manual_Time' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, Beach_Settings) == 0x000018, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::Beach_Settings' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, Waves) == 0x000048, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::Waves' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Harvest_Wave_Params, K2Node_MakeArray_Array) == 0x000058, "Member 'BPWaveLIbrary_C_Harvest_Wave_Params::K2Node_MakeArray_Array' has a wrong offset!");

// Function BPWaveLIbrary.BPWaveLIbrary_C.Generate Wave Spectrum
// 0x01F0 (0x01F0 - 0x0000)
struct BPWaveLIbrary_C_Generate_Wave_Spectrum final
{
public:
	struct FWaveSpectrumSettings                  Spectrum;                                          // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FWaterWaveParams>               Waves;                                             // 0x0050(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	float                                         LastAlpha;                                         // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          LocalSeed;                                         // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor)
	uint8                                         Pad_5BD6[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaterWaveParams>               OutWaves;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FWaveSpectrumSettings                  Local_Spectrum;                                    // 0x0080(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD7[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x00CC(0x0008)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD8[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD9[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BDA[0x3];                                     // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Conv_VectorToVector2D_ReturnValue;        // 0x0164(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2; // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_6;            // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x01AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BDB[0x3];                                     // 0x01AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaterWaveParams                       K2Node_MakeStruct_WaterWaveParams;                 // 0x01BC(0x002C)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPWaveLIbrary_C_Generate_Wave_Spectrum) == 0x000008, "Wrong alignment on BPWaveLIbrary_C_Generate_Wave_Spectrum");
static_assert(sizeof(BPWaveLIbrary_C_Generate_Wave_Spectrum) == 0x0001F0, "Wrong size on BPWaveLIbrary_C_Generate_Wave_Spectrum");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Spectrum) == 0x000000, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Spectrum' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, __WorldContext) == 0x000048, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Waves) == 0x000050, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Waves' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, LastAlpha) == 0x000060, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::LastAlpha' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, LocalSeed) == 0x000064, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::LocalSeed' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, OutWaves) == 0x000070, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::OutWaves' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Local_Spectrum) == 0x000080, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Local_Spectrum' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Temp_bool_Variable) == 0x0000C8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_MakeRandomStream_ReturnValue) == 0x0000CC, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D4, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x0000D8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x0000DC, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000E8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0000F4, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Lerp_ReturnValue) == 0x0000F8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x0000FC, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000100, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Lerp_ReturnValue_1) == 0x000104, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FFloor_ReturnValue) == 0x000108, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FTrunc_ReturnValue) == 0x00010C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000110, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000114, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000118, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00011C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FMax_ReturnValue) == 0x000120, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FTrunc_ReturnValue_1) == 0x000124, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000128, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x00012C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000130, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Temp_bool_Variable_1) == 0x000134, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000138, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Subtract_IntInt_ReturnValue) == 0x00013C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, K2Node_Select_Default) == 0x000140, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, Temp_int_Variable) == 0x000144, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Add_IntInt_ReturnValue) == 0x000148, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00014C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x000150, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, K2Node_Select_Default_1) == 0x000154, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000160, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_VectorToVector2D_ReturnValue) == 0x000164, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_VectorToVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2) == 0x00016C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Normal2D_ReturnValue) == 0x000170, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Lerp_ReturnValue_2) == 0x000178, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x00017C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000184, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_BreakVector2D_X) == 0x000188, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_BreakVector2D_Y) == 0x00018C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FClamp_ReturnValue) == 0x000190, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FTrunc_ReturnValue_2) == 0x000194, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x000198, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_FTrunc_ReturnValue_3) == 0x00019C, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x0001A0, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Conv_IntToFloat_ReturnValue_6) == 0x0001A4, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Conv_IntToFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x0001A8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0001AC, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_MakeVector_ReturnValue) == 0x0001B0, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, K2Node_MakeStruct_WaterWaveParams) == 0x0001BC, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::K2Node_MakeStruct_WaterWaveParams' has a wrong offset!");
static_assert(offsetof(BPWaveLIbrary_C_Generate_Wave_Spectrum, CallFunc_Array_Add_ReturnValue) == 0x0001E8, "Member 'BPWaveLIbrary_C_Generate_Wave_Spectrum::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

