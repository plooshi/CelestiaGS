#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnableMultiFactorAuthModalBP

#include "Basic.hpp"


namespace SDK::Params
{

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.ExecuteUbergraph_EnableMultiFactorAuthModalBP
// 0x0098 (0x0098 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x0008(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0020(0x0018)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIncentivized;                        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732C[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   K2Node_Event_NewButtonText;                        // 0x0050(0x0018)(ConstParm)
	class UIconTextButton_C*                      K2Node_DynamicCast_AsIcon_Text_Button;             // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_732D[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_UniquePlayerURLText;                  // 0x0078(0x0018)(ConstParm)
	bool                                          K2Node_Event_bIsConsole;                           // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bUsingGamepad;                        // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP) == 0x000008, "Wrong alignment on EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP) == 0x000098, "Wrong size on EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, EntryPoint) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::EntryPoint' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_IsDesignTime) == 0x000004, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_MakeLiteralText_ReturnValue) == 0x000008, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_TextToUpper_ReturnValue) == 0x000020, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_bIncentivized) == 0x000040, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_bIncentivized' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_GetEndTime_ReturnValue) == 0x000044, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_PlayAnimation_ReturnValue_1) == 0x000048, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_NewButtonText) == 0x000050, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_NewButtonText' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_DynamicCast_AsIcon_Text_Button) == 0x000068, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_DynamicCast_AsIcon_Text_Button' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_UniquePlayerURLText) == 0x000078, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_UniquePlayerURLText' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_bIsConsole) == 0x000090, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_bIsConsole' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, CallFunc_IsMobileGame_ReturnValue) == 0x000091, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP, K2Node_Event_bUsingGamepad) == 0x000092, "Member 'EnableMultiFactorAuthModalBP_C_ExecuteUbergraph_EnableMultiFactorAuthModalBP::K2Node_Event_bUsingGamepad' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.OnInputModeChanged
// 0x0001 (0x0001 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_OnInputModeChanged final
{
public:
	bool                                          bUsingGamepad;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_OnInputModeChanged) == 0x000001, "Wrong alignment on EnableMultiFactorAuthModalBP_C_OnInputModeChanged");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_OnInputModeChanged) == 0x000001, "Wrong size on EnableMultiFactorAuthModalBP_C_OnInputModeChanged");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_OnInputModeChanged, bUsingGamepad) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_OnInputModeChanged::bUsingGamepad' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.OnSetScreenConfiguration
// 0x0001 (0x0001 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration final
{
public:
	bool                                          bIsConsole;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration) == 0x000001, "Wrong alignment on EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration) == 0x000001, "Wrong size on EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration, bIsConsole) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_OnSetScreenConfiguration::bIsConsole' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.OnConsoleDisplayURLProvided
// 0x0018 (0x0018 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided final
{
public:
	class FText                                   UniquePlayerURLText;                               // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided) == 0x000008, "Wrong alignment on EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided) == 0x000018, "Wrong size on EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided, UniquePlayerURLText) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_OnConsoleDisplayURLProvided::UniquePlayerURLText' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.OnSetExitButtonText
// 0x0018 (0x0018 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_OnSetExitButtonText final
{
public:
	class FText                                   NewButtonText;                                     // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_OnSetExitButtonText) == 0x000008, "Wrong alignment on EnableMultiFactorAuthModalBP_C_OnSetExitButtonText");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_OnSetExitButtonText) == 0x000018, "Wrong size on EnableMultiFactorAuthModalBP_C_OnSetExitButtonText");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_OnSetExitButtonText, NewButtonText) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_OnSetExitButtonText::NewButtonText' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.OnIncentivizedSet
// 0x0001 (0x0001 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_OnIncentivizedSet final
{
public:
	bool                                          bIncentivized;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_OnIncentivizedSet) == 0x000001, "Wrong alignment on EnableMultiFactorAuthModalBP_C_OnIncentivizedSet");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_OnIncentivizedSet) == 0x000001, "Wrong size on EnableMultiFactorAuthModalBP_C_OnIncentivizedSet");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_OnIncentivizedSet, bIncentivized) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_OnIncentivizedSet::bIncentivized' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_PreConstruct) == 0x000001, "Wrong alignment on EnableMultiFactorAuthModalBP_C_PreConstruct");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_PreConstruct) == 0x000001, "Wrong size on EnableMultiFactorAuthModalBP_C_PreConstruct");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.NavRight
// 0x0002 (0x0002 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_NavRight final
{
public:
	bool                                          CallFunc_HasAnyUserFocus_ReturnValue;              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsEnabled_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_NavRight) == 0x000001, "Wrong alignment on EnableMultiFactorAuthModalBP_C_NavRight");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_NavRight) == 0x000002, "Wrong size on EnableMultiFactorAuthModalBP_C_NavRight");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavRight, CallFunc_HasAnyUserFocus_ReturnValue) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_NavRight::CallFunc_HasAnyUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavRight, CallFunc_GetIsEnabled_ReturnValue) == 0x000001, "Member 'EnableMultiFactorAuthModalBP_C_NavRight::CallFunc_GetIsEnabled_ReturnValue' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.NavUp
// 0x0008 (0x0008 - 0x0000)
struct EnableMultiFactorAuthModalBP_C_NavUp final
{
public:
	int32                                         CallFunc_GetActiveWidgetIndex_ReturnValue;         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsEnabled_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsEnabled_ReturnValue_1;               // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_NavUp) == 0x000004, "Wrong alignment on EnableMultiFactorAuthModalBP_C_NavUp");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_NavUp) == 0x000008, "Wrong size on EnableMultiFactorAuthModalBP_C_NavUp");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavUp, CallFunc_GetActiveWidgetIndex_ReturnValue) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_NavUp::CallFunc_GetActiveWidgetIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavUp, CallFunc_GetIsEnabled_ReturnValue) == 0x000004, "Member 'EnableMultiFactorAuthModalBP_C_NavUp::CallFunc_GetIsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavUp, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000005, "Member 'EnableMultiFactorAuthModalBP_C_NavUp::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_NavUp, CallFunc_GetIsEnabled_ReturnValue_1) == 0x000006, "Member 'EnableMultiFactorAuthModalBP_C_NavUp::CallFunc_GetIsEnabled_ReturnValue_1' has a wrong offset!");

// Function EnableMultiFactorAuthModalBP.EnableMultiFactorAuthModalBP_C.ScaleTitleForCulture
// 0x000C (0x000C - 0x0000)
struct EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture final
{
public:
	float                                         ScaleCharThreshold;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxCharCountForScale;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartScaleAfterCharCount;                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture) == 0x000004, "Wrong alignment on EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture");
static_assert(sizeof(EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture) == 0x00000C, "Wrong size on EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture, ScaleCharThreshold) == 0x000000, "Member 'EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture::ScaleCharThreshold' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture, MaxCharCountForScale) == 0x000004, "Member 'EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture::MaxCharCountForScale' has a wrong offset!");
static_assert(offsetof(EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture, StartScaleAfterCharCount) == 0x000008, "Member 'EnableMultiFactorAuthModalBP_C_ScaleTitleForCulture::StartScaleAfterCharCount' has a wrong offset!");

}

