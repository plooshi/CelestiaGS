#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SelectedPerksWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass SelectedPerksWidget.SelectedPerksWidget_C
// 0x00B0 (0x03B8 - 0x0308)
class USelectedPerksWidget_C final : public UInfiltrationSelectedPerksWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPerkVisual_C*                          PerkVisual_0;                                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkVisual_C*                          PerkVisual_1;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkVisual_C*                          PerkVisual_2;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkVisual_C*                          PerkVisual_3;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPerkVisual_C*                          PerkVisual_4;                                      // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  Switcher;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   VerbosePerkVisual_01;                              // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   VerbosePerkVisual_02;                              // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   VerbosePerkVisual_03;                              // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   VerbosePerkVisual_04;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerbosePerkVisual_C*                   VerbosePerkVisual_05;                              // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UPerkVisual_C*>                  PerkVisualArray;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             ItemFocused;                                       // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UCommonButtonGroup*                     ButtonGroup;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             PerksUpdated;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bUseVerboseFormat;                                 // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_79EC[0x7];                                     // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UVerbosePerkVisual_C*>           VerbosePerkVisualArray;                            // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)

public:
	void ItemFocused__DelegateSignature(class UFortSpyTechItemDefinition* SpyTechItemDef, bool Hide);
	void PerksUpdated__DelegateSignature(int32 Count);
	void ExecuteUbergraph_SelectedPerksWidget(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void UpdatePerks();
	void Construct();
	void GetActiveCount(int32* Count);
	void SetHitTestState(bool HitTestable);
	void ShowLabels(bool Show);
	void GetItem(int32 Param_Index, class UFortSpyTechItemDefinition** SpyTechItemDef);
	void GetItems(TArray<class UFortSpyTechItemDefinition*>* SpyTechItemDefs);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SelectedPerksWidget_C">();
	}
	static class USelectedPerksWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectedPerksWidget_C>();
	}
};
static_assert(alignof(USelectedPerksWidget_C) == 0x000008, "Wrong alignment on USelectedPerksWidget_C");
static_assert(sizeof(USelectedPerksWidget_C) == 0x0003B8, "Wrong size on USelectedPerksWidget_C");
static_assert(offsetof(USelectedPerksWidget_C, UberGraphFrame) == 0x000308, "Member 'USelectedPerksWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisual_0) == 0x000310, "Member 'USelectedPerksWidget_C::PerkVisual_0' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisual_1) == 0x000318, "Member 'USelectedPerksWidget_C::PerkVisual_1' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisual_2) == 0x000320, "Member 'USelectedPerksWidget_C::PerkVisual_2' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisual_3) == 0x000328, "Member 'USelectedPerksWidget_C::PerkVisual_3' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisual_4) == 0x000330, "Member 'USelectedPerksWidget_C::PerkVisual_4' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, Switcher) == 0x000338, "Member 'USelectedPerksWidget_C::Switcher' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisual_01) == 0x000340, "Member 'USelectedPerksWidget_C::VerbosePerkVisual_01' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisual_02) == 0x000348, "Member 'USelectedPerksWidget_C::VerbosePerkVisual_02' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisual_03) == 0x000350, "Member 'USelectedPerksWidget_C::VerbosePerkVisual_03' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisual_04) == 0x000358, "Member 'USelectedPerksWidget_C::VerbosePerkVisual_04' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisual_05) == 0x000360, "Member 'USelectedPerksWidget_C::VerbosePerkVisual_05' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerkVisualArray) == 0x000368, "Member 'USelectedPerksWidget_C::PerkVisualArray' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, ItemFocused) == 0x000378, "Member 'USelectedPerksWidget_C::ItemFocused' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, ButtonGroup) == 0x000388, "Member 'USelectedPerksWidget_C::ButtonGroup' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, PerksUpdated) == 0x000390, "Member 'USelectedPerksWidget_C::PerksUpdated' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, bUseVerboseFormat) == 0x0003A0, "Member 'USelectedPerksWidget_C::bUseVerboseFormat' has a wrong offset!");
static_assert(offsetof(USelectedPerksWidget_C, VerbosePerkVisualArray) == 0x0003A8, "Member 'USelectedPerksWidget_C::VerbosePerkVisualArray' has a wrong offset!");

}

