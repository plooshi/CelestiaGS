#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniChallenges

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function MiniChallenges.MiniChallenges_C.ExecuteUbergraph_MiniChallenges
// 0x0120 (0x0120 - 0x0000)
struct MiniChallenges_C_ExecuteUbergraph_MiniChallenges final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6037[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0018(0x0018)()
	class FText                                   K2Node_Event_QuestDescription;                     // 0x0030(0x0018)(ConstParm)
	int32                                         K2Node_Event_AchivedCount;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_GoalCount;                            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0050(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6038[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0098(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x00D8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x00E8(0x0018)()
	class UUserWidget*                            CallFunc_BP_CreateEntry_ReturnValue;               // 0x0100(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6039[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMiniChallengeMapDetailsEntry_C*        K2Node_DynamicCast_AsMini_Challenge_Map_Details_Entry; // 0x0110(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bEnabled;                             // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges) == 0x000008, "Wrong alignment on MiniChallenges_C_ExecuteUbergraph_MiniChallenges");
static_assert(sizeof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges) == 0x000120, "Wrong size on MiniChallenges_C_ExecuteUbergraph_MiniChallenges");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, EntryPoint) == 0x000000, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::EntryPoint' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, Temp_byte_Variable) == 0x000004, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, Temp_byte_Variable_1) == 0x000005, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_MakeArray_Array) == 0x000008, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, CallFunc_Format_ReturnValue) == 0x000018, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_Event_QuestDescription) == 0x000030, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_Event_QuestDescription' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_Event_AchivedCount) == 0x000048, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_Event_AchivedCount' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_Event_GoalCount) == 0x00004C, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_Event_GoalCount' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_MakeStruct_FormatArgumentData) == 0x000050, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000090, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_MakeStruct_FormatArgumentData_1) == 0x000098, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_MakeArray_Array_1) == 0x0000D8, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, CallFunc_Format_ReturnValue_1) == 0x0000E8, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, CallFunc_BP_CreateEntry_ReturnValue) == 0x000100, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::CallFunc_BP_CreateEntry_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, Temp_bool_Variable) == 0x000108, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_DynamicCast_AsMini_Challenge_Map_Details_Entry) == 0x000110, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_DynamicCast_AsMini_Challenge_Map_Details_Entry' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_DynamicCast_bSuccess) == 0x000118, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_Event_bEnabled) == 0x000119, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_Event_bEnabled' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_ExecuteUbergraph_MiniChallenges, K2Node_Select_Default) == 0x00011A, "Member 'MiniChallenges_C_ExecuteUbergraph_MiniChallenges::K2Node_Select_Default' has a wrong offset!");

// Function MiniChallenges.MiniChallenges_C.InspectModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct MiniChallenges_C_InspectModeEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MiniChallenges_C_InspectModeEnabled) == 0x000001, "Wrong alignment on MiniChallenges_C_InspectModeEnabled");
static_assert(sizeof(MiniChallenges_C_InspectModeEnabled) == 0x000001, "Wrong size on MiniChallenges_C_InspectModeEnabled");
static_assert(offsetof(MiniChallenges_C_InspectModeEnabled, bEnabled) == 0x000000, "Member 'MiniChallenges_C_InspectModeEnabled::bEnabled' has a wrong offset!");

// Function MiniChallenges.MiniChallenges_C.AddQuestDetails
// 0x0020 (0x0020 - 0x0000)
struct MiniChallenges_C_AddQuestDetails final
{
public:
	class FText                                   QuestDescription;                                  // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         AchivedCount;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GoalCount;                                         // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MiniChallenges_C_AddQuestDetails) == 0x000008, "Wrong alignment on MiniChallenges_C_AddQuestDetails");
static_assert(sizeof(MiniChallenges_C_AddQuestDetails) == 0x000020, "Wrong size on MiniChallenges_C_AddQuestDetails");
static_assert(offsetof(MiniChallenges_C_AddQuestDetails, QuestDescription) == 0x000000, "Member 'MiniChallenges_C_AddQuestDetails::QuestDescription' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_AddQuestDetails, AchivedCount) == 0x000018, "Member 'MiniChallenges_C_AddQuestDetails::AchivedCount' has a wrong offset!");
static_assert(offsetof(MiniChallenges_C_AddQuestDetails, GoalCount) == 0x00001C, "Member 'MiniChallenges_C_AddQuestDetails::GoalCount' has a wrong offset!");

}

