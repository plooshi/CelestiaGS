#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BacchusQuickBarSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "ItemDisplayStyle_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BacchusQuickBarSlot.BacchusQuickbarSlot_C
// 0x0088 (0x0460 - 0x03D8)
class UBacchusQuickbarSlot_C final : public UBacchusQuickbarSlotBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Selected;                                          // 0x03E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class USizeBox*                               _SizeBox__Item;                                    // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 DropTarget;                                        // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot1;                                    // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot2;                                    // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot3;                                    // 0x0408(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot4;                                    // 0x0410(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                IndicatorSlot5;                                    // 0x0418(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         MultiMinusSlotsIndicators;                         // 0x0420(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UInvalidationBox*                       QuickBarSlotInvalidationBox;                       // 0x0428(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	EItemDisplayStyle                             ItemDisplayStyle;                                  // 0x0430(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A36[0x7];                                     // 0x0431(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFortItemCooldownType>                 CooldownTypesSupported;                            // 0x0438(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         AnimatedBoxScaleFactor;                            // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldCollapseItemWidgetBorder;                    // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          IsDragHovered;                                     // 0x044D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A37[0x2];                                     // 0x044E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuantitySelector_C*                    Quantity_Selector_Widget;                          // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OngoingUseIndex;                                   // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Native;                                        // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Can_Display_Wide_Items;                            // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void StartOngoingUse(int32 PointerIndex);
	void ExecuteUbergraph_BacchusQuickbarSlot(int32 EntryPoint);
	void EndInteraction(int32 PointerIndex);
	void OnMouseCaptureLost();
	void Handle_OnQuickbarContentsChanged(EFortQuickBars QuickbarIndex, const TArray<int32>& ChangedSlots);
	void OnRefreshItem();
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragLeave(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void SetSlotSelected(bool bSelected);
	void SetAnimatedBoxScaleFactor(float Param_AnimatedBoxScaleFactor);
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void InitializeCooldowns();
	void UpdateItemBoxSize();
	void InitializeInvalidation();
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	bool OnDragOver(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	bool OnDrop(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void SetHovered(bool NewHovered);
	void IsDragItemDroppable(class UDragDropOperation* Drag_Drop_Object, bool* Is_Droppable);
	void Create_Quantity_Selector_Widget(class UFortWorldItem* Param_Item, const class FText& Confirmation_Text);
	void Handle_Drop_Item_Confirmation_Callback(int32 Chosen_Quanitity, class UFortItem* Param_Item);
	void Destroy_Quanitity_Selector_Widget();
	void End_Interaction_BP(int32 Pointer_Index);
	void Cancel_Interaction();
	void StartOngoingUse_BP(int32 PointerIndex);
	void Update_Item_Box_Size_Native();
	void Setup_Multi_Slot_Indicators();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BacchusQuickbarSlot_C">();
	}
	static class UBacchusQuickbarSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBacchusQuickbarSlot_C>();
	}
};
static_assert(alignof(UBacchusQuickbarSlot_C) == 0x000008, "Wrong alignment on UBacchusQuickbarSlot_C");
static_assert(sizeof(UBacchusQuickbarSlot_C) == 0x000460, "Wrong size on UBacchusQuickbarSlot_C");
static_assert(offsetof(UBacchusQuickbarSlot_C, UberGraphFrame) == 0x0003D8, "Member 'UBacchusQuickbarSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Selected) == 0x0003E0, "Member 'UBacchusQuickbarSlot_C::Selected' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, _SizeBox__Item) == 0x0003E8, "Member 'UBacchusQuickbarSlot_C::_SizeBox__Item' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, DropTarget) == 0x0003F0, "Member 'UBacchusQuickbarSlot_C::DropTarget' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot1) == 0x0003F8, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot1' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot2) == 0x000400, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot2' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot3) == 0x000408, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot3' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot4) == 0x000410, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot4' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IndicatorSlot5) == 0x000418, "Member 'UBacchusQuickbarSlot_C::IndicatorSlot5' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, MultiMinusSlotsIndicators) == 0x000420, "Member 'UBacchusQuickbarSlot_C::MultiMinusSlotsIndicators' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, QuickBarSlotInvalidationBox) == 0x000428, "Member 'UBacchusQuickbarSlot_C::QuickBarSlotInvalidationBox' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, ItemDisplayStyle) == 0x000430, "Member 'UBacchusQuickbarSlot_C::ItemDisplayStyle' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, CooldownTypesSupported) == 0x000438, "Member 'UBacchusQuickbarSlot_C::CooldownTypesSupported' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, AnimatedBoxScaleFactor) == 0x000448, "Member 'UBacchusQuickbarSlot_C::AnimatedBoxScaleFactor' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, ShouldCollapseItemWidgetBorder) == 0x00044C, "Member 'UBacchusQuickbarSlot_C::ShouldCollapseItemWidgetBorder' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, IsDragHovered) == 0x00044D, "Member 'UBacchusQuickbarSlot_C::IsDragHovered' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Quantity_Selector_Widget) == 0x000450, "Member 'UBacchusQuickbarSlot_C::Quantity_Selector_Widget' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, OngoingUseIndex) == 0x000458, "Member 'UBacchusQuickbarSlot_C::OngoingUseIndex' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Use_Native) == 0x00045C, "Member 'UBacchusQuickbarSlot_C::Use_Native' has a wrong offset!");
static_assert(offsetof(UBacchusQuickbarSlot_C, Can_Display_Wide_Items) == 0x00045D, "Member 'UBacchusQuickbarSlot_C::Can_Display_Wide_Items' has a wrong offset!");

}

