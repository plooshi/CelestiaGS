#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengePunchCard

#include "Basic.hpp"

#include "ChallengePunchCard_classes.hpp"
#include "ChallengePunchCard_parameters.hpp"


namespace SDK
{

// Function ChallengePunchCard.ChallengePunchCard_C.ExecuteUbergraph_ChallengePunchCard
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengePunchCard_C::ExecuteUbergraph_ChallengePunchCard(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "ExecuteUbergraph_ChallengePunchCard");

	Params::ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.SetBangState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bShowBang                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengePunchCard_C::SetBangState(bool bShowBang)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "SetBangState");

	Params::ChallengePunchCard_C_SetBangState Parms{};

	Parms.bShowBang = bShowBang;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.SetUpEncodedName
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengePunchCard_C::SetUpEncodedName(const class FString& Param_Name, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "SetUpEncodedName");

	Params::ChallengePunchCard_C_SetUpEncodedName Parms{};

	Parms.Param_Name = move(Param_Name);
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengePunchCard_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "PreConstruct");

	Params::ChallengePunchCard_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.HideProgressCount
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bBundleCompleted                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengePunchCard_C::HideProgressCount(bool bBundleCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "HideProgressCount");

	Params::ChallengePunchCard_C_HideProgressCount Parms{};

	Parms.bBundleCompleted = bBundleCompleted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.SetStyle
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FFortChallengePunchCardStyles    PunchStyle                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UChallengePunchCard_C::SetStyle(const struct FFortChallengePunchCardStyles& PunchStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "SetStyle");

	Params::ChallengePunchCard_C_SetStyle Parms{};

	Parms.PunchStyle = move(PunchStyle);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.OnMouseEnter
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UChallengePunchCard_C::OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "OnMouseEnter");

	Params::ChallengePunchCard_C_OnMouseEnter Parms{};

	Parms.MyGeometry = move(MyGeometry);
	Parms.MouseEvent = move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UChallengePunchCard_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengePunchCard.ChallengePunchCard_C.SetProgressCount
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   AchivedCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   GoalCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengePunchCard_C::SetProgressCount(int32 AchivedCount, int32 GoalCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "SetProgressCount");

	Params::ChallengePunchCard_C_SetProgressCount Parms{};

	Parms.AchivedCount = AchivedCount;
	Parms.GoalCount = GoalCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.SetUnkownState
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bKnown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengePunchCard_C::SetUnkownState(bool bKnown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "SetUnkownState");

	Params::ChallengePunchCard_C_SetUnkownState Parms{};

	Parms.bKnown = bKnown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengePunchCard.ChallengePunchCard_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UChallengePunchCard_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengePunchCard_C", "OnMouseLeave");

	Params::ChallengePunchCard_C_OnMouseLeave Parms{};

	Parms.MouseEvent = move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}

}

