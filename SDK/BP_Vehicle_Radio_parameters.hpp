#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Vehicle_Radio

#include "Basic.hpp"

#include "MediaUtils_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.ExecuteUbergraph_BP_Vehicle_Radio
// 0x0138 (0x0138 - 0x0000)
struct BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_StationIndex;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8638[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetFirstLocalFortPlayerController_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_RetrievedUrl_1;                 // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& FailedUrl)> K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	struct FMediaPlayerOptions                    K2Node_MakeStruct_MediaPlayerOptions;              // 0x0038(0x0030)(NoDestructor)
	TDelegate<void(const class FString& RetrievedUrl)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0068(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(const class FString& RetrievedUrl)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(const class FString& OpenedUrl)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 K2Node_CustomEvent_RetrievedUrl;                   // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_FailedUrl;                      // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_FromSeconds_ReturnValue;                  // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMediaPlayerOptions                    K2Node_MakeStruct_MediaPlayerOptions_1;            // 0x00D0(0x0030)(NoDestructor)
	struct FMediaPlayerOptions                    K2Node_Select_Default;                             // 0x0100(0x0030)(NoDestructor)
	bool                                          CallFunc_OpenSourceWithOptions_ReturnValue;        // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio");
static_assert(sizeof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio) == 0x000138, "Wrong size on BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, EntryPoint) == 0x000000, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CustomEvent_StationIndex) == 0x000004, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CustomEvent_StationIndex' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, Temp_bool_Variable) == 0x000008, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, CallFunc_GetFirstLocalFortPlayerController_ReturnValue) == 0x000010, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::CallFunc_GetFirstLocalFortPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CustomEvent_RetrievedUrl_1) == 0x000018, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CustomEvent_RetrievedUrl_1' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_MakeStruct_MediaPlayerOptions) == 0x000038, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_MakeStruct_MediaPlayerOptions' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CreateDelegate_OutputDelegate_1) == 0x000068, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CreateDelegate_OutputDelegate_2) == 0x000078, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CreateDelegate_OutputDelegate_3) == 0x000088, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CreateDelegate_OutputDelegate_4) == 0x000098, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CustomEvent_RetrievedUrl) == 0x0000A8, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CustomEvent_RetrievedUrl' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_CustomEvent_FailedUrl) == 0x0000B8, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_CustomEvent_FailedUrl' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, CallFunc_FromSeconds_ReturnValue) == 0x0000C8, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::CallFunc_FromSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_MakeStruct_MediaPlayerOptions_1) == 0x0000D0, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_MakeStruct_MediaPlayerOptions_1' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, K2Node_Select_Default) == 0x000100, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio, CallFunc_OpenSourceWithOptions_ReturnValue) == 0x000130, "Member 'BP_Vehicle_Radio_C_ExecuteUbergraph_BP_Vehicle_Radio::CallFunc_OpenSourceWithOptions_ReturnValue' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioOpenFailed
// 0x0010 (0x0010 - 0x0000)
struct BP_Vehicle_Radio_C_RadioOpenFailed final
{
public:
	class FString                                 FailedUrl;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioOpenFailed) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_RadioOpenFailed");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioOpenFailed) == 0x000010, "Wrong size on BP_Vehicle_Radio_C_RadioOpenFailed");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioOpenFailed, FailedUrl) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioOpenFailed::FailedUrl' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioURLFailed
// 0x0010 (0x0010 - 0x0000)
struct BP_Vehicle_Radio_C_RadioURLFailed final
{
public:
	class FString                                 RetrievedUrl;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioURLFailed) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_RadioURLFailed");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioURLFailed) == 0x000010, "Wrong size on BP_Vehicle_Radio_C_RadioURLFailed");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioURLFailed, RetrievedUrl) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioURLFailed::RetrievedUrl' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.PlayRadio
// 0x0010 (0x0010 - 0x0000)
struct BP_Vehicle_Radio_C_PlayRadio final
{
public:
	class FString                                 RetrievedUrl;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vehicle_Radio_C_PlayRadio) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_PlayRadio");
static_assert(sizeof(BP_Vehicle_Radio_C_PlayRadio) == 0x000010, "Wrong size on BP_Vehicle_Radio_C_PlayRadio");
static_assert(offsetof(BP_Vehicle_Radio_C_PlayRadio, RetrievedUrl) == 0x000000, "Member 'BP_Vehicle_Radio_C_PlayRadio::RetrievedUrl' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.StartRadio
// 0x0004 (0x0004 - 0x0000)
struct BP_Vehicle_Radio_C_StartRadio final
{
public:
	int32                                         StationIndex;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vehicle_Radio_C_StartRadio) == 0x000004, "Wrong alignment on BP_Vehicle_Radio_C_StartRadio");
static_assert(sizeof(BP_Vehicle_Radio_C_StartRadio) == 0x000004, "Wrong size on BP_Vehicle_Radio_C_StartRadio");
static_assert(offsetof(BP_Vehicle_Radio_C_StartRadio, StationIndex) == 0x000000, "Member 'BP_Vehicle_Radio_C_StartRadio::StationIndex' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioPlay
// 0x0018 (0x0018 - 0x0000)
struct BP_Vehicle_Radio_C_RadioPlay final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Play_ReturnValue;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioPlay) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_RadioPlay");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioPlay) == 0x000018, "Wrong size on BP_Vehicle_Radio_C_RadioPlay");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioPlay, URL) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioPlay::URL' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioPlay, CallFunc_Play_ReturnValue) == 0x000010, "Member 'BP_Vehicle_Radio_C_RadioPlay::CallFunc_Play_ReturnValue' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioUnbindEvents
// 0x0001 (0x0001 - 0x0000)
struct BP_Vehicle_Radio_C_RadioUnbindEvents final
{
public:
	bool                                          JustURL;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioUnbindEvents) == 0x000001, "Wrong alignment on BP_Vehicle_Radio_C_RadioUnbindEvents");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioUnbindEvents) == 0x000001, "Wrong size on BP_Vehicle_Radio_C_RadioUnbindEvents");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioUnbindEvents, JustURL) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioUnbindEvents::JustURL' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioRetry
// 0x000C (0x000C - 0x0000)
struct BP_Vehicle_Radio_C_RadioRetry final
{
public:
	int32                                         Temp_int_Variable;                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8639[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioRetry) == 0x000004, "Wrong alignment on BP_Vehicle_Radio_C_RadioRetry");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioRetry) == 0x00000C, "Wrong size on BP_Vehicle_Radio_C_RadioRetry");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioRetry, Temp_int_Variable) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioRetry::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioRetry, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000004, "Member 'BP_Vehicle_Radio_C_RadioRetry::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioRetry, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Vehicle_Radio_C_RadioRetry::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Vehicle_Radio.BP_Vehicle_Radio_C.RadioSendAnalytics
// 0x0038 (0x0038 - 0x0000)
struct BP_Vehicle_Radio_C_RadioSendAnalytics final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_863A[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          CallFunc_GetLocalFortPlayerControllers_ReturnValue; // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_863B[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Vehicle_Radio_C_RadioSendAnalytics) == 0x000008, "Wrong alignment on BP_Vehicle_Radio_C_RadioSendAnalytics");
static_assert(sizeof(BP_Vehicle_Radio_C_RadioSendAnalytics) == 0x000038, "Wrong size on BP_Vehicle_Radio_C_RadioSendAnalytics");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, CallFunc_GetLocalFortPlayerControllers_ReturnValue) == 0x000010, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::CallFunc_GetLocalFortPlayerControllers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Vehicle_Radio_C_RadioSendAnalytics, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_Vehicle_Radio_C_RadioSendAnalytics::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

