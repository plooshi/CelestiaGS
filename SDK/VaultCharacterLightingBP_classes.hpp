#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VaultCharacterLightingBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass VaultCharacterLightingBP.VaultCharacterLightingBP_C
// 0x00C0 (0x02E0 - 0x0220)
class AVaultCharacterLightingBP_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow1;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight4;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight3;                                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight2;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess_Mobile;                                // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess_LOWPC;                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight_LOWPC;                                    // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight_LOWPC;                            // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightMobile;                            // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLightLowMobil;                                  // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLowerRight;                                     // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimLeft;                                           // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimTopRight;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    RimBottomLeft;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    KeyLight;                                          // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    Bounce;                                            // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    BounceRear;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SharedRoot;                                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMobile_Lighting;                              // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DebugLightingPC;                                   // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsActive;                                          // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AlwaysOn;                                          // 0x02CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          DebugLighting_LOWDetailPC;                         // 0x02CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A35[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MPCMinusManualSunlightVector;                      // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void SwitchPCLighting_LOWDetail(bool Visibility);
	void SwitchPCLighting(bool Visibility);
	void SwitchMobileLighting(bool Visibilty);
	void UserConstructionScript();
	void UpdateSettings();
	void ToggleLighting();
	void OVERRIDELIGHTING();
	void LightControl(bool NewParam);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_VaultCharacterLightingBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"VaultCharacterLightingBP_C">();
	}
	static class AVaultCharacterLightingBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVaultCharacterLightingBP_C>();
	}
};
static_assert(alignof(AVaultCharacterLightingBP_C) == 0x000008, "Wrong alignment on AVaultCharacterLightingBP_C");
static_assert(sizeof(AVaultCharacterLightingBP_C) == 0x0002E0, "Wrong size on AVaultCharacterLightingBP_C");
static_assert(offsetof(AVaultCharacterLightingBP_C, UberGraphFrame) == 0x000220, "Member 'AVaultCharacterLightingBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, Arrow1) == 0x000228, "Member 'AVaultCharacterLightingBP_C::Arrow1' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, KeyLight4) == 0x000230, "Member 'AVaultCharacterLightingBP_C::KeyLight4' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, KeyLight3) == 0x000238, "Member 'AVaultCharacterLightingBP_C::KeyLight3' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, KeyLight2) == 0x000240, "Member 'AVaultCharacterLightingBP_C::KeyLight2' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, PostProcess_Mobile) == 0x000248, "Member 'AVaultCharacterLightingBP_C::PostProcess_Mobile' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, PostProcess_LOWPC) == 0x000250, "Member 'AVaultCharacterLightingBP_C::PostProcess_LOWPC' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, SkyLight_LOWPC) == 0x000258, "Member 'AVaultCharacterLightingBP_C::SkyLight_LOWPC' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, DirectionalLight_LOWPC) == 0x000260, "Member 'AVaultCharacterLightingBP_C::DirectionalLight_LOWPC' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, Arrow) == 0x000268, "Member 'AVaultCharacterLightingBP_C::Arrow' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, DirectionalLightMobile) == 0x000270, "Member 'AVaultCharacterLightingBP_C::DirectionalLightMobile' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, SkyLightLowMobil) == 0x000278, "Member 'AVaultCharacterLightingBP_C::SkyLightLowMobil' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, SkyLight) == 0x000280, "Member 'AVaultCharacterLightingBP_C::SkyLight' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, RimLowerRight) == 0x000288, "Member 'AVaultCharacterLightingBP_C::RimLowerRight' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, RimLeft) == 0x000290, "Member 'AVaultCharacterLightingBP_C::RimLeft' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, RimTopRight) == 0x000298, "Member 'AVaultCharacterLightingBP_C::RimTopRight' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, RimBottomLeft) == 0x0002A0, "Member 'AVaultCharacterLightingBP_C::RimBottomLeft' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, KeyLight) == 0x0002A8, "Member 'AVaultCharacterLightingBP_C::KeyLight' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, Bounce) == 0x0002B0, "Member 'AVaultCharacterLightingBP_C::Bounce' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, BounceRear) == 0x0002B8, "Member 'AVaultCharacterLightingBP_C::BounceRear' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, SharedRoot) == 0x0002C0, "Member 'AVaultCharacterLightingBP_C::SharedRoot' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, DebugMobile_Lighting) == 0x0002C8, "Member 'AVaultCharacterLightingBP_C::DebugMobile_Lighting' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, DebugLightingPC) == 0x0002C9, "Member 'AVaultCharacterLightingBP_C::DebugLightingPC' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, IsActive) == 0x0002CA, "Member 'AVaultCharacterLightingBP_C::IsActive' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, AlwaysOn) == 0x0002CB, "Member 'AVaultCharacterLightingBP_C::AlwaysOn' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, DebugLighting_LOWDetailPC) == 0x0002CC, "Member 'AVaultCharacterLightingBP_C::DebugLighting_LOWDetailPC' has a wrong offset!");
static_assert(offsetof(AVaultCharacterLightingBP_C, MPCMinusManualSunlightVector) == 0x0002D0, "Member 'AVaultCharacterLightingBP_C::MPCMinusManualSunlightVector' has a wrong offset!");

}

