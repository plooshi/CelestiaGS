#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengePunchCard

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ChallengePunchCard.ChallengePunchCard_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct ChallengePunchCard_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengePunchCard_C_OnMouseLeave) == 0x000008, "Wrong alignment on ChallengePunchCard_C_OnMouseLeave");
static_assert(sizeof(ChallengePunchCard_C_OnMouseLeave) == 0x000070, "Wrong size on ChallengePunchCard_C_OnMouseLeave");
static_assert(offsetof(ChallengePunchCard_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'ChallengePunchCard_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.SetUnkownState
// 0x0001 (0x0001 - 0x0000)
struct ChallengePunchCard_C_SetUnkownState final
{
public:
	bool                                          bKnown;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengePunchCard_C_SetUnkownState) == 0x000001, "Wrong alignment on ChallengePunchCard_C_SetUnkownState");
static_assert(sizeof(ChallengePunchCard_C_SetUnkownState) == 0x000001, "Wrong size on ChallengePunchCard_C_SetUnkownState");
static_assert(offsetof(ChallengePunchCard_C_SetUnkownState, bKnown) == 0x000000, "Member 'ChallengePunchCard_C_SetUnkownState::bKnown' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.SetProgressCount
// 0x0008 (0x0008 - 0x0000)
struct ChallengePunchCard_C_SetProgressCount final
{
public:
	int32                                         AchivedCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GoalCount;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengePunchCard_C_SetProgressCount) == 0x000004, "Wrong alignment on ChallengePunchCard_C_SetProgressCount");
static_assert(sizeof(ChallengePunchCard_C_SetProgressCount) == 0x000008, "Wrong size on ChallengePunchCard_C_SetProgressCount");
static_assert(offsetof(ChallengePunchCard_C_SetProgressCount, AchivedCount) == 0x000000, "Member 'ChallengePunchCard_C_SetProgressCount::AchivedCount' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_SetProgressCount, GoalCount) == 0x000004, "Member 'ChallengePunchCard_C_SetProgressCount::GoalCount' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengePunchCard_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengePunchCard_C_OnMouseEnter) == 0x000008, "Wrong alignment on ChallengePunchCard_C_OnMouseEnter");
static_assert(sizeof(ChallengePunchCard_C_OnMouseEnter) == 0x0000A8, "Wrong size on ChallengePunchCard_C_OnMouseEnter");
static_assert(offsetof(ChallengePunchCard_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'ChallengePunchCard_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'ChallengePunchCard_C_OnMouseEnter::MouseEvent' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.SetStyle
// 0x00B0 (0x00B0 - 0x0000)
struct ChallengePunchCard_C_SetStyle final
{
public:
	struct FFortChallengePunchCardStyles          PunchStyle;                                        // 0x0000(0x00B0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengePunchCard_C_SetStyle) == 0x000008, "Wrong alignment on ChallengePunchCard_C_SetStyle");
static_assert(sizeof(ChallengePunchCard_C_SetStyle) == 0x0000B0, "Wrong size on ChallengePunchCard_C_SetStyle");
static_assert(offsetof(ChallengePunchCard_C_SetStyle, PunchStyle) == 0x000000, "Member 'ChallengePunchCard_C_SetStyle::PunchStyle' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.HideProgressCount
// 0x0001 (0x0001 - 0x0000)
struct ChallengePunchCard_C_HideProgressCount final
{
public:
	bool                                          bBundleCompleted;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengePunchCard_C_HideProgressCount) == 0x000001, "Wrong alignment on ChallengePunchCard_C_HideProgressCount");
static_assert(sizeof(ChallengePunchCard_C_HideProgressCount) == 0x000001, "Wrong size on ChallengePunchCard_C_HideProgressCount");
static_assert(offsetof(ChallengePunchCard_C_HideProgressCount, bBundleCompleted) == 0x000000, "Member 'ChallengePunchCard_C_HideProgressCount::bBundleCompleted' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengePunchCard_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengePunchCard_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengePunchCard_C_PreConstruct");
static_assert(sizeof(ChallengePunchCard_C_PreConstruct) == 0x000001, "Wrong size on ChallengePunchCard_C_PreConstruct");
static_assert(offsetof(ChallengePunchCard_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengePunchCard_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.SetUpEncodedName
// 0x0018 (0x0018 - 0x0000)
struct ChallengePunchCard_C_SetUpEncodedName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengePunchCard_C_SetUpEncodedName) == 0x000008, "Wrong alignment on ChallengePunchCard_C_SetUpEncodedName");
static_assert(sizeof(ChallengePunchCard_C_SetUpEncodedName) == 0x000018, "Wrong size on ChallengePunchCard_C_SetUpEncodedName");
static_assert(offsetof(ChallengePunchCard_C_SetUpEncodedName, Param_Name) == 0x000000, "Member 'ChallengePunchCard_C_SetUpEncodedName::Param_Name' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_SetUpEncodedName, Count) == 0x000010, "Member 'ChallengePunchCard_C_SetUpEncodedName::Count' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.SetBangState
// 0x0001 (0x0001 - 0x0000)
struct ChallengePunchCard_C_SetBangState final
{
public:
	bool                                          bShowBang;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengePunchCard_C_SetBangState) == 0x000001, "Wrong alignment on ChallengePunchCard_C_SetBangState");
static_assert(sizeof(ChallengePunchCard_C_SetBangState) == 0x000001, "Wrong size on ChallengePunchCard_C_SetBangState");
static_assert(offsetof(ChallengePunchCard_C_SetBangState, bShowBang) == 0x000000, "Member 'ChallengePunchCard_C_SetBangState::bShowBang' has a wrong offset!");

// Function ChallengePunchCard.ChallengePunchCard_C.ExecuteUbergraph_ChallengePunchCard
// 0x04F0 (0x04F0 - 0x0000)
struct ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58C5[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58C6[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0038(0x0018)()
	float                                         Temp_float_Variable_5;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C7[0x5];                                     // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0060(0x0070)(ConstParm)
	bool                                          K2Node_Event_bKnown;                               // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58C8[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58C9[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_AchivedCount;                         // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_GoalCount;                            // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00F8(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0138(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0178(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0188(0x0018)()
	float                                         Temp_float_Variable_7;                             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x01A4(0x0038)(IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CA[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x01E0(0x0070)(ConstParm)
	bool                                          Temp_bool_Variable_5;                              // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CB[0x3];                                     // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortChallengePunchCardStyles          K2Node_Event_PunchStyle;                           // 0x0258(0x00B0)(ConstParm)
	int32                                         Temp_int_Variable_1;                               // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAssetNull_ReturnValue;                  // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CC[0x3];                                     // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0310(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0338(0x0028)()
	bool                                          Temp_bool_Variable_6;                              // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CD[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_8;                             // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CE[0x3];                                     // 0x0375(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0378(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_10;                            // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bBundleCompleted;                     // 0x0384(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58CF[0x3];                                     // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_11;                            // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D0[0x3];                                     // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_1;                           // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0398(0x0050)(HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D1[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_5;                           // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_7;                           // 0x03FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x03FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D2[0x2];                                     // 0x03FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_8;                           // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D3[0x4];                                     // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Event_Name;                                 // 0x0408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_Count;                                // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAnimationPlayingForward_ReturnValue;    // 0x041C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D4[0x3];                                     // 0x041D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_58D5[0x4];                                     // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0428(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0468(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0480(0x0040)(HasGetValueTypeHash)
	bool                                          K2Node_Event_bShowBang;                            // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D6[0x7];                                     // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x04C8(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x04D8(0x0018)()
};
static_assert(alignof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard) == 0x000008, "Wrong alignment on ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard");
static_assert(sizeof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard) == 0x0004F0, "Wrong size on ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, EntryPoint) == 0x000000, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable) == 0x000004, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable) == 0x000008, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_1) == 0x00000C, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_2) == 0x000010, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_1) == 0x000014, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_byte_Variable) == 0x000015, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_byte_Variable_1) == 0x000016, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_2) == 0x000017, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_3) == 0x000018, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_4) == 0x00001C, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeArray_Array) == 0x000020, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_3) == 0x000030, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_Format_ReturnValue) == 0x000038, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_5) == 0x000050, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_6) == 0x000054, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_4) == 0x000058, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_byte_Variable_2) == 0x000059, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_byte_Variable_3) == 0x00005A, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_MouseEvent_1) == 0x000060, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_bKnown) == 0x0000D0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_bKnown' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_PlayAnimationReverse_ReturnValue) == 0x0000D8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_SelectInt_ReturnValue) == 0x0000E0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000E8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_AchivedCount) == 0x0000F0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_AchivedCount' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_GoalCount) == 0x0000F4, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_GoalCount' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_FormatArgumentData) == 0x0000F8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_FormatArgumentData_1) == 0x000138, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeArray_Array_1) == 0x000178, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_Format_ReturnValue_1) == 0x000188, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_7) == 0x0001A0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_MyGeometry) == 0x0001A4, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_MouseEvent) == 0x0001E0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_5) == 0x000250, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_int_Variable) == 0x000254, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_PunchStyle) == 0x000258, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_PunchStyle' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_int_Variable_1) == 0x000308, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_IsAssetNull_ReturnValue) == 0x00030C, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_IsAssetNull_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_SlateColor) == 0x000310, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_SlateColor_1) == 0x000338, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_6) == 0x000360, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_8) == 0x000364, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000368, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_9) == 0x000370, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_7) == 0x000374, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000378, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_10) == 0x000380, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_bBundleCompleted) == 0x000384, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_bBundleCompleted' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_float_Variable_11) == 0x000388, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_IsDesignTime) == 0x00038C, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default) == 0x000390, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_1) == 0x000394, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_SlateFontInfo) == 0x000398, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_2) == 0x0003E8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_3) == 0x0003EC, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_4) == 0x0003F0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_5) == 0x0003F4, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_6) == 0x0003F8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_7) == 0x0003FC, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, Temp_bool_Variable_8) == 0x0003FD, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Select_Default_8) == 0x000400, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_Name) == 0x000408, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_Name' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_Count) == 0x000418, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_Count' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_IsAnimationPlayingForward_ReturnValue) == 0x00041C, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_IsAnimationPlayingForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_Add_IntInt_ReturnValue) == 0x000420, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_FormatArgumentData_2) == 0x000428, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_Conv_StringToText_ReturnValue) == 0x000468, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeStruct_FormatArgumentData_3) == 0x000480, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_Event_bShowBang) == 0x0004C0, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_Event_bShowBang' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, K2Node_MakeArray_Array_2) == 0x0004C8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard, CallFunc_Format_ReturnValue_2) == 0x0004D8, "Member 'ChallengePunchCard_C_ExecuteUbergraph_ChallengePunchCard::CallFunc_Format_ReturnValue_2' has a wrong offset!");

}

