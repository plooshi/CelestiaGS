#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValetRuntime

#include "Basic.hpp"

#include "ValetRuntime_structs.hpp"


namespace SDK::Params
{

// Function ValetRuntime.FortDagwoodVehicleManager.CustomHandleActorStreamedInEditor
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor final
{
public:
	class AActor*                                 SourceActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor");
static_assert(sizeof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor) == 0x000008, "Wrong size on FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor");
static_assert(offsetof(FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor, SourceActor) == 0x000000, "Member 'FortDagwoodVehicleManager_CustomHandleActorStreamedInEditor::SourceActor' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.OnVehicleSpawned
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicleManager_OnVehicleSpawned final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_OnVehicleSpawned) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_OnVehicleSpawned");
static_assert(sizeof(FortDagwoodVehicleManager_OnVehicleSpawned) == 0x000008, "Wrong size on FortDagwoodVehicleManager_OnVehicleSpawned");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawned, Vehicle) == 0x000000, "Member 'FortDagwoodVehicleManager_OnVehicleSpawned::Vehicle' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.OnVehicleSpawnsUpdated
// 0x0020 (0x0020 - 0x0000)
struct FortDagwoodVehicleManager_OnVehicleSpawnsUpdated final
{
public:
	class UFortVehicleItemDefinition*             VehicleItemDef;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         SpawnedVehicles;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewVehicleCount;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_426F[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated) == 0x000008, "Wrong alignment on FortDagwoodVehicleManager_OnVehicleSpawnsUpdated");
static_assert(sizeof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated) == 0x000020, "Wrong size on FortDagwoodVehicleManager_OnVehicleSpawnsUpdated");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, VehicleItemDef) == 0x000000, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::VehicleItemDef' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, SpawnedVehicles) == 0x000008, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::SpawnedVehicles' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicleManager_OnVehicleSpawnsUpdated, NewVehicleCount) == 0x000018, "Member 'FortDagwoodVehicleManager_OnVehicleSpawnsUpdated::NewVehicleCount' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.ServerSetVehicleFuel
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicleManager_ServerSetVehicleFuel final
{
public:
	float                                         NewFuel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_ServerSetVehicleFuel) == 0x000004, "Wrong alignment on FortDagwoodVehicleManager_ServerSetVehicleFuel");
static_assert(sizeof(FortDagwoodVehicleManager_ServerSetVehicleFuel) == 0x000004, "Wrong size on FortDagwoodVehicleManager_ServerSetVehicleFuel");
static_assert(offsetof(FortDagwoodVehicleManager_ServerSetVehicleFuel, NewFuel) == 0x000000, "Member 'FortDagwoodVehicleManager_ServerSetVehicleFuel::NewFuel' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicleManager.SetVehicleFuel
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicleManager_SetVehicleFuel final
{
public:
	float                                         NewFuel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicleManager_SetVehicleFuel) == 0x000004, "Wrong alignment on FortDagwoodVehicleManager_SetVehicleFuel");
static_assert(sizeof(FortDagwoodVehicleManager_SetVehicleFuel) == 0x000004, "Wrong size on FortDagwoodVehicleManager_SetVehicleFuel");
static_assert(offsetof(FortDagwoodVehicleManager_SetVehicleFuel, NewFuel) == 0x000000, "Member 'FortDagwoodVehicleManager_SetVehicleFuel::NewFuel' has a wrong offset!");

// Function ValetRuntime.FortContextualTutorial_VehicleValetLowFuel.HandleVehicleStateChanged
// 0x0018 (0x0018 - 0x0000)
struct FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewVehicle;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldVehicle;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged) == 0x000008, "Wrong alignment on FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged");
static_assert(sizeof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged) == 0x000018, "Wrong size on FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, PlayerPawn) == 0x000000, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::PlayerPawn' has a wrong offset!");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, NewVehicle) == 0x000008, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::NewVehicle' has a wrong offset!");
static_assert(offsetof(FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged, OldVehicle) == 0x000010, "Member 'FortContextualTutorial_VehicleValetLowFuel_HandleVehicleStateChanged::OldVehicle' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.MakeOperable
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_MakeOperable final
{
public:
	bool                                          bAddGas;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_MakeOperable) == 0x000001, "Wrong alignment on FortDagwoodVehicle_MakeOperable");
static_assert(sizeof(FortDagwoodVehicle_MakeOperable) == 0x000001, "Wrong size on FortDagwoodVehicle_MakeOperable");
static_assert(offsetof(FortDagwoodVehicle_MakeOperable, bAddGas) == 0x000000, "Member 'FortDagwoodVehicle_MakeOperable::bAddGas' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnClientBeginAltInteract
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnClientBeginAltInteract final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnClientBeginAltInteract) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnClientBeginAltInteract");
static_assert(sizeof(FortDagwoodVehicle_OnClientBeginAltInteract) == 0x000008, "Wrong size on FortDagwoodVehicle_OnClientBeginAltInteract");
static_assert(offsetof(FortDagwoodVehicle_OnClientBeginAltInteract, Pawn) == 0x000000, "Member 'FortDagwoodVehicle_OnClientBeginAltInteract::Pawn' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnDestroyedPropFromCollision
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnDestroyedPropFromCollision final
{
public:
	const class ABuildingActor*                   BuildingHitActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnDestroyedPropFromCollision) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnDestroyedPropFromCollision");
static_assert(sizeof(FortDagwoodVehicle_OnDestroyedPropFromCollision) == 0x000008, "Wrong size on FortDagwoodVehicle_OnDestroyedPropFromCollision");
static_assert(offsetof(FortDagwoodVehicle_OnDestroyedPropFromCollision, BuildingHitActor) == 0x000000, "Member 'FortDagwoodVehicle_OnDestroyedPropFromCollision::BuildingHitActor' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnGainedFuel
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnGainedFuel final
{
public:
	float                                         NewPercent;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnGainedFuel) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnGainedFuel");
static_assert(sizeof(FortDagwoodVehicle_OnGainedFuel) == 0x000004, "Wrong size on FortDagwoodVehicle_OnGainedFuel");
static_assert(offsetof(FortDagwoodVehicle_OnGainedFuel, NewPercent) == 0x000000, "Member 'FortDagwoodVehicle_OnGainedFuel::NewPercent' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnInoperableChanged
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_OnInoperableChanged final
{
public:
	bool                                          bInoperable;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnInoperableChanged) == 0x000001, "Wrong alignment on FortDagwoodVehicle_OnInoperableChanged");
static_assert(sizeof(FortDagwoodVehicle_OnInoperableChanged) == 0x000001, "Wrong size on FortDagwoodVehicle_OnInoperableChanged");
static_assert(offsetof(FortDagwoodVehicle_OnInoperableChanged, bInoperable) == 0x000000, "Member 'FortDagwoodVehicle_OnInoperableChanged::bInoperable' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnPoppedTire
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnPoppedTire final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnPoppedTire) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnPoppedTire");
static_assert(sizeof(FortDagwoodVehicle_OnPoppedTire) == 0x000004, "Wrong size on FortDagwoodVehicle_OnPoppedTire");
static_assert(offsetof(FortDagwoodVehicle_OnPoppedTire, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_OnPoppedTire::TireIndex' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRep_Tires
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_OnRep_Tires final
{
public:
	TArray<ETireStates>                           PrevTireStates;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRep_Tires) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnRep_Tires");
static_assert(sizeof(FortDagwoodVehicle_OnRep_Tires) == 0x000010, "Wrong size on FortDagwoodVehicle_OnRep_Tires");
static_assert(offsetof(FortDagwoodVehicle_OnRep_Tires, PrevTireStates) == 0x000000, "Member 'FortDagwoodVehicle_OnRep_Tires::PrevTireStates' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnRimScrapeDamage
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnRimScrapeDamage final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnRimScrapeDamage) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnRimScrapeDamage");
static_assert(sizeof(FortDagwoodVehicle_OnRimScrapeDamage) == 0x000004, "Wrong size on FortDagwoodVehicle_OnRimScrapeDamage");
static_assert(offsetof(FortDagwoodVehicle_OnRimScrapeDamage, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_OnRimScrapeDamage::TireIndex' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnServerAltInteract
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnServerAltInteract final
{
public:
	class AFortPawn*                              Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnServerAltInteract) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnServerAltInteract");
static_assert(sizeof(FortDagwoodVehicle_OnServerAltInteract) == 0x000008, "Wrong size on FortDagwoodVehicle_OnServerAltInteract");
static_assert(offsetof(FortDagwoodVehicle_OnServerAltInteract, Pawn) == 0x000000, "Member 'FortDagwoodVehicle_OnServerAltInteract::Pawn' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnSpawnLeakProjectile
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_OnSpawnLeakProjectile final
{
public:
	class AFortProjectileBase*                    SpawnProjectile;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnSpawnLeakProjectile) == 0x000008, "Wrong alignment on FortDagwoodVehicle_OnSpawnLeakProjectile");
static_assert(sizeof(FortDagwoodVehicle_OnSpawnLeakProjectile) == 0x000008, "Wrong size on FortDagwoodVehicle_OnSpawnLeakProjectile");
static_assert(offsetof(FortDagwoodVehicle_OnSpawnLeakProjectile, SpawnProjectile) == 0x000000, "Member 'FortDagwoodVehicle_OnSpawnLeakProjectile::SpawnProjectile' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.OnTickAudioController
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_OnTickAudioController final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_OnTickAudioController) == 0x000004, "Wrong alignment on FortDagwoodVehicle_OnTickAudioController");
static_assert(sizeof(FortDagwoodVehicle_OnTickAudioController) == 0x000004, "Wrong size on FortDagwoodVehicle_OnTickAudioController");
static_assert(offsetof(FortDagwoodVehicle_OnTickAudioController, DeltaTime) == 0x000000, "Member 'FortDagwoodVehicle_OnTickAudioController::DeltaTime' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.SetFuel
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_SetFuel final
{
public:
	float                                         NewFuel;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_SetFuel) == 0x000004, "Wrong alignment on FortDagwoodVehicle_SetFuel");
static_assert(sizeof(FortDagwoodVehicle_SetFuel) == 0x000004, "Wrong size on FortDagwoodVehicle_SetFuel");
static_assert(offsetof(FortDagwoodVehicle_SetFuel, NewFuel) == 0x000000, "Member 'FortDagwoodVehicle_SetFuel::NewFuel' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.SetNormalizedAudioRPM
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_SetNormalizedAudioRPM final
{
public:
	float                                         InRPM;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_SetNormalizedAudioRPM) == 0x000004, "Wrong alignment on FortDagwoodVehicle_SetNormalizedAudioRPM");
static_assert(sizeof(FortDagwoodVehicle_SetNormalizedAudioRPM) == 0x000004, "Wrong size on FortDagwoodVehicle_SetNormalizedAudioRPM");
static_assert(offsetof(FortDagwoodVehicle_SetNormalizedAudioRPM, InRPM) == 0x000000, "Member 'FortDagwoodVehicle_SetNormalizedAudioRPM::InRPM' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.SetOnFire
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_SetOnFire final
{
public:
	bool                                          bNewFire;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_SetOnFire) == 0x000001, "Wrong alignment on FortDagwoodVehicle_SetOnFire");
static_assert(sizeof(FortDagwoodVehicle_SetOnFire) == 0x000001, "Wrong size on FortDagwoodVehicle_SetOnFire");
static_assert(offsetof(FortDagwoodVehicle_SetOnFire, bNewFire) == 0x000000, "Member 'FortDagwoodVehicle_SetOnFire::bNewFire' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.AreAnyTiresPopped
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_AreAnyTiresPopped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_AreAnyTiresPopped) == 0x000001, "Wrong alignment on FortDagwoodVehicle_AreAnyTiresPopped");
static_assert(sizeof(FortDagwoodVehicle_AreAnyTiresPopped) == 0x000001, "Wrong size on FortDagwoodVehicle_AreAnyTiresPopped");
static_assert(offsetof(FortDagwoodVehicle_AreAnyTiresPopped, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_AreAnyTiresPopped::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.ForwardOrReverseInputPressed
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_ForwardOrReverseInputPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_ForwardOrReverseInputPressed) == 0x000001, "Wrong alignment on FortDagwoodVehicle_ForwardOrReverseInputPressed");
static_assert(sizeof(FortDagwoodVehicle_ForwardOrReverseInputPressed) == 0x000001, "Wrong size on FortDagwoodVehicle_ForwardOrReverseInputPressed");
static_assert(offsetof(FortDagwoodVehicle_ForwardOrReverseInputPressed, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_ForwardOrReverseInputPressed::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetBumpiness
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetBumpiness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetBumpiness) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetBumpiness");
static_assert(sizeof(FortDagwoodVehicle_GetBumpiness) == 0x000004, "Wrong size on FortDagwoodVehicle_GetBumpiness");
static_assert(offsetof(FortDagwoodVehicle_GetBumpiness, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetBumpiness::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetFuel
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetFuel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetFuel) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetFuel");
static_assert(sizeof(FortDagwoodVehicle_GetFuel) == 0x000004, "Wrong size on FortDagwoodVehicle_GetFuel");
static_assert(offsetof(FortDagwoodVehicle_GetFuel, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetFuel::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetFuelCapacity
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetFuelCapacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetFuelCapacity) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetFuelCapacity");
static_assert(sizeof(FortDagwoodVehicle_GetFuelCapacity) == 0x000004, "Wrong size on FortDagwoodVehicle_GetFuelCapacity");
static_assert(offsetof(FortDagwoodVehicle_GetFuelCapacity, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetFuelCapacity::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetHUDTopSpeed
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetHUDTopSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetHUDTopSpeed) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetHUDTopSpeed");
static_assert(sizeof(FortDagwoodVehicle_GetHUDTopSpeed) == 0x000004, "Wrong size on FortDagwoodVehicle_GetHUDTopSpeed");
static_assert(offsetof(FortDagwoodVehicle_GetHUDTopSpeed, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetHUDTopSpeed::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetNormalizedAudioRPM
// 0x0004 (0x0004 - 0x0000)
struct FortDagwoodVehicle_GetNormalizedAudioRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetNormalizedAudioRPM) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetNormalizedAudioRPM");
static_assert(sizeof(FortDagwoodVehicle_GetNormalizedAudioRPM) == 0x000004, "Wrong size on FortDagwoodVehicle_GetNormalizedAudioRPM");
static_assert(offsetof(FortDagwoodVehicle_GetNormalizedAudioRPM, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetNormalizedAudioRPM::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetOnFire
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_GetOnFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetOnFire) == 0x000001, "Wrong alignment on FortDagwoodVehicle_GetOnFire");
static_assert(sizeof(FortDagwoodVehicle_GetOnFire) == 0x000001, "Wrong size on FortDagwoodVehicle_GetOnFire");
static_assert(offsetof(FortDagwoodVehicle_GetOnFire, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetOnFire::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetPlayerFacingName
// 0x0010 (0x0010 - 0x0000)
struct FortDagwoodVehicle_GetPlayerFacingName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetPlayerFacingName) == 0x000008, "Wrong alignment on FortDagwoodVehicle_GetPlayerFacingName");
static_assert(sizeof(FortDagwoodVehicle_GetPlayerFacingName) == 0x000010, "Wrong size on FortDagwoodVehicle_GetPlayerFacingName");
static_assert(offsetof(FortDagwoodVehicle_GetPlayerFacingName, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_GetPlayerFacingName::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireHealthPercent
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_GetTireHealthPercent final
{
public:
	ETireLocations                                TireIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_427F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetTireHealthPercent) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetTireHealthPercent");
static_assert(sizeof(FortDagwoodVehicle_GetTireHealthPercent) == 0x000008, "Wrong size on FortDagwoodVehicle_GetTireHealthPercent");
static_assert(offsetof(FortDagwoodVehicle_GetTireHealthPercent, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireHealthPercent::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireHealthPercent, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_GetTireHealthPercent::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireState
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_GetTireState final
{
public:
	int32                                         TireIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4280[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_GetTireState) == 0x000004, "Wrong alignment on FortDagwoodVehicle_GetTireState");
static_assert(sizeof(FortDagwoodVehicle_GetTireState) == 0x000008, "Wrong size on FortDagwoodVehicle_GetTireState");
static_assert(offsetof(FortDagwoodVehicle_GetTireState, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireState::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireState, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_GetTireState::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.GetTireSurface
// 0x0002 (0x0002 - 0x0000)
struct FortDagwoodVehicle_GetTireSurface final
{
public:
	ETireLocations                                TireIndex;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETireSurfaces                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_GetTireSurface) == 0x000001, "Wrong alignment on FortDagwoodVehicle_GetTireSurface");
static_assert(sizeof(FortDagwoodVehicle_GetTireSurface) == 0x000002, "Wrong size on FortDagwoodVehicle_GetTireSurface");
static_assert(offsetof(FortDagwoodVehicle_GetTireSurface, TireIndex) == 0x000000, "Member 'FortDagwoodVehicle_GetTireSurface::TireIndex' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_GetTireSurface, ReturnValue) == 0x000001, "Member 'FortDagwoodVehicle_GetTireSurface::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsInoperable
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsInoperable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsInoperable) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsInoperable");
static_assert(sizeof(FortDagwoodVehicle_IsInoperable) == 0x000001, "Wrong size on FortDagwoodVehicle_IsInoperable");
static_assert(offsetof(FortDagwoodVehicle_IsInoperable, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsInoperable::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsNativeBPTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsNativeBPTickEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsNativeBPTickEnabled) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsNativeBPTickEnabled");
static_assert(sizeof(FortDagwoodVehicle_IsNativeBPTickEnabled) == 0x000001, "Wrong size on FortDagwoodVehicle_IsNativeBPTickEnabled");
static_assert(offsetof(FortDagwoodVehicle_IsNativeBPTickEnabled, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsNativeBPTickEnabled::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOffroad
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOffroad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOffroad) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOffroad");
static_assert(sizeof(FortDagwoodVehicle_IsOffroad) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOffroad");
static_assert(offsetof(FortDagwoodVehicle_IsOffroad, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOffroad::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOnDirt
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOnDirt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOnDirt) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOnDirt");
static_assert(sizeof(FortDagwoodVehicle_IsOnDirt) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOnDirt");
static_assert(offsetof(FortDagwoodVehicle_IsOnDirt, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOnDirt::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOnLandscape
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOnLandscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOnLandscape) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOnLandscape");
static_assert(sizeof(FortDagwoodVehicle_IsOnLandscape) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOnLandscape");
static_assert(offsetof(FortDagwoodVehicle_IsOnLandscape, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOnLandscape::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsOnRoad
// 0x0001 (0x0001 - 0x0000)
struct FortDagwoodVehicle_IsOnRoad final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_IsOnRoad) == 0x000001, "Wrong alignment on FortDagwoodVehicle_IsOnRoad");
static_assert(sizeof(FortDagwoodVehicle_IsOnRoad) == 0x000001, "Wrong size on FortDagwoodVehicle_IsOnRoad");
static_assert(offsetof(FortDagwoodVehicle_IsOnRoad, ReturnValue) == 0x000000, "Member 'FortDagwoodVehicle_IsOnRoad::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsTireSkidding
// 0x0014 (0x0014 - 0x0000)
struct FortDagwoodVehicle_IsTireSkidding final
{
public:
	float                                         MinSpeedForSkid;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleForSkid;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForPeelout;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedForBraking;                                   // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4281[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_IsTireSkidding) == 0x000004, "Wrong alignment on FortDagwoodVehicle_IsTireSkidding");
static_assert(sizeof(FortDagwoodVehicle_IsTireSkidding) == 0x000014, "Wrong size on FortDagwoodVehicle_IsTireSkidding");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, MinSpeedForSkid) == 0x000000, "Member 'FortDagwoodVehicle_IsTireSkidding::MinSpeedForSkid' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, AngleForSkid) == 0x000004, "Member 'FortDagwoodVehicle_IsTireSkidding::AngleForSkid' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, SpeedForPeelout) == 0x000008, "Member 'FortDagwoodVehicle_IsTireSkidding::SpeedForPeelout' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, SpeedForBraking) == 0x00000C, "Member 'FortDagwoodVehicle_IsTireSkidding::SpeedForBraking' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsTireSkidding, ReturnValue) == 0x000010, "Member 'FortDagwoodVehicle_IsTireSkidding::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.IsVehicleAcceleratingWithSpeedThreshold
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold final
{
public:
	float                                         SpeedThreshold;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4282[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold) == 0x000004, "Wrong alignment on FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold");
static_assert(sizeof(FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold) == 0x000008, "Wrong size on FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold");
static_assert(offsetof(FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold, SpeedThreshold) == 0x000000, "Member 'FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold::SpeedThreshold' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_IsVehicleAcceleratingWithSpeedThreshold::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortDagwoodVehicle.NativeCalculateAccelRumbleIntensity
// 0x0008 (0x0008 - 0x0000)
struct FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity final
{
public:
	float                                         MaxIntensity;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity) == 0x000004, "Wrong alignment on FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity");
static_assert(sizeof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity) == 0x000008, "Wrong size on FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity");
static_assert(offsetof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity, MaxIntensity) == 0x000000, "Member 'FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity::MaxIntensity' has a wrong offset!");
static_assert(offsetof(FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity, ReturnValue) == 0x000004, "Member 'FortDagwoodVehicle_NativeCalculateAccelRumbleIntensity::ReturnValue' has a wrong offset!");

// Function ValetRuntime.FortValetAudioController.CacheValetVehicle
// 0x0008 (0x0008 - 0x0000)
struct FortValetAudioController_CacheValetVehicle final
{
public:
	class AFortDagwoodVehicle*                    InVehicle;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortValetAudioController_CacheValetVehicle) == 0x000008, "Wrong alignment on FortValetAudioController_CacheValetVehicle");
static_assert(sizeof(FortValetAudioController_CacheValetVehicle) == 0x000008, "Wrong size on FortValetAudioController_CacheValetVehicle");
static_assert(offsetof(FortValetAudioController_CacheValetVehicle, InVehicle) == 0x000000, "Member 'FortValetAudioController_CacheValetVehicle::InVehicle' has a wrong offset!");

// Function ValetRuntime.FortValetAudioController.OnSuspensionCollision_Native
// 0x0008 (0x0008 - 0x0000)
struct FortValetAudioController_OnSuspensionCollision_Native final
{
public:
	bool                                          OutResult;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_428E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutMagnitude;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortValetAudioController_OnSuspensionCollision_Native) == 0x000004, "Wrong alignment on FortValetAudioController_OnSuspensionCollision_Native");
static_assert(sizeof(FortValetAudioController_OnSuspensionCollision_Native) == 0x000008, "Wrong size on FortValetAudioController_OnSuspensionCollision_Native");
static_assert(offsetof(FortValetAudioController_OnSuspensionCollision_Native, OutResult) == 0x000000, "Member 'FortValetAudioController_OnSuspensionCollision_Native::OutResult' has a wrong offset!");
static_assert(offsetof(FortValetAudioController_OnSuspensionCollision_Native, OutMagnitude) == 0x000004, "Member 'FortValetAudioController_OnSuspensionCollision_Native::OutMagnitude' has a wrong offset!");

}

