#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NitrogenRuntime

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "NitrogenRuntime_structs.hpp"


namespace SDK::Params
{

// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.HandlePlayerTeleportComplete
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete final
{
public:
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete) == 0x000008, "Wrong alignment on FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete");
static_assert(sizeof(FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete) == 0x000008, "Wrong size on FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete");
static_assert(offsetof(FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete, PlayerState) == 0x000000, "Member 'FortAthenaMutator_Nitrogen_HandlePlayerTeleportComplete::PlayerState' has a wrong offset!");

// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehicleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed final
{
public:
	class AActor*                                 VehicleDestroyed;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed) == 0x000008, "Wrong alignment on FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed");
static_assert(sizeof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed) == 0x000008, "Wrong size on FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed");
static_assert(offsetof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed, VehicleDestroyed) == 0x000000, "Member 'FortAthenaMutator_Nitrogen_OnNitrogenVehicleDestroyed::VehicleDestroyed' has a wrong offset!");

// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehicleDriverChanged
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged final
{
public:
	const class AFortPlayerControllerAthena*      NewController;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged) == 0x000008, "Wrong alignment on FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged");
static_assert(sizeof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged) == 0x000010, "Wrong size on FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged");
static_assert(offsetof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged, NewController) == 0x000000, "Member 'FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged::NewController' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged, Vehicle) == 0x000008, "Member 'FortAthenaMutator_Nitrogen_OnNitrogenVehicleDriverChanged::Vehicle' has a wrong offset!");

// Function NitrogenRuntime.FortAthenaMutator_Nitrogen.OnNitrogenVehiclePlayerExit
// 0x0010 (0x0010 - 0x0000)
struct FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit final
{
public:
	const class AFortPlayerControllerAthena*      PlayerController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit) == 0x000008, "Wrong alignment on FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit");
static_assert(sizeof(FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit) == 0x000010, "Wrong size on FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit");
static_assert(offsetof(FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit, PlayerController) == 0x000000, "Member 'FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit::PlayerController' has a wrong offset!");
static_assert(offsetof(FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit, Vehicle) == 0x000008, "Member 'FortAthenaMutator_Nitrogen_OnNitrogenVehiclePlayerExit::Vehicle' has a wrong offset!");

// Function NitrogenRuntime.FortCheatManager_Nitrogen.SetNitrogenScore
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_Nitrogen_SetNitrogenScore final
{
public:
	int32                                         Score;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ScoreReason;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_423E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FortCheatManager_Nitrogen_SetNitrogenScore) == 0x000004, "Wrong alignment on FortCheatManager_Nitrogen_SetNitrogenScore");
static_assert(sizeof(FortCheatManager_Nitrogen_SetNitrogenScore) == 0x000008, "Wrong size on FortCheatManager_Nitrogen_SetNitrogenScore");
static_assert(offsetof(FortCheatManager_Nitrogen_SetNitrogenScore, Score) == 0x000000, "Member 'FortCheatManager_Nitrogen_SetNitrogenScore::Score' has a wrong offset!");
static_assert(offsetof(FortCheatManager_Nitrogen_SetNitrogenScore, ScoreReason) == 0x000004, "Member 'FortCheatManager_Nitrogen_SetNitrogenScore::ScoreReason' has a wrong offset!");

// Function NitrogenRuntime.FortCheatManager_Nitrogen.SpawnNitrogenFare
// 0x0008 (0x0008 - 0x0000)
struct FortCheatManager_Nitrogen_SpawnNitrogenFare final
{
public:
	float                                         PickUpDistance;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropOffDistance;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Nitrogen_SpawnNitrogenFare) == 0x000004, "Wrong alignment on FortCheatManager_Nitrogen_SpawnNitrogenFare");
static_assert(sizeof(FortCheatManager_Nitrogen_SpawnNitrogenFare) == 0x000008, "Wrong size on FortCheatManager_Nitrogen_SpawnNitrogenFare");
static_assert(offsetof(FortCheatManager_Nitrogen_SpawnNitrogenFare, PickUpDistance) == 0x000000, "Member 'FortCheatManager_Nitrogen_SpawnNitrogenFare::PickUpDistance' has a wrong offset!");
static_assert(offsetof(FortCheatManager_Nitrogen_SpawnNitrogenFare, DropOffDistance) == 0x000004, "Member 'FortCheatManager_Nitrogen_SpawnNitrogenFare::DropOffDistance' has a wrong offset!");

// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToNitrogenRespawnActor
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor) == 0x000004, "Wrong alignment on FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor");
static_assert(sizeof(FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor) == 0x000004, "Wrong size on FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor");
static_assert(offsetof(FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor, Param_Index) == 0x000000, "Member 'FortCheatManager_Nitrogen_TeleportToNitrogenRespawnActor::Param_Index' has a wrong offset!");

// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToNitrogenSpawnActor
// 0x0004 (0x0004 - 0x0000)
struct FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor) == 0x000004, "Wrong alignment on FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor");
static_assert(sizeof(FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor) == 0x000004, "Wrong size on FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor");
static_assert(offsetof(FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor, Param_Index) == 0x000000, "Member 'FortCheatManager_Nitrogen_TeleportToNitrogenSpawnActor::Param_Index' has a wrong offset!");

// Function NitrogenRuntime.FortCheatManager_Nitrogen.TeleportToSquadStartAtIndex
// 0x00B8 (0x00B8 - 0x0000)
struct FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_423F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortSquadStartSearchParamData         SearchParam;                                       // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 TeleportReasonString;                              // 0x00A8(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex) == 0x000008, "Wrong alignment on FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex");
static_assert(sizeof(FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex) == 0x0000B8, "Wrong size on FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex");
static_assert(offsetof(FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex, Param_Index) == 0x000000, "Member 'FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex, SearchParam) == 0x000008, "Member 'FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex::SearchParam' has a wrong offset!");
static_assert(offsetof(FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex, TeleportReasonString) == 0x0000A8, "Member 'FortCheatManager_Nitrogen_TeleportToSquadStartAtIndex::TeleportReasonString' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.DropOffPointOverlapped
// 0x0010 (0x0010 - 0x0000)
struct NitrogenFare_DropOffPointOverlapped final
{
public:
	class AAthenaTraversePoint*                   TraversePoint;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFare_DropOffPointOverlapped) == 0x000008, "Wrong alignment on NitrogenFare_DropOffPointOverlapped");
static_assert(sizeof(NitrogenFare_DropOffPointOverlapped) == 0x000010, "Wrong size on NitrogenFare_DropOffPointOverlapped");
static_assert(offsetof(NitrogenFare_DropOffPointOverlapped, TraversePoint) == 0x000000, "Member 'NitrogenFare_DropOffPointOverlapped::TraversePoint' has a wrong offset!");
static_assert(offsetof(NitrogenFare_DropOffPointOverlapped, PlayerState) == 0x000008, "Member 'NitrogenFare_DropOffPointOverlapped::PlayerState' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.OnVehicleDestroyed
// 0x0008 (0x0008 - 0x0000)
struct NitrogenFare_OnVehicleDestroyed final
{
public:
	class AFortDagwoodVehicle*                    DestroyedVehicle;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFare_OnVehicleDestroyed) == 0x000008, "Wrong alignment on NitrogenFare_OnVehicleDestroyed");
static_assert(sizeof(NitrogenFare_OnVehicleDestroyed) == 0x000008, "Wrong size on NitrogenFare_OnVehicleDestroyed");
static_assert(offsetof(NitrogenFare_OnVehicleDestroyed, DestroyedVehicle) == 0x000000, "Member 'NitrogenFare_OnVehicleDestroyed::DestroyedVehicle' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.OnVehicleDriverChanged
// 0x0010 (0x0010 - 0x0000)
struct NitrogenFare_OnVehicleDriverChanged final
{
public:
	const class AFortPlayerControllerAthena*      NewDriver;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFare_OnVehicleDriverChanged) == 0x000008, "Wrong alignment on NitrogenFare_OnVehicleDriverChanged");
static_assert(sizeof(NitrogenFare_OnVehicleDriverChanged) == 0x000010, "Wrong size on NitrogenFare_OnVehicleDriverChanged");
static_assert(offsetof(NitrogenFare_OnVehicleDriverChanged, NewDriver) == 0x000000, "Member 'NitrogenFare_OnVehicleDriverChanged::NewDriver' has a wrong offset!");
static_assert(offsetof(NitrogenFare_OnVehicleDriverChanged, Vehicle) == 0x000008, "Member 'NitrogenFare_OnVehicleDriverChanged::Vehicle' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.OnVehicleEndPlay
// 0x0010 (0x0010 - 0x0000)
struct NitrogenFare_OnVehicleEndPlay final
{
public:
	class AActor*                                 DestroyedVehicle;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4244[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NitrogenFare_OnVehicleEndPlay) == 0x000008, "Wrong alignment on NitrogenFare_OnVehicleEndPlay");
static_assert(sizeof(NitrogenFare_OnVehicleEndPlay) == 0x000010, "Wrong size on NitrogenFare_OnVehicleEndPlay");
static_assert(offsetof(NitrogenFare_OnVehicleEndPlay, DestroyedVehicle) == 0x000000, "Member 'NitrogenFare_OnVehicleEndPlay::DestroyedVehicle' has a wrong offset!");
static_assert(offsetof(NitrogenFare_OnVehicleEndPlay, EndPlayReason) == 0x000008, "Member 'NitrogenFare_OnVehicleEndPlay::EndPlayReason' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.PickUpPointOverlapped
// 0x0010 (0x0010 - 0x0000)
struct NitrogenFare_PickUpPointOverlapped final
{
public:
	class AAthenaTraversePoint*                   TraversePoint;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFortPlayerStateAthena*                 PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFare_PickUpPointOverlapped) == 0x000008, "Wrong alignment on NitrogenFare_PickUpPointOverlapped");
static_assert(sizeof(NitrogenFare_PickUpPointOverlapped) == 0x000010, "Wrong size on NitrogenFare_PickUpPointOverlapped");
static_assert(offsetof(NitrogenFare_PickUpPointOverlapped, TraversePoint) == 0x000000, "Member 'NitrogenFare_PickUpPointOverlapped::TraversePoint' has a wrong offset!");
static_assert(offsetof(NitrogenFare_PickUpPointOverlapped, PlayerState) == 0x000008, "Member 'NitrogenFare_PickUpPointOverlapped::PlayerState' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFare.GetRewardValue
// 0x0004 (0x0004 - 0x0000)
struct NitrogenFare_GetRewardValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFare_GetRewardValue) == 0x000004, "Wrong alignment on NitrogenFare_GetRewardValue");
static_assert(sizeof(NitrogenFare_GetRewardValue) == 0x000004, "Wrong size on NitrogenFare_GetRewardValue");
static_assert(offsetof(NitrogenFare_GetRewardValue, ReturnValue) == 0x000000, "Member 'NitrogenFare_GetRewardValue::ReturnValue' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPickup.OnNitrogenPickupOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct NitrogenPickup_OnNitrogenPickupOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4248[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_4249[0x4];                                     // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NitrogenPickup_OnNitrogenPickupOverlapped) == 0x000008, "Wrong alignment on NitrogenPickup_OnNitrogenPickupOverlapped");
static_assert(sizeof(NitrogenPickup_OnNitrogenPickupOverlapped) == 0x0000B0, "Wrong size on NitrogenPickup_OnNitrogenPickupOverlapped");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, OverlappedComponent) == 0x000000, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, OtherActor) == 0x000008, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, OtherComp) == 0x000010, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, OtherBodyIndex) == 0x000018, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, bFromSweep) == 0x00001C, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(NitrogenPickup_OnNitrogenPickupOverlapped, SweepResult) == 0x000020, "Member 'NitrogenPickup_OnNitrogenPickupOverlapped::SweepResult' has a wrong offset!");

// Function NitrogenRuntime.NitrogenFareValueIndicator.OnFareIndicatorValueChanged
// 0x0001 (0x0001 - 0x0000)
struct NitrogenFareValueIndicator_OnFareIndicatorValueChanged final
{
public:
	uint8                                         NewIndicatorValue;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenFareValueIndicator_OnFareIndicatorValueChanged) == 0x000001, "Wrong alignment on NitrogenFareValueIndicator_OnFareIndicatorValueChanged");
static_assert(sizeof(NitrogenFareValueIndicator_OnFareIndicatorValueChanged) == 0x000001, "Wrong size on NitrogenFareValueIndicator_OnFareIndicatorValueChanged");
static_assert(offsetof(NitrogenFareValueIndicator_OnFareIndicatorValueChanged, NewIndicatorValue) == 0x000000, "Member 'NitrogenFareValueIndicator_OnFareIndicatorValueChanged::NewIndicatorValue' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPassengerPawnComponent.ClientHandleFinishedCharacterCustomization
// 0x0008 (0x0008 - 0x0000)
struct NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization final
{
public:
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization) == 0x000008, "Wrong alignment on NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization");
static_assert(sizeof(NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization) == 0x000008, "Wrong size on NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization");
static_assert(offsetof(NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization, PlayerPawn) == 0x000000, "Member 'NitrogenPassengerPawnComponent_ClientHandleFinishedCharacterCustomization::PlayerPawn' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPlayerComponent.ClientHandleLoadingScreenStateChanged
// 0x0028 (0x0028 - 0x0000)
struct NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged final
{
public:
	class AFortPlayerControllerAthena*            PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLoadScreen;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4257[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   HUDReasonText;                                     // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged) == 0x000008, "Wrong alignment on NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged");
static_assert(sizeof(NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged) == 0x000028, "Wrong size on NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged");
static_assert(offsetof(NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged, PlayerController) == 0x000000, "Member 'NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged::PlayerController' has a wrong offset!");
static_assert(offsetof(NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged, bEnableLoadScreen) == 0x000008, "Member 'NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged::bEnableLoadScreen' has a wrong offset!");
static_assert(offsetof(NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged, HUDReasonText) == 0x000010, "Member 'NitrogenPlayerComponent_ClientHandleLoadingScreenStateChanged::HUDReasonText' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPlayerComponent.HandleVehicleDestroyedBuildingActor
// 0x0010 (0x0010 - 0x0000)
struct NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor final
{
public:
	class AFortAthenaVehicle*                     Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABuildingActor*                         BuildingActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor) == 0x000008, "Wrong alignment on NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor");
static_assert(sizeof(NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor) == 0x000010, "Wrong size on NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor");
static_assert(offsetof(NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor, Vehicle) == 0x000000, "Member 'NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor::Vehicle' has a wrong offset!");
static_assert(offsetof(NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor, BuildingActor) == 0x000008, "Member 'NitrogenPlayerComponent_HandleVehicleDestroyedBuildingActor::BuildingActor' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPlayerComponent.OnNitrogenGamePhaseChanged
// 0x0001 (0x0001 - 0x0000)
struct NitrogenPlayerComponent_OnNitrogenGamePhaseChanged final
{
public:
	ENitrogenGamePhase                            NewGamePhase;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPlayerComponent_OnNitrogenGamePhaseChanged) == 0x000001, "Wrong alignment on NitrogenPlayerComponent_OnNitrogenGamePhaseChanged");
static_assert(sizeof(NitrogenPlayerComponent_OnNitrogenGamePhaseChanged) == 0x000001, "Wrong size on NitrogenPlayerComponent_OnNitrogenGamePhaseChanged");
static_assert(offsetof(NitrogenPlayerComponent_OnNitrogenGamePhaseChanged, NewGamePhase) == 0x000000, "Member 'NitrogenPlayerComponent_OnNitrogenGamePhaseChanged::NewGamePhase' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPlayerComponent.GetDistanceFromClosestPassenger
// 0x0004 (0x0004 - 0x0000)
struct NitrogenPlayerComponent_GetDistanceFromClosestPassenger final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPlayerComponent_GetDistanceFromClosestPassenger) == 0x000004, "Wrong alignment on NitrogenPlayerComponent_GetDistanceFromClosestPassenger");
static_assert(sizeof(NitrogenPlayerComponent_GetDistanceFromClosestPassenger) == 0x000004, "Wrong size on NitrogenPlayerComponent_GetDistanceFromClosestPassenger");
static_assert(offsetof(NitrogenPlayerComponent_GetDistanceFromClosestPassenger, ReturnValue) == 0x000000, "Member 'NitrogenPlayerComponent_GetDistanceFromClosestPassenger::ReturnValue' has a wrong offset!");

// Function NitrogenRuntime.NitrogenPlayerComponent.GetDistanceFromDropOff
// 0x0004 (0x0004 - 0x0000)
struct NitrogenPlayerComponent_GetDistanceFromDropOff final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenPlayerComponent_GetDistanceFromDropOff) == 0x000004, "Wrong alignment on NitrogenPlayerComponent_GetDistanceFromDropOff");
static_assert(sizeof(NitrogenPlayerComponent_GetDistanceFromDropOff) == 0x000004, "Wrong size on NitrogenPlayerComponent_GetDistanceFromDropOff");
static_assert(offsetof(NitrogenPlayerComponent_GetDistanceFromDropOff, ReturnValue) == 0x000000, "Member 'NitrogenPlayerComponent_GetDistanceFromDropOff::ReturnValue' has a wrong offset!");

// Function NitrogenRuntime.NitrogenTraversePoint.OnClientInteracted
// 0x0001 (0x0001 - 0x0000)
struct NitrogenTraversePoint_OnClientInteracted final
{
public:
	bool                                          bOwnedByClient;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenTraversePoint_OnClientInteracted) == 0x000001, "Wrong alignment on NitrogenTraversePoint_OnClientInteracted");
static_assert(sizeof(NitrogenTraversePoint_OnClientInteracted) == 0x000001, "Wrong size on NitrogenTraversePoint_OnClientInteracted");
static_assert(offsetof(NitrogenTraversePoint_OnClientInteracted, bOwnedByClient) == 0x000000, "Member 'NitrogenTraversePoint_OnClientInteracted::bOwnedByClient' has a wrong offset!");

// Function NitrogenRuntime.NitrogenTraversePoint.OnClientVisibiltyUpdated
// 0x0001 (0x0001 - 0x0000)
struct NitrogenTraversePoint_OnClientVisibiltyUpdated final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenTraversePoint_OnClientVisibiltyUpdated) == 0x000001, "Wrong alignment on NitrogenTraversePoint_OnClientVisibiltyUpdated");
static_assert(sizeof(NitrogenTraversePoint_OnClientVisibiltyUpdated) == 0x000001, "Wrong size on NitrogenTraversePoint_OnClientVisibiltyUpdated");
static_assert(offsetof(NitrogenTraversePoint_OnClientVisibiltyUpdated, bNewHidden) == 0x000000, "Member 'NitrogenTraversePoint_OnClientVisibiltyUpdated::bNewHidden' has a wrong offset!");

// Function NitrogenRuntime.NitrogenVehicleComponent.HandleVehicleOnHit
// 0x00B0 (0x00B0 - 0x0000)
struct NitrogenVehicleComponent_HandleVehicleOnHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenVehicleComponent_HandleVehicleOnHit) == 0x000008, "Wrong alignment on NitrogenVehicleComponent_HandleVehicleOnHit");
static_assert(sizeof(NitrogenVehicleComponent_HandleVehicleOnHit) == 0x0000B0, "Wrong size on NitrogenVehicleComponent_HandleVehicleOnHit");
static_assert(offsetof(NitrogenVehicleComponent_HandleVehicleOnHit, HitComponent) == 0x000000, "Member 'NitrogenVehicleComponent_HandleVehicleOnHit::HitComponent' has a wrong offset!");
static_assert(offsetof(NitrogenVehicleComponent_HandleVehicleOnHit, OtherActor) == 0x000008, "Member 'NitrogenVehicleComponent_HandleVehicleOnHit::OtherActor' has a wrong offset!");
static_assert(offsetof(NitrogenVehicleComponent_HandleVehicleOnHit, OtherComp) == 0x000010, "Member 'NitrogenVehicleComponent_HandleVehicleOnHit::OtherComp' has a wrong offset!");
static_assert(offsetof(NitrogenVehicleComponent_HandleVehicleOnHit, NormalImpulse) == 0x000018, "Member 'NitrogenVehicleComponent_HandleVehicleOnHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(NitrogenVehicleComponent_HandleVehicleOnHit, Hit) == 0x000024, "Member 'NitrogenVehicleComponent_HandleVehicleOnHit::Hit' has a wrong offset!");

// Function NitrogenRuntime.NitrogenVehicleComponent.SetBoostFXActive
// 0x0001 (0x0001 - 0x0000)
struct NitrogenVehicleComponent_SetBoostFXActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenVehicleComponent_SetBoostFXActive) == 0x000001, "Wrong alignment on NitrogenVehicleComponent_SetBoostFXActive");
static_assert(sizeof(NitrogenVehicleComponent_SetBoostFXActive) == 0x000001, "Wrong size on NitrogenVehicleComponent_SetBoostFXActive");
static_assert(offsetof(NitrogenVehicleComponent_SetBoostFXActive, bActive) == 0x000000, "Member 'NitrogenVehicleComponent_SetBoostFXActive::bActive' has a wrong offset!");

// Function NitrogenRuntime.NitrogenVehicleComponent.TimelineBoostFXUpdate_JetFlamesHeight
// 0x0004 (0x0004 - 0x0000)
struct NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight) == 0x000004, "Wrong alignment on NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight");
static_assert(sizeof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight) == 0x000004, "Wrong size on NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight");
static_assert(offsetof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight, Value) == 0x000000, "Member 'NitrogenVehicleComponent_TimelineBoostFXUpdate_JetFlamesHeight::Value' has a wrong offset!");

// Function NitrogenRuntime.NitrogenVehicleComponent.TimelineBoostFXUpdate_JetSparksCounts
// 0x0004 (0x0004 - 0x0000)
struct NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts) == 0x000004, "Wrong alignment on NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts");
static_assert(sizeof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts) == 0x000004, "Wrong size on NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts");
static_assert(offsetof(NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts, Value) == 0x000000, "Member 'NitrogenVehicleComponent_TimelineBoostFXUpdate_JetSparksCounts::Value' has a wrong offset!");

// Function NitrogenRuntime.NitrogenVehicleComponent.IsVehicleUnderCleanupWaterDepth
// 0x0001 (0x0001 - 0x0000)
struct NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth) == 0x000001, "Wrong alignment on NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth");
static_assert(sizeof(NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth) == 0x000001, "Wrong size on NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth");
static_assert(offsetof(NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth, ReturnValue) == 0x000000, "Member 'NitrogenVehicleComponent_IsVehicleUnderCleanupWaterDepth::ReturnValue' has a wrong offset!");

}

