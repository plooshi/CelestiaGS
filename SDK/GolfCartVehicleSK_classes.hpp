#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GolfCartVehicleSK

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GolfCartVehicleSK.GolfCartVehicleSK_C
// 0x0410 (0x1D30 - 0x1920)
class AGolfCartVehicleSK_C final : public AFortAthenaGoatVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1920(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPassengerImpulseWeaponComponent_C*     ImpulseComponent_Passenger3;                       // 0x1928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPassengerImpulseWeaponComponent_C*     ImpulseComponent_Passenger2;                       // 0x1930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPassengerImpulseWeaponComponent_C*     ImpulseComponent_Passenger1;                       // 0x1938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RoofCollision;                                     // 0x1940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        GolfCart_Horn_Cue;                                 // 0x1948(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioSuspension;                      // 0x1950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_CollisionBodies;                                // 0x1958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioHandbrakeSkid;                                // 0x1968(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailRight;                                        // 0x1970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailLeft;                                         // 0x1978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBoost;                                        // 0x1980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Boost_Flames_l;                         // 0x1988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Boost_Flames_r;                         // 0x1990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Vehicle_WheelSlide;                     // 0x1998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioWind;                                         // 0x19A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_GolfCart_Vehicle_WheelDust;                      // 0x19A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCollisionAudioComponent*           FortCollisionAudioImpacts;                         // 0x19B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioScrape;                                       // 0x19B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioInAir;                                        // 0x19C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioSkid;                                         // 0x19C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioBattery;                                      // 0x19D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortVehicleAudioVoice*                 AudioMovement;                                     // 0x19D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493; // 0x19E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeline_Track1_90E359754526830779FB5495ACA1A493; // 0x19E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostTimeline__Direction_90E359754526830779FB5495ACA1A493; // 0x19E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8802[0x7];                                     // 0x19E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostTimeline;                                     // 0x19F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x19F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         RearVectorThreshold;                               // 0x1A08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AFortPickup*>                    AttachedPickups;                                   // 0x1A28(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPickup*                            FortPickup;                                        // 0x1A38(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         MaxPickups;                                        // 0x1A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentPickups;                                    // 0x1A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               ObjectReference;                                   // 0x1A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x1A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TurningAmount;                                     // 0x1A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8803[0x4];                                     // 0x1A5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CorrectiveImpulse;                                 // 0x1A68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8804[0x4];                                     // 0x1A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         RumbleMultipier;                                   // 0x1A78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinVelocityToLaunch;                               // 0x1AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxLaunchVelocity;                                 // 0x1AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchAngle;                                       // 0x1AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8805[0x4];                                     // 0x1AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchMultiplier;                                  // 0x1AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8806[0x4];                                     // 0x1ABC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         HitMinusZImpulseMultiplier;                        // 0x1AC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusLateralImpulseMultiplier;                  // 0x1AE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HitMinusMaxImpulseVelocity;                        // 0x1B00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         HealthToDestroyProp;                               // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x1B24(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x1B25(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8807[0x2];                                     // 0x1B26(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DoorMesh;                                          // 0x1B28(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x1B30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class APlayerController*                      PassengerPlayerController;                         // 0x1B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchCharacterExtraVelocity;                      // 0x1B58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LaunchCharacterVelocityScalar;                     // 0x1B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        BounceOverlapPawn;                                 // 0x1B68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  BounceOverlapController;                           // 0x1B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x1B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x1B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x1B80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x1B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x1B90(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x1BA0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Debug_NoCameraShake;                               // 0x1BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8808[0x3];                                     // 0x1BB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoostCameraOffsetLerpStart;                        // 0x1BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Boost;                                             // 0x1BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumbleValue;                                  // 0x1BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetBoostFX;                                      // 0x1BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8809[0x3];                                     // 0x1BC1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructionAngle;                                  // 0x1BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PropDamageAmount;                                  // 0x1BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_880A[0x4];                                     // 0x1BCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             OnBoostSound;                                      // 0x1BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnRoofBounceSound;                                 // 0x1BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ColorKickBoostScale;                               // 0x1BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BounceVector;                                      // 0x1BE4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ImpactLocation;                                    // 0x1BF0(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_880B[0x4];                                     // 0x1BFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ActorToDestroy;                                    // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TrailsActive;                                      // 0x1C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_880C[0x7];                                     // 0x1C09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 VehicleHitActor;                                   // 0x1C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USoundBase*>                     OnBoostIncreaseSounds;                             // 0x1C18(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAudioComponent*                        BoostIncreaseAudioComp;                            // 0x1C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UnobstructedBounceVelocity;                        // 0x1C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ObstructedBounceVelocity;                          // 0x1C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        InWaterLoop;                                       // 0x1C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x1C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_880D[0x4];                                     // 0x1C4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        HonkAudioComp;                                     // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x1C58(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	float                                         SavedHeadlightValueForMID;                         // 0x1D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x1D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostTimeValueForMID;                              // 0x1D18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitPlayerCue;                                      // 0x1D1C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitFiendCue;                                       // 0x1D24(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GolfCartVehicleSK(int32 EntryPoint);
	void SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StartDriverCameraShake();
	void StartDriverRumble();
	void StopDriverRumble();
	void OnIsSprintingChanged();
	void OnPassengerFiredImpulseWeapon();
	void BndEvt__RoofCollision_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EventOnHealthChanged();
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnStopTick();
	void ChangeOutMaterials();
	void K2_ApplyCosmeticWrap(const class UAthenaItemWrapDefinition* LoadedWrap);
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void DisableSkelmeshTickAfterBounce();
	void RemoteClientBounceEffects();
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void BoostIncrease(int32 AccumulationStepIndex);
	void Handle_Spring_Compression_Audio();
	void ReceiveBeginPlay();
	void StartBoostRumble();
	void ReverseBoostTimeline();
	void DestroyCooldown();
	void LocalPassengerADS(bool IsADS);
	void BoostCameraReverse();
	void BoostRumbleEnd();
	void UpdateBoostRumble();
	void NoShake();
	void PowerSlideEnd();
	void PowerSlideBegin();
	void EBrakeEnd();
	void EBrakeBegin();
	void BoostEnd();
	void BoostBegin();
	void OnSpringCompression();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Update_Damage_State(float Damage);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnWeaponEquipped(class AFortWeapon* NewWeapon, class AFortWeapon* PrevWeapon);
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void PedalForceFeedback();
	void DropItems();
	void AttachToCart();
	void BndEvt__Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void UpdateMovementCosmeticParameters();
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveTick(float DeltaSeconds);
	void OnCompleted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnBlendOut_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnInterrupted_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnNotifyBegin_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void OnNotifyEnd_A0C9C97A4DE010E2D38107B3519D371C(class FName NotifyName);
	void BoostTimeline__UpdateFunc();
	void BoostTimeline__FinishedFunc();
	void UserConstructionScript();
	void AttachWeaponToCart(int32 Selection);
	void PlayHapticsOnHit(float HitMagnitude);
	void OnRep_CorrectiveImpulse();
	void OnRep_ImpactLocation();
	void DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold);
	void SendHeadlightValueToMaterials(const float ParameterValue);
	void SendDamageValueToMaterials(const float ParameterValue);
	void SendBoostTimeToMaterials(const float ParameterValue);

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GolfCartVehicleSK_C">();
	}
	static class AGolfCartVehicleSK_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGolfCartVehicleSK_C>();
	}
};
static_assert(alignof(AGolfCartVehicleSK_C) == 0x000010, "Wrong alignment on AGolfCartVehicleSK_C");
static_assert(sizeof(AGolfCartVehicleSK_C) == 0x001D30, "Wrong size on AGolfCartVehicleSK_C");
static_assert(offsetof(AGolfCartVehicleSK_C, UberGraphFrame) == 0x001920, "Member 'AGolfCartVehicleSK_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpulseComponent_Passenger3) == 0x001928, "Member 'AGolfCartVehicleSK_C::ImpulseComponent_Passenger3' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpulseComponent_Passenger2) == 0x001930, "Member 'AGolfCartVehicleSK_C::ImpulseComponent_Passenger2' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpulseComponent_Passenger1) == 0x001938, "Member 'AGolfCartVehicleSK_C::ImpulseComponent_Passenger1' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, RoofCollision) == 0x001940, "Member 'AGolfCartVehicleSK_C::RoofCollision' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GolfCart_Horn_Cue) == 0x001948, "Member 'AGolfCartVehicleSK_C::GolfCart_Horn_Cue' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortCollisionAudioSuspension) == 0x001950, "Member 'AGolfCartVehicleSK_C::FortCollisionAudioSuspension' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SM_CollisionBodies) == 0x001958, "Member 'AGolfCartVehicleSK_C::SM_CollisionBodies' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OverlapVolume) == 0x001960, "Member 'AGolfCartVehicleSK_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioHandbrakeSkid) == 0x001968, "Member 'AGolfCartVehicleSK_C::AudioHandbrakeSkid' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailRight) == 0x001970, "Member 'AGolfCartVehicleSK_C::TrailRight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailLeft) == 0x001978, "Member 'AGolfCartVehicleSK_C::TrailLeft' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioBoost) == 0x001980, "Member 'AGolfCartVehicleSK_C::AudioBoost' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Boost_Flames_l) == 0x001988, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Boost_Flames_l' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Boost_Flames_r) == 0x001990, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Boost_Flames_r' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Vehicle_WheelSlide) == 0x001998, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Vehicle_WheelSlide' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioWind) == 0x0019A0, "Member 'AGolfCartVehicleSK_C::AudioWind' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, P_GolfCart_Vehicle_WheelDust) == 0x0019A8, "Member 'AGolfCartVehicleSK_C::P_GolfCart_Vehicle_WheelDust' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortCollisionAudioImpacts) == 0x0019B0, "Member 'AGolfCartVehicleSK_C::FortCollisionAudioImpacts' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioScrape) == 0x0019B8, "Member 'AGolfCartVehicleSK_C::AudioScrape' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioInAir) == 0x0019C0, "Member 'AGolfCartVehicleSK_C::AudioInAir' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioSkid) == 0x0019C8, "Member 'AGolfCartVehicleSK_C::AudioSkid' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioBattery) == 0x0019D0, "Member 'AGolfCartVehicleSK_C::AudioBattery' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AudioMovement) == 0x0019D8, "Member 'AGolfCartVehicleSK_C::AudioMovement' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493) == 0x0019E0, "Member 'AGolfCartVehicleSK_C::BoostTimeline_Rumble_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline_Track1_90E359754526830779FB5495ACA1A493) == 0x0019E4, "Member 'AGolfCartVehicleSK_C::BoostTimeline_Track1_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline__Direction_90E359754526830779FB5495ACA1A493) == 0x0019E8, "Member 'AGolfCartVehicleSK_C::BoostTimeline__Direction_90E359754526830779FB5495ACA1A493' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeline) == 0x0019F0, "Member 'AGolfCartVehicleSK_C::BoostTimeline' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnDeathSound) == 0x0019F8, "Member 'AGolfCartVehicleSK_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerPawn) == 0x001A00, "Member 'AGolfCartVehicleSK_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, RearVectorThreshold) == 0x001A08, "Member 'AGolfCartVehicleSK_C::RearVectorThreshold' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, AttachedPickups) == 0x001A28, "Member 'AGolfCartVehicleSK_C::AttachedPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FortPickup) == 0x001A38, "Member 'AGolfCartVehicleSK_C::FortPickup' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MaxPickups) == 0x001A40, "Member 'AGolfCartVehicleSK_C::MaxPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CurrentPickups) == 0x001A44, "Member 'AGolfCartVehicleSK_C::CurrentPickups' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ObjectReference) == 0x001A48, "Member 'AGolfCartVehicleSK_C::ObjectReference' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DrivingPlayerController) == 0x001A50, "Member 'AGolfCartVehicleSK_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TurningAmount) == 0x001A58, "Member 'AGolfCartVehicleSK_C::TurningAmount' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DriverPawn) == 0x001A60, "Member 'AGolfCartVehicleSK_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CorrectiveImpulse) == 0x001A68, "Member 'AGolfCartVehicleSK_C::CorrectiveImpulse' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, RumbleMultipier) == 0x001A78, "Member 'AGolfCartVehicleSK_C::RumbleMultipier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LastDriver) == 0x001A98, "Member 'AGolfCartVehicleSK_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MinVelocityToLaunch) == 0x001AA0, "Member 'AGolfCartVehicleSK_C::MinVelocityToLaunch' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, MaxLaunchVelocity) == 0x001AA4, "Member 'AGolfCartVehicleSK_C::MaxLaunchVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchAngle) == 0x001AA8, "Member 'AGolfCartVehicleSK_C::LaunchAngle' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LastHitPlayer) == 0x001AB0, "Member 'AGolfCartVehicleSK_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchMultiplier) == 0x001AB8, "Member 'AGolfCartVehicleSK_C::LaunchMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusZImpulseMultiplier) == 0x001AC0, "Member 'AGolfCartVehicleSK_C::HitMinusZImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusLateralImpulseMultiplier) == 0x001AE0, "Member 'AGolfCartVehicleSK_C::HitMinusLateralImpulseMultiplier' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitMinusMaxImpulseVelocity) == 0x001B00, "Member 'AGolfCartVehicleSK_C::HitMinusMaxImpulseVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HealthToDestroyProp) == 0x001B20, "Member 'AGolfCartVehicleSK_C::HealthToDestroyProp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, IgnoreHitLastDriver) == 0x001B24, "Member 'AGolfCartVehicleSK_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerIsInstigator) == 0x001B25, "Member 'AGolfCartVehicleSK_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DoorMesh) == 0x001B28, "Member 'AGolfCartVehicleSK_C::DoorMesh' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, CanLaunchPlayer) == 0x001B30, "Member 'AGolfCartVehicleSK_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PassengerPlayerController) == 0x001B50, "Member 'AGolfCartVehicleSK_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchCharacterExtraVelocity) == 0x001B58, "Member 'AGolfCartVehicleSK_C::LaunchCharacterExtraVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchCharacterVelocityScalar) == 0x001B64, "Member 'AGolfCartVehicleSK_C::LaunchCharacterVelocityScalar' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceOverlapPawn) == 0x001B68, "Member 'AGolfCartVehicleSK_C::BounceOverlapPawn' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceOverlapController) == 0x001B70, "Member 'AGolfCartVehicleSK_C::BounceOverlapController' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, FinalBounceJumpHeight) == 0x001B78, "Member 'AGolfCartVehicleSK_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceHeight) == 0x001B7C, "Member 'AGolfCartVehicleSK_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GE_PlayerLaunched) == 0x001B80, "Member 'AGolfCartVehicleSK_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, LaunchForceFeedback) == 0x001B88, "Member 'AGolfCartVehicleSK_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Passengers) == 0x001B90, "Member 'AGolfCartVehicleSK_C::Passengers' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceIgnoreList) == 0x001BA0, "Member 'AGolfCartVehicleSK_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Debug_NoCameraShake) == 0x001BB0, "Member 'AGolfCartVehicleSK_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostCameraOffsetLerpStart) == 0x001BB4, "Member 'AGolfCartVehicleSK_C::BoostCameraOffsetLerpStart' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, Boost) == 0x001BB8, "Member 'AGolfCartVehicleSK_C::Boost' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostRumbleValue) == 0x001BBC, "Member 'AGolfCartVehicleSK_C::BoostRumbleValue' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ResetBoostFX) == 0x001BC0, "Member 'AGolfCartVehicleSK_C::ResetBoostFX' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, DestructionAngle) == 0x001BC4, "Member 'AGolfCartVehicleSK_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, PropDamageAmount) == 0x001BC8, "Member 'AGolfCartVehicleSK_C::PropDamageAmount' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnBoostSound) == 0x001BD0, "Member 'AGolfCartVehicleSK_C::OnBoostSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnRoofBounceSound) == 0x001BD8, "Member 'AGolfCartVehicleSK_C::OnRoofBounceSound' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ColorKickBoostScale) == 0x001BE0, "Member 'AGolfCartVehicleSK_C::ColorKickBoostScale' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BounceVector) == 0x001BE4, "Member 'AGolfCartVehicleSK_C::BounceVector' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ImpactLocation) == 0x001BF0, "Member 'AGolfCartVehicleSK_C::ImpactLocation' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ActorToDestroy) == 0x001C00, "Member 'AGolfCartVehicleSK_C::ActorToDestroy' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, TrailsActive) == 0x001C08, "Member 'AGolfCartVehicleSK_C::TrailsActive' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, VehicleHitActor) == 0x001C10, "Member 'AGolfCartVehicleSK_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, OnBoostIncreaseSounds) == 0x001C18, "Member 'AGolfCartVehicleSK_C::OnBoostIncreaseSounds' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostIncreaseAudioComp) == 0x001C28, "Member 'AGolfCartVehicleSK_C::BoostIncreaseAudioComp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, InWaterFX) == 0x001C30, "Member 'AGolfCartVehicleSK_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, UnobstructedBounceVelocity) == 0x001C38, "Member 'AGolfCartVehicleSK_C::UnobstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, ObstructedBounceVelocity) == 0x001C3C, "Member 'AGolfCartVehicleSK_C::ObstructedBounceVelocity' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, InWaterLoop) == 0x001C40, "Member 'AGolfCartVehicleSK_C::InWaterLoop' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, EngineSoundMaxDistance) == 0x001C48, "Member 'AGolfCartVehicleSK_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HonkAudioComp) == 0x001C50, "Member 'AGolfCartVehicleSK_C::HonkAudioComp' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, GCParamsEmpty) == 0x001C58, "Member 'AGolfCartVehicleSK_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SavedHeadlightValueForMID) == 0x001D10, "Member 'AGolfCartVehicleSK_C::SavedHeadlightValueForMID' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, SavedDamageValueForMID) == 0x001D14, "Member 'AGolfCartVehicleSK_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, BoostTimeValueForMID) == 0x001D18, "Member 'AGolfCartVehicleSK_C::BoostTimeValueForMID' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitPlayerCue) == 0x001D1C, "Member 'AGolfCartVehicleSK_C::HitPlayerCue' has a wrong offset!");
static_assert(offsetof(AGolfCartVehicleSK_C, HitFiendCue) == 0x001D24, "Member 'AGolfCartVehicleSK_C::HitFiendCue' has a wrong offset!");

}

