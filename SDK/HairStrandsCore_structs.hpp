#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: HairStrandsCore

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum HairStrandsCore.EGroomStrandsSize
// NumValues: 0x0007
enum class EGroomStrandsSize : uint8
{
	None                                     = 0,
	Size2                                    = 2,
	Size4                                    = 4,
	Size8                                    = 8,
	Size16                                   = 16,
	Size32                                   = 32,
	EGroomStrandsSize_MAX                    = 33,
};

// Enum HairStrandsCore.EGroomNiagaraSolvers
// NumValues: 0x0005
enum class EGroomNiagaraSolvers : uint8
{
	None                                     = 0,
	CosseratRods                             = 2,
	AngularSprings                           = 4,
	CustomSolver                             = 8,
	EGroomNiagaraSolvers_MAX                 = 9,
};

// Enum HairStrandsCore.EGroomInterpolationType
// NumValues: 0x0005
enum class EGroomInterpolationType : uint8
{
	None                                     = 0,
	RigidTransform                           = 2,
	OffsetTransform                          = 4,
	SmoothTransform                          = 8,
	EGroomInterpolationType_MAX              = 9,
};

// Enum HairStrandsCore.EGroomInterpolationWeight
// NumValues: 0x0005
enum class EGroomInterpolationWeight : uint8
{
	Parametric                               = 0,
	Root                                     = 1,
	Index                                    = 2,
	Unknown                                  = 3,
	EGroomInterpolationWeight_MAX            = 4,
};

// Enum HairStrandsCore.EGroomInterpolationQuality
// NumValues: 0x0005
enum class EGroomInterpolationQuality : uint8
{
	Low                                      = 0,
	Medium                                   = 1,
	High                                     = 2,
	Unknown                                  = 3,
	EGroomInterpolationQuality_MAX           = 4,
};

// ScriptStruct HairStrandsCore.GoomBindingGroupInfo
// 0x0010 (0x0010 - 0x0000)
struct FGoomBindingGroupInfo final
{
public:
	int32                                         RenRootCount;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenLODCount;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimRootCount;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimLODCount;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGoomBindingGroupInfo) == 0x000004, "Wrong alignment on FGoomBindingGroupInfo");
static_assert(sizeof(FGoomBindingGroupInfo) == 0x000010, "Wrong size on FGoomBindingGroupInfo");
static_assert(offsetof(FGoomBindingGroupInfo, RenRootCount) == 0x000000, "Member 'FGoomBindingGroupInfo::RenRootCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, RenLODCount) == 0x000004, "Member 'FGoomBindingGroupInfo::RenLODCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, SimRootCount) == 0x000008, "Member 'FGoomBindingGroupInfo::SimRootCount' has a wrong offset!");
static_assert(offsetof(FGoomBindingGroupInfo, SimLODCount) == 0x00000C, "Member 'FGoomBindingGroupInfo::SimLODCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomBuildSettings
// 0x000C (0x000C - 0x0000)
struct FGroomBuildSettings final
{
public:
	bool                                          bOverrideGuides;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0E[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HairToGuideDensity;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomInterpolationQuality                    InterpolationQuality;                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomInterpolationWeight                     InterpolationDistance;                             // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeGuide;                                   // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUniqueGuide;                                   // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomBuildSettings) == 0x000004, "Wrong alignment on FGroomBuildSettings");
static_assert(sizeof(FGroomBuildSettings) == 0x00000C, "Wrong size on FGroomBuildSettings");
static_assert(offsetof(FGroomBuildSettings, bOverrideGuides) == 0x000000, "Member 'FGroomBuildSettings::bOverrideGuides' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, HairToGuideDensity) == 0x000004, "Member 'FGroomBuildSettings::HairToGuideDensity' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, InterpolationQuality) == 0x000008, "Member 'FGroomBuildSettings::InterpolationQuality' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, InterpolationDistance) == 0x000009, "Member 'FGroomBuildSettings::InterpolationDistance' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, bRandomizeGuide) == 0x00000A, "Member 'FGroomBuildSettings::bRandomizeGuide' has a wrong offset!");
static_assert(offsetof(FGroomBuildSettings, bUseUniqueGuide) == 0x00000B, "Member 'FGroomBuildSettings::bUseUniqueGuide' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupInfo
// 0x0020 (0x0020 - 0x0000)
struct FHairGroupInfo final
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCurves;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGuides;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGroomBuildSettings                    ImportSettings;                                    // 0x000C(0x000C)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupInfo) == 0x000008, "Wrong alignment on FHairGroupInfo");
static_assert(sizeof(FHairGroupInfo) == 0x000020, "Wrong size on FHairGroupInfo");
static_assert(offsetof(FHairGroupInfo, GroupID) == 0x000000, "Member 'FHairGroupInfo::GroupID' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumCurves) == 0x000004, "Member 'FHairGroupInfo::NumCurves' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, NumGuides) == 0x000008, "Member 'FHairGroupInfo::NumGuides' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, ImportSettings) == 0x00000C, "Member 'FHairGroupInfo::ImportSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupInfo, Material) == 0x000018, "Member 'FHairGroupInfo::Material' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairSolverSettings
// 0x0038 (0x0038 - 0x0000)
struct FHairSolverSettings final
{
public:
	bool                                          EnableSimulation;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGroomNiagaraSolvers                          NiagaraSolver;                                     // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0F[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          CustomSystem;                                      // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubSteps;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IterationCount;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairSolverSettings) == 0x000008, "Wrong alignment on FHairSolverSettings");
static_assert(sizeof(FHairSolverSettings) == 0x000038, "Wrong size on FHairSolverSettings");
static_assert(offsetof(FHairSolverSettings, EnableSimulation) == 0x000000, "Member 'FHairSolverSettings::EnableSimulation' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, NiagaraSolver) == 0x000001, "Member 'FHairSolverSettings::NiagaraSolver' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, CustomSystem) == 0x000008, "Member 'FHairSolverSettings::CustomSystem' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, SubSteps) == 0x000030, "Member 'FHairSolverSettings::SubSteps' has a wrong offset!");
static_assert(offsetof(FHairSolverSettings, IterationCount) == 0x000034, "Member 'FHairSolverSettings::IterationCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairExternalForces
// 0x001C (0x001C - 0x0000)
struct FHairExternalForces final
{
public:
	struct FVector                                GravityVector;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirDrag;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AirVelocity;                                       // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairExternalForces) == 0x000004, "Wrong alignment on FHairExternalForces");
static_assert(sizeof(FHairExternalForces) == 0x00001C, "Wrong size on FHairExternalForces");
static_assert(offsetof(FHairExternalForces, GravityVector) == 0x000000, "Member 'FHairExternalForces::GravityVector' has a wrong offset!");
static_assert(offsetof(FHairExternalForces, AirDrag) == 0x00000C, "Member 'FHairExternalForces::AirDrag' has a wrong offset!");
static_assert(offsetof(FHairExternalForces, AirVelocity) == 0x000010, "Member 'FHairExternalForces::AirVelocity' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairBendConstraint
// 0x0098 (0x0098 - 0x0000)
struct FHairBendConstraint final
{
public:
	bool                                          SolveBend;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectBend;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A10[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BendDamping;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BendStiffness;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A11[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     BendScale;                                         // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairBendConstraint) == 0x000008, "Wrong alignment on FHairBendConstraint");
static_assert(sizeof(FHairBendConstraint) == 0x000098, "Wrong size on FHairBendConstraint");
static_assert(offsetof(FHairBendConstraint, SolveBend) == 0x000000, "Member 'FHairBendConstraint::SolveBend' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, ProjectBend) == 0x000001, "Member 'FHairBendConstraint::ProjectBend' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendDamping) == 0x000004, "Member 'FHairBendConstraint::BendDamping' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendStiffness) == 0x000008, "Member 'FHairBendConstraint::BendStiffness' has a wrong offset!");
static_assert(offsetof(FHairBendConstraint, BendScale) == 0x000010, "Member 'FHairBendConstraint::BendScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairStretchConstraint
// 0x0098 (0x0098 - 0x0000)
struct FHairStretchConstraint final
{
public:
	bool                                          SolveStretch;                                      // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectStretch;                                    // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A12[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StretchDamping;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StretchStiffness;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A13[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     StretchScale;                                      // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairStretchConstraint) == 0x000008, "Wrong alignment on FHairStretchConstraint");
static_assert(sizeof(FHairStretchConstraint) == 0x000098, "Wrong size on FHairStretchConstraint");
static_assert(offsetof(FHairStretchConstraint, SolveStretch) == 0x000000, "Member 'FHairStretchConstraint::SolveStretch' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, ProjectStretch) == 0x000001, "Member 'FHairStretchConstraint::ProjectStretch' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchDamping) == 0x000004, "Member 'FHairStretchConstraint::StretchDamping' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchStiffness) == 0x000008, "Member 'FHairStretchConstraint::StretchStiffness' has a wrong offset!");
static_assert(offsetof(FHairStretchConstraint, StretchScale) == 0x000010, "Member 'FHairStretchConstraint::StretchScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairCollisionConstraint
// 0x00A8 (0x00A8 - 0x0000)
struct FHairCollisionConstraint final
{
public:
	bool                                          SolveCollision;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProjectCollision;                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A14[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaticFriction;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KineticFriction;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsViscosity;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             GridDimension;                                     // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionRadius;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     RadiusScale;                                       // 0x0020(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairCollisionConstraint) == 0x000008, "Wrong alignment on FHairCollisionConstraint");
static_assert(sizeof(FHairCollisionConstraint) == 0x0000A8, "Wrong size on FHairCollisionConstraint");
static_assert(offsetof(FHairCollisionConstraint, SolveCollision) == 0x000000, "Member 'FHairCollisionConstraint::SolveCollision' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, ProjectCollision) == 0x000001, "Member 'FHairCollisionConstraint::ProjectCollision' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, StaticFriction) == 0x000004, "Member 'FHairCollisionConstraint::StaticFriction' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, KineticFriction) == 0x000008, "Member 'FHairCollisionConstraint::KineticFriction' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, StrandsViscosity) == 0x00000C, "Member 'FHairCollisionConstraint::StrandsViscosity' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, GridDimension) == 0x000010, "Member 'FHairCollisionConstraint::GridDimension' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, CollisionRadius) == 0x00001C, "Member 'FHairCollisionConstraint::CollisionRadius' has a wrong offset!");
static_assert(offsetof(FHairCollisionConstraint, RadiusScale) == 0x000020, "Member 'FHairCollisionConstraint::RadiusScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairMaterialConstraints
// 0x01D8 (0x01D8 - 0x0000)
struct FHairMaterialConstraints final
{
public:
	struct FHairBendConstraint                    BendConstraint;                                    // 0x0000(0x0098)(Edit, NativeAccessSpecifierPublic)
	struct FHairStretchConstraint                 StretchConstraint;                                 // 0x0098(0x0098)(Edit, NativeAccessSpecifierPublic)
	struct FHairCollisionConstraint               CollisionConstraint;                               // 0x0130(0x00A8)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairMaterialConstraints) == 0x000008, "Wrong alignment on FHairMaterialConstraints");
static_assert(sizeof(FHairMaterialConstraints) == 0x0001D8, "Wrong size on FHairMaterialConstraints");
static_assert(offsetof(FHairMaterialConstraints, BendConstraint) == 0x000000, "Member 'FHairMaterialConstraints::BendConstraint' has a wrong offset!");
static_assert(offsetof(FHairMaterialConstraints, StretchConstraint) == 0x000098, "Member 'FHairMaterialConstraints::StretchConstraint' has a wrong offset!");
static_assert(offsetof(FHairMaterialConstraints, CollisionConstraint) == 0x000130, "Member 'FHairMaterialConstraints::CollisionConstraint' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairStrandsParameters
// 0x0098 (0x0098 - 0x0000)
struct FHairStrandsParameters final
{
public:
	EGroomStrandsSize                             StrandsSize;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A15[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrandsDensity;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsSmoothing;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrandsThickness;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     ThicknessScale;                                    // 0x0010(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairStrandsParameters) == 0x000008, "Wrong alignment on FHairStrandsParameters");
static_assert(sizeof(FHairStrandsParameters) == 0x000098, "Wrong size on FHairStrandsParameters");
static_assert(offsetof(FHairStrandsParameters, StrandsSize) == 0x000000, "Member 'FHairStrandsParameters::StrandsSize' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsDensity) == 0x000004, "Member 'FHairStrandsParameters::StrandsDensity' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsSmoothing) == 0x000008, "Member 'FHairStrandsParameters::StrandsSmoothing' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, StrandsThickness) == 0x00000C, "Member 'FHairStrandsParameters::StrandsThickness' has a wrong offset!");
static_assert(offsetof(FHairStrandsParameters, ThicknessScale) == 0x000010, "Member 'FHairStrandsParameters::ThicknessScale' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupsPhysics
// 0x02C8 (0x02C8 - 0x0000)
struct FHairGroupsPhysics final
{
public:
	struct FHairSolverSettings                    SolverSettings;                                    // 0x0000(0x0038)(Edit, NativeAccessSpecifierPublic)
	struct FHairExternalForces                    ExternalForces;                                    // 0x0038(0x001C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A16[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHairMaterialConstraints               MaterialConstraints;                               // 0x0058(0x01D8)(Edit, NativeAccessSpecifierPublic)
	struct FHairStrandsParameters                 StrandsParameters;                                 // 0x0230(0x0098)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHairGroupsPhysics) == 0x000008, "Wrong alignment on FHairGroupsPhysics");
static_assert(sizeof(FHairGroupsPhysics) == 0x0002C8, "Wrong size on FHairGroupsPhysics");
static_assert(offsetof(FHairGroupsPhysics, SolverSettings) == 0x000000, "Member 'FHairGroupsPhysics::SolverSettings' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, ExternalForces) == 0x000038, "Member 'FHairGroupsPhysics::ExternalForces' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, MaterialConstraints) == 0x000058, "Member 'FHairGroupsPhysics::MaterialConstraints' has a wrong offset!");
static_assert(offsetof(FHairGroupsPhysics, StrandsParameters) == 0x000230, "Member 'FHairGroupsPhysics::StrandsParameters' has a wrong offset!");

// ScriptStruct HairStrandsCore.HairGroupDesc
// 0x0030 (0x0030 - 0x0000)
struct FHairGroupDesc final
{
public:
	int32                                         HairCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairLength;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairWidth;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRootScale;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairTipScale;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairClipLength;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairShadowDensity;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HairRaytracingRadiusScale;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LodAverageVertexPerPixel;                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LodBias;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStableRasterization;                           // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScatterSceneLighting;                             // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A17[0x2];                                     // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHairGroupDesc) == 0x000004, "Wrong alignment on FHairGroupDesc");
static_assert(sizeof(FHairGroupDesc) == 0x000030, "Wrong size on FHairGroupDesc");
static_assert(offsetof(FHairGroupDesc, HairCount) == 0x000000, "Member 'FHairGroupDesc::HairCount' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, GuideCount) == 0x000004, "Member 'FHairGroupDesc::GuideCount' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairLength) == 0x000008, "Member 'FHairGroupDesc::HairLength' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairWidth) == 0x00000C, "Member 'FHairGroupDesc::HairWidth' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRootScale) == 0x000010, "Member 'FHairGroupDesc::HairRootScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairTipScale) == 0x000014, "Member 'FHairGroupDesc::HairTipScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairClipLength) == 0x000018, "Member 'FHairGroupDesc::HairClipLength' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairShadowDensity) == 0x00001C, "Member 'FHairGroupDesc::HairShadowDensity' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, HairRaytracingRadiusScale) == 0x000020, "Member 'FHairGroupDesc::HairRaytracingRadiusScale' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, LodAverageVertexPerPixel) == 0x000024, "Member 'FHairGroupDesc::LodAverageVertexPerPixel' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, LodBias) == 0x000028, "Member 'FHairGroupDesc::LodBias' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bUseStableRasterization) == 0x00002C, "Member 'FHairGroupDesc::bUseStableRasterization' has a wrong offset!");
static_assert(offsetof(FHairGroupDesc, bScatterSceneLighting) == 0x00002D, "Member 'FHairGroupDesc::bScatterSceneLighting' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomHairGroupPreview
// 0x000C (0x000C - 0x0000)
struct FGroomHairGroupPreview final
{
public:
	int32                                         GroupID;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurveCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GuideCount;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomHairGroupPreview) == 0x000004, "Wrong alignment on FGroomHairGroupPreview");
static_assert(sizeof(FGroomHairGroupPreview) == 0x00000C, "Wrong size on FGroomHairGroupPreview");
static_assert(offsetof(FGroomHairGroupPreview, GroupID) == 0x000000, "Member 'FGroomHairGroupPreview::GroupID' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, CurveCount) == 0x000004, "Member 'FGroomHairGroupPreview::CurveCount' has a wrong offset!");
static_assert(offsetof(FGroomHairGroupPreview, GuideCount) == 0x000008, "Member 'FGroomHairGroupPreview::GuideCount' has a wrong offset!");

// ScriptStruct HairStrandsCore.GroomConversionSettings
// 0x0018 (0x0018 - 0x0000)
struct FGroomConversionSettings final
{
public:
	struct FVector                                Rotation;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGroomConversionSettings) == 0x000004, "Wrong alignment on FGroomConversionSettings");
static_assert(sizeof(FGroomConversionSettings) == 0x000018, "Wrong size on FGroomConversionSettings");
static_assert(offsetof(FGroomConversionSettings, Rotation) == 0x000000, "Member 'FGroomConversionSettings::Rotation' has a wrong offset!");
static_assert(offsetof(FGroomConversionSettings, Scale) == 0x00000C, "Member 'FGroomConversionSettings::Scale' has a wrong offset!");

}

