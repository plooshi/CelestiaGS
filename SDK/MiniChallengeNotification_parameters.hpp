#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MiniChallengeNotification

#include "Basic.hpp"


namespace SDK::Params
{

// Function MiniChallengeNotification.MiniChallengeNotification_C.ExecuteUbergraph_MiniChallengeNotification
// 0x0068 (0x0068 - 0x0000)
struct MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_709F[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMiniChallengeEntry_C*                  K2Node_DynamicCast_AsMini_Challenge_Entry;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70A0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_70A1[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMiniChallengeEntry_C*                  K2Node_DynamicCast_AsMini_Challenge_Entry_1;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70A2[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification) == 0x000008, "Wrong alignment on MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification");
static_assert(sizeof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification) == 0x000068, "Wrong size on MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, EntryPoint) == 0x000000, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::EntryPoint' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_DynamicCast_AsMini_Challenge_Entry) == 0x000018, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_DynamicCast_AsMini_Challenge_Entry' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, CallFunc_PlayAnimationForward_ReturnValue) == 0x000038, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000040, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_DynamicCast_AsMini_Challenge_Entry_1) == 0x000048, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_DynamicCast_AsMini_Challenge_Entry_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification, K2Node_CreateDelegate_OutputDelegate_2) == 0x000054, "Member 'MiniChallengeNotification_C_ExecuteUbergraph_MiniChallengeNotification::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");

}

