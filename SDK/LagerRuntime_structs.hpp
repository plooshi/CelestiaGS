#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LagerRuntime

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct LagerRuntime.FortAthenaLivingWorldCategory
// 0x0050 (0x0058 - 0x0008)
struct FFortAthenaLivingWorldCategory final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UDataTable>              EventTable;                                        // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  RequirePlaylistTags;                               // 0x0038(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldCategory) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldCategory");
static_assert(sizeof(FFortAthenaLivingWorldCategory) == 0x000058, "Wrong size on FFortAthenaLivingWorldCategory");
static_assert(offsetof(FFortAthenaLivingWorldCategory, EventTable) == 0x000008, "Member 'FFortAthenaLivingWorldCategory::EventTable' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, MaxCount) == 0x000030, "Member 'FFortAthenaLivingWorldCategory::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, Weight) == 0x000034, "Member 'FFortAthenaLivingWorldCategory::Weight' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldCategory, RequirePlaylistTags) == 0x000038, "Member 'FFortAthenaLivingWorldCategory::RequirePlaylistTags' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEvent
// 0x0058 (0x0060 - 0x0008)
struct FFortAthenaLivingWorldEvent final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UFortAthenaLivingWorldEventData> EventData;                                         // 0x0008(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Weight;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinRespawnTime;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRespawnTime;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  RequirePlaylistTags;                               // 0x0040(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFortAthenaLivingWorldEvent) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEvent");
static_assert(sizeof(FFortAthenaLivingWorldEvent) == 0x000060, "Wrong size on FFortAthenaLivingWorldEvent");
static_assert(offsetof(FFortAthenaLivingWorldEvent, EventData) == 0x000008, "Member 'FFortAthenaLivingWorldEvent::EventData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxCount) == 0x000030, "Member 'FFortAthenaLivingWorldEvent::MaxCount' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, Weight) == 0x000034, "Member 'FFortAthenaLivingWorldEvent::Weight' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MinRespawnTime) == 0x000038, "Member 'FFortAthenaLivingWorldEvent::MinRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, MaxRespawnTime) == 0x00003C, "Member 'FFortAthenaLivingWorldEvent::MaxRespawnTime' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEvent, RequirePlaylistTags) == 0x000040, "Member 'FFortAthenaLivingWorldEvent::RequirePlaylistTags' has a wrong offset!");

// ScriptStruct LagerRuntime.FortAthenaLivingWorldEventDataActorSpawnDescription
// 0x00E8 (0x00E8 - 0x0000)
struct FFortAthenaLivingWorldEventDataActorSpawnDescription final
{
public:
	TSoftClassPtr<class UClass>                   ActorClass;                                        // 0x0000(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SpawnerData;                                       // 0x0028(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SpawnerDataTagQuery;                               // 0x0050(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseProviderTagOverrides;                          // 0x0098(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_421E[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ProviderFiltersTagQueryOverride;                   // 0x00A0(0x0048)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x000008, "Wrong alignment on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(sizeof(FFortAthenaLivingWorldEventDataActorSpawnDescription) == 0x0000E8, "Wrong size on FFortAthenaLivingWorldEventDataActorSpawnDescription");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, ActorClass) == 0x000000, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::ActorClass' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnerData) == 0x000028, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, SpawnerDataTagQuery) == 0x000050, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::SpawnerDataTagQuery' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, bUseProviderTagOverrides) == 0x000098, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::bUseProviderTagOverrides' has a wrong offset!");
static_assert(offsetof(FFortAthenaLivingWorldEventDataActorSpawnDescription, ProviderFiltersTagQueryOverride) == 0x0000A0, "Member 'FFortAthenaLivingWorldEventDataActorSpawnDescription::ProviderFiltersTagQueryOverride' has a wrong offset!");

}

