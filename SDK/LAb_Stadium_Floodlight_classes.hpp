#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LAb_Stadium_Floodlight

#include "Basic.hpp"

#include "Parent_BuildingPropActor_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LAb_Stadium_Floodlight.LAb_Stadium_Floodlight_C
// 0x0028 (0x0CC8 - 0x0CA0)
class ALAb_Stadium_Floodlight_C : public AParent_BuildingPropActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_LAb_Stadium_Floodlight_C;           // 0x0CA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        StadiumLight_Hum_Loop_Cue;                         // 0x0CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Coneintensity;                                     // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               EmissiveMult;                                      // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_LAb_Stadium_Floodlight(int32 EntryPoint);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LAb_Stadium_Floodlight_C">();
	}
	static class ALAb_Stadium_Floodlight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALAb_Stadium_Floodlight_C>();
	}
};
static_assert(alignof(ALAb_Stadium_Floodlight_C) == 0x000008, "Wrong alignment on ALAb_Stadium_Floodlight_C");
static_assert(sizeof(ALAb_Stadium_Floodlight_C) == 0x000CC8, "Wrong size on ALAb_Stadium_Floodlight_C");
static_assert(offsetof(ALAb_Stadium_Floodlight_C, UberGraphFrame_LAb_Stadium_Floodlight_C) == 0x000CA0, "Member 'ALAb_Stadium_Floodlight_C::UberGraphFrame_LAb_Stadium_Floodlight_C' has a wrong offset!");
static_assert(offsetof(ALAb_Stadium_Floodlight_C, StadiumLight_Hum_Loop_Cue) == 0x000CA8, "Member 'ALAb_Stadium_Floodlight_C::StadiumLight_Hum_Loop_Cue' has a wrong offset!");
static_assert(offsetof(ALAb_Stadium_Floodlight_C, SpotLight) == 0x000CB0, "Member 'ALAb_Stadium_Floodlight_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ALAb_Stadium_Floodlight_C, Coneintensity) == 0x000CB8, "Member 'ALAb_Stadium_Floodlight_C::Coneintensity' has a wrong offset!");
static_assert(offsetof(ALAb_Stadium_Floodlight_C, EmissiveMult) == 0x000CC0, "Member 'ALAb_Stadium_Floodlight_C::EmissiveMult' has a wrong offset!");

}

