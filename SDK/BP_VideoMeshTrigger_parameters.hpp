#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VideoMeshTrigger

#include "Basic.hpp"

#include "MeshNetwork_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onReadyToPlay__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature final
{
public:
	float                                         PlayStartTime;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77CF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_VideoUID;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Param_ScreenName;                                  // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature) == 0x000028, "Wrong size on BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature, PlayStartTime) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature::PlayStartTime' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature, Param_VideoUID) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature::Param_VideoUID' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature, Param_ScreenName) == 0x000018, "Member 'BP_VideoMeshTrigger_C_OnReadyToPlay__DelegateSignature::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onStopPlayback__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature final
{
public:
	class FString                                 VideoScreen;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature, VideoScreen) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnStopPlayback__DelegateSignature::VideoScreen' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onStartWarming__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature final
{
public:
	float                                         StartWarmingTime;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77D0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_ScreenName;                                  // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature) == 0x000018, "Wrong size on BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature, StartWarmingTime) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature::StartWarmingTime' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature, Param_ScreenName) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnStartWarming__DelegateSignature::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onEnableLoopVideo__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnEnableLoopVideo__DelegateSignature::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onDisableLoopVideo__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnDisableLoopVideo__DelegateSignature::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onStopWarming__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature final
{
public:
	class FString                                 VideoScreen;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature, VideoScreen) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnStopWarming__DelegateSignature::VideoScreen' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.onSetBandwidthLimit__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         MaxBW;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature) == 0x000018, "Wrong size on BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature::Param_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature, MaxBW) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnSetBandwidthLimit__DelegateSignature::MaxBW' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.ExecuteUbergraph_BP_VideoMeshTrigger
// 0x01C8 (0x01C8 - 0x0000)
struct BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77D1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortGameStateAthena*                   K2Node_CustomEvent_GameState;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortPlaylist*                    K2Node_CustomEvent_Playlist;                       // 0x0010(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  K2Node_CustomEvent_PlaylistContextTags;            // 0x0018(0x0020)(ConstParm)
	TDelegate<void(class AFortGameStateAthena* GameState, class UFortPlaylist* Playlist, struct FGameplayTagContainer& PlaylistContextTags)> K2Node_CreateDelegate_OutputDelegate;              // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	struct FGameplayTagContainer                  Temp_struct_Variable;                              // 0x0048(0x0020)()
	class UFortPlaylist*                          Temp_object_Variable;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortGameStateAthena*                   Temp_object_Variable_1;                            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortAsyncAction_CurrentPlaylistReady*  CallFunc_PlaylistDataReadyAsync_ReturnValue;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D2[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0084(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_77D3[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_AuthorityMatchReady*   CallFunc_MatchReadyAsync_ReturnValue;              // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMeshNetworkSubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeshNetworkNodeType                          CallFunc_GetMeshNetworkNodeType_ReturnValue;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D4[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_UtcNow_ReturnValue;                       // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ScreenName_6;                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_VideoUID;                       // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ScreenName_5;                   // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen;                   // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckScreen_ThisScreen_1;                 // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetCalendarEventInformation_bIsEventActive; // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D5[0x5];                                     // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetCalendarEventInformation_TimeSinceBegin; // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_GetCalendarEventInformation_TimeUntilEnd; // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCalendarEventInformation_TimeSpanRatio; // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalMinutes_ReturnValue;              // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Fraction_ReturnValue;                     // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue_1;            // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D6[0x3];                                     // 0x011D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x012C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_77D7[0x4];                                     // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0140(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ScreenName_4;                   // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_UtcNow_ReturnValue_1;                     // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen_2;                 // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D8[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_ScreenName_3;                   // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen_3;                 // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D9[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_ScreenName_2;                   // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen_4;                 // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77DA[0x3];                                     // 0x0191(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_CustomEvent_ScreenName_1;                   // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen_5;                 // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77DB[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_ScreenName;                     // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_MaxBW;                          // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckScreen_ThisScreen_6;                 // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger");
static_assert(sizeof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger) == 0x0001C8, "Wrong size on BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, EntryPoint) == 0x000000, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_GameState) == 0x000008, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_GameState' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_Playlist) == 0x000010, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_Playlist' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_PlaylistContextTags) == 0x000018, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_PlaylistContextTags' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CreateDelegate_OutputDelegate) == 0x000038, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, Temp_struct_Variable) == 0x000048, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, Temp_object_Variable) == 0x000068, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, Temp_object_Variable_1) == 0x000070, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_PlaylistDataReadyAsync_ReturnValue) == 0x000078, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_PlaylistDataReadyAsync_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_IsValid_ReturnValue) == 0x000080, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CreateDelegate_OutputDelegate_1) == 0x000084, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_MatchReadyAsync_ReturnValue) == 0x000098, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_MatchReadyAsync_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x0000A0, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetMeshNetworkNodeType_ReturnValue) == 0x0000A8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetMeshNetworkNodeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_SwitchEnum_CmpSuccess) == 0x0000A9, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_IsValid_ReturnValue_1) == 0x0000AA, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_UtcNow_ReturnValue) == 0x0000B0, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_UtcNow_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_6) == 0x0000B8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_6' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_VideoUID) == 0x0000C8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_VideoUID' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_5) == 0x0000D8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_5' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen) == 0x0000E8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_1) == 0x0000E9, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetCalendarEventInformation_bIsEventActive) == 0x0000EA, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetCalendarEventInformation_bIsEventActive' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetCalendarEventInformation_TimeSinceBegin) == 0x0000F0, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetCalendarEventInformation_TimeSinceBegin' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetCalendarEventInformation_TimeUntilEnd) == 0x0000F8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetCalendarEventInformation_TimeUntilEnd' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetCalendarEventInformation_TimeSpanRatio) == 0x000100, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetCalendarEventInformation_TimeSpanRatio' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetTotalMinutes_ReturnValue) == 0x000104, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetTotalMinutes_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetValueAtLevel_ReturnValue) == 0x000108, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00010C, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_Fraction_ReturnValue) == 0x000110, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_Fraction_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetValueAtLevel_ReturnValue_1) == 0x000114, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetValueAtLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000118, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00011C, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000120, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000124, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000128, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CreateDelegate_OutputDelegate_2) == 0x00012C, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000140, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_4) == 0x000148, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_4' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_UtcNow_ReturnValue_1) == 0x000158, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_UtcNow_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_2) == 0x000160, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_3) == 0x000168, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_3' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_3) == 0x000178, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_3' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_2) == 0x000180, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_4) == 0x000190, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_4' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_Event_DeltaSeconds) == 0x000194, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName_1) == 0x000198, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_5) == 0x0001A8, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_5' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_ScreenName) == 0x0001B0, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, K2Node_CustomEvent_MaxBW) == 0x0001C0, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::K2Node_CustomEvent_MaxBW' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger, CallFunc_CheckScreen_ThisScreen_6) == 0x0001C4, "Member 'BP_VideoMeshTrigger_C_ExecuteUbergraph_BP_VideoMeshTrigger::CallFunc_CheckScreen_ThisScreen_6' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootSetMaxBW
// 0x0018 (0x0018 - 0x0000)
struct BP_VideoMeshTrigger_C_RootSetMaxBW final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         MaxBW;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootSetMaxBW) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootSetMaxBW");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootSetMaxBW) == 0x000018, "Wrong size on BP_VideoMeshTrigger_C_RootSetMaxBW");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootSetMaxBW, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootSetMaxBW::Param_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootSetMaxBW, MaxBW) == 0x000010, "Member 'BP_VideoMeshTrigger_C_RootSetMaxBW::MaxBW' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStopWarming
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_RootStopWarming final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootStopWarming) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootStopWarming");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootStopWarming) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_RootStopWarming");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootStopWarming, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootStopWarming::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VideoMeshTrigger_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_VideoMeshTrigger_C_ReceiveTick");
static_assert(sizeof(BP_VideoMeshTrigger_C_ReceiveTick) == 0x000004, "Wrong size on BP_VideoMeshTrigger_C_ReceiveTick");
static_assert(offsetof(BP_VideoMeshTrigger_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_VideoMeshTrigger_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootDisableLoopVideo
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_RootDisableLoopVideo final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootDisableLoopVideo) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootDisableLoopVideo");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootDisableLoopVideo) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_RootDisableLoopVideo");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootDisableLoopVideo, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootDisableLoopVideo::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootEnableLoopVideo
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_RootEnableLoopVideo final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootEnableLoopVideo) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootEnableLoopVideo");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootEnableLoopVideo) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_RootEnableLoopVideo");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootEnableLoopVideo, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootEnableLoopVideo::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStartWarming
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_RootStartWarming final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootStartWarming) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootStartWarming");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootStartWarming) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_RootStartWarming");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootStartWarming, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootStartWarming::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootStopvideo
// 0x0010 (0x0010 - 0x0000)
struct BP_VideoMeshTrigger_C_RootStopvideo final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootStopvideo) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootStopvideo");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootStopvideo) == 0x000010, "Wrong size on BP_VideoMeshTrigger_C_RootStopvideo");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootStopvideo, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootStopvideo::Param_ScreenName' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.RootPlayVideo
// 0x0020 (0x0020 - 0x0000)
struct BP_VideoMeshTrigger_C_RootPlayVideo final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Param_VideoUID;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_RootPlayVideo) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_RootPlayVideo");
static_assert(sizeof(BP_VideoMeshTrigger_C_RootPlayVideo) == 0x000020, "Wrong size on BP_VideoMeshTrigger_C_RootPlayVideo");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootPlayVideo, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_RootPlayVideo::Param_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_RootPlayVideo, Param_VideoUID) == 0x000010, "Member 'BP_VideoMeshTrigger_C_RootPlayVideo::Param_VideoUID' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnReady_0990DAD74F53D1B0866AA3BCBBD5355C
// 0x0030 (0x0030 - 0x0000)
struct BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C final
{
public:
	class AFortGameStateAthena*                   GameState;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UFortPlaylist*                    Playlist;                                          // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  PlaylistContextTags;                               // 0x0010(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C) == 0x000030, "Wrong size on BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C, GameState) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C::GameState' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C, Playlist) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C::Playlist' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C, PlaylistContextTags) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnReady_0990DAD74F53D1B0866AA3BCBBD5355C::PlaylistContextTags' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PlayUTCTime
// 0x0030 (0x0030 - 0x0000)
struct BP_VideoMeshTrigger_C_OnRep_PlayUTCTime final
{
public:
	class UMeshNetworkSubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeshNetworkNodeType                          CallFunc_GetMeshNetworkNodeType_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77DC[0x2];                                     // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DateTimeDateTime_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77DD[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_UtcNow_ReturnValue;                       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnRep_PlayUTCTime");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime) == 0x000030, "Wrong size on BP_VideoMeshTrigger_C_OnRep_PlayUTCTime");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_GetMeshNetworkNodeType_ReturnValue) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_GetMeshNetworkNodeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x00000C, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_EqualEqual_DateTimeDateTime_ReturnValue) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_EqualEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_UtcNow_ReturnValue) == 0x000018, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_UtcNow_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000020, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_GetTotalSeconds_ReturnValue) == 0x000028, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayUTCTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayUTCTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_PlayServerTimeSeconds
// 0x0080 (0x0080 - 0x0000)
struct BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds final
{
public:
	float                                         CachedServerWorldTimeSeconds;                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77DE[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77DF[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77E0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E1[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds) == 0x000080, "Wrong size on BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CachedServerWorldTimeSeconds) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CachedServerWorldTimeSeconds' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000020, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000028, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000050, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000070, "Member 'BP_VideoMeshTrigger_C_OnRep_PlayServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_StartWarmingUTCTime
// 0x0028 (0x0028 - 0x0000)
struct BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime final
{
public:
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_DateTimeDateTime_ReturnValue;  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E2[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshNetworkSubsystem*                  CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMeshNetworkNodeType                          CallFunc_GetMeshNetworkNodeType_ReturnValue;       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E3[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime) == 0x000028, "Wrong size on BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_EqualEqual_DateTimeDateTime_ReturnValue) == 0x000004, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_EqualEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_GetMeshNetworkNodeType_ReturnValue) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_GetMeshNetworkNodeType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000018, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_GetTotalSeconds_ReturnValue) == 0x000020, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingUTCTime::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_StartWarmingServerTimeSeconds
// 0x0080 (0x0080 - 0x0000)
struct BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds final
{
public:
	float                                         CachedServerWorldTimeSeconds;                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E4[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77E5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77E6[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77E7[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds) == 0x000080, "Wrong size on BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CachedServerWorldTimeSeconds) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CachedServerWorldTimeSeconds' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Conv_FloatToString_ReturnValue) == 0x000010, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000020, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue) == 0x000038, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000048, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x000058, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000060, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000070, "Member 'BP_VideoMeshTrigger_C_OnRep_StartWarmingServerTimeSeconds::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.OnRep_MaxBandwidth
// 0x0001 (0x0001 - 0x0000)
struct BP_VideoMeshTrigger_C_OnRep_MaxBandwidth final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VideoMeshTrigger_C_OnRep_MaxBandwidth) == 0x000001, "Wrong alignment on BP_VideoMeshTrigger_C_OnRep_MaxBandwidth");
static_assert(sizeof(BP_VideoMeshTrigger_C_OnRep_MaxBandwidth) == 0x000001, "Wrong size on BP_VideoMeshTrigger_C_OnRep_MaxBandwidth");
static_assert(offsetof(BP_VideoMeshTrigger_C_OnRep_MaxBandwidth, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'BP_VideoMeshTrigger_C_OnRep_MaxBandwidth::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.PrintIncomingData
// 0x0070 (0x0070 - 0x0000)
struct BP_VideoMeshTrigger_C_PrintIncomingData final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Param_VideoUID;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Command;                                           // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VideoMeshTrigger_C_PrintIncomingData) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_PrintIncomingData");
static_assert(sizeof(BP_VideoMeshTrigger_C_PrintIncomingData) == 0x000070, "Wrong size on BP_VideoMeshTrigger_C_PrintIncomingData");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::Param_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, Param_VideoUID) == 0x000010, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::Param_VideoUID' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, Command) == 0x000020, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::Command' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000050, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_PrintIncomingData, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000060, "Member 'BP_VideoMeshTrigger_C_PrintIncomingData::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");

// Function BP_VideoMeshTrigger.BP_VideoMeshTrigger_C.CheckScreen
// 0x0018 (0x0018 - 0x0000)
struct BP_VideoMeshTrigger_C_CheckScreen final
{
public:
	class FString                                 Param_ScreenName;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          ThisScreen;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_VideoMeshTrigger_C_CheckScreen) == 0x000008, "Wrong alignment on BP_VideoMeshTrigger_C_CheckScreen");
static_assert(sizeof(BP_VideoMeshTrigger_C_CheckScreen) == 0x000018, "Wrong size on BP_VideoMeshTrigger_C_CheckScreen");
static_assert(offsetof(BP_VideoMeshTrigger_C_CheckScreen, Param_ScreenName) == 0x000000, "Member 'BP_VideoMeshTrigger_C_CheckScreen::Param_ScreenName' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_CheckScreen, ThisScreen) == 0x000010, "Member 'BP_VideoMeshTrigger_C_CheckScreen::ThisScreen' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_CheckScreen, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000011, "Member 'BP_VideoMeshTrigger_C_CheckScreen::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_CheckScreen, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x000012, "Member 'BP_VideoMeshTrigger_C_CheckScreen::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_VideoMeshTrigger_C_CheckScreen, CallFunc_BooleanOR_ReturnValue) == 0x000013, "Member 'BP_VideoMeshTrigger_C_CheckScreen::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

