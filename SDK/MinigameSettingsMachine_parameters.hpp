#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MinigameSettingsMachine

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "MinigameScoringPreset_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.ExecuteUbergraph_MinigameSettingsMachine
// 0x0120 (0x0120 - 0x0000)
struct MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649C[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class AFortPlayerController*>          CallFunc_GetLocalFortPlayerControllers_ReturnValue; // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<class AFortPlayerController*>          CallFunc_GetLocalFortPlayerControllers_ReturnValue_1; // 0x0028(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_Array_Get_Item_1;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649D[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena_1; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649E[0x2];                                     // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_649F[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue_1;            // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A0[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0078(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue;  // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue;                 // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x00A8(0x0050)(ConstParm)
	bool                                          CallFunc_SetPropertyOverrides_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A1[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00FC(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x010C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine");
static_assert(sizeof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine) == 0x000120, "Wrong size on MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, EntryPoint) == 0x000000, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::EntryPoint' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, Temp_bool_IsClosed_Variable) == 0x000005, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_Conv_IntToString_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_GetLocalFortPlayerControllers_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_GetLocalFortPlayerControllers_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_GetLocalFortPlayerControllers_ReturnValue_1) == 0x000028, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_GetLocalFortPlayerControllers_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_Array_Get_Item) == 0x000038, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_Array_Get_Item_1) == 0x000040, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000048, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_DynamicCast_AsFort_Player_Controller_Athena_1) == 0x000058, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_DynamicCast_AsFort_Player_Controller_Athena_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_HasAuthority_ReturnValue) == 0x000061, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, Temp_int_Variable) == 0x000064, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000068, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000069, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, Temp_bool_Variable) == 0x00006A, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_Select_Default) == 0x00006C, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_NotEqual_IntInt_ReturnValue_1) == 0x000070, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_NotEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_MakeArray_Array) == 0x000078, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_GetOptionValueNameFromValue_ReturnValue) == 0x000088, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_GetOptionValueNameFromValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_GetOptionKey_ReturnValue) == 0x000098, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_GetOptionKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_MakeMap_Map) == 0x0000A8, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, CallFunc_SetPropertyOverrides_ReturnValue) == 0x0000F8, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::CallFunc_SetPropertyOverrides_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_CreateDelegate_OutputDelegate) == 0x0000FC, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine, K2Node_CreateDelegate_OutputDelegate_1) == 0x00010C, "Member 'MinigameSettingsMachine_C_ExecuteUbergraph_MinigameSettingsMachine::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.GetPickupSpawnLocation
// 0x0058 (0x0058 - 0x0000)
struct MinigameSettingsMachine_C_GetPickupSpawnLocation final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64A2[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorInt_ReturnValue;           // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_GetPickupSpawnLocation) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_GetPickupSpawnLocation");
static_assert(sizeof(MinigameSettingsMachine_C_GetPickupSpawnLocation) == 0x000058, "Wrong size on MinigameSettingsMachine_C_GetPickupSpawnLocation");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, SpawnLocation) == 0x000000, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::SpawnLocation' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_GetOwner_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000024, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_Multiply_VectorInt_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_Multiply_VectorInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x00003C, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetPickupSpawnLocation, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000048, "Member 'MinigameSettingsMachine_C_GetPickupSpawnLocation::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.HasMinigameStarted
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_HasMinigameStarted final
{
public:
	bool                                          bHasStarted;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasStarted_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_HasMinigameStarted) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_HasMinigameStarted");
static_assert(sizeof(MinigameSettingsMachine_C_HasMinigameStarted) == 0x000018, "Wrong size on MinigameSettingsMachine_C_HasMinigameStarted");
static_assert(offsetof(MinigameSettingsMachine_C_HasMinigameStarted, bHasStarted) == 0x000000, "Member 'MinigameSettingsMachine_C_HasMinigameStarted::bHasStarted' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_HasMinigameStarted, CallFunc_GetCurrentMinigame_Minigame) == 0x000008, "Member 'MinigameSettingsMachine_C_HasMinigameStarted::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_HasMinigameStarted, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_HasMinigameStarted::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_HasMinigameStarted, CallFunc_HasStarted_ReturnValue) == 0x000011, "Member 'MinigameSettingsMachine_C_HasMinigameStarted::CallFunc_HasStarted_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateGameMode
// 0x0050 (0x0050 - 0x0000)
struct MinigameSettingsMachine_C_UpdateGameMode final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_1;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_2;             // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue_3;             // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A4[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_GetUIExtensions_Return_Value;             // 0x0010(0x0020)()
	TArray<class UClass*>                         CallFunc_GetScoreboardStatsArray_ScoreboardStats;  // 0x0030(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateGameMode) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateGameMode");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateGameMode) == 0x000050, "Wrong size on MinigameSettingsMachine_C_UpdateGameMode");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_Conv_IntToBool_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_Conv_IntToBool_ReturnValue_1) == 0x000009, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_Conv_IntToBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_Conv_IntToBool_ReturnValue_2) == 0x00000A, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_Conv_IntToBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_Conv_IntToBool_ReturnValue_3) == 0x00000B, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_Conv_IntToBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_GetUIExtensions_Return_Value) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_GetUIExtensions_Return_Value' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_GetScoreboardStatsArray_ScoreboardStats) == 0x000030, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_GetScoreboardStatsArray_ScoreboardStats' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_GetCurrentMinigame_Minigame) == 0x000040, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameMode, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'MinigameSettingsMachine_C_UpdateGameMode::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateTimeLimit
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateTimeLimit final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A5[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateTimeLimit) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateTimeLimit");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateTimeLimit) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateTimeLimit");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTimeLimit, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateTimeLimit::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTimeLimit, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateTimeLimit::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTimeLimit, CallFunc_HasAuthority_ReturnValue) == 0x000009, "Member 'MinigameSettingsMachine_C_UpdateTimeLimit::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTimeLimit, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateTimeLimit::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTimeLimit, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateTimeLimit::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.GetCurrentMinigame
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_GetCurrentMinigame final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A6[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMinigameVolumeComponent*           CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_GetCurrentMinigame) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_GetCurrentMinigame");
static_assert(sizeof(MinigameSettingsMachine_C_GetCurrentMinigame) == 0x000020, "Wrong size on MinigameSettingsMachine_C_GetCurrentMinigame");
static_assert(offsetof(MinigameSettingsMachine_C_GetCurrentMinigame, Minigame) == 0x000000, "Member 'MinigameSettingsMachine_C_GetCurrentMinigame::Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetCurrentMinigame, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_GetCurrentMinigame::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetCurrentMinigame, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_GetCurrentMinigame::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetCurrentMinigame, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'MinigameSettingsMachine_C_GetCurrentMinigame::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateSpawnLocationSetting
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateSpawnLocationSetting final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A7[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateSpawnLocationSetting");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateSpawnLocationSetting");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateSpawnLocationSetting::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateSpawnLocationSetting::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateSpawnLocationSetting::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateSpawnLocationSetting, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateSpawnLocationSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateTeamSetting
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdateTeamSetting final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A8[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateTeamSetting) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateTeamSetting");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateTeamSetting) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdateTeamSetting");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamSetting, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateTeamSetting::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamSetting, CallFunc_GetCurrentMinigame_Minigame) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateTeamSetting::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamSetting, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateTeamSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdatePostGameSpawnLocationSetting
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64A9[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting");
static_assert(sizeof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdatePostGameSpawnLocationSetting::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdatePlayerLives
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdatePlayerLives final
{
public:
	class AFortMinigame*                          NewLocalVar_0;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AA[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdatePlayerLives) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdatePlayerLives");
static_assert(sizeof(MinigameSettingsMachine_C_UpdatePlayerLives) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdatePlayerLives");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerLives, NewLocalVar_0) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdatePlayerLives::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerLives, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdatePlayerLives::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerLives, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdatePlayerLives::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerLives, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdatePlayerLives::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateAutoEndTeamThreshold
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold, Minigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold::Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateAutoEndTeamThreshold::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateTeamToMoveToWhenOutOfSpawns
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns final
{
public:
	class AFortMinigame*                          Minigame;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AC[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, Minigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_Conv_IntToByte_ReturnValue) == 0x000009, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, K2Node_SwitchInteger_CmpSuccess) == 0x00000A, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_MakeLiteralByte_ReturnValue) == 0x00000B, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_Add_ByteByte_ReturnValue) == 0x00000C, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateTeamToMoveToWhenOutOfSpawns::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateEndConditions
// 0x0098 (0x0098 - 0x0000)
struct MinigameSettingsMachine_C_UpdateEndConditions final
{
public:
	TArray<struct FFortMinigameStatQuery>         EndConditions;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AFortMinigame*                          Minigame;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AD[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMinigameStatQuery                 K2Node_MakeStruct_FortMinigameStatQuery;           // 0x0020(0x0018)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AE[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMinigameStatQuery                 K2Node_MakeStruct_FortMinigameStatQuery_1;         // 0x0040(0x0018)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryAddEndCondition_DestroyObjects_bResult; // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TryAddEndCondition_CollectItems_bResult;  // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64AF[0x1];                                     // 0x005B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64B0[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMinigameStatQuery                 K2Node_MakeStruct_FortMinigameStatQuery_2;         // 0x0068(0x0018)(NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B1[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateEndConditions) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateEndConditions");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateEndConditions) == 0x000098, "Wrong size on MinigameSettingsMachine_C_UpdateEndConditions");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, EndConditions) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::EndConditions' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_HasAuthority_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, K2Node_MakeStruct_FortMinigameStatQuery) == 0x000020, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::K2Node_MakeStruct_FortMinigameStatQuery' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, K2Node_MakeStruct_FortMinigameStatQuery_1) == 0x000040, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::K2Node_MakeStruct_FortMinigameStatQuery_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000058, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_TryAddEndCondition_DestroyObjects_bResult) == 0x000059, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_TryAddEndCondition_DestroyObjects_bResult' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_TryAddEndCondition_CollectItems_bResult) == 0x00005A, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_TryAddEndCondition_CollectItems_bResult' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Array_Add_ReturnValue) == 0x00005C, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Array_Add_ReturnValue_1) == 0x000060, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, K2Node_MakeStruct_FortMinigameStatQuery_2) == 0x000068, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::K2Node_MakeStruct_FortMinigameStatQuery_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000080, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_Array_Add_ReturnValue_2) == 0x000084, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_GetCurrentMinigame_Minigame) == 0x000088, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateEndConditions, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'MinigameSettingsMachine_C_UpdateEndConditions::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateAutoStart
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateAutoStart final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateAutoStart) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateAutoStart");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateAutoStart) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateAutoStart");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoStart, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateAutoStart::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoStart, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateAutoStart::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoStart, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateAutoStart::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateAutoStart, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateAutoStart::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.TryAddEndCondition_CollectItems
// 0x0038 (0x0038 - 0x0000)
struct MinigameSettingsMachine_C_TryAddEndCondition_CollectItems final
{
public:
	TArray<struct FFortMinigameStatQuery>         EndConditions;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAdded;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B3[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMinigameStatQuery                 K2Node_MakeStruct_FortMinigameStatQuery;           // 0x0018(0x0018)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_TryAddEndCondition_CollectItems");
static_assert(sizeof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems) == 0x000038, "Wrong size on MinigameSettingsMachine_C_TryAddEndCondition_CollectItems");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, EndConditions) == 0x000000, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::EndConditions' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, bResult) == 0x000010, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::bResult' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, bAdded) == 0x000011, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::bAdded' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000012, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, CallFunc_Greater_IntInt_ReturnValue) == 0x000013, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, K2Node_MakeStruct_FortMinigameStatQuery) == 0x000018, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::K2Node_MakeStruct_FortMinigameStatQuery' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_CollectItems, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_CollectItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateJoinInProgress
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateJoinInProgress final
{
public:
	class AFortMinigame*                          NewLocalVar_1;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B4[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateJoinInProgress) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateJoinInProgress");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateJoinInProgress) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateJoinInProgress");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateJoinInProgress, NewLocalVar_1) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateJoinInProgress::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateJoinInProgress, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateJoinInProgress::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateJoinInProgress, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000009, "Member 'MinigameSettingsMachine_C_UpdateJoinInProgress::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateJoinInProgress, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateJoinInProgress::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateJoinInProgress, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateJoinInProgress::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateMinigameMutators
// 0x0080 (0x0080 - 0x0000)
struct MinigameSettingsMachine_C_UpdateMinigameMutators final
{
public:
	class UFortMutatorListComponent*              MutatorList;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B5[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortMutatorListComponent*              CallFunc_GetComponentByClass_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            CallFunc_GetPropertyOverrides_CurrentOptions;      // 0x0020(0x0050)()
	bool                                          CallFunc_GetPropertyOverrides_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B6[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateMinigameMutators) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateMinigameMutators");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateMinigameMutators) == 0x000080, "Wrong size on MinigameSettingsMachine_C_UpdateMinigameMutators");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, MutatorList) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::MutatorList' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CurrentMinigame) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_HasAuthority_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_GetComponentByClass_ReturnValue) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_GetPropertyOverrides_CurrentOptions) == 0x000020, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_GetPropertyOverrides_CurrentOptions' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_GetPropertyOverrides_ReturnValue) == 0x000070, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_GetPropertyOverrides_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateMinigameMutators, CallFunc_GetCurrentMinigame_Minigame) == 0x000078, "Member 'MinigameSettingsMachine_C_UpdateMinigameMutators::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateTotalRounds
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdateTotalRounds final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B7[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateTotalRounds) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateTotalRounds");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateTotalRounds) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdateTotalRounds");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTotalRounds, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateTotalRounds::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTotalRounds, CallFunc_GetCurrentMinigame_Minigame) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateTotalRounds::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTotalRounds, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateTotalRounds::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateTotalRounds, CallFunc_Greater_IntInt_ReturnValue) == 0x000011, "Member 'MinigameSettingsMachine_C_UpdateTotalRounds::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.TryAddEndCondition_DestroyObjects
// 0x0038 (0x0038 - 0x0000)
struct MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects final
{
public:
	TArray<struct FFortMinigameStatQuery>         EndConditions;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          bResult;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bAdded;                                            // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64B8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortMinigameStatQuery                 K2Node_MakeStruct_FortMinigameStatQuery;           // 0x0018(0x0018)(NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects");
static_assert(sizeof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects) == 0x000038, "Wrong size on MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, EndConditions) == 0x000000, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::EndConditions' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, bResult) == 0x000010, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::bResult' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, bAdded) == 0x000011, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::bAdded' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, CallFunc_Greater_IntInt_ReturnValue) == 0x000012, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000013, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, K2Node_MakeStruct_FortMinigameStatQuery) == 0x000018, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::K2Node_MakeStruct_FortMinigameStatQuery' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects, CallFunc_Array_Add_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_TryAddEndCondition_DestroyObjects::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.FillTrackedStats
// 0x0010 (0x0010 - 0x0000)
struct MinigameSettingsMachine_C_FillTrackedStats final
{
public:
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ReferenceParm, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_FillTrackedStats) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_FillTrackedStats");
static_assert(sizeof(MinigameSettingsMachine_C_FillTrackedStats) == 0x000010, "Wrong size on MinigameSettingsMachine_C_FillTrackedStats");
static_assert(offsetof(MinigameSettingsMachine_C_FillTrackedStats, K2Node_MakeArray_Array) == 0x000000, "Member 'MinigameSettingsMachine_C_FillTrackedStats::K2Node_MakeArray_Array' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.GetScoreboardStatsArray
// 0x0050 (0x0050 - 0x0000)
struct MinigameSettingsMachine_C_GetScoreboardStatsArray final
{
public:
	TArray<class UClass*>                         ScoreboardStats;                                   // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<class UClass*>                         TrackedScoreboardStats;                            // 0x0010(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64B9[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BA[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_GetScoreboardStatsArray) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_GetScoreboardStatsArray");
static_assert(sizeof(MinigameSettingsMachine_C_GetScoreboardStatsArray) == 0x000050, "Wrong size on MinigameSettingsMachine_C_GetScoreboardStatsArray");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, ScoreboardStats) == 0x000000, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::ScoreboardStats' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, TrackedScoreboardStats) == 0x000010, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::TrackedScoreboardStats' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, Temp_int_Array_Index_Variable) == 0x000020, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Array_Get_Item) == 0x00002C, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Array_AddUnique_ReturnValue) == 0x000044, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetScoreboardStatsArray, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000048, "Member 'MinigameSettingsMachine_C_GetScoreboardStatsArray::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.Game Mode Preset Upgrade Path
// 0x0208 (0x0208 - 0x0000)
struct MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path final
{
public:
	TArray<class FString>                         K2Node_MakeArray_Array;                            // 0x0000(0x0010)(ConstParm, ReferenceParm, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue;                 // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue;  // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue_1; // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue_1;               // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue_2; // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue_3; // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue_2;               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue_3;               // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue_4; // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionValueNameFromValue_ReturnValue_5; // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue_4;               // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetOptionKey_ReturnValue_5;               // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TMap<class FString, class FString>            K2Node_MakeMap_Map;                                // 0x0130(0x0050)(ConstParm)
	struct FMinigameScoringPreset                 CallFunc_Array_Get_Item;                           // 0x0180(0x0038)(HasGetValueTypeHash)
	bool                                          CallFunc_SetPropertyOverrides_ReturnValue;         // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BB[0x2];                                     // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_1;                         // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_2;                         // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_1;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_2;                 // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_3;                         // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_4;                         // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_3;                 // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue_4;                 // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_Array_Get_Item_5;                         // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BC[0x3];                                     // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue_5;                 // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_3;         // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_4;         // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_5;         // 0x0203(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path");
static_assert(sizeof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path) == 0x000208, "Wrong size on MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, K2Node_MakeArray_Array) == 0x000000, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue) == 0x000020, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000040, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000050, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000060, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000070, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Conv_IntToString_ReturnValue_5) == 0x000080, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue_1) == 0x000090, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue_1) == 0x0000A0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue_2) == 0x0000B0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue_3) == 0x0000C0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue_2) == 0x0000D0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue_3) == 0x0000E0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue_4) == 0x0000F0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionValueNameFromValue_ReturnValue_5) == 0x000100, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionValueNameFromValue_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue_4) == 0x000110, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_GetOptionKey_ReturnValue_5) == 0x000120, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_GetOptionKey_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, K2Node_MakeMap_Map) == 0x000130, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item) == 0x000180, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_SetPropertyOverrides_ReturnValue) == 0x0001B8, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_SetPropertyOverrides_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0001B9, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue) == 0x0001BC, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item_1) == 0x0001C0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item_2) == 0x0001C8, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue_1) == 0x0001D0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue_2) == 0x0001D4, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item_3) == 0x0001D8, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item_4) == 0x0001E0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue_3) == 0x0001E8, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue_4) == 0x0001EC, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Get_Item_5) == 0x0001F0, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x0001F8, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_Find_ReturnValue_5) == 0x0001FC, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_Find_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x000200, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue_3) == 0x000201, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue_4) == 0x000202, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path, CallFunc_Array_IsValidIndex_ReturnValue_5) == 0x000203, "Member 'MinigameSettingsMachine_C_Game_Mode_Preset_Upgrade_Path::CallFunc_Array_IsValidIndex_ReturnValue_5' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.GetUIExtensions
// 0x0068 (0x0068 - 0x0000)
struct MinigameSettingsMachine_C_GetUIExtensions final
{
public:
	struct FGameplayTagContainer                  Return_Value;                                      // 0x0000(0x0020)(Parm, OutParm)
	struct FGameplayTagContainer                  Final_UI_Extensions;                               // 0x0020(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  CallFunc_Array_Get_Item;                           // 0x0040(0x0020)()
	bool                                          CallFunc_AdditionalUIExtensionValidityChecks_bUIExtensionIsValid; // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_GetUIExtensions) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_GetUIExtensions");
static_assert(sizeof(MinigameSettingsMachine_C_GetUIExtensions) == 0x000068, "Wrong size on MinigameSettingsMachine_C_GetUIExtensions");
static_assert(offsetof(MinigameSettingsMachine_C_GetUIExtensions, Return_Value) == 0x000000, "Member 'MinigameSettingsMachine_C_GetUIExtensions::Return_Value' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetUIExtensions, Final_UI_Extensions) == 0x000020, "Member 'MinigameSettingsMachine_C_GetUIExtensions::Final_UI_Extensions' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetUIExtensions, CallFunc_Array_Get_Item) == 0x000040, "Member 'MinigameSettingsMachine_C_GetUIExtensions::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetUIExtensions, CallFunc_AdditionalUIExtensionValidityChecks_bUIExtensionIsValid) == 0x000060, "Member 'MinigameSettingsMachine_C_GetUIExtensions::CallFunc_AdditionalUIExtensionValidityChecks_bUIExtensionIsValid' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_GetUIExtensions, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000061, "Member 'MinigameSettingsMachine_C_GetUIExtensions::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateClassSettings
// 0x0020 (0x0020 - 0x0000)
struct MinigameSettingsMachine_C_UpdateClassSettings final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BD[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_Select_Default;                             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateClassSettings) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateClassSettings");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateClassSettings) == 0x000020, "Wrong size on MinigameSettingsMachine_C_UpdateClassSettings");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, Temp_bool_Variable) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CallFunc_IsValid_ReturnValue) == 0x000009, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CallFunc_MakeLiteralByte_ReturnValue) == 0x00000A, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000B, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00000C, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateClassSettings, K2Node_Select_Default) == 0x000018, "Member 'MinigameSettingsMachine_C_UpdateClassSettings::K2Node_Select_Default' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdatePlayerPersistence
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdatePlayerPersistence final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BE[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdatePlayerPersistence) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdatePlayerPersistence");
static_assert(sizeof(MinigameSettingsMachine_C_UpdatePlayerPersistence) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdatePlayerPersistence");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerPersistence, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdatePlayerPersistence::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerPersistence, CallFunc_GetCurrentMinigame_Minigame) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdatePlayerPersistence::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdatePlayerPersistence, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdatePlayerPersistence::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateGameSettings
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdateGameSettings final
{
public:
	class AFortMinigame*                          CurrentMinigame;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64BF[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateGameSettings) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateGameSettings");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateGameSettings) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdateGameSettings");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameSettings, CurrentMinigame) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateGameSettings::CurrentMinigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameSettings, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateGameSettings::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameSettings, CallFunc_GetCurrentMinigame_Minigame) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateGameSettings::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.AdditionalUIExtensionValidityChecks
// 0x0028 (0x0028 - 0x0000)
struct MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks final
{
public:
	struct FGameplayTagContainer                  TagContainer;                                      // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bUIExtensionIsValid;                               // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasTag_ReturnValue;                       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks");
static_assert(sizeof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks) == 0x000028, "Wrong size on MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks");
static_assert(offsetof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks, TagContainer) == 0x000000, "Member 'MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks::TagContainer' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks, bUIExtensionIsValid) == 0x000020, "Member 'MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks::bUIExtensionIsValid' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000021, "Member 'MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks, CallFunc_HasTag_ReturnValue) == 0x000022, "Member 'MinigameSettingsMachine_C_AdditionalUIExtensionValidityChecks::CallFunc_HasTag_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.UpdateGameStartCountdown
// 0x0018 (0x0018 - 0x0000)
struct MinigameSettingsMachine_C_UpdateGameStartCountdown final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64C0[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortMinigame*                          CallFunc_GetCurrentMinigame_Minigame;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_UpdateGameStartCountdown) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_UpdateGameStartCountdown");
static_assert(sizeof(MinigameSettingsMachine_C_UpdateGameStartCountdown) == 0x000018, "Wrong size on MinigameSettingsMachine_C_UpdateGameStartCountdown");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameStartCountdown, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'MinigameSettingsMachine_C_UpdateGameStartCountdown::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameStartCountdown, CallFunc_GetCurrentMinigame_Minigame) == 0x000008, "Member 'MinigameSettingsMachine_C_UpdateGameStartCountdown::CallFunc_GetCurrentMinigame_Minigame' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_UpdateGameStartCountdown, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_UpdateGameStartCountdown::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.BlueprintCanInteract
// 0x0038 (0x0038 - 0x0000)
struct MinigameSettingsMachine_C_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETInteractionType                             InteractionType;                                   // 0x0009(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CanInteract;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64C1[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_64C2[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            CallFunc_CanPlayerCreateInCurrentVolume_OutCurrentVolume; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanPlayerCreateInCurrentVolume_ReturnValue; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(MinigameSettingsMachine_C_BlueprintCanInteract) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_BlueprintCanInteract");
static_assert(sizeof(MinigameSettingsMachine_C_BlueprintCanInteract) == 0x000038, "Wrong size on MinigameSettingsMachine_C_BlueprintCanInteract");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, InteractionBeingAttempted) == 0x000008, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, InteractionType) == 0x000009, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, ReturnValue) == 0x00000A, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CanInteract) == 0x00000B, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000018, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CallFunc_CanPlayerCreateInCurrentVolume_OutCurrentVolume) == 0x000028, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CallFunc_CanPlayerCreateInCurrentVolume_OutCurrentVolume' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintCanInteract, CallFunc_CanPlayerCreateInCurrentVolume_ReturnValue) == 0x000030, "Member 'MinigameSettingsMachine_C_BlueprintCanInteract::CallFunc_CanPlayerCreateInCurrentVolume_ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.BlueprintGetInteractionString
// 0x0028 (0x0028 - 0x0000)
struct MinigameSettingsMachine_C_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(MinigameSettingsMachine_C_BlueprintGetInteractionString) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_BlueprintGetInteractionString");
static_assert(sizeof(MinigameSettingsMachine_C_BlueprintGetInteractionString) == 0x000028, "Wrong size on MinigameSettingsMachine_C_BlueprintGetInteractionString");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'MinigameSettingsMachine_C_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'MinigameSettingsMachine_C_BlueprintGetInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetInteractionString, ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.BlueprintGetFailedInteractionString
// 0x0028 (0x0028 - 0x0000)
struct MinigameSettingsMachine_C_BlueprintGetFailedInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C4[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(MinigameSettingsMachine_C_BlueprintGetFailedInteractionString) == 0x000008, "Wrong alignment on MinigameSettingsMachine_C_BlueprintGetFailedInteractionString");
static_assert(sizeof(MinigameSettingsMachine_C_BlueprintGetFailedInteractionString) == 0x000028, "Wrong size on MinigameSettingsMachine_C_BlueprintGetFailedInteractionString");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetFailedInteractionString, InteractingPawn) == 0x000000, "Member 'MinigameSettingsMachine_C_BlueprintGetFailedInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetFailedInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'MinigameSettingsMachine_C_BlueprintGetFailedInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(MinigameSettingsMachine_C_BlueprintGetFailedInteractionString, ReturnValue) == 0x000010, "Member 'MinigameSettingsMachine_C_BlueprintGetFailedInteractionString::ReturnValue' has a wrong offset!");

// Function MinigameSettingsMachine.MinigameSettingsMachine_C.GetTeamSetting
// 0x0004 (0x0004 - 0x0000)
struct MinigameSettingsMachine_C_GetTeamSetting final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(MinigameSettingsMachine_C_GetTeamSetting) == 0x000004, "Wrong alignment on MinigameSettingsMachine_C_GetTeamSetting");
static_assert(sizeof(MinigameSettingsMachine_C_GetTeamSetting) == 0x000004, "Wrong size on MinigameSettingsMachine_C_GetTeamSetting");
static_assert(offsetof(MinigameSettingsMachine_C_GetTeamSetting, ReturnValue) == 0x000000, "Member 'MinigameSettingsMachine_C_GetTeamSetting::ReturnValue' has a wrong offset!");

}

