#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VotingFramework

#include "Basic.hpp"

#include "VotingFramework_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function VotingFramework.VoteBroadcasterComponent.ServerSubmitVotesAggregated
// 0x001C (0x001C - 0x0000)
struct VoteBroadcasterComponent_ServerSubmitVotesAggregated final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteSelectionId;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteDelta;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_ServerSubmitVotesAggregated) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_ServerSubmitVotesAggregated");
static_assert(sizeof(VoteBroadcasterComponent_ServerSubmitVotesAggregated) == 0x00001C, "Wrong size on VoteBroadcasterComponent_ServerSubmitVotesAggregated");
static_assert(offsetof(VoteBroadcasterComponent_ServerSubmitVotesAggregated, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_ServerSubmitVotesAggregated::VoteSessionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_ServerSubmitVotesAggregated, VoteId) == 0x000008, "Member 'VoteBroadcasterComponent_ServerSubmitVotesAggregated::VoteId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_ServerSubmitVotesAggregated, VoteSelectionId) == 0x000010, "Member 'VoteBroadcasterComponent_ServerSubmitVotesAggregated::VoteSelectionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_ServerSubmitVotesAggregated, VoteDelta) == 0x000018, "Member 'VoteBroadcasterComponent_ServerSubmitVotesAggregated::VoteDelta' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteEnd
// 0x0018 (0x0018 - 0x0000)
struct VoteBroadcasterComponent_VoteEnd final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WinningVoteSelectionId;                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_VoteEnd) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteEnd");
static_assert(sizeof(VoteBroadcasterComponent_VoteEnd) == 0x000018, "Wrong size on VoteBroadcasterComponent_VoteEnd");
static_assert(offsetof(VoteBroadcasterComponent_VoteEnd, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteEnd::VoteSessionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteEnd, VoteId) == 0x000008, "Member 'VoteBroadcasterComponent_VoteEnd::VoteId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteEnd, WinningVoteSelectionId) == 0x000010, "Member 'VoteBroadcasterComponent_VoteEnd::WinningVoteSelectionId' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteSessionComplete
// 0x0008 (0x0008 - 0x0000)
struct VoteBroadcasterComponent_VoteSessionComplete final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_VoteSessionComplete) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteSessionComplete");
static_assert(sizeof(VoteBroadcasterComponent_VoteSessionComplete) == 0x000008, "Wrong size on VoteBroadcasterComponent_VoteSessionComplete");
static_assert(offsetof(VoteBroadcasterComponent_VoteSessionComplete, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteSessionComplete::VoteSessionId' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteSessionSetup
// 0x0014 (0x0014 - 0x0000)
struct VoteBroadcasterComponent_VoteSessionSetup final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartingVoteId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoteSessionNetworkType                       NetworkType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484F[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoteBroadcasterComponent_VoteSessionSetup) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteSessionSetup");
static_assert(sizeof(VoteBroadcasterComponent_VoteSessionSetup) == 0x000014, "Wrong size on VoteBroadcasterComponent_VoteSessionSetup");
static_assert(offsetof(VoteBroadcasterComponent_VoteSessionSetup, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteSessionSetup::VoteSessionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteSessionSetup, StartingVoteId) == 0x000008, "Member 'VoteBroadcasterComponent_VoteSessionSetup::StartingVoteId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteSessionSetup, NetworkType) == 0x000010, "Member 'VoteBroadcasterComponent_VoteSessionSetup::NetworkType' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteSessionShutdown
// 0x0008 (0x0008 - 0x0000)
struct VoteBroadcasterComponent_VoteSessionShutdown final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_VoteSessionShutdown) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteSessionShutdown");
static_assert(sizeof(VoteBroadcasterComponent_VoteSessionShutdown) == 0x000008, "Wrong size on VoteBroadcasterComponent_VoteSessionShutdown");
static_assert(offsetof(VoteBroadcasterComponent_VoteSessionShutdown, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteSessionShutdown::VoteSessionId' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteSetup
// 0x0010 (0x0010 - 0x0000)
struct VoteBroadcasterComponent_VoteSetup final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_VoteSetup) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteSetup");
static_assert(sizeof(VoteBroadcasterComponent_VoteSetup) == 0x000010, "Wrong size on VoteBroadcasterComponent_VoteSetup");
static_assert(offsetof(VoteBroadcasterComponent_VoteSetup, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteSetup::VoteSessionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteSetup, VoteId) == 0x000008, "Member 'VoteBroadcasterComponent_VoteSetup::VoteId' has a wrong offset!");

// Function VotingFramework.VoteBroadcasterComponent.VoteStart
// 0x0010 (0x0010 - 0x0000)
struct VoteBroadcasterComponent_VoteStart final
{
public:
	class FName                                   VoteSessionId;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoteId;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteBroadcasterComponent_VoteStart) == 0x000004, "Wrong alignment on VoteBroadcasterComponent_VoteStart");
static_assert(sizeof(VoteBroadcasterComponent_VoteStart) == 0x000010, "Wrong size on VoteBroadcasterComponent_VoteStart");
static_assert(offsetof(VoteBroadcasterComponent_VoteStart, VoteSessionId) == 0x000000, "Member 'VoteBroadcasterComponent_VoteStart::VoteSessionId' has a wrong offset!");
static_assert(offsetof(VoteBroadcasterComponent_VoteStart, VoteId) == 0x000008, "Member 'VoteBroadcasterComponent_VoteStart::VoteId' has a wrong offset!");

// Function VotingFramework.VoteResponderComponent.CastDefaultVoteSelection
// 0x0008 (0x0008 - 0x0000)
struct VoteResponderComponent_CastDefaultVoteSelection final
{
public:
	const class APlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteResponderComponent_CastDefaultVoteSelection) == 0x000008, "Wrong alignment on VoteResponderComponent_CastDefaultVoteSelection");
static_assert(sizeof(VoteResponderComponent_CastDefaultVoteSelection) == 0x000008, "Wrong size on VoteResponderComponent_CastDefaultVoteSelection");
static_assert(offsetof(VoteResponderComponent_CastDefaultVoteSelection, InPlayerState) == 0x000000, "Member 'VoteResponderComponent_CastDefaultVoteSelection::InPlayerState' has a wrong offset!");

// Function VotingFramework.VoteResponderComponent.CastManualVoteSelection
// 0x0010 (0x0010 - 0x0000)
struct VoteResponderComponent_CastManualVoteSelection final
{
public:
	const class APlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VoteSelection;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteResponderComponent_CastManualVoteSelection) == 0x000008, "Wrong alignment on VoteResponderComponent_CastManualVoteSelection");
static_assert(sizeof(VoteResponderComponent_CastManualVoteSelection) == 0x000010, "Wrong size on VoteResponderComponent_CastManualVoteSelection");
static_assert(offsetof(VoteResponderComponent_CastManualVoteSelection, InPlayerState) == 0x000000, "Member 'VoteResponderComponent_CastManualVoteSelection::InPlayerState' has a wrong offset!");
static_assert(offsetof(VoteResponderComponent_CastManualVoteSelection, VoteSelection) == 0x000008, "Member 'VoteResponderComponent_CastManualVoteSelection::VoteSelection' has a wrong offset!");

// Function VotingFramework.VoteResponderComponent.CastManualVoteSelectionAtIndex
// 0x0010 (0x0010 - 0x0000)
struct VoteResponderComponent_CastManualVoteSelectionAtIndex final
{
public:
	const class APlayerState*                     InPlayerState;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectionIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4853[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoteResponderComponent_CastManualVoteSelectionAtIndex) == 0x000008, "Wrong alignment on VoteResponderComponent_CastManualVoteSelectionAtIndex");
static_assert(sizeof(VoteResponderComponent_CastManualVoteSelectionAtIndex) == 0x000010, "Wrong size on VoteResponderComponent_CastManualVoteSelectionAtIndex");
static_assert(offsetof(VoteResponderComponent_CastManualVoteSelectionAtIndex, InPlayerState) == 0x000000, "Member 'VoteResponderComponent_CastManualVoteSelectionAtIndex::InPlayerState' has a wrong offset!");
static_assert(offsetof(VoteResponderComponent_CastManualVoteSelectionAtIndex, SelectionIndex) == 0x000008, "Member 'VoteResponderComponent_CastManualVoteSelectionAtIndex::SelectionIndex' has a wrong offset!");

// Function VotingFramework.VoteResponderComponent.ServerCastVoteSelection
// 0x0040 (0x0040 - 0x0000)
struct VoteResponderComponent_ServerCastVoteSelection final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCastedVote                            CastedVote;                                        // 0x0028(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoteResponderComponent_ServerCastVoteSelection) == 0x000008, "Wrong alignment on VoteResponderComponent_ServerCastVoteSelection");
static_assert(sizeof(VoteResponderComponent_ServerCastVoteSelection) == 0x000040, "Wrong size on VoteResponderComponent_ServerCastVoteSelection");
static_assert(offsetof(VoteResponderComponent_ServerCastVoteSelection, InUserId) == 0x000000, "Member 'VoteResponderComponent_ServerCastVoteSelection::InUserId' has a wrong offset!");
static_assert(offsetof(VoteResponderComponent_ServerCastVoteSelection, CastedVote) == 0x000028, "Member 'VoteResponderComponent_ServerCastVoteSelection::CastedVote' has a wrong offset!");

}

