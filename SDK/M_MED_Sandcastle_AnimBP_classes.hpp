#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: M_MED_Sandcastle_AnimBP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass M_MED_Sandcastle_AnimBP.M_MED_Sandcastle_AnimBP_C
// 0x2010 (0x2460 - 0x0450)
class UM_MED_Sandcastle_AnimBP_C final : public UCustomCharacterPartAnimInstance
{
public:
	uint8                                         Pad_582A[0x8];                                     // 0x0448(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	uint8                                         Pad_582B[0x8];                                     // 0x0458(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_5;                            // 0x0460(0x01B0)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_4;                            // 0x0610(0x01B0)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x07C0(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_7;                        // 0x0888(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_6;                        // 0x0990(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_5;                        // 0x0A98(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_4;                        // 0x0BA0(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0CA8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0CC8(0x0028)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_3;                        // 0x0CF0(0x0108)()
	struct FAnimNode_Constraint                   AnimGraphNode_Constraint_3;                        // 0x0DF8(0x0108)()
	struct FAnimNode_Constraint                   AnimGraphNode_Constraint_2;                        // 0x0F00(0x0108)()
	uint8                                         Pad_582C[0x8];                                     // 0x1008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_3;                            // 0x1010(0x01B0)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_2;                            // 0x11C0(0x01B0)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt_1;                            // 0x1370(0x01B0)()
	struct FAnimNode_LookAt                       AnimGraphNode_LookAt;                              // 0x1520(0x01B0)()
	struct FAnimNode_Constraint                   AnimGraphNode_Constraint_1;                        // 0x16D0(0x0108)()
	struct FAnimNode_Constraint                   AnimGraphNode_Constraint;                          // 0x17D8(0x0108)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x18E0(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_2;                        // 0x1900(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone_1;                        // 0x1A08(0x0108)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x1B10(0x0108)()
	struct FAnimNode_CopyPoseFromMesh             AnimGraphNode_CopyPoseFromMesh;                    // 0x1C18(0x0140)(ContainsInstancedReference)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1D58(0x0030)()
	uint8                                         Pad_582D[0x8];                                     // 0x1D88(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RigidBody                    AnimGraphNode_RigidBody;                           // 0x1D90(0x0650)()
	struct FVector                                WindVector;                                        // 0x23E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IsCrouchingAlpha;                                  // 0x23EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         IsSkydiveAlpha;                                    // 0x23F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rigids_off;                                        // 0x23F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_582E[0x3];                                     // 0x23F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RflexAlpha;                                        // 0x23F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RbicepAlpha;                                       // 0x23FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LbicepAlpha;                                       // 0x2400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LflexAlpha;                                        // 0x2404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RscaleShoulder;                                    // 0x2408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LscaleShoulder;                                    // 0x240C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RaimPecPos;                                        // 0x2410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RshoulderAlpha;                                    // 0x241C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaimPecPos;                                        // 0x2420(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LshoulderAlpha;                                    // 0x242C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RpecAimPosAlpha;                                   // 0x2430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RlegAlpha;                                         // 0x2434(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LbicepFlex;                                        // 0x2438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RbicepFlex;                                        // 0x243C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RarmDistanceBICEPAlpha;                            // 0x2440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LarmDistanceBICEPAlpha;                            // 0x2444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RarmDistanceAlpha;                                 // 0x2448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RbicepRollAlpha;                                   // 0x244C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeapon*                            NewVar_0;                                          // 0x2450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* Param_AnimGraph);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void ExecuteUbergraph_M_MED_Sandcastle_AnimBP(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"M_MED_Sandcastle_AnimBP_C">();
	}
	static class UM_MED_Sandcastle_AnimBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UM_MED_Sandcastle_AnimBP_C>();
	}
};
static_assert(alignof(UM_MED_Sandcastle_AnimBP_C) == 0x000010, "Wrong alignment on UM_MED_Sandcastle_AnimBP_C");
static_assert(sizeof(UM_MED_Sandcastle_AnimBP_C) == 0x002460, "Wrong size on UM_MED_Sandcastle_AnimBP_C");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, UberGraphFrame) == 0x000450, "Member 'UM_MED_Sandcastle_AnimBP_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt_5) == 0x000460, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt_5' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt_4) == 0x000610, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt_4' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_SaveCachedPose) == 0x0007C0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_7) == 0x000888, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_7' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_6) == 0x000990, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_6' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_5) == 0x000A98, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_5' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_4) == 0x000BA0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_4' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LocalToComponentSpace) == 0x000CA8, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_UseCachedPose) == 0x000CC8, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_3) == 0x000CF0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_3' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_Constraint_3) == 0x000DF8, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_Constraint_3' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_Constraint_2) == 0x000F00, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_Constraint_2' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt_3) == 0x001010, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt_3' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt_2) == 0x0011C0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt_2' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt_1) == 0x001370, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt_1' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_LookAt) == 0x001520, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_LookAt' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_Constraint_1) == 0x0016D0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_Constraint_1' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_Constraint) == 0x0017D8, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_Constraint' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ComponentToLocalSpace) == 0x0018E0, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_2) == 0x001900, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_2' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone_1) == 0x001A08, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone_1' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_ModifyBone) == 0x001B10, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_CopyPoseFromMesh) == 0x001C18, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_CopyPoseFromMesh' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_Root) == 0x001D58, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, AnimGraphNode_RigidBody) == 0x001D90, "Member 'UM_MED_Sandcastle_AnimBP_C::AnimGraphNode_RigidBody' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, WindVector) == 0x0023E0, "Member 'UM_MED_Sandcastle_AnimBP_C::WindVector' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, IsCrouchingAlpha) == 0x0023EC, "Member 'UM_MED_Sandcastle_AnimBP_C::IsCrouchingAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, IsSkydiveAlpha) == 0x0023F0, "Member 'UM_MED_Sandcastle_AnimBP_C::IsSkydiveAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, Rigids_off) == 0x0023F4, "Member 'UM_MED_Sandcastle_AnimBP_C::Rigids_off' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RflexAlpha) == 0x0023F8, "Member 'UM_MED_Sandcastle_AnimBP_C::RflexAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RbicepAlpha) == 0x0023FC, "Member 'UM_MED_Sandcastle_AnimBP_C::RbicepAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LbicepAlpha) == 0x002400, "Member 'UM_MED_Sandcastle_AnimBP_C::LbicepAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LflexAlpha) == 0x002404, "Member 'UM_MED_Sandcastle_AnimBP_C::LflexAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RscaleShoulder) == 0x002408, "Member 'UM_MED_Sandcastle_AnimBP_C::RscaleShoulder' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LscaleShoulder) == 0x00240C, "Member 'UM_MED_Sandcastle_AnimBP_C::LscaleShoulder' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RaimPecPos) == 0x002410, "Member 'UM_MED_Sandcastle_AnimBP_C::RaimPecPos' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RshoulderAlpha) == 0x00241C, "Member 'UM_MED_Sandcastle_AnimBP_C::RshoulderAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LaimPecPos) == 0x002420, "Member 'UM_MED_Sandcastle_AnimBP_C::LaimPecPos' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LshoulderAlpha) == 0x00242C, "Member 'UM_MED_Sandcastle_AnimBP_C::LshoulderAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RpecAimPosAlpha) == 0x002430, "Member 'UM_MED_Sandcastle_AnimBP_C::RpecAimPosAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RlegAlpha) == 0x002434, "Member 'UM_MED_Sandcastle_AnimBP_C::RlegAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LbicepFlex) == 0x002438, "Member 'UM_MED_Sandcastle_AnimBP_C::LbicepFlex' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RbicepFlex) == 0x00243C, "Member 'UM_MED_Sandcastle_AnimBP_C::RbicepFlex' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RarmDistanceBICEPAlpha) == 0x002440, "Member 'UM_MED_Sandcastle_AnimBP_C::RarmDistanceBICEPAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, LarmDistanceBICEPAlpha) == 0x002444, "Member 'UM_MED_Sandcastle_AnimBP_C::LarmDistanceBICEPAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RarmDistanceAlpha) == 0x002448, "Member 'UM_MED_Sandcastle_AnimBP_C::RarmDistanceAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, RbicepRollAlpha) == 0x00244C, "Member 'UM_MED_Sandcastle_AnimBP_C::RbicepRollAlpha' has a wrong offset!");
static_assert(offsetof(UM_MED_Sandcastle_AnimBP_C, NewVar_0) == 0x002450, "Member 'UM_MED_Sandcastle_AnimBP_C::NewVar_0' has a wrong offset!");

}

