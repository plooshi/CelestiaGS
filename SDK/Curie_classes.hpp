#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Curie

#include "Basic.hpp"

#include "Curie_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_classes.hpp"
#include "ModularGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class Curie.CurieComponent
// 0x0030 (0x00E0 - 0x00B0)
class UCurieComponent : public UActorComponent
{
public:
	uint8                                         Pad_420B[0x8];                                     // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Identifier;                                        // 0x00B8(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECurieEntityType                              EntityType;                                        // 0x00C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420C[0x1F];                                    // 0x00C1(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleOwningActorDestroyed(class AActor* Owner);

	bool HasAnyElementAttached(const struct FGameplayTagContainer& ElementIdentifiers) const;
	bool HasElementAttached(const struct FGameplayTag& ElementIdentifier) const;
	bool HasStateAttached(const struct FGameplayTag& StateIdentifier) const;
	bool IsInteractingWithElement(const struct FGameplayTag& Element) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieComponent">();
	}
	static class UCurieComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurieComponent>();
	}
};
static_assert(alignof(UCurieComponent) == 0x000008, "Wrong alignment on UCurieComponent");
static_assert(sizeof(UCurieComponent) == 0x0000E0, "Wrong size on UCurieComponent");
static_assert(offsetof(UCurieComponent, Identifier) == 0x0000B8, "Member 'UCurieComponent::Identifier' has a wrong offset!");
static_assert(offsetof(UCurieComponent, EntityType) == 0x0000C0, "Member 'UCurieComponent::EntityType' has a wrong offset!");

// Class Curie.CurieElementBehavior
// 0x0070 (0x0098 - 0x0028)
class UCurieElementBehavior : public UObject
{
public:
	TArray<struct FCurieEffectContainer>          OnBeginAttachmentEffects;                          // 0x0028(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OngoingAttachmentEffects;                          // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnEndAttachmentEffects;                            // 0x0048(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnInstantInteractionEffects;                       // 0x0058(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnBeginInteractionEffects;                         // 0x0068(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OngoingInteractionEffects;                         // 0x0078(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnEndInteractionEffects;                           // 0x0088(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieElementBehavior">();
	}
	static class UCurieElementBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurieElementBehavior>();
	}
};
static_assert(alignof(UCurieElementBehavior) == 0x000008, "Wrong alignment on UCurieElementBehavior");
static_assert(sizeof(UCurieElementBehavior) == 0x000098, "Wrong size on UCurieElementBehavior");
static_assert(offsetof(UCurieElementBehavior, OnBeginAttachmentEffects) == 0x000028, "Member 'UCurieElementBehavior::OnBeginAttachmentEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OngoingAttachmentEffects) == 0x000038, "Member 'UCurieElementBehavior::OngoingAttachmentEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OnEndAttachmentEffects) == 0x000048, "Member 'UCurieElementBehavior::OnEndAttachmentEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OnInstantInteractionEffects) == 0x000058, "Member 'UCurieElementBehavior::OnInstantInteractionEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OnBeginInteractionEffects) == 0x000068, "Member 'UCurieElementBehavior::OnBeginInteractionEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OngoingInteractionEffects) == 0x000078, "Member 'UCurieElementBehavior::OngoingInteractionEffects' has a wrong offset!");
static_assert(offsetof(UCurieElementBehavior, OnEndInteractionEffects) == 0x000088, "Member 'UCurieElementBehavior::OnEndInteractionEffects' has a wrong offset!");

// Class Curie.CurieEntityStateBehavior
// 0x0078 (0x00A0 - 0x0028)
class UCurieEntityStateBehavior : public UObject
{
public:
	struct FGameplayTagContainer                  RequiredAttachedElements;                          // 0x0028(0x0020)(Edit, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  RequiredInteractingElements;                       // 0x0048(0x0020)(Edit, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnBeginEffects;                                    // 0x0068(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OngoingEffects;                                    // 0x0078(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieEffectContainer>          OnEndEffects;                                      // 0x0088(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsConsumable : 1;                                 // 0x0098(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_4211[0x7];                                     // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieEntityStateBehavior">();
	}
	static class UCurieEntityStateBehavior* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurieEntityStateBehavior>();
	}
};
static_assert(alignof(UCurieEntityStateBehavior) == 0x000008, "Wrong alignment on UCurieEntityStateBehavior");
static_assert(sizeof(UCurieEntityStateBehavior) == 0x0000A0, "Wrong size on UCurieEntityStateBehavior");
static_assert(offsetof(UCurieEntityStateBehavior, RequiredAttachedElements) == 0x000028, "Member 'UCurieEntityStateBehavior::RequiredAttachedElements' has a wrong offset!");
static_assert(offsetof(UCurieEntityStateBehavior, RequiredInteractingElements) == 0x000048, "Member 'UCurieEntityStateBehavior::RequiredInteractingElements' has a wrong offset!");
static_assert(offsetof(UCurieEntityStateBehavior, OnBeginEffects) == 0x000068, "Member 'UCurieEntityStateBehavior::OnBeginEffects' has a wrong offset!");
static_assert(offsetof(UCurieEntityStateBehavior, OngoingEffects) == 0x000078, "Member 'UCurieEntityStateBehavior::OngoingEffects' has a wrong offset!");
static_assert(offsetof(UCurieEntityStateBehavior, OnEndEffects) == 0x000088, "Member 'UCurieEntityStateBehavior::OnEndEffects' has a wrong offset!");

// Class Curie.CurieGlobals
// 0x00B8 (0x00E0 - 0x0028)
class UCurieGlobals : public UObject
{
public:
	bool                                          bEnableCurie;                                      // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4212[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         CurieGlobalsClassName;                             // 0x0030(0x0018)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         CurieComponentClassName;                           // 0x0048(0x0018)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        MaterialDefinitionsTableName;                      // 0x0060(0x0018)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ElementDefinitionsTableName;                       // 0x0078(0x0018)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        EntityStateDefinitionsTableName;                   // 0x0090(0x0018)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCurieComponent>            CurieComponentClass;                               // 0x00A8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             MaterialDefinitionsTable;                          // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             ElementDefinitionsTable;                           // 0x00B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             EntityStateDefinitionsTable;                       // 0x00C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCurieStateBehaviorContainer>   KnownEntityStates;                                 // 0x00C8(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurieManager*                          RegisteredCurieManager;                            // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieGlobals">();
	}
	static class UCurieGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurieGlobals>();
	}
};
static_assert(alignof(UCurieGlobals) == 0x000008, "Wrong alignment on UCurieGlobals");
static_assert(sizeof(UCurieGlobals) == 0x0000E0, "Wrong size on UCurieGlobals");
static_assert(offsetof(UCurieGlobals, bEnableCurie) == 0x000028, "Member 'UCurieGlobals::bEnableCurie' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, CurieGlobalsClassName) == 0x000030, "Member 'UCurieGlobals::CurieGlobalsClassName' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, CurieComponentClassName) == 0x000048, "Member 'UCurieGlobals::CurieComponentClassName' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, MaterialDefinitionsTableName) == 0x000060, "Member 'UCurieGlobals::MaterialDefinitionsTableName' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, ElementDefinitionsTableName) == 0x000078, "Member 'UCurieGlobals::ElementDefinitionsTableName' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, EntityStateDefinitionsTableName) == 0x000090, "Member 'UCurieGlobals::EntityStateDefinitionsTableName' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, CurieComponentClass) == 0x0000A8, "Member 'UCurieGlobals::CurieComponentClass' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, MaterialDefinitionsTable) == 0x0000B0, "Member 'UCurieGlobals::MaterialDefinitionsTable' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, ElementDefinitionsTable) == 0x0000B8, "Member 'UCurieGlobals::ElementDefinitionsTable' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, EntityStateDefinitionsTable) == 0x0000C0, "Member 'UCurieGlobals::EntityStateDefinitionsTable' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, KnownEntityStates) == 0x0000C8, "Member 'UCurieGlobals::KnownEntityStates' has a wrong offset!");
static_assert(offsetof(UCurieGlobals, RegisteredCurieManager) == 0x0000D8, "Member 'UCurieGlobals::RegisteredCurieManager' has a wrong offset!");

// Class Curie.CurieInterface
// 0x0000 (0x0028 - 0x0028)
class ICurieInterface : public IInterface
{
public:
	void OnCurieContainerInitialized_BP(const struct FCurieContainerHandle& CurieContainerHandle);
	void OnCurieContainerShutdown_BP(const struct FCurieContainerHandle& CurieContainerHandle);
	void OnCurieElementAttached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag);
	void OnCurieElementDetached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag);
	void OnCurieElementInteract_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieElementInteractBegun_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieElementInteractEnded_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag, const struct FCurieInteractParamsHandle& InteractParamsHandle);
	void OnCurieStateAttached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& StateTag);
	void OnCurieStateConsumed_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& StateTag);
	void OnCurieStateDetached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& StateTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieInterface">();
	}
	static class ICurieInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ICurieInterface>();
	}
};
static_assert(alignof(ICurieInterface) == 0x000008, "Wrong alignment on ICurieInterface");
static_assert(sizeof(ICurieInterface) == 0x000028, "Wrong size on ICurieInterface");

// Class Curie.CurieManager
// 0x00A8 (0x0158 - 0x00B0)
class UCurieManager : public UGameStateComponent
{
public:
	uint8                                         Pad_4216[0xA8];                                    // 0x00B0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindDelegateForCurieElementAttached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void BindDelegateForCurieElementBeginInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void BindDelegateForCurieElementDetached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void BindDelegateForCurieElementEndInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void BindDelegateForCurieElementInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void BindDelegateForCurieStateAttached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& StateIdentifier)>& Delegate);
	void BindDelegateForCurieStateDetached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& StateIdentifier)>& Delegate);
	void UnbindDelegateForCurieElementAttached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void UnbindDelegateForCurieElementBeginInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void UnbindDelegateForCurieElementDetached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void UnbindDelegateForCurieElementEndInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void UnbindDelegateForCurieElementInteract(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& ElementIdentifier)>& Delegate);
	void UnbindDelegateForCurieStateAttached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& StateIdentifier)>& Delegate);
	void UnbindDelegateForCurieStateDetached(class UObject* CurieOwner, const TDelegate<void(class UObject* Owner, const struct FCurieContainerHandle& ContainerHandle, struct FGameplayTag& StateIdentifier)>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurieManager">();
	}
	static class UCurieManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurieManager>();
	}
};
static_assert(alignof(UCurieManager) == 0x000008, "Wrong alignment on UCurieManager");
static_assert(sizeof(UCurieManager) == 0x000158, "Wrong size on UCurieManager");

}

