#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BGA_Athena_EnvCampFire

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Curie_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_BGA_Athena_EnvCampFire.B_BGA_Athena_EnvCampFire_C
// 0x0290 (0x0A40 - 0x07B0)
class AB_BGA_Athena_EnvCampFire_C : public ABuildingGameplayActorCampFire
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       Sphere;                                            // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FirePitEmpty;                                      // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cylinder;                                          // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FireLoc;                                           // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wood;                                              // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Root;                                              // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortCurieComponent*                    FortCurie;                                         // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPawn*                              InteractingPawn;                                   // 0x07F0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BeenUsed;                                          // 0x07F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CA9[0x3];                                     // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DousedSmokeLife;                                   // 0x07FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_DousedSmokeLife;                               // 0x0800(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HotfixedEnabled;                                   // 0x0820(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DestroyIfDisabled;                                 // 0x0821(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Destroyed;                                         // 0x0822(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_5CAA[0x5];                                     // 0x0823(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_HotfixEnabled;                                 // 0x0828(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                TraceOffset;                                       // 0x0848(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Season7Campfire;                                   // 0x0854(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CAB[0x3];                                     // 0x0855(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CustomSpecialS7Tags;                               // 0x0858(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SpecialS7FireTime;                                 // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAC[0x4];                                     // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DousedSmokeWispTimer;                              // 0x0880(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        S7SuccessEmitter;                                  // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             S7SuccessSound;                                    // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BlockInteraction;                                  // 0x0898(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CAD[0x3];                                     // 0x0899(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LitRepBool;                                        // 0x089C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DousedCue;                                         // 0x08A0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           FireCue;                                           // 0x08A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           DeathCue;                                          // 0x08B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_Light_Cost;                                    // 0x08B8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Text_Light;                                        // 0x08D8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Text_LightCost;                                    // 0x08F0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Text_LightCostNeedMore;                            // 0x0908(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               Item_Wood;                                         // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Stoked;                                            // 0x0928(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_5CAE[0x3];                                     // 0x0929(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           StokedCue;                                         // 0x092C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CAF[0x4];                                     // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_Stoke_Cost;                                    // 0x0938(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_HotfixStokeEnabled;                            // 0x0958(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Text_StokeCostNeedMore;                            // 0x0978(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasBeenLit;                                        // 0x0990(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CB0[0x7];                                     // 0x0991(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_ReplaceCampfire;                               // 0x0998(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 ActorToReplaceWith;                                // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CurieActivated;                                    // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5CB1[0x7];                                     // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         FloodLevel;                                        // 0x09C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         FloodHeightPerLevel;                               // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OceanHeight;                                       // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class AActor*, struct FCurieInteractHandle> InteractHandleMap;                                 // 0x09F0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ExecuteUbergraph_B_BGA_Athena_EnvCampFire(int32 EntryPoint);
	void CheckInitialOverlappingActors();
	void ReceiveDestroyed();
	void OnCurieElementDetached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag);
	void OnCurieElementAttached_BP(const struct FCurieContainerHandle& CurieContainerHandle, const struct FGameplayTag& ElementTag);
	void EndFireInteract();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CheckReplaceCampfire();
	void PayStokeCost(class AFortPawn* Param_InteractingPawn);
	void PayLightCost(class AFortPawn* Param_InteractingPawn);
	void HandleCharacterVariantTransition(class AFortPawn* TransitioningPawn);
	void Server_QuestObjectiveUpdated(class AFortPlayerController* Controller, const class UFortQuestItemDefinition* QuestDef, class FName BackendName, int32 CompletionCount, bool ObjectiveCompleted, bool QuestCompleted);
	void KillDouseSmokeWisp();
	void SpecialS7LightsFireAfterOut();
	void CheckDestroyDisabled();
	void HandleBoundDestroyed();
	void BindToFloor();
	void BuildingActorDestroyedCleanUp(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void Start();
	void ReceiveBeginPlay();
	void GoOut();
	void Light();
	void BlueprintOnInteract(const class AFortPawn* Param_InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnCurieActive_A24E3C804D14344FC0E5E0B5CDB4FF55();
	void OnReady_9F4554BE40FCB41157835B9AD897EE69(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void SetSheetValues();
	bool RowToBool(const struct FScalableFloat& Input);
	void CheckIfUserIsSpecialS7(class AFortPawn* PawnWhoLitFire, bool* UserIsSpecial);
	void OnRep_Destroyed();
	void OnRep_LitRepBool();
	int32 GetCostReActivate();
	void OnRep_Stoked();
	void DisableIfBelowFlood();

	bool BlueprintCanInteract(const class AFortPawn* Param_InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* Param_InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* Param_InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	void HasInfiniteResources(class APawn* Pawn, bool* Param_HasInfiniteResources) const;
	void ShouldPlayNativeCurieFX(EFortCurieNativeFXType FXType, struct FFortNativeCurieFXResponse* OutResponse) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BGA_Athena_EnvCampFire_C">();
	}
	static class AB_BGA_Athena_EnvCampFire_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BGA_Athena_EnvCampFire_C>();
	}
};
static_assert(alignof(AB_BGA_Athena_EnvCampFire_C) == 0x000008, "Wrong alignment on AB_BGA_Athena_EnvCampFire_C");
static_assert(sizeof(AB_BGA_Athena_EnvCampFire_C) == 0x000A40, "Wrong size on AB_BGA_Athena_EnvCampFire_C");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, UberGraphFrame) == 0x0007B0, "Member 'AB_BGA_Athena_EnvCampFire_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Sphere) == 0x0007B8, "Member 'AB_BGA_Athena_EnvCampFire_C::Sphere' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FirePitEmpty) == 0x0007C0, "Member 'AB_BGA_Athena_EnvCampFire_C::FirePitEmpty' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Cylinder) == 0x0007C8, "Member 'AB_BGA_Athena_EnvCampFire_C::Cylinder' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FireLoc) == 0x0007D0, "Member 'AB_BGA_Athena_EnvCampFire_C::FireLoc' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Wood) == 0x0007D8, "Member 'AB_BGA_Athena_EnvCampFire_C::Wood' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Root) == 0x0007E0, "Member 'AB_BGA_Athena_EnvCampFire_C::Root' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FortCurie) == 0x0007E8, "Member 'AB_BGA_Athena_EnvCampFire_C::FortCurie' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, InteractingPawn) == 0x0007F0, "Member 'AB_BGA_Athena_EnvCampFire_C::InteractingPawn' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, BeenUsed) == 0x0007F8, "Member 'AB_BGA_Athena_EnvCampFire_C::BeenUsed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, DousedSmokeLife) == 0x0007FC, "Member 'AB_BGA_Athena_EnvCampFire_C::DousedSmokeLife' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_DousedSmokeLife) == 0x000800, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_DousedSmokeLife' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, HotfixedEnabled) == 0x000820, "Member 'AB_BGA_Athena_EnvCampFire_C::HotfixedEnabled' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, DestroyIfDisabled) == 0x000821, "Member 'AB_BGA_Athena_EnvCampFire_C::DestroyIfDisabled' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Destroyed) == 0x000822, "Member 'AB_BGA_Athena_EnvCampFire_C::Destroyed' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_HotfixEnabled) == 0x000828, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_HotfixEnabled' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, TraceOffset) == 0x000848, "Member 'AB_BGA_Athena_EnvCampFire_C::TraceOffset' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Season7Campfire) == 0x000854, "Member 'AB_BGA_Athena_EnvCampFire_C::Season7Campfire' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, CustomSpecialS7Tags) == 0x000858, "Member 'AB_BGA_Athena_EnvCampFire_C::CustomSpecialS7Tags' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, SpecialS7FireTime) == 0x000878, "Member 'AB_BGA_Athena_EnvCampFire_C::SpecialS7FireTime' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, DousedSmokeWispTimer) == 0x000880, "Member 'AB_BGA_Athena_EnvCampFire_C::DousedSmokeWispTimer' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, S7SuccessEmitter) == 0x000888, "Member 'AB_BGA_Athena_EnvCampFire_C::S7SuccessEmitter' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, S7SuccessSound) == 0x000890, "Member 'AB_BGA_Athena_EnvCampFire_C::S7SuccessSound' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, BlockInteraction) == 0x000898, "Member 'AB_BGA_Athena_EnvCampFire_C::BlockInteraction' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, LitRepBool) == 0x00089C, "Member 'AB_BGA_Athena_EnvCampFire_C::LitRepBool' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, DousedCue) == 0x0008A0, "Member 'AB_BGA_Athena_EnvCampFire_C::DousedCue' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FireCue) == 0x0008A8, "Member 'AB_BGA_Athena_EnvCampFire_C::FireCue' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, DeathCue) == 0x0008B0, "Member 'AB_BGA_Athena_EnvCampFire_C::DeathCue' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_Light_Cost) == 0x0008B8, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_Light_Cost' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Text_Light) == 0x0008D8, "Member 'AB_BGA_Athena_EnvCampFire_C::Text_Light' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Text_LightCost) == 0x0008F0, "Member 'AB_BGA_Athena_EnvCampFire_C::Text_LightCost' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Text_LightCostNeedMore) == 0x000908, "Member 'AB_BGA_Athena_EnvCampFire_C::Text_LightCostNeedMore' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Item_Wood) == 0x000920, "Member 'AB_BGA_Athena_EnvCampFire_C::Item_Wood' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Stoked) == 0x000928, "Member 'AB_BGA_Athena_EnvCampFire_C::Stoked' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, StokedCue) == 0x00092C, "Member 'AB_BGA_Athena_EnvCampFire_C::StokedCue' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_Stoke_Cost) == 0x000938, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_Stoke_Cost' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_HotfixStokeEnabled) == 0x000958, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_HotfixStokeEnabled' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Text_StokeCostNeedMore) == 0x000978, "Member 'AB_BGA_Athena_EnvCampFire_C::Text_StokeCostNeedMore' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, HasBeenLit) == 0x000990, "Member 'AB_BGA_Athena_EnvCampFire_C::HasBeenLit' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, Row_ReplaceCampfire) == 0x000998, "Member 'AB_BGA_Athena_EnvCampFire_C::Row_ReplaceCampfire' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, ActorToReplaceWith) == 0x0009B8, "Member 'AB_BGA_Athena_EnvCampFire_C::ActorToReplaceWith' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, CurieActivated) == 0x0009C0, "Member 'AB_BGA_Athena_EnvCampFire_C::CurieActivated' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FloodLevel) == 0x0009C8, "Member 'AB_BGA_Athena_EnvCampFire_C::FloodLevel' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, FloodHeightPerLevel) == 0x0009E8, "Member 'AB_BGA_Athena_EnvCampFire_C::FloodHeightPerLevel' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, OceanHeight) == 0x0009EC, "Member 'AB_BGA_Athena_EnvCampFire_C::OceanHeight' has a wrong offset!");
static_assert(offsetof(AB_BGA_Athena_EnvCampFire_C, InteractHandleMap) == 0x0009F0, "Member 'AB_BGA_Athena_EnvCampFire_C::InteractHandleMap' has a wrong offset!");

}

