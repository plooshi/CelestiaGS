#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ApolloSnowSetup

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ApolloSnowSetup.BP_ApolloSnowSetup_C
// 0x00D0 (0x02F0 - 0x0220)
class ABP_ApolloSnowSetup_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SnowAltitudeProxy;                                 // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SnowAmount;                                        // 0x0238(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8446[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateFontInfo                         SnowFont;                                          // 0x0248(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortGameStateAthena*                   BRGameState;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PendingMinimapRefresh;                             // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DidEverRepNotify;                                  // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8447[0x2];                                     // 0x02A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallingSnow;                                       // 0x02A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         LerpB;                                             // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFallingSnow;                                    // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_StartHeight;                                  // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Snow_EndHeight;                                    // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentSnowAltitude;                               // 0x02B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebug;                                         // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8448[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FallingSnow_Curve;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  GalileoPlaylist;                                   // 0x02C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SnowFalling;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ApolloSnowSetup(int32 EntryPoint);
	void SetSnowFallMPCValue();
	void RefreshMapLocations();
	void SnowTestDate(int32 Month, int32 Day, int32 Year, int32 Hour);
	void SetFallingSnow(float Intensity);
	void SetGroundMPCValue();
	void ReceiveBeginPlay();
	void RefreshCalender__Authority_Only_();
	void SetFullSnowEd();
	void SetStartSnowEd();
	void SetSnow(float Intensity);
	void OnReady_0A511B314AE165C51798519FB84738B8(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void OnReady_7D09D013416BB73451694F9CEF910985();
	void OnReady_E426AA7F4F2319EA06FBA2B9905F0B24(class AGameStateBase* GameState);
	void UserConstructionScript();
	void OnRep_Snow_Amount();
	void MakeLocationVisibleInSnow(const struct FGameplayTag& LocationTag);
	void SetSnowAltitude(float Param_SnowAmount);
	void ProxyCalendarEventRatio(const struct FDateTime& Start_Time, const struct FDateTime& End_Time, const struct FDateTime& EventTime, float* Ratio, int32* EventHourLength, class FString* EventInfo, bool* EventActive);
	void OnRep_SnowFalling();
	void SetSnowFall(float Param_FallingSnow);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ApolloSnowSetup_C">();
	}
	static class ABP_ApolloSnowSetup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ApolloSnowSetup_C>();
	}
};
static_assert(alignof(ABP_ApolloSnowSetup_C) == 0x000008, "Wrong alignment on ABP_ApolloSnowSetup_C");
static_assert(sizeof(ABP_ApolloSnowSetup_C) == 0x0002F0, "Wrong size on ABP_ApolloSnowSetup_C");
static_assert(offsetof(ABP_ApolloSnowSetup_C, UberGraphFrame) == 0x000220, "Member 'ABP_ApolloSnowSetup_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, SnowAltitudeProxy) == 0x000228, "Member 'ABP_ApolloSnowSetup_C::SnowAltitudeProxy' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_ApolloSnowSetup_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, SnowAmount) == 0x000238, "Member 'ABP_ApolloSnowSetup_C::SnowAmount' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, Curve) == 0x000240, "Member 'ABP_ApolloSnowSetup_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, SnowFont) == 0x000248, "Member 'ABP_ApolloSnowSetup_C::SnowFont' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, BRGameState) == 0x000298, "Member 'ABP_ApolloSnowSetup_C::BRGameState' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, PendingMinimapRefresh) == 0x0002A0, "Member 'ABP_ApolloSnowSetup_C::PendingMinimapRefresh' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, DidEverRepNotify) == 0x0002A1, "Member 'ABP_ApolloSnowSetup_C::DidEverRepNotify' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, FallingSnow) == 0x0002A4, "Member 'ABP_ApolloSnowSetup_C::FallingSnow' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, LerpB) == 0x0002A8, "Member 'ABP_ApolloSnowSetup_C::LerpB' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, MaxFallingSnow) == 0x0002AC, "Member 'ABP_ApolloSnowSetup_C::MaxFallingSnow' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, Snow_StartHeight) == 0x0002B0, "Member 'ABP_ApolloSnowSetup_C::Snow_StartHeight' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, Snow_EndHeight) == 0x0002B4, "Member 'ABP_ApolloSnowSetup_C::Snow_EndHeight' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, CurrentSnowAltitude) == 0x0002B8, "Member 'ABP_ApolloSnowSetup_C::CurrentSnowAltitude' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, ShowDebug) == 0x0002BC, "Member 'ABP_ApolloSnowSetup_C::ShowDebug' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, FallingSnow_Curve) == 0x0002C0, "Member 'ABP_ApolloSnowSetup_C::FallingSnow_Curve' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, GalileoPlaylist) == 0x0002C8, "Member 'ABP_ApolloSnowSetup_C::GalileoPlaylist' has a wrong offset!");
static_assert(offsetof(ABP_ApolloSnowSetup_C, SnowFalling) == 0x0002E8, "Member 'ABP_ApolloSnowSetup_C::SnowFalling' has a wrong offset!");

}

