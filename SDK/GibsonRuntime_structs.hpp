#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GibsonRuntime

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct GibsonRuntime.FortAthenaGibsonSquadDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFortAthenaGibsonSquadDataTableRow final : public FTableRowBase
{
public:
	TSubclassOf<class UFortAthenaAIBotSpawnerData> BotSpawnerData;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QtyMin;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         QtyMax;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFortAthenaGibsonSquadDataTableRow) == 0x000008, "Wrong alignment on FFortAthenaGibsonSquadDataTableRow");
static_assert(sizeof(FFortAthenaGibsonSquadDataTableRow) == 0x000018, "Wrong size on FFortAthenaGibsonSquadDataTableRow");
static_assert(offsetof(FFortAthenaGibsonSquadDataTableRow, BotSpawnerData) == 0x000008, "Member 'FFortAthenaGibsonSquadDataTableRow::BotSpawnerData' has a wrong offset!");
static_assert(offsetof(FFortAthenaGibsonSquadDataTableRow, QtyMin) == 0x000010, "Member 'FFortAthenaGibsonSquadDataTableRow::QtyMin' has a wrong offset!");
static_assert(offsetof(FFortAthenaGibsonSquadDataTableRow, QtyMax) == 0x000014, "Member 'FFortAthenaGibsonSquadDataTableRow::QtyMax' has a wrong offset!");

// ScriptStruct GibsonRuntime.MutatorGibsonSquadMemberSpawningInfo
// 0x0048 (0x0048 - 0x0000)
struct FMutatorGibsonSquadMemberSpawningInfo final
{
public:
	uint8                                         SquadId;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnLocation;                                     // 0x0004(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotator;                                      // 0x0010(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4B[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAthenaAIBotSpawnerData*            BotSpawnerDataToSpawn;                             // 0x0020(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AFortAthenaPatrolPath>   PatrolPath;                                        // 0x0028(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingPatrolPointIndex;                          // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsPatrollingBackward : 1;                         // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3F4C[0x13];                                    // 0x0035(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorGibsonSquadMemberSpawningInfo) == 0x000008, "Wrong alignment on FMutatorGibsonSquadMemberSpawningInfo");
static_assert(sizeof(FMutatorGibsonSquadMemberSpawningInfo) == 0x000048, "Wrong size on FMutatorGibsonSquadMemberSpawningInfo");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, SquadId) == 0x000000, "Member 'FMutatorGibsonSquadMemberSpawningInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, SpawnLocation) == 0x000004, "Member 'FMutatorGibsonSquadMemberSpawningInfo::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, SpawnRotator) == 0x000010, "Member 'FMutatorGibsonSquadMemberSpawningInfo::SpawnRotator' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, BotSpawnerDataToSpawn) == 0x000020, "Member 'FMutatorGibsonSquadMemberSpawningInfo::BotSpawnerDataToSpawn' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, PatrolPath) == 0x000028, "Member 'FMutatorGibsonSquadMemberSpawningInfo::PatrolPath' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSquadMemberSpawningInfo, StartingPatrolPointIndex) == 0x000030, "Member 'FMutatorGibsonSquadMemberSpawningInfo::StartingPatrolPointIndex' has a wrong offset!");

// ScriptStruct GibsonRuntime.MutatorGibsonPendingReinforcement
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMutatorGibsonPendingReinforcement final
{
public:
	uint8                                         SquadId;                                           // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4D[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  ReinforcementSpawner;                              // 0x0004(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4E[0xC];                                     // 0x000C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorGibsonPendingReinforcement) == 0x000008, "Wrong alignment on FMutatorGibsonPendingReinforcement");
static_assert(sizeof(FMutatorGibsonPendingReinforcement) == 0x000018, "Wrong size on FMutatorGibsonPendingReinforcement");
static_assert(offsetof(FMutatorGibsonPendingReinforcement, SquadId) == 0x000000, "Member 'FMutatorGibsonPendingReinforcement::SquadId' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonPendingReinforcement, ReinforcementSpawner) == 0x000004, "Member 'FMutatorGibsonPendingReinforcement::ReinforcementSpawner' has a wrong offset!");

// ScriptStruct GibsonRuntime.MutatorGibsonSpawnInfo
// 0x0010 (0x0010 - 0x0000)
struct FMutatorGibsonSpawnInfo final
{
public:
	class UFortAthenaAIBotSpawnerData*            BotSpawnerDataToSpawn;                             // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountToSpawn;                                      // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F4F[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorGibsonSpawnInfo) == 0x000008, "Wrong alignment on FMutatorGibsonSpawnInfo");
static_assert(sizeof(FMutatorGibsonSpawnInfo) == 0x000010, "Wrong size on FMutatorGibsonSpawnInfo");
static_assert(offsetof(FMutatorGibsonSpawnInfo, BotSpawnerDataToSpawn) == 0x000000, "Member 'FMutatorGibsonSpawnInfo::BotSpawnerDataToSpawn' has a wrong offset!");
static_assert(offsetof(FMutatorGibsonSpawnInfo, CountToSpawn) == 0x000008, "Member 'FMutatorGibsonSpawnInfo::CountToSpawn' has a wrong offset!");

// ScriptStruct GibsonRuntime.MutatorGibsonPathInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FMutatorGibsonPathInfo final
{
public:
	uint8                                         Pad_3F50[0x10];                                    // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMutatorGibsonPathInfo) == 0x000004, "Wrong alignment on FMutatorGibsonPathInfo");
static_assert(sizeof(FMutatorGibsonPathInfo) == 0x000010, "Wrong size on FMutatorGibsonPathInfo");

}

