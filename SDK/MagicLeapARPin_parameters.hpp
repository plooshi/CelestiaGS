#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MagicLeapARPin

#include "Basic.hpp"

#include "MagicLeapARPin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function MagicLeapARPin.MagicLeapARPinComponent.GetPinData
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapARPinComponent_GetPinData final
{
public:
	TSubclassOf<class UMagicLeapARPinSaveGame>    Param_PinDataClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMagicLeapARPinSaveGame*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinComponent_GetPinData) == 0x000008, "Wrong alignment on MagicLeapARPinComponent_GetPinData");
static_assert(sizeof(MagicLeapARPinComponent_GetPinData) == 0x000010, "Wrong size on MagicLeapARPinComponent_GetPinData");
static_assert(offsetof(MagicLeapARPinComponent_GetPinData, Param_PinDataClass) == 0x000000, "Member 'MagicLeapARPinComponent_GetPinData::Param_PinDataClass' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinComponent_GetPinData, ReturnValue) == 0x000008, "Member 'MagicLeapARPinComponent_GetPinData::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.GetPinnedPinID
// 0x0014 (0x0014 - 0x0000)
struct MagicLeapARPinComponent_GetPinnedPinID final
{
public:
	struct FGuid                                  PinID;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ACD[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinComponent_GetPinnedPinID) == 0x000004, "Wrong alignment on MagicLeapARPinComponent_GetPinnedPinID");
static_assert(sizeof(MagicLeapARPinComponent_GetPinnedPinID) == 0x000014, "Wrong size on MagicLeapARPinComponent_GetPinnedPinID");
static_assert(offsetof(MagicLeapARPinComponent_GetPinnedPinID, PinID) == 0x000000, "Member 'MagicLeapARPinComponent_GetPinnedPinID::PinID' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinComponent_GetPinnedPinID, ReturnValue) == 0x000010, "Member 'MagicLeapARPinComponent_GetPinnedPinID::ReturnValue' has a wrong offset!");

// DelegateFunction MagicLeapARPin.MagicLeapARPinComponent.PersistentEntityPinned__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature final
{
public:
	bool                                          bRestoredOrSynced;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature) == 0x000001, "Wrong alignment on MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature");
static_assert(sizeof(MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature) == 0x000001, "Wrong size on MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature");
static_assert(offsetof(MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature, bRestoredOrSynced) == 0x000000, "Member 'MagicLeapARPinComponent_PersistentEntityPinned__DelegateSignature::bRestoredOrSynced' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.PinActor
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapARPinComponent_PinActor final
{
public:
	class AActor*                                 ActorToPin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ACE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinComponent_PinActor) == 0x000008, "Wrong alignment on MagicLeapARPinComponent_PinActor");
static_assert(sizeof(MagicLeapARPinComponent_PinActor) == 0x000010, "Wrong size on MagicLeapARPinComponent_PinActor");
static_assert(offsetof(MagicLeapARPinComponent_PinActor, ActorToPin) == 0x000000, "Member 'MagicLeapARPinComponent_PinActor::ActorToPin' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinComponent_PinActor, ReturnValue) == 0x000008, "Member 'MagicLeapARPinComponent_PinActor::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.PinSceneComponent
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapARPinComponent_PinSceneComponent final
{
public:
	class USceneComponent*                        ComponentToPin;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4ACF[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinComponent_PinSceneComponent) == 0x000008, "Wrong alignment on MagicLeapARPinComponent_PinSceneComponent");
static_assert(sizeof(MagicLeapARPinComponent_PinSceneComponent) == 0x000010, "Wrong size on MagicLeapARPinComponent_PinSceneComponent");
static_assert(offsetof(MagicLeapARPinComponent_PinSceneComponent, ComponentToPin) == 0x000000, "Member 'MagicLeapARPinComponent_PinSceneComponent::ComponentToPin' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinComponent_PinSceneComponent, ReturnValue) == 0x000008, "Member 'MagicLeapARPinComponent_PinSceneComponent::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.GetPinState
// 0x0014 (0x0014 - 0x0000)
struct MagicLeapARPinComponent_GetPinState final
{
public:
	struct FMagicLeapARPinState                   State;                                             // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD0[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinComponent_GetPinState) == 0x000004, "Wrong alignment on MagicLeapARPinComponent_GetPinState");
static_assert(sizeof(MagicLeapARPinComponent_GetPinState) == 0x000014, "Wrong size on MagicLeapARPinComponent_GetPinState");
static_assert(offsetof(MagicLeapARPinComponent_GetPinState, State) == 0x000000, "Member 'MagicLeapARPinComponent_GetPinState::State' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinComponent_GetPinState, ReturnValue) == 0x000010, "Member 'MagicLeapARPinComponent_GetPinState::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.IsPinned
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinComponent_IsPinned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinComponent_IsPinned) == 0x000001, "Wrong alignment on MagicLeapARPinComponent_IsPinned");
static_assert(sizeof(MagicLeapARPinComponent_IsPinned) == 0x000001, "Wrong size on MagicLeapARPinComponent_IsPinned");
static_assert(offsetof(MagicLeapARPinComponent_IsPinned, ReturnValue) == 0x000000, "Member 'MagicLeapARPinComponent_IsPinned::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinComponent.PinRestoredOrSynced
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinComponent_PinRestoredOrSynced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinComponent_PinRestoredOrSynced) == 0x000001, "Wrong alignment on MagicLeapARPinComponent_PinRestoredOrSynced");
static_assert(sizeof(MagicLeapARPinComponent_PinRestoredOrSynced) == 0x000001, "Wrong size on MagicLeapARPinComponent_PinRestoredOrSynced");
static_assert(offsetof(MagicLeapARPinComponent_PinRestoredOrSynced, ReturnValue) == 0x000000, "Member 'MagicLeapARPinComponent_PinRestoredOrSynced::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.BindToOnMagicLeapARPinUpdatedDelegate
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate final
{
public:
	TDelegate<void(TArray<struct FGuid>& Added, TArray<struct FGuid>& Updated, TArray<struct FGuid>& Deleted)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate) == 0x000010, "Wrong size on MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate, Delegate) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_BindToOnMagicLeapARPinUpdatedDelegate::Delegate' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.CreateTracker
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinFunctionLibrary_CreateTracker final
{
public:
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_CreateTracker) == 0x000001, "Wrong alignment on MagicLeapARPinFunctionLibrary_CreateTracker");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_CreateTracker) == 0x000001, "Wrong size on MagicLeapARPinFunctionLibrary_CreateTracker");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_CreateTracker, ReturnValue) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_CreateTracker::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.DestroyTracker
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinFunctionLibrary_DestroyTracker final
{
public:
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_DestroyTracker) == 0x000001, "Wrong alignment on MagicLeapARPinFunctionLibrary_DestroyTracker");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_DestroyTracker) == 0x000001, "Wrong size on MagicLeapARPinFunctionLibrary_DestroyTracker");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_DestroyTracker, ReturnValue) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_DestroyTracker::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetARPinPositionAndOrientation
// 0x002C (0x002C - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation final
{
public:
	struct FGuid                                  PinID;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          PinFoundInEnvironment;                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD1[0x2];                                     // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation) == 0x00002C, "Wrong size on MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation, PinID) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation::PinID' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation, Position) == 0x000010, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation::Position' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation, Orientation) == 0x00001C, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation::Orientation' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation, PinFoundInEnvironment) == 0x000028, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation::PinFoundInEnvironment' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation, ReturnValue) == 0x000029, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetARPinPositionAndOrientation_TrackingSpace
// 0x002C (0x002C - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace final
{
public:
	struct FGuid                                  PinID;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Orientation;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          PinFoundInEnvironment;                             // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD2[0x2];                                     // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace) == 0x00002C, "Wrong size on MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace, PinID) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace::PinID' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace, Position) == 0x000010, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace::Position' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace, Orientation) == 0x00001C, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace::Orientation' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace, PinFoundInEnvironment) == 0x000028, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace::PinFoundInEnvironment' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace, ReturnValue) == 0x000029, "Member 'MagicLeapARPinFunctionLibrary_GetARPinPositionAndOrientation_TrackingSpace::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetARPinState
// 0x0024 (0x0024 - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetARPinState final
{
public:
	struct FGuid                                  PinID;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMagicLeapARPinState                   State;                                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD3[0x3];                                     // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetARPinState) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetARPinState");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetARPinState) == 0x000024, "Wrong size on MagicLeapARPinFunctionLibrary_GetARPinState");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinState, PinID) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetARPinState::PinID' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinState, State) == 0x000010, "Member 'MagicLeapARPinFunctionLibrary_GetARPinState::State' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinState, ReturnValue) == 0x000020, "Member 'MagicLeapARPinFunctionLibrary_GetARPinState::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetARPinStateToString
// 0x0020 (0x0020 - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetARPinStateToString final
{
public:
	struct FMagicLeapARPinState                   State;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetARPinStateToString) == 0x000008, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetARPinStateToString");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetARPinStateToString) == 0x000020, "Wrong size on MagicLeapARPinFunctionLibrary_GetARPinStateToString");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinStateToString, State) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetARPinStateToString::State' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetARPinStateToString, ReturnValue) == 0x000010, "Member 'MagicLeapARPinFunctionLibrary_GetARPinStateToString::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetAvailableARPins
// 0x0020 (0x0020 - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetAvailableARPins final
{
public:
	int32                                         NumRequested;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD4[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGuid>                          Pins;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetAvailableARPins) == 0x000008, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetAvailableARPins");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetAvailableARPins) == 0x000020, "Wrong size on MagicLeapARPinFunctionLibrary_GetAvailableARPins");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetAvailableARPins, NumRequested) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetAvailableARPins::NumRequested' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetAvailableARPins, Pins) == 0x000008, "Member 'MagicLeapARPinFunctionLibrary_GetAvailableARPins::Pins' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetAvailableARPins, ReturnValue) == 0x000018, "Member 'MagicLeapARPinFunctionLibrary_GetAvailableARPins::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetClosestARPin
// 0x0020 (0x0020 - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetClosestARPin final
{
public:
	struct FVector                                SearchPoint;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PinID;                                             // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD6[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetClosestARPin) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetClosestARPin");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetClosestARPin) == 0x000020, "Wrong size on MagicLeapARPinFunctionLibrary_GetClosestARPin");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetClosestARPin, SearchPoint) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetClosestARPin::SearchPoint' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetClosestARPin, PinID) == 0x00000C, "Member 'MagicLeapARPinFunctionLibrary_GetClosestARPin::PinID' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetClosestARPin, ReturnValue) == 0x00001C, "Member 'MagicLeapARPinFunctionLibrary_GetClosestARPin::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.GetNumAvailableARPins
// 0x0008 (0x0008 - 0x0000)
struct MagicLeapARPinFunctionLibrary_GetNumAvailableARPins final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMagicLeapPassableWorldError                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD7[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_GetNumAvailableARPins) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_GetNumAvailableARPins");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_GetNumAvailableARPins) == 0x000008, "Wrong size on MagicLeapARPinFunctionLibrary_GetNumAvailableARPins");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetNumAvailableARPins, Count) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_GetNumAvailableARPins::Count' has a wrong offset!");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_GetNumAvailableARPins, ReturnValue) == 0x000004, "Member 'MagicLeapARPinFunctionLibrary_GetNumAvailableARPins::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.IsTrackerValid
// 0x0001 (0x0001 - 0x0000)
struct MagicLeapARPinFunctionLibrary_IsTrackerValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_IsTrackerValid) == 0x000001, "Wrong alignment on MagicLeapARPinFunctionLibrary_IsTrackerValid");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_IsTrackerValid) == 0x000001, "Wrong size on MagicLeapARPinFunctionLibrary_IsTrackerValid");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_IsTrackerValid, ReturnValue) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_IsTrackerValid::ReturnValue' has a wrong offset!");

// Function MagicLeapARPin.MagicLeapARPinFunctionLibrary.UnBindToOnMagicLeapARPinUpdatedDelegate
// 0x0010 (0x0010 - 0x0000)
struct MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate final
{
public:
	TDelegate<void(TArray<struct FGuid>& Added, TArray<struct FGuid>& Updated, TArray<struct FGuid>& Deleted)> Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate) == 0x000004, "Wrong alignment on MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate");
static_assert(sizeof(MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate) == 0x000010, "Wrong size on MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate");
static_assert(offsetof(MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate, Delegate) == 0x000000, "Member 'MagicLeapARPinFunctionLibrary_UnBindToOnMagicLeapARPinUpdatedDelegate::Delegate' has a wrong offset!");

}

