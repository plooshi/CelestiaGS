#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AlterationWidget

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AlterationWidget.AlterationWidget_C
// 0x0108 (0x0370 - 0x0268)
class UAlterationWidget_C final : public UFortAlterationWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0268(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       TextFade;                                          // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonTextBlock*                       AlterationDescription;                             // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       AlterationName;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       AlterationShortDescription;                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ContentHBox;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonBorder*                          EvolutionBorder;                                   // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             ExtraContentSlot;                                  // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageBackground;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLocked;                                       // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLockPerk;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  InfoSwitcher;                                      // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LargeInfo;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       LazyImageAlteration;                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LevelRequired;                                     // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         LockedBox;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  PerkModeSwitcher;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               PipSizeBox;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ScaleBoxIcon;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           SmallInfo;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UpgradePips;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          bIncludeName;                                      // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIncludeShortDescription;                          // 0x0311(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bIncludeDescription;                               // 0x0312(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	EFortBrushSize                                IconSize;                                          // 0x0313(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          bUseLargeFormatName;                               // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5FEE[0x3];                                     // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Locked_Description_Style;                          // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Locked_Text_Style;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldShowRarity;                                  // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5FEF[0x7];                                     // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 EvolutionHighlightStyle;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UClass*                                 StandardStyle;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FLinearColor                           UnlockedColor;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LockedColor;                                       // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NewVar_0;                                          // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	TSoftObjectPtr<class UTexture2D> GetValidLazyTexture();
	void HasValidTexture(bool* ValidBrush);
	void IsGamplaySlot(class UFortAlterationItemDefinition* Alteration, bool* Result);
	void TriggerTextAnimation();
	void SetWidgetSettings(bool bInIncludeName, bool bInIncludeShortDescription, bool bInIncludeDescription, EFortBrushSize InIconSize, bool bInUseLargeFormatName, bool InShouldShowRarity);
	void InitLockedLayout();
	void SetEvolutionDetails();
	void UpdatePips();
	void InitDescriptiveText();
	void InitIcon();
	bool ShouldFadeAlteration();
	struct FLinearColor GetHighlightColor();
	void OnSetup();
	void ExecuteUbergraph_AlterationWidget(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AlterationWidget_C">();
	}
	static class UAlterationWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAlterationWidget_C>();
	}
};
static_assert(alignof(UAlterationWidget_C) == 0x000008, "Wrong alignment on UAlterationWidget_C");
static_assert(sizeof(UAlterationWidget_C) == 0x000370, "Wrong size on UAlterationWidget_C");
static_assert(offsetof(UAlterationWidget_C, UberGraphFrame) == 0x000268, "Member 'UAlterationWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, TextFade) == 0x000270, "Member 'UAlterationWidget_C::TextFade' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, AlterationDescription) == 0x000278, "Member 'UAlterationWidget_C::AlterationDescription' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, AlterationName) == 0x000280, "Member 'UAlterationWidget_C::AlterationName' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, AlterationShortDescription) == 0x000288, "Member 'UAlterationWidget_C::AlterationShortDescription' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ContentHBox) == 0x000290, "Member 'UAlterationWidget_C::ContentHBox' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, EvolutionBorder) == 0x000298, "Member 'UAlterationWidget_C::EvolutionBorder' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ExtraContentSlot) == 0x0002A0, "Member 'UAlterationWidget_C::ExtraContentSlot' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ImageBackground) == 0x0002A8, "Member 'UAlterationWidget_C::ImageBackground' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ImageLocked) == 0x0002B0, "Member 'UAlterationWidget_C::ImageLocked' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ImageLockPerk) == 0x0002B8, "Member 'UAlterationWidget_C::ImageLockPerk' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, InfoSwitcher) == 0x0002C0, "Member 'UAlterationWidget_C::InfoSwitcher' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, LargeInfo) == 0x0002C8, "Member 'UAlterationWidget_C::LargeInfo' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, LazyImageAlteration) == 0x0002D0, "Member 'UAlterationWidget_C::LazyImageAlteration' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, LevelRequired) == 0x0002D8, "Member 'UAlterationWidget_C::LevelRequired' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, LockedBox) == 0x0002E0, "Member 'UAlterationWidget_C::LockedBox' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, PerkModeSwitcher) == 0x0002E8, "Member 'UAlterationWidget_C::PerkModeSwitcher' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, PipSizeBox) == 0x0002F0, "Member 'UAlterationWidget_C::PipSizeBox' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ScaleBoxIcon) == 0x0002F8, "Member 'UAlterationWidget_C::ScaleBoxIcon' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, SmallInfo) == 0x000300, "Member 'UAlterationWidget_C::SmallInfo' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, UpgradePips) == 0x000308, "Member 'UAlterationWidget_C::UpgradePips' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, bIncludeName) == 0x000310, "Member 'UAlterationWidget_C::bIncludeName' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, bIncludeShortDescription) == 0x000311, "Member 'UAlterationWidget_C::bIncludeShortDescription' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, bIncludeDescription) == 0x000312, "Member 'UAlterationWidget_C::bIncludeDescription' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, IconSize) == 0x000313, "Member 'UAlterationWidget_C::IconSize' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, bUseLargeFormatName) == 0x000314, "Member 'UAlterationWidget_C::bUseLargeFormatName' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, Locked_Description_Style) == 0x000318, "Member 'UAlterationWidget_C::Locked_Description_Style' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, Locked_Text_Style) == 0x000320, "Member 'UAlterationWidget_C::Locked_Text_Style' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, ShouldShowRarity) == 0x000328, "Member 'UAlterationWidget_C::ShouldShowRarity' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, EvolutionHighlightStyle) == 0x000330, "Member 'UAlterationWidget_C::EvolutionHighlightStyle' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, StandardStyle) == 0x000338, "Member 'UAlterationWidget_C::StandardStyle' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, UnlockedColor) == 0x000340, "Member 'UAlterationWidget_C::UnlockedColor' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, LockedColor) == 0x000350, "Member 'UAlterationWidget_C::LockedColor' has a wrong offset!");
static_assert(offsetof(UAlterationWidget_C, NewVar_0) == 0x000360, "Member 'UAlterationWidget_C::NewVar_0' has a wrong offset!");

}

