#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaQuickbarSlotBase

#include "Basic.hpp"

#include "ItemDisplayStyle_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.UpdateItemBoxSize_Native
// 0x0038 (0x0038 - 0x0000)
struct AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6696[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6697[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetSlotSizeForItem_ReturnValue;           // 0x000C(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6698[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_2;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native) == 0x000004, "Wrong alignment on AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native");
static_assert(sizeof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native) == 0x000038, "Wrong size on AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, Item_Type_To_Show) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::Item_Type_To_Show' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_Lerp_ReturnValue) == 0x000004, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_GetSlotSizeForItem_ReturnValue) == 0x00000C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_GetSlotSizeForItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000014, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_BreakVector2D_X) == 0x00001C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_BreakVector2D_Y) == 0x000020, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_BreakVector2D_X_1) == 0x000024, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_BreakVector2D_Y_1) == 0x000028, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_GetType_ReturnValue) == 0x00002C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_Lerp_ReturnValue_1) == 0x000030, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native, CallFunc_Lerp_ReturnValue_2) == 0x000034, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Native::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.UpdateItemBoxSize_Slow
// 0x0070 (0x0070 - 0x0000)
struct AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemType                                 CallFunc_GetType_ReturnValue;                      // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldUseNewItemCards_ReturnValue;        // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select_Default;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6699[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue;            // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue_1;                // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669A[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue_1;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortItemType                                 K2Node_Select_Default_1;                           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669B[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetCardDimensions_ReturnValue_1;          // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow) == 0x000008, "Wrong alignment on AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow");
static_assert(sizeof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow) == 0x000070, "Wrong size on AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, Item_Type_To_Show) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::Item_Type_To_Show' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_GetType_ReturnValue) == 0x000003, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_GetType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, Temp_bool_Variable) == 0x000004, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, Temp_bool_Variable_1) == 0x000005, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_ShouldUseNewItemCards_ReturnValue) == 0x000006, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_ShouldUseNewItemCards_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_GetCardSize_ReturnValue) == 0x000007, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, K2Node_Select_Default) == 0x000010, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_GetCardDimensions_ReturnValue) == 0x000014, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_GetCardDimensions_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue) == 0x00001C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_BreakVector2D_X) == 0x000020, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_BreakVector2D_Y) == 0x000024, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000028, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000030, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_GetCardSize_ReturnValue_1) == 0x000034, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_GetCardSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_SlotAsOverlaySlot_ReturnValue_1) == 0x000038, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_SlotAsOverlaySlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, K2Node_Select_Default_1) == 0x000040, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_GetCardDimensions_ReturnValue_1) == 0x000044, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_GetCardDimensions_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x00004C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_BreakVector2D_X_1) == 0x000050, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_BreakVector2D_Y_1) == 0x000054, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x000058, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x00005C, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x000060, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Lerp_ReturnValue) == 0x000064, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow, CallFunc_Lerp_ReturnValue_1) == 0x000068, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize_Slow::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.OnMaximizedStarted
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_OnMaximizedStarted final
{
public:
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_OnMaximizedStarted) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_OnMaximizedStarted");
static_assert(sizeof(AthenaQuickbarSlotBase_C_OnMaximizedStarted) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_OnMaximizedStarted");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnMaximizedStarted, CallFunc_GetCardSize_ReturnValue) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_OnMaximizedStarted::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.OnMinimizedFinished
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_OnMinimizedFinished final
{
public:
	EFortItemCardSize                             CallFunc_GetCardSize_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_OnMinimizedFinished) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_OnMinimizedFinished");
static_assert(sizeof(AthenaQuickbarSlotBase_C_OnMinimizedFinished) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_OnMinimizedFinished");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnMinimizedFinished, CallFunc_GetCardSize_ReturnValue) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_OnMinimizedFinished::CallFunc_GetCardSize_ReturnValue' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.SetAnimatedBoxScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong alignment on AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor");
static_assert(sizeof(AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor) == 0x000004, "Wrong size on AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor, Value) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_SetAnimatedBoxScaleFactor::Value' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.SwitchToNative
// 0x0014 (0x0014 - 0x0000)
struct AthenaQuickbarSlotBase_C_SwitchToNative final
{
public:
	bool                                          UseNative;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_669C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_669D[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_SwitchToNative) == 0x000004, "Wrong alignment on AthenaQuickbarSlotBase_C_SwitchToNative");
static_assert(sizeof(AthenaQuickbarSlotBase_C_SwitchToNative) == 0x000014, "Wrong size on AthenaQuickbarSlotBase_C_SwitchToNative");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SwitchToNative, UseNative) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_SwitchToNative::UseNative' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SwitchToNative, Temp_int_Variable) == 0x000004, "Member 'AthenaQuickbarSlotBase_C_SwitchToNative::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SwitchToNative, Temp_int_Variable_1) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_SwitchToNative::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SwitchToNative, Temp_bool_Variable) == 0x00000C, "Member 'AthenaQuickbarSlotBase_C_SwitchToNative::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SwitchToNative, K2Node_Select_Default) == 0x000010, "Member 'AthenaQuickbarSlotBase_C_SwitchToNative::K2Node_Select_Default' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.InitializeInvalidation
// 0x0010 (0x0010 - 0x0000)
struct AthenaQuickbarSlotBase_C_InitializeInvalidation final
{
public:
	class UFortGlobalUIContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureState                           CallFunc_GetFeatureState_OutFeatureState;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortUIFeatureStateReason                     CallFunc_GetFeatureState_OutReason;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_InitializeInvalidation) == 0x000008, "Wrong alignment on AthenaQuickbarSlotBase_C_InitializeInvalidation");
static_assert(sizeof(AthenaQuickbarSlotBase_C_InitializeInvalidation) == 0x000010, "Wrong size on AthenaQuickbarSlotBase_C_InitializeInvalidation");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeInvalidation, CallFunc_GetContext_ReturnValue) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_InitializeInvalidation::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeInvalidation, CallFunc_GetFeatureState_OutFeatureState) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_InitializeInvalidation::CallFunc_GetFeatureState_OutFeatureState' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeInvalidation, CallFunc_GetFeatureState_OutReason) == 0x000009, "Member 'AthenaQuickbarSlotBase_C_InitializeInvalidation::CallFunc_GetFeatureState_OutReason' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeInvalidation, K2Node_SwitchEnum_CmpSuccess) == 0x00000A, "Member 'AthenaQuickbarSlotBase_C_InitializeInvalidation::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.UpdateItemBoxSize
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_UpdateItemBoxSize final
{
public:
	EFortItemType                                 Item_Type_To_Show;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_UpdateItemBoxSize");
static_assert(sizeof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_UpdateItemBoxSize");
static_assert(offsetof(AthenaQuickbarSlotBase_C_UpdateItemBoxSize, Item_Type_To_Show) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_UpdateItemBoxSize::Item_Type_To_Show' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.OnCooldownStopped
// 0x0002 (0x0002 - 0x0000)
struct AthenaQuickbarSlotBase_C_OnCooldownStopped final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_OnCooldownStopped) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_OnCooldownStopped");
static_assert(sizeof(AthenaQuickbarSlotBase_C_OnCooldownStopped) == 0x000002, "Wrong size on AthenaQuickbarSlotBase_C_OnCooldownStopped");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnCooldownStopped, CooldownType) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_OnCooldownStopped::CooldownType' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnCooldownStopped, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'AthenaQuickbarSlotBase_C_OnCooldownStopped::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.OnCooldownStarted
// 0x0002 (0x0002 - 0x0000)
struct AthenaQuickbarSlotBase_C_OnCooldownStarted final
{
public:
	EFortItemCooldownType                         CooldownType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_OnCooldownStarted) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_OnCooldownStarted");
static_assert(sizeof(AthenaQuickbarSlotBase_C_OnCooldownStarted) == 0x000002, "Wrong size on AthenaQuickbarSlotBase_C_OnCooldownStarted");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnCooldownStarted, CooldownType) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_OnCooldownStarted::CooldownType' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_OnCooldownStarted, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'AthenaQuickbarSlotBase_C_OnCooldownStarted::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.InitializeCooldowns
// 0x0030 (0x0030 - 0x0000)
struct AthenaQuickbarSlotBase_C_InitializeCooldowns final
{
public:
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_669E[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(EFortItemCooldownType CooldownType)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x001C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_InitializeCooldowns) == 0x000008, "Wrong alignment on AthenaQuickbarSlotBase_C_InitializeCooldowns");
static_assert(sizeof(AthenaQuickbarSlotBase_C_InitializeCooldowns) == 0x000030, "Wrong size on AthenaQuickbarSlotBase_C_InitializeCooldowns");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeCooldowns, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_InitializeCooldowns::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeCooldowns, K2Node_DynamicCast_bSuccess) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_InitializeCooldowns::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'AthenaQuickbarSlotBase_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_InitializeCooldowns, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'AthenaQuickbarSlotBase_C_InitializeCooldowns::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.MaximizeSlot
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_MaximizeSlot final
{
public:
	bool                                          bShouldSkipAnimation;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_MaximizeSlot) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_MaximizeSlot");
static_assert(sizeof(AthenaQuickbarSlotBase_C_MaximizeSlot) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_MaximizeSlot");
static_assert(offsetof(AthenaQuickbarSlotBase_C_MaximizeSlot, bShouldSkipAnimation) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_MaximizeSlot::bShouldSkipAnimation' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.MinimizeSlot
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_MinimizeSlot final
{
public:
	bool                                          bShouldSkipAnimation;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_MinimizeSlot) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_MinimizeSlot");
static_assert(sizeof(AthenaQuickbarSlotBase_C_MinimizeSlot) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_MinimizeSlot");
static_assert(offsetof(AthenaQuickbarSlotBase_C_MinimizeSlot, bShouldSkipAnimation) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_MinimizeSlot::bShouldSkipAnimation' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.SetSlotSelected
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_SetSlotSelected final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_SetSlotSelected) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_SetSlotSelected");
static_assert(sizeof(AthenaQuickbarSlotBase_C_SetSlotSelected) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_SetSlotSelected");
static_assert(offsetof(AthenaQuickbarSlotBase_C_SetSlotSelected, bSelected) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_SetSlotSelected::bSelected' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct AthenaQuickbarSlotBase_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_PreConstruct) == 0x000001, "Wrong alignment on AthenaQuickbarSlotBase_C_PreConstruct");
static_assert(sizeof(AthenaQuickbarSlotBase_C_PreConstruct) == 0x000001, "Wrong size on AthenaQuickbarSlotBase_C_PreConstruct");
static_assert(offsetof(AthenaQuickbarSlotBase_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function AthenaQuickbarSlotBase.AthenaQuickbarSlotBase_C.ExecuteUbergraph_AthenaQuickbarSlotBase
// 0x00C0 (0x00C0 - 0x0000)
struct AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_669F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Temp_object_Variable_4;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66A0[0x5];                                     // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bShouldSkipAnimation_1;               // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bShouldSkipAnimation;                 // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A1[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown;       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bSelected;                            // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A2[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuickbarSlotCooldown_C*                K2Node_DynamicCast_AsQuickbar_Slot_Cooldown_1;     // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66A3[0x6];                                     // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEndTime_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66A4[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Temp_object_Variable_6;                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A5[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemDisplayStyle                             Temp_byte_Variable_2;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66A6[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Select_Default_1;                           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66A7[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase) == 0x000008, "Wrong alignment on AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase");
static_assert(sizeof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase) == 0x0000C0, "Wrong size on AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, EntryPoint) == 0x000000, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable) == 0x000008, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_1) == 0x000010, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_2) == 0x000018, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_3) == 0x000020, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_4) == 0x000028, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_bool_Variable) == 0x000030, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_byte_Variable) == 0x000031, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_byte_Variable_1) == 0x000032, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_5) == 0x000038, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Event_bShouldSkipAnimation_1) == 0x000040, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Event_bShouldSkipAnimation_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_SwitchEnum_CmpSuccess) == 0x000041, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Event_bShouldSkipAnimation) == 0x000042, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Event_bShouldSkipAnimation' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown) == 0x000048, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Event_bSelected) == 0x000051, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Event_bSelected' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_DynamicCast_AsQuickbar_Slot_Cooldown_1) == 0x000058, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_DynamicCast_AsQuickbar_Slot_Cooldown_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_DynamicCast_bSuccess_1) == 0x000060, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Select_Default) == 0x000061, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_GetEndTime_ReturnValue) == 0x000070, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_GetEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_object_Variable_6) == 0x000078, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_PlayAnimation_ReturnValue_1) == 0x000080, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_BooleanOR_ReturnValue) == 0x000088, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000090, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, Temp_byte_Variable_2) == 0x000098, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000A0, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Select_Default_1) == 0x0000A8, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, K2Node_Event_IsDesignTime) == 0x0000B0, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase, CallFunc_GetRuntimeOptions_ReturnValue) == 0x0000B8, "Member 'AthenaQuickbarSlotBase_C_ExecuteUbergraph_AthenaQuickbarSlotBase::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");

}

