#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ThrowConsumable

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_ThrowConsumable.GA_ThrowConsumable_C
// 0x0378 (0x0DF0 - 0x0A78)
class UGA_ThrowConsumable_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A78(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AbilityKeyPressed;                                 // 0x0A88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InThrowWindup;                                     // 0x0A89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FC7[0x2];                                     // 0x0A8A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdditionalThrowAngle;                              // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTossPitch;                                      // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrenadeTargetingOriginOffset;                      // 0x0A94(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrenadeTargetingOriginOffset_Crouched;             // 0x0AA0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC8[0x4];                                     // 0x0AAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileBase*                    SpawnedProjectile;                                 // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Proj_ThrownProjectile;                             // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ProjectileSpeed;                                   // 0x0AC0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ProjectileGravityScale;                            // 0x0AE0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TrajectoryUpdateInterval;                          // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FC9[0x4];                                     // 0x0B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CookMonage;                                        // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           ThrowMontage;                                      // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_OnThrow;                                        // 0x0B18(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileTrajectory_C*             TrajectoryIndicator;                               // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 TrajectoryIndicatorClass;                          // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    DummyProjectile;                                   // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyMaxSpeed;                                     // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyGravity;                                      // 0x0B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyExtent;                                       // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyTimeStep;                                     // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   TrajectoryCollisionProfileName;                    // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_InWindup;                                       // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GrenadeTargetingOriginOffsetWater;                 // 0x0B58(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            Handle_GE_InWindup;                                // 0x0B64(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EC_DefaultExplosion;                               // 0x0B6C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         ExplosionEffectLevel;                              // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       ExplosionEffectContainerSpec;                      // 0x0B78(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SpawnedOnEquip;                                    // 0x0C30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCA[0x3];                                     // 0x0C31(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EC_DefaultHit;                                     // 0x0C34(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         HitEffectLevel;                                    // 0x0C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       HitEffectContainerSpec;                            // 0x0C40(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnProjectileSpawn;                                 // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HasAdditionalExplosion;                            // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCB[0x3];                                     // 0x0D09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EC_AdditionalExplosion;                            // 0x0D0C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         AdditionalExplodeLevel;                            // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       AdditionalContainerSpec;                           // 0x0D18(0x00B8)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTagContainer                  QuestCreditTargetTag;                              // 0x0DD0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)

public:
	void OnProjectileSpawn__DelegateSignature();
	void ExecuteUbergraph_GA_ThrowConsumable(int32 EntryPoint);
	void ThrowMontageStarted();
	void UpdateTrajectory();
	void CleanupTrajectoryIndicatorOnUnequip();
	void K2_ActivateAbility();
	void OnAbilityInputReleased();
	void InitTrajectoryVariables();
	void K2_OnEndAbility(bool bWasCancelled);
	void AttemptSpawnThrownProjectile();
	void ThrowProjectile();
	void OnCompleted_D89CCB8E47DB19D6DCF41F96F207CC3D();
	void OnBlendOut_D89CCB8E47DB19D6DCF41F96F207CC3D();
	void OnInterrupted_D89CCB8E47DB19D6DCF41F96F207CC3D();
	void OnCancelled_D89CCB8E47DB19D6DCF41F96F207CC3D();
	void OnFinish_96367E244486362FDDE5ED87D909C17B();
	void Triggered_01C5B37D48E3DC6F82DDC58640CE2A27(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Completed_01C5B37D48E3DC6F82DDC58640CE2A27(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void PrethrowSetup();
	void SpawnThrownProjectile(class UClass* Param_ProjectileClass, const struct FVector& ProjectileSpawnLocation, const struct FRotator& ProjectileSpawnDirection, const struct FFortGameplayEffectContainerSpec& Param_HitEffectContainerSpec, const struct FFortGameplayEffectContainerSpec& Param_ExplosionEffectContainerSpec, float ProjectileInitialSpeed, float Param_ProjectileGravityScale, class AFortProjectileBase** Param_SpawnedProjectile);
	void OnProjectileSpawned(class AFortProjectileBase* Param_SpawnedProjectile);
	void OnProjectileSetup();
	void SetupDummyProjectile();
	void UpdateTrajectorySpline();
	void PostThrowCleanup();
	void CleanupTrajectory();
	void GetProjectileInitialSpeedToUse(float* ProjectileSpeedToUse);
	void GetProjectileInitialGravityScaleToUse(float* GravityScaleToUse);
	void GetProjectileTrajectoryPoints(TArray<struct FVector>* OutSplinePoints, TArray<struct FVector>* OutSplineTangents, struct FHitResult* OutHitResult);
	class AFortProjectileTrajectory* SpawnTrajectoryIndicator(bool bSpawnOnEquip);

	void GetSpawnLocationAndRotation(struct FVector* Location, struct FRotator* Rotation) const;
	void GetOwningPlayer(class AFortPlayerPawn** Player_Pawn) const;
	void GetProjectileAdditionalThrowAngleToUse(float* AdditionalThrowAngleToUse) const;
	TSubclassOf<class AFortProjectileTrajectory> GetProjectileTrajectoryActor() const;
	bool ShouldOnlyShowTrajectoryOnUse() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_ThrowConsumable_C">();
	}
	static class UGA_ThrowConsumable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_ThrowConsumable_C>();
	}
};
static_assert(alignof(UGA_ThrowConsumable_C) == 0x000008, "Wrong alignment on UGA_ThrowConsumable_C");
static_assert(sizeof(UGA_ThrowConsumable_C) == 0x000DF0, "Wrong size on UGA_ThrowConsumable_C");
static_assert(offsetof(UGA_ThrowConsumable_C, UberGraphFrame) == 0x000A78, "Member 'UGA_ThrowConsumable_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, PlayerPawn) == 0x000A80, "Member 'UGA_ThrowConsumable_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, AbilityKeyPressed) == 0x000A88, "Member 'UGA_ThrowConsumable_C::AbilityKeyPressed' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, InThrowWindup) == 0x000A89, "Member 'UGA_ThrowConsumable_C::InThrowWindup' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, AdditionalThrowAngle) == 0x000A8C, "Member 'UGA_ThrowConsumable_C::AdditionalThrowAngle' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, MaxTossPitch) == 0x000A90, "Member 'UGA_ThrowConsumable_C::MaxTossPitch' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, GrenadeTargetingOriginOffset) == 0x000A94, "Member 'UGA_ThrowConsumable_C::GrenadeTargetingOriginOffset' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, GrenadeTargetingOriginOffset_Crouched) == 0x000AA0, "Member 'UGA_ThrowConsumable_C::GrenadeTargetingOriginOffset_Crouched' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, SpawnedProjectile) == 0x000AB0, "Member 'UGA_ThrowConsumable_C::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, Proj_ThrownProjectile) == 0x000AB8, "Member 'UGA_ThrowConsumable_C::Proj_ThrownProjectile' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, ProjectileSpeed) == 0x000AC0, "Member 'UGA_ThrowConsumable_C::ProjectileSpeed' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, ProjectileGravityScale) == 0x000AE0, "Member 'UGA_ThrowConsumable_C::ProjectileGravityScale' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, TrajectoryUpdateInterval) == 0x000B00, "Member 'UGA_ThrowConsumable_C::TrajectoryUpdateInterval' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, CookMonage) == 0x000B08, "Member 'UGA_ThrowConsumable_C::CookMonage' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, ThrowMontage) == 0x000B10, "Member 'UGA_ThrowConsumable_C::ThrowMontage' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, GC_OnThrow) == 0x000B18, "Member 'UGA_ThrowConsumable_C::GC_OnThrow' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, TrajectoryIndicator) == 0x000B20, "Member 'UGA_ThrowConsumable_C::TrajectoryIndicator' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, TrajectoryIndicatorClass) == 0x000B28, "Member 'UGA_ThrowConsumable_C::TrajectoryIndicatorClass' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, DummyProjectile) == 0x000B30, "Member 'UGA_ThrowConsumable_C::DummyProjectile' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, DummyMaxSpeed) == 0x000B38, "Member 'UGA_ThrowConsumable_C::DummyMaxSpeed' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, DummyGravity) == 0x000B3C, "Member 'UGA_ThrowConsumable_C::DummyGravity' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, DummyExtent) == 0x000B40, "Member 'UGA_ThrowConsumable_C::DummyExtent' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, DummyTimeStep) == 0x000B44, "Member 'UGA_ThrowConsumable_C::DummyTimeStep' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, TrajectoryCollisionProfileName) == 0x000B48, "Member 'UGA_ThrowConsumable_C::TrajectoryCollisionProfileName' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, GE_InWindup) == 0x000B50, "Member 'UGA_ThrowConsumable_C::GE_InWindup' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, GrenadeTargetingOriginOffsetWater) == 0x000B58, "Member 'UGA_ThrowConsumable_C::GrenadeTargetingOriginOffsetWater' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, Handle_GE_InWindup) == 0x000B64, "Member 'UGA_ThrowConsumable_C::Handle_GE_InWindup' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, EC_DefaultExplosion) == 0x000B6C, "Member 'UGA_ThrowConsumable_C::EC_DefaultExplosion' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, ExplosionEffectLevel) == 0x000B74, "Member 'UGA_ThrowConsumable_C::ExplosionEffectLevel' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, ExplosionEffectContainerSpec) == 0x000B78, "Member 'UGA_ThrowConsumable_C::ExplosionEffectContainerSpec' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, SpawnedOnEquip) == 0x000C30, "Member 'UGA_ThrowConsumable_C::SpawnedOnEquip' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, EC_DefaultHit) == 0x000C34, "Member 'UGA_ThrowConsumable_C::EC_DefaultHit' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, HitEffectLevel) == 0x000C3C, "Member 'UGA_ThrowConsumable_C::HitEffectLevel' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, HitEffectContainerSpec) == 0x000C40, "Member 'UGA_ThrowConsumable_C::HitEffectContainerSpec' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, OnProjectileSpawn) == 0x000CF8, "Member 'UGA_ThrowConsumable_C::OnProjectileSpawn' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, HasAdditionalExplosion) == 0x000D08, "Member 'UGA_ThrowConsumable_C::HasAdditionalExplosion' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, EC_AdditionalExplosion) == 0x000D0C, "Member 'UGA_ThrowConsumable_C::EC_AdditionalExplosion' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, AdditionalExplodeLevel) == 0x000D14, "Member 'UGA_ThrowConsumable_C::AdditionalExplodeLevel' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, AdditionalContainerSpec) == 0x000D18, "Member 'UGA_ThrowConsumable_C::AdditionalContainerSpec' has a wrong offset!");
static_assert(offsetof(UGA_ThrowConsumable_C, QuestCreditTargetTag) == 0x000DD0, "Member 'UGA_ThrowConsumable_C::QuestCreditTargetTag' has a wrong offset!");

}

