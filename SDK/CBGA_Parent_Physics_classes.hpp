#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CBGA_Parent_Physics

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CBGA_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CBGA_Parent_Physics.CBGA_Parent_Physics_C
// 0x0180 (0x0AD0 - 0x0950)
class ACBGA_Parent_Physics_C : public ACBGA_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_CBGA_Parent_Physics_C;              // 0x0950(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortLinkToActorComponent*              FortLinkToActor;                                   // 0x0958(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GravImpact_Loc;                                    // 0x0960(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                GravHitNormal;                                     // 0x096C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bResumeSimulation;                                 // 0x0978(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_849F[0x7];                                     // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         GravFoundBuildingOnDied;                           // 0x0980(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         GravMaxSlope;                                      // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResumeGravSimOnBegin;                              // 0x0994(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_84A0[0x3];                                     // 0x0995(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             NullHit;                                           // 0x0998(0x008C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference, AdvancedDisplay)
	bool                                          RepCollision;                                      // 0x0A24(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_84A1[0x3];                                     // 0x0A25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        HitgroundFX;                                       // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HitgroundSound;                                    // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckForBounce;                                    // 0x0A38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84A2[0x3];                                     // 0x0A39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BounceMult;                                        // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceExtraZ;                                      // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84A3[0x4];                                     // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                AdditionalBounceObject;                            // 0x0A48(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnFX;                                           // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SpawnSound;                                        // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceBounce;                                       // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84A4[0x3];                                     // 0x0A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForcedBounceMaxCount;                              // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForcedBounceCurrentCount;                          // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          CountNonForceBounces;                              // 0x0A6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_84A5[0x3];                                     // 0x0A6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForcedBounceMult;                                  // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ForcedBounceExtraZ;                                // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCollision;                                    // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_84A6[0x7];                                     // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LinkedActor;                                       // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_UsesPhysics;                                   // 0x0A88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortPhysicsObjectComponent*            PhysicsComponent;                                  // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UProjectileMovementComponent*           ProjComponent;                                     // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Proj_ImpulseVelocityDampener;                      // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Proj_WorldStopSlop;                                // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Proj_MinBounceSpeed;                               // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CBGA_Parent_Physics(int32 EntryPoint);
	void OnProjStop(const struct FHitResult& ImpactResult);
	void HandleProjHit(const struct FVector& HitNormal, const struct FHitResult& Hit);
	void OnAwakeChanged(class UPrimitiveComponent* SimulatingComponent, bool bIsAwake);
	void BndEvt__FortLinkToActor_K2Node_ComponentBoundEvent_0_OnLinkedActorDestroyed__DelegateSignature();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SpawnFXSounds();
	void PlayHitFX(const struct FVector& Location, const struct FRotator& Rotation);
	void Impulse(float DelayBeforeImpulse, float DelayBeforeCollision, const struct FVector& ImpulseOrigin, const struct FVector& ImpulseAmount, bool SetCollisionAfterImpulse);
	void ReceiveBeginPlay();
	void StopSim(const struct FHitResult& Hit);
	void HandleBinding();
	void UserConstructionScript();
	void OnRep_bResumeSimulation();
	void OnRep_RepCollision();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CBGA_Parent_Physics_C">();
	}
	static class ACBGA_Parent_Physics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACBGA_Parent_Physics_C>();
	}
};
static_assert(alignof(ACBGA_Parent_Physics_C) == 0x000010, "Wrong alignment on ACBGA_Parent_Physics_C");
static_assert(sizeof(ACBGA_Parent_Physics_C) == 0x000AD0, "Wrong size on ACBGA_Parent_Physics_C");
static_assert(offsetof(ACBGA_Parent_Physics_C, UberGraphFrame_CBGA_Parent_Physics_C) == 0x000950, "Member 'ACBGA_Parent_Physics_C::UberGraphFrame_CBGA_Parent_Physics_C' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, FortLinkToActor) == 0x000958, "Member 'ACBGA_Parent_Physics_C::FortLinkToActor' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, GravImpact_Loc) == 0x000960, "Member 'ACBGA_Parent_Physics_C::GravImpact_Loc' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, GravHitNormal) == 0x00096C, "Member 'ACBGA_Parent_Physics_C::GravHitNormal' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, bResumeSimulation) == 0x000978, "Member 'ACBGA_Parent_Physics_C::bResumeSimulation' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, GravFoundBuildingOnDied) == 0x000980, "Member 'ACBGA_Parent_Physics_C::GravFoundBuildingOnDied' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, GravMaxSlope) == 0x000990, "Member 'ACBGA_Parent_Physics_C::GravMaxSlope' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ResumeGravSimOnBegin) == 0x000994, "Member 'ACBGA_Parent_Physics_C::ResumeGravSimOnBegin' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, NullHit) == 0x000998, "Member 'ACBGA_Parent_Physics_C::NullHit' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, RepCollision) == 0x000A24, "Member 'ACBGA_Parent_Physics_C::RepCollision' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, HitgroundFX) == 0x000A28, "Member 'ACBGA_Parent_Physics_C::HitgroundFX' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, HitgroundSound) == 0x000A30, "Member 'ACBGA_Parent_Physics_C::HitgroundSound' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, CheckForBounce) == 0x000A38, "Member 'ACBGA_Parent_Physics_C::CheckForBounce' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, BounceMult) == 0x000A3C, "Member 'ACBGA_Parent_Physics_C::BounceMult' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, BounceExtraZ) == 0x000A40, "Member 'ACBGA_Parent_Physics_C::BounceExtraZ' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, AdditionalBounceObject) == 0x000A48, "Member 'ACBGA_Parent_Physics_C::AdditionalBounceObject' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, SpawnFX) == 0x000A50, "Member 'ACBGA_Parent_Physics_C::SpawnFX' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, SpawnSound) == 0x000A58, "Member 'ACBGA_Parent_Physics_C::SpawnSound' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ForceBounce) == 0x000A60, "Member 'ACBGA_Parent_Physics_C::ForceBounce' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ForcedBounceMaxCount) == 0x000A64, "Member 'ACBGA_Parent_Physics_C::ForcedBounceMaxCount' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ForcedBounceCurrentCount) == 0x000A68, "Member 'ACBGA_Parent_Physics_C::ForcedBounceCurrentCount' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, CountNonForceBounces) == 0x000A6C, "Member 'ACBGA_Parent_Physics_C::CountNonForceBounces' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ForcedBounceMult) == 0x000A70, "Member 'ACBGA_Parent_Physics_C::ForcedBounceMult' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ForcedBounceExtraZ) == 0x000A74, "Member 'ACBGA_Parent_Physics_C::ForcedBounceExtraZ' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, SpawnCollision) == 0x000A78, "Member 'ACBGA_Parent_Physics_C::SpawnCollision' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, LinkedActor) == 0x000A80, "Member 'ACBGA_Parent_Physics_C::LinkedActor' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, Row_UsesPhysics) == 0x000A88, "Member 'ACBGA_Parent_Physics_C::Row_UsesPhysics' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, PhysicsComponent) == 0x000AA8, "Member 'ACBGA_Parent_Physics_C::PhysicsComponent' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, ProjComponent) == 0x000AB0, "Member 'ACBGA_Parent_Physics_C::ProjComponent' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, Proj_ImpulseVelocityDampener) == 0x000AB8, "Member 'ACBGA_Parent_Physics_C::Proj_ImpulseVelocityDampener' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, Proj_WorldStopSlop) == 0x000ABC, "Member 'ACBGA_Parent_Physics_C::Proj_WorldStopSlop' has a wrong offset!");
static_assert(offsetof(ACBGA_Parent_Physics_C, Proj_MinBounceSpeed) == 0x000AC0, "Member 'ACBGA_Parent_Physics_C::Proj_MinBounceSpeed' has a wrong offset!");

}

