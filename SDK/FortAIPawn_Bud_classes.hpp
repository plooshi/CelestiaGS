#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortAIPawn_Bud

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass FortAIPawn_Bud.FortAIPawn_Bud_C
// 0x0150 (0x2370 - 0x2220)
class AFortAIPawn_Bud_C final : public AFortAIBuddy
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x2220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AttachPlayerAudio;                                 // 0x2228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AttachBuddyAudio;                                  // 0x2230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BounceCollision;                                   // 0x2238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_LinkBeam;                                        // 0x2240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DanceRadius;                                       // 0x2248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        GoalActor;                                         // 0x2250(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Dancing;                                        // 0x2258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_HealthShieldRegen;                              // 0x2260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            HealthShieldRegen;                                 // 0x2268(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FX_Death;                                          // 0x2270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           BeamFX;                                            // 0x2278(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Dormant;                                           // 0x2280(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Following;                                         // 0x2281(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Crouched;                                          // 0x2282(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71D0[0x1];                                     // 0x2283(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Energy;                                            // 0x2284(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         EnergyDecay;                                       // 0x2288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EnergyToRestoreFromDance;                          // 0x228C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WakeUpDelay;                                       // 0x2290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WakeUpInteractDelay;                               // 0x2294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFollowDistance;                                 // 0x2298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayTag_Dance;                                 // 0x229C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GameplayTag_Crouch;                                // 0x22A4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71D1[0x4];                                     // 0x22AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Anim_DormantDance;                                 // 0x22B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_WakeUp;                                       // 0x22B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_NotEnough;                                    // 0x22C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_StartFollowing;                               // 0x22C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_Reunited;                                     // 0x22D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           Anim_Dance;                                        // 0x22D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Shroom;                                        // 0x22E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasEnergy;                                         // 0x22E8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	bool                                          Dancing;                                           // 0x22E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71D2[0x6];                                     // 0x22EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             SFX_LostBuddy;                                     // 0x22F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DanceStartDelay;                                   // 0x22F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71D3[0x4];                                     // 0x22FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        BounceOverlapPawn;                                 // 0x2300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  BounceOverlapController;                           // 0x2308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x2310(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         BounceCooldown;                                    // 0x2320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoCeilingBounceHeight;                             // 0x2324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BounceHeight;                                      // 0x2328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpHeight;                                        // 0x232C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FinalBounceJumpHeight;                             // 0x2330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Final_Bounce_X_Vector;                             // 0x2334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_PlayerLaunched;                                 // 0x2338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   LaunchForceFeedback;                               // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BounceSound;                                       // 0x2348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DanceCooldown;                                     // 0x2350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastEnergyUpdateTime;                              // 0x2354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SFX_DeathBuddy;                                    // 0x2358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HandleAttachedBeamAudio;                           // 0x2360(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDieInWater;                                  // 0x2368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_FortAIPawn_Bud(int32 EntryPoint);
	void ResetBounce();
	void Goal_Actor_Death(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void Death_on_Bud(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void ReceiveDestroyed();
	void OnWaterNavMeshEnter();
	void OnBeginWaterInteraction(const struct FVector& WaterSurfaceLocation, float WaterDepth);
	void OnEnteredWaterBody(class AFortWaterBodyActor* WaterBody, bool bIsFirstBody);
	void BeginOverlap_BounceCollision(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void EnergyRestored();
	void OutOfEnergy();
	void DormantDance();
	void OnListenTagRemoved(const class AActor* TargetActor, const struct FGameplayTag& Tag);
	void StartFollowing(bool Reunited);
	void OnComponentBeginOverlap_Event_1(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void WakeUp(class AActor* TargetActor);
	void OnListenTagAdded(const class AActor* TargetActor, const struct FGameplayTag& Tag);
	void NotEnoughResources();
	void OnItemsConsumed(const class AFortPlayerPawn* PlayerPawn, int32 ItemsConsumed);
	void EndOverlap_DanceRadius(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BeginOverlap_DanceRadius(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StopFollowing();
	void Dance(class AActor* TargetActor);
	void OnDeathPlayEffects(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AFortPawn* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void AddTrackedTagListener(class AActor* Actor);
	void RemoveTrackedTagListener(class AActor* Actor);
	void ListenTagAdded(class AActor* TargetActor, const struct FGameplayTag& Tag);
	void ListenTagRemoved(class AActor* TargetActor, const struct FGameplayTag& Tag);
	void TickUpdateLink();
	void RotateToFaceActor(class AActor* TargetActor);
	void DormantDanceHint();
	void TickEnergyDecay();
	void OnRep_HasEnergy();
	void BounceCeilingCheck(bool* HitCeiling);
	void OnRep_Following();
	void OnRep_GoalActor();
	void ClientUpdateBeamActivation();
	void OnRep_Energy();
	void OnRep_Dormant();
	void SetTeamFromGoalActor();
	void StopBudSnapAudio();

	class FText GetInteractionString(const class AFortPlayerPawn* PlayerPawn) const;
	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;
	bool IsValidAutoFireTarget(const class AActor* Attacker) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FortAIPawn_Bud_C">();
	}
	static class AFortAIPawn_Bud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFortAIPawn_Bud_C>();
	}
};
static_assert(alignof(AFortAIPawn_Bud_C) == 0x000010, "Wrong alignment on AFortAIPawn_Bud_C");
static_assert(sizeof(AFortAIPawn_Bud_C) == 0x002370, "Wrong size on AFortAIPawn_Bud_C");
static_assert(offsetof(AFortAIPawn_Bud_C, UberGraphFrame) == 0x002220, "Member 'AFortAIPawn_Bud_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, AttachPlayerAudio) == 0x002228, "Member 'AFortAIPawn_Bud_C::AttachPlayerAudio' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, AttachBuddyAudio) == 0x002230, "Member 'AFortAIPawn_Bud_C::AttachBuddyAudio' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceCollision) == 0x002238, "Member 'AFortAIPawn_Bud_C::BounceCollision' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, P_LinkBeam) == 0x002240, "Member 'AFortAIPawn_Bud_C::P_LinkBeam' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, DanceRadius) == 0x002248, "Member 'AFortAIPawn_Bud_C::DanceRadius' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GoalActor) == 0x002250, "Member 'AFortAIPawn_Bud_C::GoalActor' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GE_Dancing) == 0x002258, "Member 'AFortAIPawn_Bud_C::GE_Dancing' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GE_HealthShieldRegen) == 0x002260, "Member 'AFortAIPawn_Bud_C::GE_HealthShieldRegen' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, HealthShieldRegen) == 0x002268, "Member 'AFortAIPawn_Bud_C::HealthShieldRegen' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, FX_Death) == 0x002270, "Member 'AFortAIPawn_Bud_C::FX_Death' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BeamFX) == 0x002278, "Member 'AFortAIPawn_Bud_C::BeamFX' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Dormant) == 0x002280, "Member 'AFortAIPawn_Bud_C::Dormant' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Following) == 0x002281, "Member 'AFortAIPawn_Bud_C::Following' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Crouched) == 0x002282, "Member 'AFortAIPawn_Bud_C::Crouched' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Energy) == 0x002284, "Member 'AFortAIPawn_Bud_C::Energy' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, EnergyDecay) == 0x002288, "Member 'AFortAIPawn_Bud_C::EnergyDecay' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, EnergyToRestoreFromDance) == 0x00228C, "Member 'AFortAIPawn_Bud_C::EnergyToRestoreFromDance' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, WakeUpDelay) == 0x002290, "Member 'AFortAIPawn_Bud_C::WakeUpDelay' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, WakeUpInteractDelay) == 0x002294, "Member 'AFortAIPawn_Bud_C::WakeUpInteractDelay' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, MaxFollowDistance) == 0x002298, "Member 'AFortAIPawn_Bud_C::MaxFollowDistance' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GameplayTag_Dance) == 0x00229C, "Member 'AFortAIPawn_Bud_C::GameplayTag_Dance' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GameplayTag_Crouch) == 0x0022A4, "Member 'AFortAIPawn_Bud_C::GameplayTag_Crouch' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_DormantDance) == 0x0022B0, "Member 'AFortAIPawn_Bud_C::Anim_DormantDance' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_WakeUp) == 0x0022B8, "Member 'AFortAIPawn_Bud_C::Anim_WakeUp' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_NotEnough) == 0x0022C0, "Member 'AFortAIPawn_Bud_C::Anim_NotEnough' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_StartFollowing) == 0x0022C8, "Member 'AFortAIPawn_Bud_C::Anim_StartFollowing' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_Reunited) == 0x0022D0, "Member 'AFortAIPawn_Bud_C::Anim_Reunited' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Anim_Dance) == 0x0022D8, "Member 'AFortAIPawn_Bud_C::Anim_Dance' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, MID_Shroom) == 0x0022E0, "Member 'AFortAIPawn_Bud_C::MID_Shroom' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, HasEnergy) == 0x0022E8, "Member 'AFortAIPawn_Bud_C::HasEnergy' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Dancing) == 0x0022E9, "Member 'AFortAIPawn_Bud_C::Dancing' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, SFX_LostBuddy) == 0x0022F0, "Member 'AFortAIPawn_Bud_C::SFX_LostBuddy' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, DanceStartDelay) == 0x0022F8, "Member 'AFortAIPawn_Bud_C::DanceStartDelay' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceOverlapPawn) == 0x002300, "Member 'AFortAIPawn_Bud_C::BounceOverlapPawn' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceOverlapController) == 0x002308, "Member 'AFortAIPawn_Bud_C::BounceOverlapController' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, ActorsToIgnore) == 0x002310, "Member 'AFortAIPawn_Bud_C::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceCooldown) == 0x002320, "Member 'AFortAIPawn_Bud_C::BounceCooldown' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, NoCeilingBounceHeight) == 0x002324, "Member 'AFortAIPawn_Bud_C::NoCeilingBounceHeight' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceHeight) == 0x002328, "Member 'AFortAIPawn_Bud_C::BounceHeight' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, JumpHeight) == 0x00232C, "Member 'AFortAIPawn_Bud_C::JumpHeight' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, FinalBounceJumpHeight) == 0x002330, "Member 'AFortAIPawn_Bud_C::FinalBounceJumpHeight' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, Final_Bounce_X_Vector) == 0x002334, "Member 'AFortAIPawn_Bud_C::Final_Bounce_X_Vector' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, GE_PlayerLaunched) == 0x002338, "Member 'AFortAIPawn_Bud_C::GE_PlayerLaunched' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, LaunchForceFeedback) == 0x002340, "Member 'AFortAIPawn_Bud_C::LaunchForceFeedback' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, BounceSound) == 0x002348, "Member 'AFortAIPawn_Bud_C::BounceSound' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, DanceCooldown) == 0x002350, "Member 'AFortAIPawn_Bud_C::DanceCooldown' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, LastEnergyUpdateTime) == 0x002354, "Member 'AFortAIPawn_Bud_C::LastEnergyUpdateTime' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, SFX_DeathBuddy) == 0x002358, "Member 'AFortAIPawn_Bud_C::SFX_DeathBuddy' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, HandleAttachedBeamAudio) == 0x002360, "Member 'AFortAIPawn_Bud_C::HandleAttachedBeamAudio' has a wrong offset!");
static_assert(offsetof(AFortAIPawn_Bud_C, ShouldDieInWater) == 0x002368, "Member 'AFortAIPawn_Bud_C::ShouldDieInWater' has a wrong offset!");

}

