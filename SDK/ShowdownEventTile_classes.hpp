#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShowdownEventTile

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ShowdownEventTile.ShowdownEventTile_C
// 0x00B0 (0x0C20 - 0x0B70)
class UShowdownEventTile_C final : public UCommonButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Focus_Violator;                                    // 0x0B78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Hover;                                             // 0x0B80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Focus;                                             // 0x0B88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       TransitionSize;                                    // 0x0B90(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Intro;                                             // 0x0B98(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonBorder*                          CommonBorder_InputContainer;                       // 0x0BA0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_BG;                                          // 0x0BA8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Ended;                                       // 0x0BB0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Focus;                                       // 0x0BB8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Hover;                                       // 0x0BC0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Tail;                                        // 0x0BC8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UShowdownEventTile_RoundBreak_C*        ShowdownEventTile_RoundBreak;                      // 0x0BD0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UShowdownEventTileInfo_C*               ShowdownEventTileInfo;                             // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UShowdownEventTileViolator_C*           Violator;                                          // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FString                                 EventId;                                           // 0x0BE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	bool                                          IsEnded;                                           // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsLive;                                            // 0x0BF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7788[0x6];                                     // 0x0BFA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWindowSelected;                                  // 0x0C00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 TournamentId;                                      // 0x0C10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)

public:
	void SetData(const class FString& TournamentInfo, const class FString& EventInfo);
	void Construct();
	void BP_OnClicked();
	void EventIntro(int32 Param_Index);
	void EventResize(bool Out);
	void BP_OnHovered();
	void BP_OnUnhovered();
	void BP_OnSelected();
	void BP_OnDeselected();
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void EventSetState(EFortShowdownEventState EventState);
	void EventColorize(const struct FFortTournamentDisplayInfo& DisplayInfo);
	void EventColorizeDispatch(const struct FFortTournamentDisplayInfo& DisplayInfo);
	void EventMultiRoundStyle();
	void ExecuteUbergraph_ShowdownEventTile(int32 EntryPoint);
	void OnWindowSelected__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ShowdownEventTile_C">();
	}
	static class UShowdownEventTile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShowdownEventTile_C>();
	}
};
static_assert(alignof(UShowdownEventTile_C) == 0x000008, "Wrong alignment on UShowdownEventTile_C");
static_assert(sizeof(UShowdownEventTile_C) == 0x000C20, "Wrong size on UShowdownEventTile_C");
static_assert(offsetof(UShowdownEventTile_C, UberGraphFrame) == 0x000B70, "Member 'UShowdownEventTile_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Focus_Violator) == 0x000B78, "Member 'UShowdownEventTile_C::Focus_Violator' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Hover) == 0x000B80, "Member 'UShowdownEventTile_C::Hover' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Focus) == 0x000B88, "Member 'UShowdownEventTile_C::Focus' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, TransitionSize) == 0x000B90, "Member 'UShowdownEventTile_C::TransitionSize' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Intro) == 0x000B98, "Member 'UShowdownEventTile_C::Intro' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, CommonBorder_InputContainer) == 0x000BA0, "Member 'UShowdownEventTile_C::CommonBorder_InputContainer' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Image_BG) == 0x000BA8, "Member 'UShowdownEventTile_C::Image_BG' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Image_Ended) == 0x000BB0, "Member 'UShowdownEventTile_C::Image_Ended' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Image_Focus) == 0x000BB8, "Member 'UShowdownEventTile_C::Image_Focus' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Image_Hover) == 0x000BC0, "Member 'UShowdownEventTile_C::Image_Hover' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Image_Tail) == 0x000BC8, "Member 'UShowdownEventTile_C::Image_Tail' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, ShowdownEventTile_RoundBreak) == 0x000BD0, "Member 'UShowdownEventTile_C::ShowdownEventTile_RoundBreak' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, ShowdownEventTileInfo) == 0x000BD8, "Member 'UShowdownEventTile_C::ShowdownEventTileInfo' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, Violator) == 0x000BE0, "Member 'UShowdownEventTile_C::Violator' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, EventId) == 0x000BE8, "Member 'UShowdownEventTile_C::EventId' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, IsEnded) == 0x000BF8, "Member 'UShowdownEventTile_C::IsEnded' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, IsLive) == 0x000BF9, "Member 'UShowdownEventTile_C::IsLive' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, OnWindowSelected) == 0x000C00, "Member 'UShowdownEventTile_C::OnWindowSelected' has a wrong offset!");
static_assert(offsetof(UShowdownEventTile_C, TournamentId) == 0x000C10, "Member 'UShowdownEventTile_C::TournamentId' has a wrong offset!");

}

