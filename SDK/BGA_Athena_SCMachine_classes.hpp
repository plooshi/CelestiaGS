#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_SCMachine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_SCMachine.BGA_Athena_SCMachine_C
// 0x0288 (0x0B20 - 0x0898)
class ABGA_Athena_SCMachine_C final : public ABuildingGameplayActorSpawnMachine
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0898(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   EdgeNavLinks2;                                     // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   EdgeNavLinks;                                      // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_Machine_Cooldown_Cue_End;                       // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        SC_Machine_Cooldown_Cue;                           // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SCMachine_HoloLogo;                              // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    HeadlightR;                                        // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    HeadlightL;                                        // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SCMachine_PedestalGlow;                          // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ActivateSound;                                     // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AmbientSound;                                      // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      BlockingVolume;                                    // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ResurrectionLocation;                              // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PadCollision;                                      // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Van;                                               // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractionBox;                                    // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB; // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB; // 0x091C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5471[0x3];                                     // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LightFlash;                                        // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WarpVan_Scale_947A8C9647767577A408EC87E76820CB;    // 0x0928(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WarpVan__Direction_947A8C9647767577A408EC87E76820CB; // 0x0934(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5472[0x3];                                     // 0x0935(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WarpVan;                                           // 0x0938(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SpawnInParticle;                                   // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SpawnInParticleOffset;                             // 0x0948(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MannequinTransitionOffset;                         // 0x0954(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FXDoneDelay;                                       // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5473[0x4];                                     // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PawnsBehindVan;                                    // 0x0968(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_Cooldown;                                    // 0x0978(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FXDelayThenBotSpawn;                               // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         VanState;                                          // 0x0984(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               ScreensMaterial;                                   // 0x0988(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         Row_DestroyIfOff;                                  // 0x0990(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         PlayRate;                                          // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYKnockAmountPlayer;                               // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZKnockAmountPlayer;                                // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5474[0x4];                                     // 0x09BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DefaultAmbientAudio;                               // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CooldownAmbientAudio;                              // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeCooldown;                               // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5475[0x4];                                     // 0x09D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         Row_RespawnTime;                                   // 0x09D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         Row_InteractTime;                                  // 0x09F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RepServerInteract;                                 // 0x0A18(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_5476[0x7];                                     // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWorldItemDefinition*               WeaponToGive;                                      // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWorldItemDefinition*               MatsToGive;                                        // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MatNumberToGive;                                   // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmmoNumberToGive;                                  // 0x0A34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FailedTextNoCard;                                  // 0x0A38(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UFortWorldItemDefinition*               AmmoToGive;                                        // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SoundIndicatorTint;                                // 0x0A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               SoundIndicatorIcon;                                // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundIndicatorSoundRef;                            // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   FailedTextRecharging;                              // 0x0A78(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FailedTextRebooting;                               // 0x0A90(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   PassedText;                                        // 0x0AA8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               VanBodyMaterial;                                   // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeadlightIntensity;                                // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_Horn_Play_;                                    // 0x0ACC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5477[0x3];                                     // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerControllerAthena*>    PlayersInteracting;                                // 0x0AD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   GrantedItemsLootTier;                              // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCheckForSkydive;                             // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZKnockAmountVehicle;                               // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         XYKnockAmountVehicle;                              // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InvincibleVisualsDuration;                         // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActiveCue;                                         // 0x0AF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           EndCue;                                            // 0x0B00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           TransitionCue;                                     // 0x0B08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ActivateCue;                                       // 0x0B10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeSkydiveCheck;                           // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Athena_SCMachine(int32 EntryPoint);
	void InteactComplete(class AFortPawn* InteractingPawn);
	void SkydiveIfAirborne(class AFortPlayerPawn* Player);
	void Update_Cooldown_Sound();
	void Play_Horn_Sound();
	void StartCoolDown();
	void CooldownTimer();
	void ToggleHologram(bool TurnOn);
	void OnSpawnMachineStateChanged();
	void OnInterruptLongUse(class AFortPlayerControllerAthena* AthenaPC);
	void OnBeginLongUse(class AFortPlayerControllerAthena* AthenaPC);
	void TriggerRespawnFX(class AFortPawn* PhaseInPawn);
	void BndEvt__BlockingVolume_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BlockingVolume_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleAmbientSound();
	void ReceiveBeginPlay();
	void OnResurrectionCompleted();
	void OnResurrectionStarted();
	void OnPlayerPawnResurrected(class AFortPlayerPawn* PlayerPawn);
	void LightFlash__UpdateFunc();
	void LightFlash__FinishedFunc();
	void WarpVan__UpdateFunc();
	void WarpVan__FinishedFunc();
	void UserConstructionScript();
	void KnockPlayerPawns(class AActor* IgnoreKnock);
	void UpdateScreen();
	void OnRep_RepServerInteract();
	void CheckQuestCredit();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void GiveWeaponsAndResources(class AFortPlayerController* FortPC);
	void KnockVehicles();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	class FText BlueprintGetFailedInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_SCMachine_C">();
	}
	static class ABGA_Athena_SCMachine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_SCMachine_C>();
	}
};
static_assert(alignof(ABGA_Athena_SCMachine_C) == 0x000008, "Wrong alignment on ABGA_Athena_SCMachine_C");
static_assert(sizeof(ABGA_Athena_SCMachine_C) == 0x000B20, "Wrong size on ABGA_Athena_SCMachine_C");
static_assert(offsetof(ABGA_Athena_SCMachine_C, UberGraphFrame) == 0x000898, "Member 'ABGA_Athena_SCMachine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EdgeNavLinks2) == 0x0008A0, "Member 'ABGA_Athena_SCMachine_C::EdgeNavLinks2' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EdgeNavLinks) == 0x0008A8, "Member 'ABGA_Athena_SCMachine_C::EdgeNavLinks' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SC_Machine_Cooldown_Cue_End) == 0x0008B0, "Member 'ABGA_Athena_SCMachine_C::SC_Machine_Cooldown_Cue_End' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SC_Machine_Cooldown_Cue) == 0x0008B8, "Member 'ABGA_Athena_SCMachine_C::SC_Machine_Cooldown_Cue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, P_SCMachine_HoloLogo) == 0x0008C0, "Member 'ABGA_Athena_SCMachine_C::P_SCMachine_HoloLogo' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightR) == 0x0008C8, "Member 'ABGA_Athena_SCMachine_C::HeadlightR' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightL) == 0x0008D0, "Member 'ABGA_Athena_SCMachine_C::HeadlightL' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, P_SCMachine_PedestalGlow) == 0x0008D8, "Member 'ABGA_Athena_SCMachine_C::P_SCMachine_PedestalGlow' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActivateSound) == 0x0008E0, "Member 'ABGA_Athena_SCMachine_C::ActivateSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmbientSound) == 0x0008E8, "Member 'ABGA_Athena_SCMachine_C::AmbientSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, BlockingVolume) == 0x0008F0, "Member 'ABGA_Athena_SCMachine_C::BlockingVolume' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ResurrectionLocation) == 0x0008F8, "Member 'ABGA_Athena_SCMachine_C::ResurrectionLocation' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PadCollision) == 0x000900, "Member 'ABGA_Athena_SCMachine_C::PadCollision' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Van) == 0x000908, "Member 'ABGA_Athena_SCMachine_C::Van' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, InteractionBox) == 0x000910, "Member 'ABGA_Athena_SCMachine_C::InteractionBox' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB) == 0x000918, "Member 'ABGA_Athena_SCMachine_C::LightFlash_LightBrightness_9296C3734D2838F5D5DD42912D8F0CBB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB) == 0x00091C, "Member 'ABGA_Athena_SCMachine_C::LightFlash__Direction_9296C3734D2838F5D5DD42912D8F0CBB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, LightFlash) == 0x000920, "Member 'ABGA_Athena_SCMachine_C::LightFlash' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan_Scale_947A8C9647767577A408EC87E76820CB) == 0x000928, "Member 'ABGA_Athena_SCMachine_C::WarpVan_Scale_947A8C9647767577A408EC87E76820CB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan__Direction_947A8C9647767577A408EC87E76820CB) == 0x000934, "Member 'ABGA_Athena_SCMachine_C::WarpVan__Direction_947A8C9647767577A408EC87E76820CB' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WarpVan) == 0x000938, "Member 'ABGA_Athena_SCMachine_C::WarpVan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SpawnInParticle) == 0x000940, "Member 'ABGA_Athena_SCMachine_C::SpawnInParticle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SpawnInParticleOffset) == 0x000948, "Member 'ABGA_Athena_SCMachine_C::SpawnInParticleOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MannequinTransitionOffset) == 0x000954, "Member 'ABGA_Athena_SCMachine_C::MannequinTransitionOffset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FXDoneDelay) == 0x000960, "Member 'ABGA_Athena_SCMachine_C::FXDoneDelay' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PawnsBehindVan) == 0x000968, "Member 'ABGA_Athena_SCMachine_C::PawnsBehindVan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Timer_Cooldown) == 0x000978, "Member 'ABGA_Athena_SCMachine_C::Timer_Cooldown' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FXDelayThenBotSpawn) == 0x000980, "Member 'ABGA_Athena_SCMachine_C::FXDelayThenBotSpawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, VanState) == 0x000984, "Member 'ABGA_Athena_SCMachine_C::VanState' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ScreensMaterial) == 0x000988, "Member 'ABGA_Athena_SCMachine_C::ScreensMaterial' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_DestroyIfOff) == 0x000990, "Member 'ABGA_Athena_SCMachine_C::Row_DestroyIfOff' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PlayRate) == 0x0009B0, "Member 'ABGA_Athena_SCMachine_C::PlayRate' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, XYKnockAmountPlayer) == 0x0009B4, "Member 'ABGA_Athena_SCMachine_C::XYKnockAmountPlayer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ZKnockAmountPlayer) == 0x0009B8, "Member 'ABGA_Athena_SCMachine_C::ZKnockAmountPlayer' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DefaultAmbientAudio) == 0x0009C0, "Member 'ABGA_Athena_SCMachine_C::DefaultAmbientAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, CooldownAmbientAudio) == 0x0009C8, "Member 'ABGA_Athena_SCMachine_C::CooldownAmbientAudio' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DelayBeforeCooldown) == 0x0009D0, "Member 'ABGA_Athena_SCMachine_C::DelayBeforeCooldown' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_RespawnTime) == 0x0009D8, "Member 'ABGA_Athena_SCMachine_C::Row_RespawnTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Row_InteractTime) == 0x0009F8, "Member 'ABGA_Athena_SCMachine_C::Row_InteractTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, RepServerInteract) == 0x000A18, "Member 'ABGA_Athena_SCMachine_C::RepServerInteract' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, WeaponToGive) == 0x000A20, "Member 'ABGA_Athena_SCMachine_C::WeaponToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MatsToGive) == 0x000A28, "Member 'ABGA_Athena_SCMachine_C::MatsToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, MatNumberToGive) == 0x000A30, "Member 'ABGA_Athena_SCMachine_C::MatNumberToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmmoNumberToGive) == 0x000A34, "Member 'ABGA_Athena_SCMachine_C::AmmoNumberToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextNoCard) == 0x000A38, "Member 'ABGA_Athena_SCMachine_C::FailedTextNoCard' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, AmmoToGive) == 0x000A50, "Member 'ABGA_Athena_SCMachine_C::AmmoToGive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SoundIndicatorTint) == 0x000A58, "Member 'ABGA_Athena_SCMachine_C::SoundIndicatorTint' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SoundIndicatorIcon) == 0x000A68, "Member 'ABGA_Athena_SCMachine_C::SoundIndicatorIcon' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, SoundIndicatorSoundRef) == 0x000A70, "Member 'ABGA_Athena_SCMachine_C::SoundIndicatorSoundRef' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextRecharging) == 0x000A78, "Member 'ABGA_Athena_SCMachine_C::FailedTextRecharging' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, FailedTextRebooting) == 0x000A90, "Member 'ABGA_Athena_SCMachine_C::FailedTextRebooting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PassedText) == 0x000AA8, "Member 'ABGA_Athena_SCMachine_C::PassedText' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, VanBodyMaterial) == 0x000AC0, "Member 'ABGA_Athena_SCMachine_C::VanBodyMaterial' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeadlightIntensity) == 0x000AC8, "Member 'ABGA_Athena_SCMachine_C::HeadlightIntensity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, Did_Horn_Play_) == 0x000ACC, "Member 'ABGA_Athena_SCMachine_C::Did_Horn_Play_' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, PlayersInteracting) == 0x000AD0, "Member 'ABGA_Athena_SCMachine_C::PlayersInteracting' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, GrantedItemsLootTier) == 0x000AE0, "Member 'ABGA_Athena_SCMachine_C::GrantedItemsLootTier' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, HeightCheckForSkydive) == 0x000AE8, "Member 'ABGA_Athena_SCMachine_C::HeightCheckForSkydive' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ZKnockAmountVehicle) == 0x000AEC, "Member 'ABGA_Athena_SCMachine_C::ZKnockAmountVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, XYKnockAmountVehicle) == 0x000AF0, "Member 'ABGA_Athena_SCMachine_C::XYKnockAmountVehicle' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, InvincibleVisualsDuration) == 0x000AF4, "Member 'ABGA_Athena_SCMachine_C::InvincibleVisualsDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActiveCue) == 0x000AF8, "Member 'ABGA_Athena_SCMachine_C::ActiveCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, EndCue) == 0x000B00, "Member 'ABGA_Athena_SCMachine_C::EndCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, TransitionCue) == 0x000B08, "Member 'ABGA_Athena_SCMachine_C::TransitionCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, ActivateCue) == 0x000B10, "Member 'ABGA_Athena_SCMachine_C::ActivateCue' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SCMachine_C, DelayBeforeSkydiveCheck) == 0x000B18, "Member 'ABGA_Athena_SCMachine_C::DelayBeforeSkydiveCheck' has a wrong offset!");

}

