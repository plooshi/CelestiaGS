#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_IslandPortal

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdatePlayerName__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature final
{
public:
	class FText                                   NewPlayerName;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature) == 0x000018, "Wrong size on BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature, NewPlayerName) == 0x000000, "Member 'BGA_IslandPortal_C_UpdatePlayerName__DelegateSignature::NewPlayerName' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdatePlayerPop__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature final
{
public:
	int32                                         NewPop;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature) == 0x000004, "Wrong size on BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature, NewPop) == 0x000000, "Member 'BGA_IslandPortal_C_UpdatePlayerPop__DelegateSignature::NewPop' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateIslandName__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BGA_IslandPortal_C_UpdateIslandName__DelegateSignature final
{
public:
	class FText                                   NewIslandName;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateIslandName__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateIslandName__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdateIslandName__DelegateSignature) == 0x000018, "Wrong size on BGA_IslandPortal_C_UpdateIslandName__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdateIslandName__DelegateSignature, NewIslandName) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateIslandName__DelegateSignature::NewIslandName' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdatePortalUIVis__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WasHidden;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A3E[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature) == 0x000008, "Wrong size on BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature, Show) == 0x000000, "Member 'BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature::Show' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature, WasHidden) == 0x000001, "Member 'BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature::WasHidden' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature, Distance) == 0x000004, "Member 'BGA_IslandPortal_C_UpdatePortalUIVis__DelegateSignature::Distance' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateIsCuratedPortal__DelegateSignature
// 0x0003 (0x0003 - 0x0000)
struct BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature final
{
public:
	bool                                          bIsCurated;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsLinkCode;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsUserInitiatedLoad;                              // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature) == 0x000003, "Wrong size on BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature, bIsCurated) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature::bIsCurated' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature, bIsLinkCode) == 0x000001, "Member 'BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature::bIsLinkCode' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature, bIsUserInitiatedLoad) == 0x000002, "Member 'BGA_IslandPortal_C_UpdateIsCuratedPortal__DelegateSignature::bIsUserInitiatedLoad' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateDescription__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct BGA_IslandPortal_C_UpdateDescription__DelegateSignature final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateDescription__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateDescription__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdateDescription__DelegateSignature) == 0x000018, "Wrong size on BGA_IslandPortal_C_UpdateDescription__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdateDescription__DelegateSignature, Description) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateDescription__DelegateSignature::Description' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateLinkCode__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature final
{
public:
	class FString                                 LinkCode;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature) == 0x000010, "Wrong size on BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature, LinkCode) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateLinkCode__DelegateSignature::LinkCode' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.IsBeingInteractedWith__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature final
{
public:
	bool                                          IsInteracting;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature) == 0x000001, "Wrong size on BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature, IsInteracting) == 0x000000, "Member 'BGA_IslandPortal_C_IsBeingInteractedWith__DelegateSignature::IsInteracting' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateLocalPlayerLookingAtScreen__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature final
{
public:
	bool                                          bPlayerLookingAtScreen;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature) == 0x000001, "Wrong size on BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature, bPlayerLookingAtScreen) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateLocalPlayerLookingAtScreen__DelegateSignature::bPlayerLookingAtScreen' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.ExecuteUbergraph_BGA_IslandPortal
// 0x09F0 (0x09F0 - 0x0000)
struct BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A3F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsUser_Widget;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A40[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_CustomEvent_Loaded;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A41[0x5];                                     // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_1;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsUser_Widget_1;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A42[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_CustomEvent_Loaded_1;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A43[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A44[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_4;  // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_4;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_4;            // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_4;       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_2;           // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A45[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_2;          // 0x0080(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5A46[0x4];                                     // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_Array_Get_Item;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A47[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_3;  // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_3;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_3;            // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_3;       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A48[0x3];                                     // 0x013D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0140(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5A49[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_2;  // 0x01D0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_2;       // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A4A[0x4];                                     // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A4B[0x7];                                     // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0200(0x0010)(ReferenceParm, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x0214(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0215(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A4C[0x2];                                     // 0x0216(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortVehicleInterface> K2Node_DynamicCast_AsFort_Vehicle_Interface;       // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A4D[0x3];                                     // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetOwnerLocation_ReturnValue;             // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                CallFunc_GetAllPassengers_ReturnValue;             // 0x0238(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_PlayerLocation;                 // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_DestinationLocation_1;          // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0260(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                K2Node_CustomEvent_DestinationLocation;            // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A4E[0x7];                                     // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x0298(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_Actor;                                // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_VehicleActor;                         // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x02B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x02C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue_1;            // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        K2Node_CustomEvent_InteractingPawn;                // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A4F[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        K2Node_Event_PlayerPawn;                           // 0x0300(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bTeleportedToIslandStart;             // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0309(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A50[0x2];                                     // 0x030A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x030C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_CustomEvent_RequestingController;           // 0x0318(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors_1; // 0x0320(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsMyPortal;                     // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A51[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0339(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A52[0x6];                                     // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_2;     // 0x0340(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue_1;      // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0354(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A53[0x3];                                     // 0x0355(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0358(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A54[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABGA_IslandPortal_C*                    K2Node_DynamicCast_AsBGA_Island_Portal;            // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A55[0x3];                                     // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPortalPosition_Location;               // 0x0374(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0384(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x038C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue_2;            // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A56[0x3];                                     // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueAtLevel_ReturnValue_3;            // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x03A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue_4;            // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x03B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x03C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x03E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x03F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A57[0xC];                                     // 0x0414(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0420(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A58[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0458(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0460(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A59[0x4];                                     // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PortalLightPillar_C*                CallFunc_FinishSpawningActor_ReturnValue;          // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0478(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0504(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A5A[0x3];                                     // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x0508(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x050C(0x0010)(ZeroConstructor, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x051C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0528(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0534(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A5B[0x3];                                     // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A5C[0x4];                                     // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0550(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0558(0x0010)(ZeroConstructor, NoDestructor)
	class UUserWidget*                            CallFunc_GetUserWidgetObject_ReturnValue;          // 0x0568(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A5D[0x3];                                     // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0574(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5A5E[0x4];                                     // 0x0584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0588(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0590(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A5F[0x7];                                     // 0x0599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetPlayerPawn_ReturnValue;                // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x05A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A60[0x7];                                     // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_ReturnValue;                       // 0x05B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface; // 0x05B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x05C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x05C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A61[0x2];                                     // 0x05CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x05CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DistanceBetweenTwoVectors_Distance;       // 0x05D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x05DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x05DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A62[0x2];                                     // 0x05DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPawn*                              K2Node_DynamicCast_AsFort_Pawn;                    // 0x05E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A63[0x7];                                     // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x05F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A64[0x7];                                     // 0x05F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A65[0x3];                                     // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x060C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_Event_bSaving;                              // 0x0698(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0699(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A66[0x2];                                     // 0x069A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(TSubclassOf<class UObject> Loaded)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x069C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5A67[0x4];                                     // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_ReturnValue_1;                     // 0x06B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_1; // 0x06B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x06C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue_1;               // 0x06C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A68[0x6];                                     // 0x06CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          CallFunc_GetLocalFortPlayerControllers_ReturnValue; // 0x06D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class UClass*                                 Temp_class_Variable_2;                             // 0x06E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_Array_Get_Item_1;                         // 0x06E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsUser_Widget_2;           // 0x06F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_2;                // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A69[0x7];                                     // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 CallFunc_GetPlayerState_ReturnValue;               // 0x0700(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_Location;                       // 0x0708(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0714(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6A[0x3];                                     // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CallFunc_SpawnSoundAtLocation_ReturnValue;         // 0x0718(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_Loaded_2;                       // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0729(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x072A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6B[0x5];                                     // 0x072B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0730(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0738(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_ScaleThumbnailPlaneByTextureSize_ReturnValue; // 0x07C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetMnemonic_ReturnValue;                  // 0x07D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x07E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Len_ReturnValue;                          // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x07F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6C[0x3];                                     // 0x07F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x07F8(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0884(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6D[0x3];                                     // 0x0885(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0888(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            CallFunc_Create_ReturnValue_2;                     // 0x0890(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_2; // 0x0898(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x08A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsInteracting;                        // 0x08AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x08AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6E[0x4];                                     // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x08B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x08B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x08C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x08C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x08CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A6F[0x3];                                     // 0x08CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x08D0(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5A70[0x4];                                     // 0x095C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0960(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0968(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0970(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0978(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A71[0x4];                                     // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Temp_class_Variable_3;                             // 0x0980(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x0988(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A72[0x4];                                     // 0x0994(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsUser_Widget_3;           // 0x0998(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_3;                // 0x09A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A73[0x7];                                     // 0x09A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            CallFunc_Create_ReturnValue_3;                     // 0x09A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction; // 0x09B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A74[0x7];                                     // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortInitializeFromObjectInterface> K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_3; // 0x09B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x09C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction_1; // 0x09C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A75[0x6];                                     // 0x09CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class AFortPlayerPawn*                  K2Node_Event_InteractingPawn;                      // 0x09D0(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x09D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue_1;       // 0x09D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A76[0x6];                                     // 0x09DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_CustomEvent_Loaded_3;                       // 0x09E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x09E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal) == 0x000010, "Wrong alignment on BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal");
static_assert(sizeof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal) == 0x0009F0, "Wrong size on BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, EntryPoint) == 0x000000, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::EntryPoint' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_class_Variable) == 0x000008, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_AsUser_Widget) == 0x000010, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_AsUser_Widget' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_bSuccess) == 0x000018, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_bool_Variable) == 0x000019, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_Loaded) == 0x000020, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsLocallyControlled_ReturnValue) == 0x00002A, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_class_Variable_1) == 0x000030, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_AsUser_Widget_1) == 0x000038, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_AsUser_Widget_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_bSuccess_1) == 0x000040, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_Loaded_1) == 0x000048, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_Loaded_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsDedicatedServer_ReturnValue) == 0x000050, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000058, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OverlappedComponent_4) == 0x000060, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OverlappedComponent_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherActor_4) == 0x000068, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherActor_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherComp_4) == 0x000070, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherComp_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherBodyIndex_4) == 0x000078, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherBodyIndex_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_bFromSweep_2) == 0x00007C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_bFromSweep_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_SweepResult_2) == 0x000080, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_SweepResult_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Array_Get_Item) == 0x000110, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Array_Length_ReturnValue) == 0x000118, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OverlappedComponent_3) == 0x000120, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OverlappedComponent_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherActor_3) == 0x000128, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherActor_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherComp_3) == 0x000130, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherComp_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherBodyIndex_3) == 0x000138, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherBodyIndex_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x00013C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000140, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OverlappedComponent_2) == 0x0001D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OverlappedComponent_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherActor_2) == 0x0001D8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherComp_2) == 0x0001E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherBodyIndex_2) == 0x0001E8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherBodyIndex_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x0001F0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess) == 0x0001F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000200, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Array_Length_ReturnValue_1) == 0x000210, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x000214, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000215, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Vehicle_Interface) == 0x000218, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Vehicle_Interface' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_1) == 0x000228, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetOwnerLocation_ReturnValue) == 0x00022C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetOwnerLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetAllPassengers_ReturnValue) == 0x000238, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetAllPassengers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_PlayerLocation) == 0x000248, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_PlayerLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_DestinationLocation_1) == 0x000254, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_DestinationLocation_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000260, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_RandomFloatInRange_ReturnValue) == 0x000268, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeRotator_ReturnValue) == 0x00026C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_DestinationLocation) == 0x000278, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_DestinationLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Add_VectorVector_ReturnValue) == 0x000284, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x000290, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x000298, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_Actor) == 0x0002A0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_Actor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_VehicleActor) == 0x0002A8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_VehicleActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetValueAtLevel_ReturnValue) == 0x0002B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_GetActorLocation_ReturnValue) == 0x0002B4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetActorForwardVector_ReturnValue) == 0x0002C0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetValueAtLevel_ReturnValue_1) == 0x0002CC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetValueAtLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Conv_FloatToVector_ReturnValue) == 0x0002D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0002DC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_InteractingPawn) == 0x0002E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeRotator_ReturnValue_1) == 0x0002E8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x0002F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_PlayerPawn) == 0x000300, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_PlayerPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_bTeleportedToIslandStart) == 0x000308, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_bTeleportedToIslandStart' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Not_PreBool_ReturnValue) == 0x000309, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00030C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_RequestingController) == 0x000318, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_RequestingController' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetOverlappingActors_OverlappingActors_1) == 0x000320, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetOverlappingActors_OverlappingActors_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_IsMyPortal) == 0x000330, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_IsMyPortal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Array_Length_ReturnValue_2) == 0x000334, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Greater_IntInt_ReturnValue) == 0x000338, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_bool_IsClosed_Variable) == 0x000339, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SpawnEmitterAtLocation_ReturnValue_2) == 0x000340, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SpawnEmitterAtLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetActorForwardVector_ReturnValue_1) == 0x000348, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetActorForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_2) == 0x000354, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000358, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsBGA_Island_Portal) == 0x000368, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsBGA_Island_Portal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_2) == 0x000370, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetPortalPosition_Location) == 0x000374, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetPortalPosition_Location' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_X) == 0x000380, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Y) == 0x000384, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Z) == 0x000388, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeVector_ReturnValue) == 0x00038C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetValueAtLevel_ReturnValue_2) == 0x000398, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetValueAtLevel_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00039C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetValueAtLevel_ReturnValue_3) == 0x0003A0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetValueAtLevel_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0003A4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetValueAtLevel_ReturnValue_4) == 0x0003B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetValueAtLevel_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0003B4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0003C0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_X_1) == 0x0003CC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Y_1) == 0x0003D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Z_1) == 0x0003D4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003D8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeVector_ReturnValue_1) == 0x0003E4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_X_2) == 0x0003F0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Y_2) == 0x0003F4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BreakVector_Z_2) == 0x0003F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeVector_ReturnValue_2) == 0x0003FC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SelectFloat_ReturnValue) == 0x000408, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SelectFloat_ReturnValue_1) == 0x00040C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000410, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetTransform_ReturnValue) == 0x000420, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SelectFloat_ReturnValue_2) == 0x000450, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000458, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_MakeRotator_ReturnValue_2) == 0x000460, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_FinishSpawningActor_ReturnValue) == 0x000470, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000478, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_3) == 0x000504, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x000508, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CreateDelegate_OutputDelegate) == 0x00050C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00051C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000528, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_int_Loop_Counter_Variable) == 0x000530, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CreateDelegate_OutputDelegate_1) == 0x000534, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Less_IntInt_ReturnValue) == 0x000544, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Add_IntInt_ReturnValue) == 0x000548, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetPlayerController_ReturnValue) == 0x000550, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CreateDelegate_OutputDelegate_2) == 0x000558, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetUserWidgetObject_ReturnValue) == 0x000568, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetUserWidgetObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_4) == 0x000570, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CreateDelegate_OutputDelegate_3) == 0x000574, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetOwningPlayer_ReturnValue) == 0x000588, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000590, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_3) == 0x000598, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetPlayerPawn_ReturnValue) == 0x0005A0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_5) == 0x0005A8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Create_ReturnValue) == 0x0005B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface) == 0x0005B8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_4) == 0x0005C8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValidClass_ReturnValue) == 0x0005C9, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0005CC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_DistanceBetweenTwoVectors_Distance) == 0x0005D8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_DistanceBetweenTwoVectors_Distance' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Less_FloatFloat_ReturnValue) == 0x0005DC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_HasAuthority_ReturnValue) == 0x0005DD, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Pawn) == 0x0005E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Pawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_5) == 0x0005E8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetController_ReturnValue) == 0x0005F0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BooleanAND_ReturnValue) == 0x0005F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000600, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_6) == 0x000608, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x00060C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_bSaving) == 0x000698, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_bSaving' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BooleanOR_ReturnValue) == 0x000699, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CreateDelegate_OutputDelegate_4) == 0x00069C, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Create_ReturnValue_1) == 0x0006B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_1) == 0x0006B8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_7) == 0x0006C8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValidClass_ReturnValue_1) == 0x0006C9, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValidClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetLocalFortPlayerControllers_ReturnValue) == 0x0006D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetLocalFortPlayerControllers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_class_Variable_2) == 0x0006E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Array_Get_Item_1) == 0x0006E8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_AsUser_Widget_2) == 0x0006F0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_AsUser_Widget_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_bSuccess_2) == 0x0006F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetPlayerState_ReturnValue) == 0x000700, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_Location) == 0x000708, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_Location' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000714, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_SpawnSoundAtLocation_ReturnValue) == 0x000718, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_SpawnSoundAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_Loaded_2) == 0x000720, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_Loaded_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x000728, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BooleanOR_ReturnValue_1) == 0x000729, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_6) == 0x00072A, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000730, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000738, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_ScaleThumbnailPlaneByTextureSize_ReturnValue) == 0x0007C4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_ScaleThumbnailPlaneByTextureSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetMnemonic_ReturnValue) == 0x0007D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetMnemonic_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Select_Default) == 0x0007E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Len_ReturnValue) == 0x0007F0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Greater_IntInt_ReturnValue_1) == 0x0007F4, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0007F8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BooleanOR_ReturnValue_2) == 0x000884, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetPlayerController_ReturnValue_1) == 0x000888, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Create_ReturnValue_2) == 0x000890, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_2) == 0x000898, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_8) == 0x0008A8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_bool_Has_Been_Initd_Variable) == 0x0008A9, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_IsInteracting) == 0x0008AA, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_IsInteracting' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_IsValid_ReturnValue_7) == 0x0008AB, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x0008B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherActor_1) == 0x0008B8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherComp_1) == 0x0008C0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x0008C8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_bFromSweep) == 0x0008CC, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_SweepResult) == 0x0008D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000960, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherActor) == 0x000968, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherComp) == 0x000970, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000978, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, Temp_class_Variable_3) == 0x000980, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Add_VectorVector_ReturnValue_3) == 0x000988, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_AsUser_Widget_3) == 0x000998, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_AsUser_Widget_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_ClassDynamicCast_bSuccess_3) == 0x0009A0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_ClassDynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_Create_ReturnValue_3) == 0x0009A8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_Create_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction) == 0x0009B0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_3) == 0x0009B8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_AsFort_Initialize_from_Object_Interface_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_DynamicCast_bSuccess_9) == 0x0009C8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction_1) == 0x0009C9, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_Event_InteractingPawn) == 0x0009D0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_Event_InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x0009D8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_GetIsPublishedPortal_ReturnValue_1) == 0x0009D9, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_GetIsPublishedPortal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, K2Node_CustomEvent_Loaded_3) == 0x0009E0, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::K2Node_CustomEvent_Loaded_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal, CallFunc_BooleanOR_ReturnValue_3) == 0x0009E8, "Member 'BGA_IslandPortal_C_ExecuteUbergraph_BGA_IslandPortal::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.ServerOnInteractWithIslandPortal
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_ServerOnInteractWithIslandPortal final
{
public:
	const class AFortPlayerPawn*                  InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_ServerOnInteractWithIslandPortal) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_ServerOnInteractWithIslandPortal");
static_assert(sizeof(BGA_IslandPortal_C_ServerOnInteractWithIslandPortal) == 0x000008, "Wrong size on BGA_IslandPortal_C_ServerOnInteractWithIslandPortal");
static_assert(offsetof(BGA_IslandPortal_C_ServerOnInteractWithIslandPortal, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_ServerOnInteractWithIslandPortal::InteractingPawn' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BndEvt__HUD Visibility Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_6_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BndEvt__HUD Visibility Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A77[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BGA_IslandPortal_C_BndEvt__HUD_Visibility_Volume_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BroadcastIsBeingInteractedWith
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_BroadcastIsBeingInteractedWith final
{
public:
	bool                                          IsInteracting;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BroadcastIsBeingInteractedWith) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_BroadcastIsBeingInteractedWith");
static_assert(sizeof(BGA_IslandPortal_C_BroadcastIsBeingInteractedWith) == 0x000001, "Wrong size on BGA_IslandPortal_C_BroadcastIsBeingInteractedWith");
static_assert(offsetof(BGA_IslandPortal_C_BroadcastIsBeingInteractedWith, IsInteracting) == 0x000000, "Member 'BGA_IslandPortal_C_BroadcastIsBeingInteractedWith::IsInteracting' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.Play Rift Exit Sound
// 0x000C (0x000C - 0x0000)
struct BGA_IslandPortal_C_Play_Rift_Exit_Sound final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_Play_Rift_Exit_Sound) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_Play_Rift_Exit_Sound");
static_assert(sizeof(BGA_IslandPortal_C_Play_Rift_Exit_Sound) == 0x00000C, "Wrong size on BGA_IslandPortal_C_Play_Rift_Exit_Sound");
static_assert(offsetof(BGA_IslandPortal_C_Play_Rift_Exit_Sound, Location) == 0x000000, "Member 'BGA_IslandPortal_C_Play_Rift_Exit_Sound::Location' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.ClientSaveDisplayChanged
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_ClientSaveDisplayChanged final
{
public:
	bool                                          bSaving;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_ClientSaveDisplayChanged) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_ClientSaveDisplayChanged");
static_assert(sizeof(BGA_IslandPortal_C_ClientSaveDisplayChanged) == 0x000001, "Wrong size on BGA_IslandPortal_C_ClientSaveDisplayChanged");
static_assert(offsetof(BGA_IslandPortal_C_ClientSaveDisplayChanged, bSaving) == 0x000000, "Member 'BGA_IslandPortal_C_ClientSaveDisplayChanged::bSaving' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.CheckIsMyPortal
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_CheckIsMyPortal final
{
public:
	bool                                          Param_IsMyPortal;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_CheckIsMyPortal) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_CheckIsMyPortal");
static_assert(sizeof(BGA_IslandPortal_C_CheckIsMyPortal) == 0x000001, "Wrong size on BGA_IslandPortal_C_CheckIsMyPortal");
static_assert(offsetof(BGA_IslandPortal_C_CheckIsMyPortal, Param_IsMyPortal) == 0x000000, "Member 'BGA_IslandPortal_C_CheckIsMyPortal::Param_IsMyPortal' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.ClientTeleportToLobbyIsland
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_ClientTeleportToLobbyIsland final
{
public:
	class AFortPlayerController*                  RequestingController;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_ClientTeleportToLobbyIsland) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_ClientTeleportToLobbyIsland");
static_assert(sizeof(BGA_IslandPortal_C_ClientTeleportToLobbyIsland) == 0x000008, "Wrong size on BGA_IslandPortal_C_ClientTeleportToLobbyIsland");
static_assert(offsetof(BGA_IslandPortal_C_ClientTeleportToLobbyIsland, RequestingController) == 0x000000, "Member 'BGA_IslandPortal_C_ClientTeleportToLobbyIsland::RequestingController' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.NotifyTeleportedPlayerPawn
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_NotifyTeleportedPlayerPawn final
{
public:
	class AFortPlayerPawn*                        Param_PlayerPawn;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTeleportedToIslandStart;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_NotifyTeleportedPlayerPawn) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_NotifyTeleportedPlayerPawn");
static_assert(sizeof(BGA_IslandPortal_C_NotifyTeleportedPlayerPawn) == 0x000010, "Wrong size on BGA_IslandPortal_C_NotifyTeleportedPlayerPawn");
static_assert(offsetof(BGA_IslandPortal_C_NotifyTeleportedPlayerPawn, Param_PlayerPawn) == 0x000000, "Member 'BGA_IslandPortal_C_NotifyTeleportedPlayerPawn::Param_PlayerPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_NotifyTeleportedPlayerPawn, bTeleportedToIslandStart) == 0x000008, "Member 'BGA_IslandPortal_C_NotifyTeleportedPlayerPawn::bTeleportedToIslandStart' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.LoadIslandUI
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_LoadIslandUI final
{
public:
	class AFortPlayerPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_LoadIslandUI) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_LoadIslandUI");
static_assert(sizeof(BGA_IslandPortal_C_LoadIslandUI) == 0x000008, "Wrong size on BGA_IslandPortal_C_LoadIslandUI");
static_assert(offsetof(BGA_IslandPortal_C_LoadIslandUI, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_LoadIslandUI::InteractingPawn' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.NotifyTeleportedVehicle
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_NotifyTeleportedVehicle final
{
public:
	class AActor*                                 Param_VehicleActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_NotifyTeleportedVehicle) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_NotifyTeleportedVehicle");
static_assert(sizeof(BGA_IslandPortal_C_NotifyTeleportedVehicle) == 0x000008, "Wrong size on BGA_IslandPortal_C_NotifyTeleportedVehicle");
static_assert(offsetof(BGA_IslandPortal_C_NotifyTeleportedVehicle, Param_VehicleActor) == 0x000000, "Member 'BGA_IslandPortal_C_NotifyTeleportedVehicle::Param_VehicleActor' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.OverlappingOnBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_OverlappingOnBeginPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_OverlappingOnBeginPlay) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_OverlappingOnBeginPlay");
static_assert(sizeof(BGA_IslandPortal_C_OverlappingOnBeginPlay) == 0x000008, "Wrong size on BGA_IslandPortal_C_OverlappingOnBeginPlay");
static_assert(offsetof(BGA_IslandPortal_C_OverlappingOnBeginPlay, Actor) == 0x000000, "Member 'BGA_IslandPortal_C_OverlappingOnBeginPlay::Actor' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.PlayCosmeticFX
// 0x000C (0x000C - 0x0000)
struct BGA_IslandPortal_C_PlayCosmeticFX final
{
public:
	struct FVector                                DestinationLocation;                               // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_PlayCosmeticFX) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_PlayCosmeticFX");
static_assert(sizeof(BGA_IslandPortal_C_PlayCosmeticFX) == 0x00000C, "Wrong size on BGA_IslandPortal_C_PlayCosmeticFX");
static_assert(offsetof(BGA_IslandPortal_C_PlayCosmeticFX, DestinationLocation) == 0x000000, "Member 'BGA_IslandPortal_C_PlayCosmeticFX::DestinationLocation' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.PlayTeleportFX
// 0x0018 (0x0018 - 0x0000)
struct BGA_IslandPortal_C_PlayTeleportFX final
{
public:
	struct FVector                                PlayerLocation;                                    // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DestinationLocation;                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_PlayTeleportFX) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_PlayTeleportFX");
static_assert(sizeof(BGA_IslandPortal_C_PlayTeleportFX) == 0x000018, "Wrong size on BGA_IslandPortal_C_PlayTeleportFX");
static_assert(offsetof(BGA_IslandPortal_C_PlayTeleportFX, PlayerLocation) == 0x000000, "Member 'BGA_IslandPortal_C_PlayTeleportFX::PlayerLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayTeleportFX, DestinationLocation) == 0x00000C, "Member 'BGA_IslandPortal_C_PlayTeleportFX::DestinationLocation' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A78[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BGA_IslandPortal_C_BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A79[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BGA_IslandPortal_C_BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.OnLoaded_E60F9B1D4E758E4EA443468A995679B2
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2 final
{
public:
	class UClass*                                 Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2");
static_assert(sizeof(BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2) == 0x000008, "Wrong size on BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2");
static_assert(offsetof(BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2, Loaded) == 0x000000, "Member 'BGA_IslandPortal_C_OnLoaded_E60F9B1D4E758E4EA443468A995679B2::Loaded' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5 final
{
public:
	class UClass*                                 Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5");
static_assert(sizeof(BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5) == 0x000008, "Wrong size on BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5");
static_assert(offsetof(BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5, Loaded) == 0x000000, "Member 'BGA_IslandPortal_C_OnLoaded_F2A7F21346C6B461BE9A1182BB5B5DD5::Loaded' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.OnLoaded_A43955A14A20383F466DF18A87BBA501
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501 final
{
public:
	class UClass*                                 Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501");
static_assert(sizeof(BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501) == 0x000008, "Wrong size on BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501");
static_assert(offsetof(BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501, Loaded) == 0x000000, "Member 'BGA_IslandPortal_C_OnLoaded_A43955A14A20383F466DF18A87BBA501::Loaded' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.OnLoaded_25EC650C4A5067360B49BC87DAFA1B71
// 0x0008 (0x0008 - 0x0000)
struct BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71 final
{
public:
	class UClass*                                 Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71");
static_assert(sizeof(BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71) == 0x000008, "Wrong size on BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71");
static_assert(offsetof(BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71, Loaded) == 0x000000, "Member 'BGA_IslandPortal_C_OnLoaded_25EC650C4A5067360B49BC87DAFA1B71::Loaded' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.PlayExpandOrCollapseAudio
// 0x0030 (0x0030 - 0x0000)
struct BGA_IslandPortal_C_PlayExpandOrCollapseAudio final
{
public:
	bool                                          Expand;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7A[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_PlayExpandOrCollapseAudio");
static_assert(sizeof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio) == 0x000030, "Wrong size on BGA_IslandPortal_C_PlayExpandOrCollapseAudio");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, Expand) == 0x000000, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::Expand' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, Temp_bool_Variable) == 0x000001, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, Temp_object_Variable) == 0x000008, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, Temp_object_Variable_1) == 0x000010, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, K2Node_Select_Default) == 0x000018, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PlayExpandOrCollapseAudio, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BGA_IslandPortal_C_PlayExpandOrCollapseAudio::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.CheckForRiftLocUpdate
// 0x0378 (0x0378 - 0x0000)
struct BGA_IslandPortal_C_CheckForRiftLocUpdate final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface; // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7C[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_1; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7D[0x5];                                     // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_2; // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7E[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_3; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A7F[0x5];                                     // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_4; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A80[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_5; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x00A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A81[0x5];                                     // 0x00A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_6; // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A82[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_7; // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A83[0x5];                                     // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_8; // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A84[0x6];                                     // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_9; // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A85[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_10; // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_10;    // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A86[0x5];                                     // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_11; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A87[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_12; // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_11;    // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_12;    // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A88[0x5];                                     // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_13; // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A89[0x7];                                     // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_14; // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_13;    // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_14;    // 0x017A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8A[0x5];                                     // 0x017B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_15; // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8B[0x7];                                     // 0x0191(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_16; // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_15;    // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_16;    // 0x01AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8C[0x5];                                     // 0x01AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_17; // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x01C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8D[0x7];                                     // 0x01C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_18; // 0x01C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_18;                    // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_17;    // 0x01D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_18;    // 0x01DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8E[0x5];                                     // 0x01DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_19; // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_19;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A8F[0x7];                                     // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_20; // 0x01F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_20;                    // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_19;    // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_20;    // 0x020A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A90[0x5];                                     // 0x020B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_21; // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_21;                    // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A91[0x7];                                     // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_22; // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_22;                    // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_21;    // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_22;    // 0x023A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A92[0x5];                                     // 0x023B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_23; // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_23;                    // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_23;    // 0x0251(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A93[0x6];                                     // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_24;                    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A94[0x6];                                     // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          K2Node_MakeArray_Array;                            // 0x0268(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0279(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x027A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x027B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x027C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x027D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_7;                              // 0x027E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_8;                              // 0x027F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_10;                             // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_11;                             // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_12;                             // 0x0283(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_13;                             // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_14;                             // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_15;                             // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A95[0x1];                                     // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable;                                // 0x028C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x0294(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x029C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x02A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x02AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x02B4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x02BC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x02C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_8;                              // 0x02CC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_9;                              // 0x02D4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_10;                             // 0x02DC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_11;                             // 0x02E4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_12;                             // 0x02EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_13;                             // 0x02F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_14;                             // 0x02FC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_15;                             // 0x0304(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_16;                             // 0x030C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_17;                             // 0x0314(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_18;                             // 0x031C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_19;                             // 0x0324(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_20;                             // 0x032C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_21;                             // 0x0334(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_22;                             // 0x033C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_23;                             // 0x0344(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_16;                             // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_17;                             // 0x034D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_18;                             // 0x034E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_19;                             // 0x034F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_20;                             // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_21;                             // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_22;                             // 0x0352(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A96[0x5];                                     // 0x0353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0358(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   K2Node_Select_Default;                             // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid; // 0x0370(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted; // 0x0371(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted; // 0x0372(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0373(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_23;                             // 0x0374(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0375(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_CheckForRiftLocUpdate) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_CheckForRiftLocUpdate");
static_assert(sizeof(BGA_IslandPortal_C_CheckForRiftLocUpdate) == 0x000378, "Wrong size on BGA_IslandPortal_C_CheckForRiftLocUpdate");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, InController) == 0x000000, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::InController' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable) == 0x000008, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_K2_GetPawn_ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface) == 0x000018, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_1) == 0x000030, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000041, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000042, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_2) == 0x000048, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_2) == 0x000058, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_3) == 0x000060, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_3) == 0x000070, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000071, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000072, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_4) == 0x000078, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_4) == 0x000088, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_5) == 0x000090, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_5) == 0x0000A0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x0000A1, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x0000A2, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_6) == 0x0000A8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_6) == 0x0000B8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_7) == 0x0000C0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_7) == 0x0000D0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x0000D1, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x0000D2, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_8) == 0x0000D8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_8) == 0x0000E8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x0000E9, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_9) == 0x0000F0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_9) == 0x000100, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_10) == 0x000108, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_10' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_10) == 0x000118, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x000119, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_10) == 0x00011A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_11) == 0x000120, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_11' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_11) == 0x000130, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_12) == 0x000138, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_12' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_12) == 0x000148, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_11) == 0x000149, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_12) == 0x00014A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_13) == 0x000150, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_13' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_13) == 0x000160, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_14) == 0x000168, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_14' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_14) == 0x000178, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_13) == 0x000179, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_14) == 0x00017A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_15) == 0x000180, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_15' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_15) == 0x000190, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_16) == 0x000198, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_16' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_16) == 0x0001A8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_15) == 0x0001A9, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_16) == 0x0001AA, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_17) == 0x0001B0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_17' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_17) == 0x0001C0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_18) == 0x0001C8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_18' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_18) == 0x0001D8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_18' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_17) == 0x0001D9, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_18) == 0x0001DA, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_19) == 0x0001E0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_19' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_19) == 0x0001F0, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_19' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_20) == 0x0001F8, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_20' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_20) == 0x000208, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_20' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_19) == 0x000209, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_20) == 0x00020A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_21) == 0x000210, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_21' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_21) == 0x000220, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_21' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_22) == 0x000228, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_22' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_22) == 0x000238, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_22' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_21) == 0x000239, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_22) == 0x00023A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_23) == 0x000240, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsGameplay_Tag_Asset_Interface_23' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_23) == 0x000250, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_23' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_HasMatchingGameplayTag_ReturnValue_23) == 0x000251, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_HasMatchingGameplayTag_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000258, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_DynamicCast_bSuccess_24) == 0x000260, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_DynamicCast_bSuccess_24' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_IsValid_ReturnValue) == 0x000261, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_MakeArray_Array) == 0x000268, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_1) == 0x000278, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_2) == 0x000279, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_3) == 0x00027A, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_4) == 0x00027B, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_5) == 0x00027C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_6) == 0x00027D, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_7) == 0x00027E, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_8) == 0x00027F, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_9) == 0x000280, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_10) == 0x000281, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_11) == 0x000282, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_11' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_12) == 0x000283, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_12' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_13) == 0x000284, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_13' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_14) == 0x000285, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_14' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_15) == 0x000286, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_15' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_int_Variable) == 0x000288, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable) == 0x00028C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_1) == 0x000294, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_2) == 0x00029C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_3) == 0x0002A4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_4) == 0x0002AC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_5) == 0x0002B4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_6) == 0x0002BC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_7) == 0x0002C4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_8) == 0x0002CC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_9) == 0x0002D4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_10) == 0x0002DC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_10' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_11) == 0x0002E4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_11' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_12) == 0x0002EC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_12' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_13) == 0x0002F4, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_13' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_14) == 0x0002FC, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_14' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_15) == 0x000304, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_15' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_16) == 0x00030C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_16' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_17) == 0x000314, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_17' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_18) == 0x00031C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_18' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_19) == 0x000324, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_19' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_20) == 0x00032C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_20' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_21) == 0x000334, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_21' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_22) == 0x00033C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_22' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_name_Variable_23) == 0x000344, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_name_Variable_23' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_16) == 0x00034C, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_16' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_17) == 0x00034D, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_17' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_18) == 0x00034E, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_18' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_19) == 0x00034F, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_19' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_20) == 0x000350, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_20' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_21) == 0x000351, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_21' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_22) == 0x000352, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_22' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_Conv_IntToString_ReturnValue) == 0x000358, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, K2Node_Select_Default) == 0x000368, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid) == 0x000370, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted) == 0x000371, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted) == 0x000372, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_Not_PreBool_ReturnValue) == 0x000373, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, Temp_bool_Variable_23) == 0x000374, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::Temp_bool_Variable_23' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CheckForRiftLocUpdate, CallFunc_BooleanAND_ReturnValue) == 0x000375, "Member 'BGA_IslandPortal_C_CheckForRiftLocUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UseRiftQuestUpdate
// 0x0030 (0x0030 - 0x0000)
struct BGA_IslandPortal_C_UseRiftQuestUpdate final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A97[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid; // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted; // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted; // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UseRiftQuestUpdate) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UseRiftQuestUpdate");
static_assert(sizeof(BGA_IslandPortal_C_UseRiftQuestUpdate) == 0x000030, "Wrong size on BGA_IslandPortal_C_UseRiftQuestUpdate");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, InController) == 0x000000, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::InController' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000008, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, K2Node_MakeArray_Array) == 0x000018, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid) == 0x000028, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestIsValid' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted) == 0x000029, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_QuestCompleted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted) == 0x00002A, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_Athena_CheckQuestAndObjectiveCompletion_ObjectiveCompleted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_Not_PreBool_ReturnValue) == 0x00002B, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UseRiftQuestUpdate, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'BGA_IslandPortal_C_UseRiftQuestUpdate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.GetPortalPosition
// 0x0050 (0x0050 - 0x0000)
struct BGA_IslandPortal_C_GetPortalPosition final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue_1;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_GetPortalPosition) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_GetPortalPosition");
static_assert(sizeof(BGA_IslandPortal_C_GetPortalPosition) == 0x000050, "Wrong size on BGA_IslandPortal_C_GetPortalPosition");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, Location) == 0x000000, "Member 'BGA_IslandPortal_C_GetPortalPosition::Location' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_GetValueAtLevel_ReturnValue) == 0x00000C, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_GetValueAtLevel_ReturnValue_1) == 0x000010, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_GetValueAtLevel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, Temp_int_Variable) == 0x000014, "Member 'BGA_IslandPortal_C_GetPortalPosition::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_BreakVector_X) == 0x000024, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_BreakVector_Y) == 0x000028, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000034, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_Multiply_IntFloat_ReturnValue_1) == 0x00003C, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_Multiply_IntFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetPortalPosition, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BGA_IslandPortal_C_GetPortalPosition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintOnLocalInteract
// 0x0028 (0x0028 - 0x0000)
struct BGA_IslandPortal_C_BlueprintOnLocalInteract final
{
public:
	class AFortPlayerPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A98[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AAthena_PlayerController_C*             K2Node_DynamicCast_AsAthena_Player_Controller;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction; // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanModifyPortal_bCanModify;               // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintOnLocalInteract) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BlueprintOnLocalInteract");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintOnLocalInteract) == 0x000028, "Wrong size on BGA_IslandPortal_C_BlueprintOnLocalInteract");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, K2Node_DynamicCast_AsAthena_Player_Controller) == 0x000018, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::K2Node_DynamicCast_AsAthena_Player_Controller' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction) == 0x000021, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintOnLocalInteract, CallFunc_CanModifyPortal_bCanModify) == 0x000023, "Member 'BGA_IslandPortal_C_BlueprintOnLocalInteract::CallFunc_CanModifyPortal_bCanModify' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.TeleportToLobbyIsland
// 0x0078 (0x0078 - 0x0000)
struct BGA_IslandPortal_C_TeleportToLobbyIsland final
{
public:
	class AFortPlayerController*                  RequestingController;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortAthenaVehicle*                     TravelingVehicle;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        TravelingPawn;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Destination;                                       // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A99[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetPlayerPawn_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDrivingVehicle_ReturnValue;             // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9A[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetPortalPosition_Location;               // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TeleportPlayerPawn_ReturnValue;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9B[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_TeleportToLobbyIsland) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_TeleportToLobbyIsland");
static_assert(sizeof(BGA_IslandPortal_C_TeleportToLobbyIsland) == 0x000078, "Wrong size on BGA_IslandPortal_C_TeleportToLobbyIsland");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, RequestingController) == 0x000000, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::RequestingController' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, TravelingVehicle) == 0x000008, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::TravelingVehicle' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, TravelingPawn) == 0x000010, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::TravelingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, Destination) == 0x000018, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::Destination' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_GetPlayerPawn_ReturnValue) == 0x000028, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_IsDrivingVehicle_ReturnValue) == 0x00003C, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_IsDrivingVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_GetPortalPosition_Location) == 0x000040, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_GetPortalPosition_Location' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00004C, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_BreakVector_X) == 0x000058, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_BreakVector_Y) == 0x00005C, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_BreakVector_Z) == 0x000060, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_TeleportPlayerPawn_ReturnValue) == 0x000064, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_TeleportPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_GetValueAtLevel_ReturnValue) == 0x000068, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_TeleportToLobbyIsland, CallFunc_MakeVector_ReturnValue) == 0x00006C, "Member 'BGA_IslandPortal_C_TeleportToLobbyIsland::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.SetPortalUIVisibility
// 0x000C (0x000C - 0x0000)
struct BGA_IslandPortal_C_SetPortalUIVisibility final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasHidden;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_SetPortalUIVisibility) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_SetPortalUIVisibility");
static_assert(sizeof(BGA_IslandPortal_C_SetPortalUIVisibility) == 0x00000C, "Wrong size on BGA_IslandPortal_C_SetPortalUIVisibility");
static_assert(offsetof(BGA_IslandPortal_C_SetPortalUIVisibility, Show) == 0x000000, "Member 'BGA_IslandPortal_C_SetPortalUIVisibility::Show' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_SetPortalUIVisibility, Distance) == 0x000004, "Member 'BGA_IslandPortal_C_SetPortalUIVisibility::Distance' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_SetPortalUIVisibility, WasHidden) == 0x000008, "Member 'BGA_IslandPortal_C_SetPortalUIVisibility::WasHidden' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_SetPortalUIVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BGA_IslandPortal_C_SetPortalUIVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdatePopulationDisplay
// 0x0004 (0x0004 - 0x0000)
struct BGA_IslandPortal_C_UpdatePopulationDisplay final
{
public:
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdatePopulationDisplay) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_UpdatePopulationDisplay");
static_assert(sizeof(BGA_IslandPortal_C_UpdatePopulationDisplay) == 0x000004, "Wrong size on BGA_IslandPortal_C_UpdatePopulationDisplay");
static_assert(offsetof(BGA_IslandPortal_C_UpdatePopulationDisplay, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_UpdatePopulationDisplay::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateNameDisplay
// 0x00E0 (0x00E0 - 0x0000)
struct BGA_IslandPortal_C_UpdateNameDisplay final
{
public:
	class FText                                   CallFunc_GetTagline_ReturnValue;                   // 0x0000(0x0018)()
	class FText                                   CallFunc_GetTagline_ReturnValue_1;                 // 0x0018(0x0018)()
	class FString                                 CallFunc_GetMnemonic_ReturnValue;                  // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetCreatorName_ReturnValue;               // 0x0040(0x0018)()
	int32                                         CallFunc_Len_ReturnValue;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A9D[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetVolumeDisplayName_ReturnValue;         // 0x0060(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9E[0x6];                                     // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0080(0x0018)()
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A9F[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerStateAthena*                 CallFunc_GetPlayerState_ReturnValue;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA0[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00C0(0x0018)()
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue_1;       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateNameDisplay) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateNameDisplay");
static_assert(sizeof(BGA_IslandPortal_C_UpdateNameDisplay) == 0x0000E0, "Wrong size on BGA_IslandPortal_C_UpdateNameDisplay");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetTagline_ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetTagline_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetTagline_ReturnValue_1) == 0x000018, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetTagline_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetMnemonic_ReturnValue) == 0x000030, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetMnemonic_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetCreatorName_ReturnValue) == 0x000040, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetCreatorName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_Len_ReturnValue) == 0x000058, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_Len_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetVolumeDisplayName_ReturnValue) == 0x000060, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetVolumeDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000079, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_TextToUpper_ReturnValue) == 0x000080, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_TextIsEmpty_ReturnValue) == 0x000098, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetPlayerState_ReturnValue) == 0x0000A0, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_IsValid_ReturnValue) == 0x0000A8, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetPlayerName_ReturnValue) == 0x0000B0, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_Conv_StringToText_ReturnValue) == 0x0000C0, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateNameDisplay, CallFunc_GetIsPublishedPortal_ReturnValue_1) == 0x0000D8, "Member 'BGA_IslandPortal_C_UpdateNameDisplay::CallFunc_GetIsPublishedPortal_ReturnValue_1' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.ScaleThumbnailPlaneByTextureSize
// 0x0050 (0x0050 - 0x0000)
struct BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA1[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetThumbnailHeight_ReturnValue;           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetThumbnailWidth_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA2[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize");
static_assert(sizeof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize) == 0x000050, "Wrong size on BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, Temp_bool_Variable) == 0x00000C, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_GetThumbnailHeight_ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_GetThumbnailHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_GetThumbnailWidth_ReturnValue) == 0x000014, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_GetThumbnailWidth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000018, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_Greater_IntInt_ReturnValue) == 0x00001C, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000020, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000028, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_MakeVector_ReturnValue) == 0x00002C, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, CallFunc_MakeVector_ReturnValue_1) == 0x000038, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize, K2Node_Select_Default) == 0x000044, "Member 'BGA_IslandPortal_C_ScaleThumbnailPlaneByTextureSize::K2Node_Select_Default' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.CanUseHUDInteract
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_CanUseHUDInteract final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalInteractable_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA3[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_CanUseHUDInteract) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_CanUseHUDInteract");
static_assert(sizeof(BGA_IslandPortal_C_CanUseHUDInteract) == 0x000010, "Wrong size on BGA_IslandPortal_C_CanUseHUDInteract");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CanInteract) == 0x000000, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CanInteract' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_IsPortalInteractable_ReturnValue) == 0x000001, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_IsPortalInteractable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000009, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanOR_ReturnValue_1) == 0x00000D, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanAND_ReturnValue_2) == 0x00000E, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanUseHUDInteract, CallFunc_BooleanAND_ReturnValue_3) == 0x00000F, "Member 'BGA_IslandPortal_C_CanUseHUDInteract::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.CloseAndClearDisplayedWidget
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_CloseAndClearDisplayedWidget final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_CloseAndClearDisplayedWidget) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_CloseAndClearDisplayedWidget");
static_assert(sizeof(BGA_IslandPortal_C_CloseAndClearDisplayedWidget) == 0x000001, "Wrong size on BGA_IslandPortal_C_CloseAndClearDisplayedWidget");
static_assert(offsetof(BGA_IslandPortal_C_CloseAndClearDisplayedWidget, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_CloseAndClearDisplayedWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.StartOrEndQuery
// 0x0028 (0x0028 - 0x0000)
struct BGA_IslandPortal_C_StartOrEndQuery final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5AA5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_StartOrEndQuery) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_StartOrEndQuery");
static_assert(sizeof(BGA_IslandPortal_C_StartOrEndQuery) == 0x000028, "Wrong size on BGA_IslandPortal_C_StartOrEndQuery");
static_assert(offsetof(BGA_IslandPortal_C_StartOrEndQuery, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_StartOrEndQuery::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartOrEndQuery, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BGA_IslandPortal_C_StartOrEndQuery::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartOrEndQuery, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'BGA_IslandPortal_C_StartOrEndQuery::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartOrEndQuery, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BGA_IslandPortal_C_StartOrEndQuery::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartOrEndQuery, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'BGA_IslandPortal_C_StartOrEndQuery::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateCodeEntryScreen
// 0x00A0 (0x00A0 - 0x0000)
struct BGA_IslandPortal_C_UpdateCodeEntryScreen final
{
public:
	bool                                          bForceScreenUpdate;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLookingAtPortal;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLookingAtScreen;                                  // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA6[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA7[0x1];                                     // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA8[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AA9[0x1];                                     // 0x0027(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x002F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalInteractable_ReturnValue;         // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0037(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AAA[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AAB[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtScreen; // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtPortal; // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AAC[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AAD[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AAE[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AAF[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetMID_MID;                               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateCodeEntryScreen) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateCodeEntryScreen");
static_assert(sizeof(BGA_IslandPortal_C_UpdateCodeEntryScreen) == 0x0000A0, "Wrong size on BGA_IslandPortal_C_UpdateCodeEntryScreen");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, bForceScreenUpdate) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::bForceScreenUpdate' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, bLookingAtPortal) == 0x000001, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::bLookingAtPortal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, bLookingAtScreen) == 0x000002, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::bLookingAtScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Mid) == 0x000008, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Mid' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000014, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_bool_True_if_break_was_hit_Variable) == 0x000025, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Not_PreBool_ReturnValue_1) == 0x000026, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x00002C, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_bool_Variable) == 0x00002D, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Not_PreBool_ReturnValue_2) == 0x00002E, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x00002F, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_bool_Variable_1) == 0x000030, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue_1) == 0x000031, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_IsDedicatedServer_ReturnValue) == 0x000032, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_IsPortalInteractable_ReturnValue) == 0x000033, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_IsPortalInteractable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue_2) == 0x000034, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue_3) == 0x000035, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x000036, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, Temp_bool_Variable_2) == 0x000037, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue_1) == 0x000038, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue_2) == 0x000039, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, K2Node_Select_Default) == 0x00003C, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Array_Get_Item) == 0x000050, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue_3) == 0x000058, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtScreen) == 0x000059, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtPortal) == 0x00005A, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_DetermineWherePlayerIsLooking_bIsLookingAtPortal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue_4) == 0x00005B, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue_4) == 0x00005C, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, K2Node_Select_Default_1) == 0x000060, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanOR_ReturnValue_5) == 0x000070, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, K2Node_Select_Default_2) == 0x000074, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Less_IntInt_ReturnValue) == 0x000088, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Array_Length_ReturnValue_1) == 0x00008C, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_BooleanAND_ReturnValue_5) == 0x000090, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_Greater_IntInt_ReturnValue) == 0x000091, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryScreen, CallFunc_GetMID_MID) == 0x000098, "Member 'BGA_IslandPortal_C_UpdateCodeEntryScreen::CallFunc_GetMID_MID' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateCodeEntryVisibility
// 0x0009 (0x0009 - 0x0000)
struct BGA_IslandPortal_C_UpdateCodeEntryVisibility final
{
public:
	bool                                          bCodeScreenHidden;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateCodeEntryVisibility) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_UpdateCodeEntryVisibility");
static_assert(sizeof(BGA_IslandPortal_C_UpdateCodeEntryVisibility) == 0x000009, "Wrong size on BGA_IslandPortal_C_UpdateCodeEntryVisibility");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, bCodeScreenHidden) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::bCodeScreenHidden' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, Temp_bool_Variable) == 0x000001, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, Temp_byte_Variable) == 0x000002, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000005, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, K2Node_Select_Default) == 0x000007, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateCodeEntryVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_UpdateCodeEntryVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateBaseVisibility
// 0x000D (0x000D - 0x0000)
struct BGA_IslandPortal_C_UpdateBaseVisibility final
{
public:
	bool                                          bBaseIsHidden;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPortalOpen_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateBaseVisibility) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_UpdateBaseVisibility");
static_assert(sizeof(BGA_IslandPortal_C_UpdateBaseVisibility) == 0x00000D, "Wrong size on BGA_IslandPortal_C_UpdateBaseVisibility");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, bBaseIsHidden) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::bBaseIsHidden' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, Temp_bool_Variable) == 0x000001, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, Temp_byte_Variable) == 0x000002, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, Temp_byte_Variable_1) == 0x000003, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000005, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, K2Node_Select_Default) == 0x000007, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_IsPortalOpen_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_IsPortalOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_Not_PreBool_ReturnValue_1) == 0x000009, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_BooleanAND_ReturnValue) == 0x00000A, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_Not_PreBool_ReturnValue_2) == 0x00000B, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateBaseVisibility, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'BGA_IslandPortal_C_UpdateBaseVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.LocalPlayerEnteredRange
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_LocalPlayerEnteredRange final
{
public:
	class APawn*                                  LocalPawn;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_LocalPlayerEnteredRange) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_LocalPlayerEnteredRange");
static_assert(sizeof(BGA_IslandPortal_C_LocalPlayerEnteredRange) == 0x000010, "Wrong size on BGA_IslandPortal_C_LocalPlayerEnteredRange");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerEnteredRange, LocalPawn) == 0x000000, "Member 'BGA_IslandPortal_C_LocalPlayerEnteredRange::LocalPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerEnteredRange, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_LocalPlayerEnteredRange::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.LocalPlayerExitedRange
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_LocalPlayerExitedRange final
{
public:
	class APawn*                                  LocalPawn;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_LocalPlayerExitedRange) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_LocalPlayerExitedRange");
static_assert(sizeof(BGA_IslandPortal_C_LocalPlayerExitedRange) == 0x000010, "Wrong size on BGA_IslandPortal_C_LocalPlayerExitedRange");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerExitedRange, LocalPawn) == 0x000000, "Member 'BGA_IslandPortal_C_LocalPlayerExitedRange::LocalPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerExitedRange, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_LocalPlayerExitedRange::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.LocalPlayerRangeCheck
// 0x0050 (0x0050 - 0x0000)
struct BGA_IslandPortal_C_LocalPlayerRangeCheck final
{
public:
	class AActor*                                 OverlappingActor;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnteredRange;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB0[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  OverlappingPlayerController;                       // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB1[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB2[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerController*>          CallFunc_GetLocalFortPlayerControllers_ReturnValue; // 0x0038(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_LocalPlayerRangeCheck) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_LocalPlayerRangeCheck");
static_assert(sizeof(BGA_IslandPortal_C_LocalPlayerRangeCheck) == 0x000050, "Wrong size on BGA_IslandPortal_C_LocalPlayerRangeCheck");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, OverlappingActor) == 0x000000, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::OverlappingActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, bEnteredRange) == 0x000008, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::bEnteredRange' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, OverlappingPlayerController) == 0x000010, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::OverlappingPlayerController' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000018, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, CallFunc_IsDedicatedServer_ReturnValue) == 0x000020, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, K2Node_DynamicCast_AsPawn) == 0x000028, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, CallFunc_GetLocalFortPlayerControllers_ReturnValue) == 0x000038, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::CallFunc_GetLocalFortPlayerControllers_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_LocalPlayerRangeCheck, CallFunc_Array_Contains_ReturnValue) == 0x000049, "Member 'BGA_IslandPortal_C_LocalPlayerRangeCheck::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.StartTeleport
// 0x0070 (0x0070 - 0x0000)
struct BGA_IslandPortal_C_StartTeleport final
{
public:
	class AActor*                                 Param_OverlapActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPortalOpen_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortVolume*                            CallFunc_GetLinkedVolume_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB4[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB5[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVehicle_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB6[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AB7[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerControllerAthena*            K2Node_DynamicCast_AsFort_Player_Controller_Athena; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_StartTeleport) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_StartTeleport");
static_assert(sizeof(BGA_IslandPortal_C_StartTeleport) == 0x000070, "Wrong size on BGA_IslandPortal_C_StartTeleport");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, Param_OverlapActor) == 0x000000, "Member 'BGA_IslandPortal_C_StartTeleport::Param_OverlapActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_IsPortalOpen_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_IsPortalOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_GetLinkedVolume_ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_GetLinkedVolume_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_HasAuthority_ReturnValue) == 0x000028, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_IsValid_ReturnValue_1) == 0x000029, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000030, "Member 'BGA_IslandPortal_C_StartTeleport::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BGA_IslandPortal_C_StartTeleport::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_IsInVehicle_ReturnValue) == 0x000039, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_IsInVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00003C, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_Add_VectorVector_ReturnValue) == 0x000048, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_GetController_ReturnValue) == 0x000058, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, K2Node_DynamicCast_AsFort_Player_Controller_Athena) == 0x000060, "Member 'BGA_IslandPortal_C_StartTeleport::K2Node_DynamicCast_AsFort_Player_Controller_Athena' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, K2Node_DynamicCast_bSuccess_1) == 0x000068, "Member 'BGA_IslandPortal_C_StartTeleport::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleport, CallFunc_HasAuthority_ReturnValue_1) == 0x000069, "Member 'BGA_IslandPortal_C_StartTeleport::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.UpdateInfoPlatePointer
// 0x0030 (0x0030 - 0x0000)
struct BGA_IslandPortal_C_UpdateInfoPlatePointer final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalInteractable_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB8[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalOpen_ReturnValue;                 // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AB9[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_UpdateInfoPlatePointer) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_UpdateInfoPlatePointer");
static_assert(sizeof(BGA_IslandPortal_C_UpdateInfoPlatePointer) == 0x000030, "Wrong size on BGA_IslandPortal_C_UpdateInfoPlatePointer");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, Temp_bool_Variable) == 0x000000, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_IsPortalInteractable_ReturnValue) == 0x000001, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_IsPortalInteractable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000009, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanOR_ReturnValue_1) == 0x00000D, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_IsPortalOpen_ReturnValue) == 0x00000E, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_IsPortalOpen_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue_2) == 0x00000F, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000010, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue_3) == 0x000011, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000012, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanOR_ReturnValue_2) == 0x000013, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue_4) == 0x000014, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_BooleanAND_ReturnValue_5) == 0x000015, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, K2Node_Select_Default) == 0x000018, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_UpdateInfoPlatePointer, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000020, "Member 'BGA_IslandPortal_C_UpdateInfoPlatePointer::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.StartTeleportByInteractionOnServer
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_StartTeleportByInteractionOnServer final
{
public:
	class AActor*                                 Param_OverlapActor;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_StartTeleportByInteractionOnServer");
static_assert(sizeof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer) == 0x000010, "Wrong size on BGA_IslandPortal_C_StartTeleportByInteractionOnServer");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, Param_OverlapActor) == 0x000000, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::Param_OverlapActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, CallFunc_HasAuthority_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction) == 0x000009, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, CallFunc_IsOverlappingActor_ReturnValue) == 0x00000A, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_StartTeleportByInteractionOnServer, CallFunc_BooleanAND_ReturnValue_1) == 0x00000C, "Member 'BGA_IslandPortal_C_StartTeleportByInteractionOnServer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.DetermineWherePlayerIsLooking
// 0x0078 (0x0078 - 0x0000)
struct BGA_IslandPortal_C_DetermineWherePlayerIsLooking final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLookingAtScreen;                                // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsLookingAtPortal;                                // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLookingAtScreen;                                  // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bLookingAtPortal;                                  // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                EyesViewPointLocation;                             // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EyesViewPointRotation;                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ABA[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ABB[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetActorEyesViewPoint_OutLocation;        // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetActorEyesViewPoint_OutRotation;        // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLookingAtSphere_bIsLookingAtSphere;     // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ABC[0x2];                                     // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_DistanceSquared_ReturnValue_1;     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLookingAtSphere_bIsLookingAtSphere_1;   // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_DetermineWherePlayerIsLooking");
static_assert(sizeof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking) == 0x000078, "Wrong size on BGA_IslandPortal_C_DetermineWherePlayerIsLooking");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, Pawn) == 0x000000, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::Pawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, bIsLookingAtScreen) == 0x000008, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::bIsLookingAtScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, bIsLookingAtPortal) == 0x000009, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::bIsLookingAtPortal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, bLookingAtScreen) == 0x00000A, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::bLookingAtScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, bLookingAtPortal) == 0x00000B, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::bLookingAtPortal' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, EyesViewPointLocation) == 0x00000C, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::EyesViewPointLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, EyesViewPointRotation) == 0x000018, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::EyesViewPointRotation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_GetController_ReturnValue) == 0x000028, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_GetActorEyesViewPoint_OutLocation) == 0x000034, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_GetActorEyesViewPoint_OutLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_GetActorEyesViewPoint_OutRotation) == 0x000040, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_GetActorEyesViewPoint_OutRotation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_IsLookingAtSphere_bIsLookingAtSphere) == 0x00004C, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_IsLookingAtSphere_bIsLookingAtSphere' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_BooleanAND_ReturnValue) == 0x00004D, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000050, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x00005C, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000068, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_Vector_DistanceSquared_ReturnValue_1) == 0x00006C, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_Vector_DistanceSquared_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_Less_FloatFloat_ReturnValue) == 0x000070, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000071, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_DetermineWherePlayerIsLooking, CallFunc_IsLookingAtSphere_bIsLookingAtSphere_1) == 0x000072, "Member 'BGA_IslandPortal_C_DetermineWherePlayerIsLooking::CallFunc_IsLookingAtSphere_bIsLookingAtSphere_1' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintCanInteract
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_BlueprintCanInteract final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETInteractionType                             InteractionType;                                   // 0x0009(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalOpen_ReturnValue;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintCanInteract) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BlueprintCanInteract");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintCanInteract) == 0x000010, "Wrong size on BGA_IslandPortal_C_BlueprintCanInteract");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, InteractionBeingAttempted) == 0x000008, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, InteractionType) == 0x000009, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::InteractionType' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, ReturnValue) == 0x00000A, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000B, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x00000C, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintCanInteract, CallFunc_IsPortalOpen_ReturnValue) == 0x00000D, "Member 'BGA_IslandPortal_C_BlueprintCanInteract::CallFunc_IsPortalOpen_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintGetInteractionString
// 0x0230 (0x0230 - 0x0000)
struct BGA_IslandPortal_C_BlueprintGetInteractionString final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5ABD[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm)
	class FText                                   Temp_text_Variable;                                // 0x0028(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ABE[0x6];                                     // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5ABF[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0080(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC0[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x00A0(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00B8(0x0018)()
	bool                                          Temp_bool_Variable_4;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC1[0x5];                                     // 0x00D3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_6;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00F0(0x0018)()
	bool                                          Temp_bool_Variable_7;                              // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC2[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_8;                              // 0x0110(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0128(0x0018)()
	bool                                          Temp_bool_Variable_8;                              // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMobileGame_ReturnValue;                 // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC3[0x5];                                     // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0148(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0160(0x0018)()
	class FText                                   K2Node_Select_Default_2;                           // 0x0178(0x0018)()
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction; // 0x0190(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanModifyPortal_bCanModify;               // 0x0191(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMobileGame_ReturnValue_1;               // 0x0192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0193(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC4[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x0198(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x01B0(0x0018)()
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMobileGame_ReturnValue_2;               // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC5[0x6];                                     // 0x01CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_5;                           // 0x01D0(0x0018)()
	class FText                                   K2Node_Select_Default_6;                           // 0x01E8(0x0018)()
	class FText                                   K2Node_Select_Default_7;                           // 0x0200(0x0018)()
	class FText                                   K2Node_Select_Default_8;                           // 0x0218(0x0018)()
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintGetInteractionString) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BlueprintGetInteractionString");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintGetInteractionString) == 0x000230, "Wrong size on BGA_IslandPortal_C_BlueprintGetInteractionString");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, InteractionBeingAttempted) == 0x000008, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, ReturnValue) == 0x000010, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable) == 0x000028, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_1) == 0x000040, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable) == 0x000058, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_1) == 0x000059, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_2) == 0x000060, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_2) == 0x000078, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_3) == 0x000080, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_3) == 0x000098, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_4) == 0x0000A0, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_5) == 0x0000B8, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_4) == 0x0000D0, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_5) == 0x0000D1, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_6) == 0x0000D2, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_6) == 0x0000D8, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_7) == 0x0000F0, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_7) == 0x000108, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_8) == 0x000110, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_text_Variable_9) == 0x000128, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, Temp_bool_Variable_8) == 0x000140, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000141, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_IsMobileGame_ReturnValue) == 0x000142, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_IsMobileGame_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default) == 0x000148, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_1) == 0x000160, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_2) == 0x000178, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction) == 0x000190, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_CanModifyPortal_bCanModify) == 0x000191, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_CanModifyPortal_bCanModify' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_IsMobileGame_ReturnValue_1) == 0x000192, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_IsMobileGame_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000193, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_Not_PreBool_ReturnValue) == 0x000194, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_3) == 0x000198, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_4) == 0x0001B0, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_BooleanOR_ReturnValue) == 0x0001C8, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, CallFunc_IsMobileGame_ReturnValue_2) == 0x0001C9, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::CallFunc_IsMobileGame_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_5) == 0x0001D0, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_6) == 0x0001E8, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_7) == 0x000200, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionString, K2Node_Select_Default_8) == 0x000218, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionString::K2Node_Select_Default_8' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintGetInteractionTime
// 0x0010 (0x0010 - 0x0000)
struct BGA_IslandPortal_C_BlueprintGetInteractionTime final
{
public:
	const class AFortPawn*                        InteractingPawn;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutInteractionTime;                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EInteractionBeingAttempted                    InteractionBeingAttempted;                         // 0x000C(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanModifyPortal_bCanModify;               // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintGetInteractionTime) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_BlueprintGetInteractionTime");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintGetInteractionTime) == 0x000010, "Wrong size on BGA_IslandPortal_C_BlueprintGetInteractionTime");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, InteractingPawn) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::InteractingPawn' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, OutInteractionTime) == 0x000008, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::OutInteractionTime' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, InteractionBeingAttempted) == 0x00000C, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::InteractionBeingAttempted' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, ReturnValue) == 0x00000D, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, CallFunc_CanModifyPortal_bCanModify) == 0x00000E, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::CallFunc_CanModifyPortal_bCanModify' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintGetInteractionTime, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x00000F, "Member 'BGA_IslandPortal_C_BlueprintGetInteractionTime::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.PortalTeleportsByInteraction
// 0x0006 (0x0006 - 0x0000)
struct BGA_IslandPortal_C_PortalTeleportsByInteraction final
{
public:
	bool                                          bRequiresInteraction;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_PortalTeleportsByInteraction) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_PortalTeleportsByInteraction");
static_assert(sizeof(BGA_IslandPortal_C_PortalTeleportsByInteraction) == 0x000006, "Wrong size on BGA_IslandPortal_C_PortalTeleportsByInteraction");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, bRequiresInteraction) == 0x000000, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000001, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalTeleportsByInteraction, CallFunc_BooleanAND_ReturnValue_2) == 0x000005, "Member 'BGA_IslandPortal_C_PortalTeleportsByInteraction::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.PortalUsesCodeScreen
// 0x000A (0x000A - 0x0000)
struct BGA_IslandPortal_C_PortalUsesCodeScreen final
{
public:
	bool                                          bUsesCodeScreen;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalInteractable_ReturnValue;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_UniqueNetIdRepl_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_PortalUsesCodeScreen) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_PortalUsesCodeScreen");
static_assert(sizeof(BGA_IslandPortal_C_PortalUsesCodeScreen) == 0x00000A, "Wrong size on BGA_IslandPortal_C_PortalUsesCodeScreen");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, bUsesCodeScreen) == 0x000000, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000001, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_IsPortalInteractable_ReturnValue) == 0x000002, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_IsPortalInteractable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_IsValid_UniqueNetIdRepl_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_IsValid_UniqueNetIdRepl_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanAND_ReturnValue_1) == 0x000007, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanAND_ReturnValue_2) == 0x000008, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_PortalUsesCodeScreen, CallFunc_BooleanAND_ReturnValue_3) == 0x000009, "Member 'BGA_IslandPortal_C_PortalUsesCodeScreen::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.IsLookingAtSphere
// 0x0068 (0x0068 - 0x0000)
struct BGA_IslandPortal_C_IsLookingAtSphere final
{
public:
	class USphereComponent*                       LookAtSphere;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Eyes_View_Point_Location;                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Eyes_View_Point_Rotation;                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsLookingAtSphere;                                // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC6[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtWorldLocation;                               // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledSphereRadius_ReturnValue;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_FindClosestPointOnLine_ReturnValue;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Square_ReturnValue;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_Distance2DSquared_ReturnValue;     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_IsLookingAtSphere) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_IsLookingAtSphere");
static_assert(sizeof(BGA_IslandPortal_C_IsLookingAtSphere) == 0x000068, "Wrong size on BGA_IslandPortal_C_IsLookingAtSphere");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, LookAtSphere) == 0x000000, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::LookAtSphere' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, Eyes_View_Point_Location) == 0x000008, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::Eyes_View_Point_Location' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, Eyes_View_Point_Rotation) == 0x000014, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::Eyes_View_Point_Rotation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, bIsLookingAtSphere) == 0x000020, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::bIsLookingAtSphere' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, LookAtWorldLocation) == 0x000024, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::LookAtWorldLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000030, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_GetForwardVector_ReturnValue) == 0x00003C, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_GetScaledSphereRadius_ReturnValue) == 0x000048, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_GetScaledSphereRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_FindClosestPointOnLine_ReturnValue) == 0x00004C, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_FindClosestPointOnLine_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_Square_ReturnValue) == 0x000058, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_Square_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_Vector_Distance2DSquared_ReturnValue) == 0x00005C, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_Vector_Distance2DSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_IsLookingAtSphere, CallFunc_Less_FloatFloat_ReturnValue) == 0x000060, "Member 'BGA_IslandPortal_C_IsLookingAtSphere::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.CanModifyPortal
// 0x0018 (0x0018 - 0x0000)
struct BGA_IslandPortal_C_CanModifyPortal final
{
public:
	bool                                          bCanModify;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPortalInteractable_ReturnValue;         // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC7[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsPublishedPortal_ReturnValue;         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_CanModifyPortal) == 0x000004, "Wrong alignment on BGA_IslandPortal_C_CanModifyPortal");
static_assert(sizeof(BGA_IslandPortal_C_CanModifyPortal) == 0x000018, "Wrong size on BGA_IslandPortal_C_CanModifyPortal");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, bCanModify) == 0x000000, "Member 'BGA_IslandPortal_C_CanModifyPortal::bCanModify' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_IsPortalInteractable_ReturnValue) == 0x000001, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_IsPortalInteractable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_GetIsPublishedPortal_ReturnValue) == 0x000008, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_GetIsPublishedPortal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000009, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanOR_ReturnValue) == 0x00000B, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_Not_PreBool_ReturnValue) == 0x00000C, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanOR_ReturnValue_1) == 0x00000D, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x00000E, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue_2) == 0x00000F, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_Not_PreBool_ReturnValue_1) == 0x000010, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue_3) == 0x000011, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue_4) == 0x000012, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanOR_ReturnValue_2) == 0x000013, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_CanModifyPortal, CallFunc_BooleanAND_ReturnValue_5) == 0x000014, "Member 'BGA_IslandPortal_C_CanModifyPortal::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.GetIconPlacement
// 0x0060 (0x0060 - 0x0000)
struct BGA_IslandPortal_C_GetIconPlacement final
{
public:
	const class AActor*                           SelfActor;                                         // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class AActor*                           ViewingActor;                                      // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutLocation;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OutExtents;                                        // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC8[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetIconPlacement_OutLocation;             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetIconPlacement_OutExtents;              // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5AC9[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BGA_IslandPortal_C_GetIconPlacement) == 0x000008, "Wrong alignment on BGA_IslandPortal_C_GetIconPlacement");
static_assert(sizeof(BGA_IslandPortal_C_GetIconPlacement) == 0x000060, "Wrong size on BGA_IslandPortal_C_GetIconPlacement");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, SelfActor) == 0x000000, "Member 'BGA_IslandPortal_C_GetIconPlacement::SelfActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, ViewingActor) == 0x000008, "Member 'BGA_IslandPortal_C_GetIconPlacement::ViewingActor' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, OutLocation) == 0x000010, "Member 'BGA_IslandPortal_C_GetIconPlacement::OutLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, OutExtents) == 0x00001C, "Member 'BGA_IslandPortal_C_GetIconPlacement::OutExtents' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000028, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_GetIconPlacement_OutLocation) == 0x00002C, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_GetIconPlacement_OutLocation' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_GetIconPlacement_OutExtents) == 0x000038, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_GetIconPlacement_OutExtents' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_BooleanAND_ReturnValue) == 0x000044, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000048, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_GetIconPlacement, CallFunc_Conv_FloatToVector_ReturnValue) == 0x000054, "Member 'BGA_IslandPortal_C_GetIconPlacement::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.IconPlacementNeedsUpdate
// 0x0001 (0x0001 - 0x0000)
struct BGA_IslandPortal_C_IconPlacementNeedsUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_IconPlacementNeedsUpdate) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_IconPlacementNeedsUpdate");
static_assert(sizeof(BGA_IslandPortal_C_IconPlacementNeedsUpdate) == 0x000001, "Wrong size on BGA_IslandPortal_C_IconPlacementNeedsUpdate");
static_assert(offsetof(BGA_IslandPortal_C_IconPlacementNeedsUpdate, ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_IconPlacementNeedsUpdate::ReturnValue' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintUseMobileHighlight
// 0x0002 (0x0002 - 0x0000)
struct BGA_IslandPortal_C_BlueprintUseMobileHighlight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MobileInteractIsValid_bIsValid;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintUseMobileHighlight) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_BlueprintUseMobileHighlight");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintUseMobileHighlight) == 0x000002, "Wrong size on BGA_IslandPortal_C_BlueprintUseMobileHighlight");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintUseMobileHighlight, ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintUseMobileHighlight::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintUseMobileHighlight, CallFunc_MobileInteractIsValid_bIsValid) == 0x000001, "Member 'BGA_IslandPortal_C_BlueprintUseMobileHighlight::CallFunc_MobileInteractIsValid_bIsValid' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.BlueprintDisplayMobileInteractPrompt
// 0x0002 (0x0002 - 0x0000)
struct BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MobileInteractIsValid_bIsValid;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt");
static_assert(sizeof(BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt) == 0x000002, "Wrong size on BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt, ReturnValue) == 0x000000, "Member 'BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt::ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt, CallFunc_MobileInteractIsValid_bIsValid) == 0x000001, "Member 'BGA_IslandPortal_C_BlueprintDisplayMobileInteractPrompt::CallFunc_MobileInteractIsValid_bIsValid' has a wrong offset!");

// Function BGA_IslandPortal.BGA_IslandPortal_C.MobileInteractIsValid
// 0x0006 (0x0006 - 0x0000)
struct BGA_IslandPortal_C_MobileInteractIsValid final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalTeleportsByInteraction_bRequiresInteraction; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_PortalUsesCodeScreen_bUsesCodeScreen;     // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BGA_IslandPortal_C_MobileInteractIsValid) == 0x000001, "Wrong alignment on BGA_IslandPortal_C_MobileInteractIsValid");
static_assert(sizeof(BGA_IslandPortal_C_MobileInteractIsValid) == 0x000006, "Wrong size on BGA_IslandPortal_C_MobileInteractIsValid");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, bIsValid) == 0x000000, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::bIsValid' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, CallFunc_PortalTeleportsByInteraction_bRequiresInteraction) == 0x000001, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::CallFunc_PortalTeleportsByInteraction_bRequiresInteraction' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, CallFunc_PortalUsesCodeScreen_bUsesCodeScreen) == 0x000002, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::CallFunc_PortalUsesCodeScreen_bUsesCodeScreen' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BGA_IslandPortal_C_MobileInteractIsValid, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'BGA_IslandPortal_C_MobileInteractIsValid::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

}

