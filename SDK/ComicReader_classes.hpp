#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ComicReader

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "ComicReader_structs.hpp"
#include "FortniteUI_classes.hpp"
#include "UMG_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "SlateCore_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// Class ComicReader.ComicBook
// 0x0018 (0x0048 - 0x0030)
class UComicBook final : public UDataAsset
{
public:
	TArray<class UFortComicPage*>                 Pages;                                             // 0x0030(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExportStartingWithPageIndex;                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         PagesToExport;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CopyToClipboardForCMS();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ComicBook">();
	}
	static class UComicBook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UComicBook>();
	}
};
static_assert(alignof(UComicBook) == 0x000008, "Wrong alignment on UComicBook");
static_assert(sizeof(UComicBook) == 0x000048, "Wrong size on UComicBook");
static_assert(offsetof(UComicBook, Pages) == 0x000030, "Member 'UComicBook::Pages' has a wrong offset!");
static_assert(offsetof(UComicBook, ExportStartingWithPageIndex) == 0x000040, "Member 'UComicBook::ExportStartingWithPageIndex' has a wrong offset!");
static_assert(offsetof(UComicBook, PagesToExport) == 0x000044, "Member 'UComicBook::PagesToExport' has a wrong offset!");

// Class ComicReader.FortComicReader
// 0x0068 (0x0170 - 0x0108)
class UFortComicReader final : public UWidget
{
public:
	uint8                                         Pad_C85[0x28];                                     // 0x0108(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFortComicPage*>                 Pages;                                             // 0x0130(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFortComicPanelReference               CurrentPanel;                                      // 0x0140(0x0008)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EFortComicViewMode                            ViewMode;                                          // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C86[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             BP_OnPanelChanged;                                 // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             BP_OnHoverZoneChanged;                             // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	void Next();
	void Previous();
	void SetCurrentPage(int32 InPageIndex);
	void ToggleViewMode();

	int32 GetCurrentPageIndex() const;
	int32 GetCurrentPageNumber() const;
	int32 GetCurrentPanelIndex() const;
	int32 GetNumPanelsOnPage(int32 InPageNum) const;
	int32 GetTotalPageNumber() const;
	EFortComicViewMode GetViewMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComicReader">();
	}
	static class UFortComicReader* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComicReader>();
	}
};
static_assert(alignof(UFortComicReader) == 0x000008, "Wrong alignment on UFortComicReader");
static_assert(sizeof(UFortComicReader) == 0x000170, "Wrong size on UFortComicReader");
static_assert(offsetof(UFortComicReader, Pages) == 0x000130, "Member 'UFortComicReader::Pages' has a wrong offset!");
static_assert(offsetof(UFortComicReader, CurrentPanel) == 0x000140, "Member 'UFortComicReader::CurrentPanel' has a wrong offset!");
static_assert(offsetof(UFortComicReader, ViewMode) == 0x000148, "Member 'UFortComicReader::ViewMode' has a wrong offset!");
static_assert(offsetof(UFortComicReader, BP_OnPanelChanged) == 0x000150, "Member 'UFortComicReader::BP_OnPanelChanged' has a wrong offset!");
static_assert(offsetof(UFortComicReader, BP_OnHoverZoneChanged) == 0x000160, "Member 'UFortComicReader::BP_OnHoverZoneChanged' has a wrong offset!");

// Class ComicReader.FortComicScreen
// 0x0020 (0x0390 - 0x0370)
class UFortComicScreen final : public UAthenaSpatialScreen
{
public:
	uint8                                         Pad_C87[0x10];                                     // 0x0370(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortComicReader*                       ComicReader;                                       // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 LoadingSpinner;                                    // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandlePreprocessorNavInput(EUINavigation InNavDirection);
	void OnPreProcessedNavInput(EUINavigation NavInput);
	void UpdateComicTitle(const class FString& InComicTitle);
	void UpdateShowContinueOnLastPage(bool InShowContinue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComicScreen">();
	}
	static class UFortComicScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComicScreen>();
	}
};
static_assert(alignof(UFortComicScreen) == 0x000008, "Wrong alignment on UFortComicScreen");
static_assert(sizeof(UFortComicScreen) == 0x000390, "Wrong size on UFortComicScreen");
static_assert(offsetof(UFortComicScreen, ComicReader) == 0x000380, "Member 'UFortComicScreen::ComicReader' has a wrong offset!");
static_assert(offsetof(UFortComicScreen, LoadingSpinner) == 0x000388, "Member 'UFortComicScreen::LoadingSpinner' has a wrong offset!");

// Class ComicReader.SaveData_ComicBook
// 0x0008 (0x0048 - 0x0040)
class USaveData_ComicBook final : public USaveData
{
public:
	int32                                         LastPage;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C88[0x4];                                      // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveData_ComicBook">();
	}
	static class USaveData_ComicBook* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveData_ComicBook>();
	}
};
static_assert(alignof(USaveData_ComicBook) == 0x000008, "Wrong alignment on USaveData_ComicBook");
static_assert(sizeof(USaveData_ComicBook) == 0x000048, "Wrong size on USaveData_ComicBook");
static_assert(offsetof(USaveData_ComicBook, LastPage) == 0x000040, "Member 'USaveData_ComicBook::LastPage' has a wrong offset!");

// Class ComicReader.FortComicPage
// 0x0098 (0x00C0 - 0x0028)
class UFortComicPage final : public UObject
{
public:
	struct FSlateBrush                            PageBrush;                                         // 0x0028(0x0088)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FFortComicPanel>                Panels;                                            // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FortComicPage">();
	}
	static class UFortComicPage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFortComicPage>();
	}
};
static_assert(alignof(UFortComicPage) == 0x000008, "Wrong alignment on UFortComicPage");
static_assert(sizeof(UFortComicPage) == 0x0000C0, "Wrong size on UFortComicPage");
static_assert(offsetof(UFortComicPage, PageBrush) == 0x000028, "Member 'UFortComicPage::PageBrush' has a wrong offset!");
static_assert(offsetof(UFortComicPage, Panels) == 0x0000B0, "Member 'UFortComicPage::Panels' has a wrong offset!");

}

