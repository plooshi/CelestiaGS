#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ShowdownTournamentPosterFront

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function ShowdownTournamentPosterFront.ShowdownTournamentPosterFront_C.GetTournamentDateText
// 0x0608 (0x0608 - 0x0000)
struct ShowdownTournamentPosterFront_C_GetTournamentDateText final
{
public:
	class FText                                   TournamentDate;                                    // 0x0000(0x0018)(Parm, OutParm)
	class FText                                   Temp_text_Variable;                                // 0x0018(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0030(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7288[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7289[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_3;                              // 0x0070(0x0018)()
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_728A[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0090(0x0018)()
	class FText                                   Temp_text_Variable_5;                              // 0x00A8(0x0018)()
	class FText                                   Temp_text_Variable_6;                              // 0x00C0(0x0018)()
	class FText                                   Temp_text_Variable_7;                              // 0x00D8(0x0018)()
	class FText                                   Temp_text_Variable_8;                              // 0x00F0(0x0018)()
	class FText                                   Temp_text_Variable_9;                              // 0x0108(0x0018)()
	class FText                                   Temp_text_Variable_10;                             // 0x0120(0x0018)()
	class FText                                   Temp_text_Variable_11;                             // 0x0138(0x0018)()
	class FText                                   Temp_text_Variable_12;                             // 0x0150(0x0018)()
	class FText                                   Temp_text_Variable_13;                             // 0x0168(0x0018)()
	class FText                                   Temp_text_Variable_14;                             // 0x0180(0x0018)()
	class FText                                   Temp_text_Variable_15;                             // 0x0198(0x0018)()
	class FText                                   Temp_text_Variable_16;                             // 0x01B0(0x0018)()
	int32                                         Temp_int_Variable_1;                               // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_728B[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_17;                             // 0x01D0(0x0018)()
	class FText                                   Temp_text_Variable_18;                             // 0x01E8(0x0018)()
	class FText                                   Temp_text_Variable_19;                             // 0x0200(0x0018)()
	class FText                                   Temp_text_Variable_20;                             // 0x0218(0x0018)()
	class FText                                   Temp_text_Variable_21;                             // 0x0230(0x0018)()
	class FText                                   Temp_text_Variable_22;                             // 0x0248(0x0018)()
	class FText                                   Temp_text_Variable_23;                             // 0x0260(0x0018)()
	class FText                                   Temp_text_Variable_24;                             // 0x0278(0x0018)()
	class FText                                   Temp_text_Variable_25;                             // 0x0290(0x0018)()
	class FText                                   Temp_text_Variable_26;                             // 0x02A8(0x0018)()
	class FText                                   Temp_text_Variable_27;                             // 0x02C0(0x0018)()
	class FText                                   Temp_text_Variable_28;                             // 0x02D8(0x0018)()
	class FText                                   Temp_text_Variable_29;                             // 0x02F0(0x0018)()
	struct FDateTime                              CallFunc_GetTournamentEndTime_ReturnValue;         // 0x0308(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_728C[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_GetTournamentBeginTime_ReturnValue;       // 0x0330(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_728D[0x3];                                     // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BreakDateTime_Year_1;                     // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_1;                    // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_1;                      // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_1;                     // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_1;                   // 0x034C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_1;                   // 0x0350(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_1;              // 0x0354(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetTournamentEndTime_ReturnValue_1;       // 0x0358(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_728E[0x3];                                     // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BreakDateTime_Year_2;                     // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_2;                    // 0x0368(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_2;                      // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_2;                     // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_2;                   // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_2;                   // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_2;              // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0380(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0398(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x03B0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x03F0(0x0040)(HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetTournamentBeginTime_ReturnValue_1;     // 0x0430(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetTournamentEndTime_ReturnValue_2;       // 0x0438(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_3;                     // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_3;                    // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_3;                      // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_3;                     // 0x044C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_3;                   // 0x0450(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_3;                   // 0x0454(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_3;              // 0x0458(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_4;                     // 0x045C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_4;                    // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_4;                      // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_4;                     // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_4;                   // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_4;                   // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_4;              // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0478(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_728F[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_1;                           // 0x0498(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x04B0(0x0040)(HasGetValueTypeHash)
	class FText                                   K2Node_Select_Default_2;                           // 0x04F0(0x0018)()
	struct FDateTime                              CallFunc_GetTournamentBeginTime_ReturnValue_2;     // 0x0508(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0510(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year_5;                     // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month_5;                    // 0x0554(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day_5;                      // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour_5;                     // 0x055C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute_5;                   // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second_5;                   // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond_5;              // 0x0568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7290[0x4];                                     // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x0570(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x0588(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x05A0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x05E0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x05F0(0x0018)()
};
static_assert(alignof(ShowdownTournamentPosterFront_C_GetTournamentDateText) == 0x000008, "Wrong alignment on ShowdownTournamentPosterFront_C_GetTournamentDateText");
static_assert(sizeof(ShowdownTournamentPosterFront_C_GetTournamentDateText) == 0x000608, "Wrong size on ShowdownTournamentPosterFront_C_GetTournamentDateText");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, TournamentDate) == 0x000000, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::TournamentDate' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable) == 0x000018, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_1) == 0x000030, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_bool_Variable) == 0x000048, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_2) == 0x000050, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_bool_Variable_1) == 0x000068, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_3) == 0x000070, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_int_Variable) == 0x000088, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_4) == 0x000090, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_5) == 0x0000A8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_6) == 0x0000C0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_7) == 0x0000D8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_8) == 0x0000F0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_9) == 0x000108, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_10) == 0x000120, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_10' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_11) == 0x000138, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_11' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_12) == 0x000150, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_12' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_13) == 0x000168, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_13' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_14) == 0x000180, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_14' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_15) == 0x000198, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_15' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_16) == 0x0001B0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_16' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_int_Variable_1) == 0x0001C8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_17) == 0x0001D0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_17' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_18) == 0x0001E8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_18' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_19) == 0x000200, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_19' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_20) == 0x000218, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_20' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_21) == 0x000230, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_21' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_22) == 0x000248, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_22' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_23) == 0x000260, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_23' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_24) == 0x000278, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_24' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_25) == 0x000290, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_25' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_26) == 0x0002A8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_26' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_27) == 0x0002C0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_27' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_28) == 0x0002D8, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_28' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_text_Variable_29) == 0x0002F0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_text_Variable_29' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentEndTime_ReturnValue) == 0x000308, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentEndTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year) == 0x000310, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month) == 0x000314, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day) == 0x000318, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour) == 0x00031C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute) == 0x000320, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second) == 0x000324, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond) == 0x000328, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentBeginTime_ReturnValue) == 0x000330, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentBeginTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, Temp_bool_Variable_2) == 0x000338, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year_1) == 0x00033C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month_1) == 0x000340, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day_1) == 0x000344, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour_1) == 0x000348, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute_1) == 0x00034C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second_1) == 0x000350, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond_1) == 0x000354, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentEndTime_ReturnValue_1) == 0x000358, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentEndTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000360, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year_2) == 0x000364, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month_2) == 0x000368, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day_2) == 0x00036C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour_2) == 0x000370, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute_2) == 0x000374, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second_2) == 0x000378, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond_2) == 0x00037C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_Conv_IntToText_ReturnValue) == 0x000380, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_Select_Default) == 0x000398, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeStruct_FormatArgumentData) == 0x0003B0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0003F0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentBeginTime_ReturnValue_1) == 0x000430, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentBeginTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentEndTime_ReturnValue_2) == 0x000438, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentEndTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year_3) == 0x000440, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month_3) == 0x000444, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day_3) == 0x000448, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour_3) == 0x00044C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute_3) == 0x000450, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second_3) == 0x000454, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond_3) == 0x000458, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year_4) == 0x00045C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month_4) == 0x000460, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day_4) == 0x000464, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour_4) == 0x000468, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute_4) == 0x00046C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second_4) == 0x000470, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond_4) == 0x000474, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000478, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000490, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_Select_Default_1) == 0x000498, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeStruct_FormatArgumentData_2) == 0x0004B0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_Select_Default_2) == 0x0004F0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_GetTournamentBeginTime_ReturnValue_2) == 0x000508, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_GetTournamentBeginTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeStruct_FormatArgumentData_3) == 0x000510, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Year_5) == 0x000550, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Year_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Month_5) == 0x000554, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Month_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Day_5) == 0x000558, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Day_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Hour_5) == 0x00055C, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Hour_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Minute_5) == 0x000560, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Minute_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Second_5) == 0x000564, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Second_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_BreakDateTime_Millisecond_5) == 0x000568, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_BreakDateTime_Millisecond_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_Select_Default_3) == 0x000570, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_Select_Default_4) == 0x000588, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeStruct_FormatArgumentData_4) == 0x0005A0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, K2Node_MakeArray_Array) == 0x0005E0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_GetTournamentDateText, CallFunc_Format_ReturnValue) == 0x0005F0, "Member 'ShowdownTournamentPosterFront_C_GetTournamentDateText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function ShowdownTournamentPosterFront.ShowdownTournamentPosterFront_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ShowdownTournamentPosterFront_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ShowdownTournamentPosterFront_C_PreConstruct) == 0x000001, "Wrong alignment on ShowdownTournamentPosterFront_C_PreConstruct");
static_assert(sizeof(ShowdownTournamentPosterFront_C_PreConstruct) == 0x000001, "Wrong size on ShowdownTournamentPosterFront_C_PreConstruct");
static_assert(offsetof(ShowdownTournamentPosterFront_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ShowdownTournamentPosterFront_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ShowdownTournamentPosterFront.ShowdownTournamentPosterFront_C.ExecuteUbergraph_ShowdownTournamentPosterFront
// 0x00B8 (0x00B8 - 0x0000)
struct ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWorldCupQualifierEvent_ReturnValue;     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortEventWindowEligibility                   Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_6;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7291[0x1];                                     // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0010(0x0028)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0038(0x0028)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0060(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue_1;                // 0x0078(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue_2;                // 0x0090(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortEventWindowEligibility                   CallFunc_GetTournamentEligibility_ReturnValue;     // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7292[0x5];                                     // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_2;                           // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront) == 0x000008, "Wrong alignment on ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront");
static_assert(sizeof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront) == 0x0000B8, "Wrong size on ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, EntryPoint) == 0x000000, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::EntryPoint' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, CallFunc_IsWorldCupQualifierEvent_ReturnValue) == 0x000004, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::CallFunc_IsWorldCupQualifierEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_bool_Variable) == 0x000005, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable) == 0x000006, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_1) == 0x000007, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_2) == 0x000008, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_3) == 0x000009, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_4) == 0x00000A, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_5) == 0x00000B, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_byte_Variable_6) == 0x00000C, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, Temp_bool_Variable_1) == 0x00000D, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_Event_IsDesignTime) == 0x00000E, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_MakeStruct_SlateColor) == 0x000010, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_MakeStruct_SlateColor_1) == 0x000038, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, CallFunc_TextToUpper_ReturnValue) == 0x000060, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, CallFunc_TextToUpper_ReturnValue_1) == 0x000078, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::CallFunc_TextToUpper_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, CallFunc_TextToUpper_ReturnValue_2) == 0x000090, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::CallFunc_TextToUpper_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_Select_Default) == 0x0000A8, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, CallFunc_GetTournamentEligibility_ReturnValue) == 0x0000A9, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::CallFunc_GetTournamentEligibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_Select_Default_1) == 0x0000AA, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront, K2Node_Select_Default_2) == 0x0000B0, "Member 'ShowdownTournamentPosterFront_C_ExecuteUbergraph_ShowdownTournamentPosterFront::K2Node_Select_Default_2' has a wrong offset!");

}

