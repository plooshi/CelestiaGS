#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ItemAnimLayerInterface

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ItemAnimLayerInterface.ItemAnimLayerInterface_C
// 0x0000 (0x0028 - 0x0028)
class IItemAnimLayerInterface_C final : public IAnimLayerInterface
{
public:
	void ItemUpperBody(const struct FPoseLink& InPoseUpperBody, const struct FFortAnimInput_AdjustedAim& InputParam, struct FPoseLink* Param_ItemUpperBody);
	void ItemFullBodySprint(const struct FPoseLink& InPoseSprint, struct FPoseLink* Param_ItemFullBodySprint);
	void ItemIdleAdditive(const struct FPoseLink& InPoseIdleAdditive, struct FPoseLink* Param_ItemIdleAdditive);
	void ItemCrouchTurningAdditive(struct FPoseLink* Param_ItemCrouchTurningAdditive);
	void ItemSlopeSliding(struct FPoseLink* Param_ItemSlopeSliding);
	void ItemJumpUpAdditive(struct FPoseLink* Param_ItemJumpUpAdditive);
	void ItemJumpLoopAdditive(struct FPoseLink* Param_ItemJumpLoopAdditive);
	void ItemFallAdditive(struct FPoseLink* Param_ItemFallAdditive);
	void ItemFallLandAdditive(struct FPoseLink* Param_ItemFallLandAdditive);
	void ItemJetPackStartAdditive(struct FPoseLink* Param_ItemJetPackStartAdditive);
	void ItemJetPackJumpAdditive(struct FPoseLink* Param_ItemJetPackJumpAdditive);
	void ItemZipLineStartAdditive(struct FPoseLink* Param_ItemZipLineStartAdditive);
	void ItemFlyModeStartAdditive(struct FPoseLink* Param_ItemFlyModeStartAdditive);
	void ItemFlyModeLoopAdditive(struct FPoseLink* Param_ItemFlyModeLoopAdditive);
	void ItemJogStartAdditive(const struct FPoseLink& InPoseJogStartAdditive, struct FPoseLink* Param_ItemJogStartAdditive);
	void ItemJogStopAdditive(const struct FPoseLink& InPoseJogStopAdditive, struct FPoseLink* Param_ItemJogStopAdditive);
	void ItemJogPrePivotAdditive(const struct FPoseLink& InPosePrePivotAdditive, struct FPoseLink* Param_ItemJogPrePivotAdditive);
	void ItemJogPostPivotAdditive(const struct FPoseLink& InPosePostPivotAdditive, struct FPoseLink* Param_ItemJogPostPivotAdditive);
	void ItemLowerBodyMovement(const struct FPoseLink& InPoseLowerBodyMovement, struct FPoseLink* Param_ItemLowerBodyMovement);
	void ItemLowerBodyLeanAdditive(const struct FPoseLink& InPoseLowerBodyLeanAdditive, struct FPoseLink* Param_ItemLowerBodyLeanAdditive);
	void ItemLowerBodyJogStart(const struct FPoseLink& InPoseLowerBodyJogStart, struct FPoseLink* Param_ItemLowerBodyJogStart);
	void ItemLowerBodyJogStop(const struct FPoseLink& InPoseLowerBodyJogStop, struct FPoseLink* Param_ItemLowerBodyJogStop);
	void ItemLowerBodyJogPrePivot(const struct FPoseLink& InPoseLowerBodyJogPrePivot, struct FPoseLink* Param_ItemLowerBodyJogPrePivot);
	void ItemLowerBodyJogPostPivot(const struct FPoseLink& InPoseLowerBodyJogPostPivot, struct FPoseLink* Param_ItemLowerBodyJogPostPivot);
	void ItemRelaxedEntry(const struct FPoseLink& InPoseRelaxedEntry, struct FPoseLink* Param_ItemRelaxedEntry);
	void ItemSwimJumpStart(struct FPoseLink* Param_ItemSwimJumpStart);
	void ItemSwimJumpStartLoop(struct FPoseLink* Param_ItemSwimJumpStartLoop);
	void ItemSwimJumpFallLoop(struct FPoseLink* Param_ItemSwimJumpFallLoop);
	void ItemSwimJumpSurfaceLoop(struct FPoseLink* Param_ItemSwimJumpSurfaceLoop);
	void ItemSwimJumpSurfaceEnd(struct FPoseLink* Param_ItemSwimJumpSurfaceEnd);
	void ItemSkeletalControl(const struct FPoseLink& InPose, struct FPoseLink* Param_ItemSkeletalControl);
	void ItemAimOffset(const struct FPoseLink& InPose_AimOffset, float AimOffsetAlpha, float Yaw, float Pitch, const struct FPoseLink& InPose_UpperLowerPreMeleeAO, struct FPoseLink* Param_ItemAimOffset);
	void ItemFullBodyOverride(const struct FPoseLink& InPoseFullBody, struct FPoseLink* Param_ItemFullBodyOverride);
	void ItemPreIK(const struct FPoseLink& InPose_PreIK, struct FPoseLink* Param_ItemPreIK);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ItemAnimLayerInterface_C">();
	}
	static class IItemAnimLayerInterface_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IItemAnimLayerInterface_C>();
	}
};
static_assert(alignof(IItemAnimLayerInterface_C) == 0x000008, "Wrong alignment on IItemAnimLayerInterface_C");
static_assert(sizeof(IItemAnimLayerInterface_C) == 0x000028, "Wrong size on IItemAnimLayerInterface_C");

}

