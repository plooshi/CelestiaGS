#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaQuest_BGA

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AthenaQuest_BGA.AthenaQuest_BGA_C
// 0x0110 (0x08C0 - 0x07B0)
class AAthenaQuest_BGA_C : public ABuildingGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AmbientSound;                                      // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InteractCylinder;                                  // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 RequiredCalendarEventFlag;                         // 0x07D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bServerQuestEnabledThisMatch;                      // 0x07E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8468[0x7];                                     // 0x07E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockedPlaylistTags;                               // 0x07E8(0x0020)(Edit, BlueprintVisible)
	bool                                          TurnOn15SecDelayToTestSplitscreen;                 // 0x0808(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8469[0x7];                                     // 0x0809(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            PrimitivesToHideByDefault;                         // 0x0810(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AFortPlayerController*>          LocalPlayersThatCanInteract;                       // 0x0820(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 BVGCalendarFlag;                                   // 0x0830(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            PrimitivesToShowIfQuestComplete;                   // 0x0840(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            PrimitivesToShowIfQuestInProgress;                 // 0x0850(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class AFortPlayerController*>          ServerBlockPlayersFromMultipleInteracts;           // 0x0860(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   PreRequisite_Quest_BackendName;                    // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UFortQuestItemDefinition*>       QuestsRequiredOnProfile;                           // 0x0878(0x0010)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   Primary_BackendName;                               // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               PreRequisite_Quest;                                // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               Primary_Quest;                                     // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SuccessSound;                                      // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SuccessFX;                                         // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SuccessShakeFeedback;                              // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bTestVisuals;                                      // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_AthenaQuest_BGA(int32 EntryPoint);
	void OnObjectiveCompleteForPlayer_VisualTestingOverride(class UFortQuestObjectiveInfo* ObjectiveInfo, class AFortPlayerController* PCOverrideForVisualTesting);
	void BindToQuestManagerForQuestUpdate(class AFortPlayerController* FortPlayerController);
	void OnObjectiveCompleteForPlayer(class UFortQuestObjectiveInfo* ObjectiveInfo, class AFortPlayerController* PCOverrideForVisualTesting);
	void OnQuestEnabledForPlayer(class AFortPlayerController* FortPlayerController);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void OnDisplayDynamicQuestUpdate(const class UFortQuestObjectiveInfo* QuestObjective, bool bDisplayStatusUpdate, bool bDisplayAnnouncementUpdate);
	void OnPlayerCurrentQuestsReady_Client(class AFortPlayerController* FortPlayerController);
	void CheckLocalPlayersCurrentQuestsReady();
	void OnPlayerQuestStateKnown_Client(class AFortPlayerController* FortPlayerController, class UFortQuestItemDefinition* FortQuestItemDefinition, bool bIsCompletedForSelf, bool bIsAssisting, bool HasQuest);
	void OnMatchReady(const struct FGameplayTagContainer& PlaylistTags, bool bIsCalendarEventEnabled, bool bFoundBlockedPlaylistTags);
	void ReceiveBeginPlay();
	void OnEventActive_622AF7FE468E515698CC33B4AEBD8DB4(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventUpdated_622AF7FE468E515698CC33B4AEBD8DB4(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnEventEnded_622AF7FE468E515698CC33B4AEBD8DB4(const class FString& EventName, const struct FTimespan& TimeUntilEnd, const struct FTimespan& TimeSinceBegin, float TimespanRatio);
	void OnCurrentQuestsReady_E0574ADE46536F84066C2F877E9CCB6A(class UFortQuestManager* OwningQuestManager, bool bFoundAllQuestsOnProfile);
	void OnReady_247AC0C64A00231BDF2E619647FE16C3(class AFortGameStateAthena* GameState, const class UFortPlaylist* Playlist, const struct FGameplayTagContainer& PlaylistContextTags);
	void HasPlayerCompletedQuestOrIsAssisting(class AFortPlayerController* FortPlayerController, class UFortQuestItemDefinition* FortQuestItemDefinition, class FName BackendName, class AFortPlayerController** FortPlayerControllerOut, class UFortQuestItemDefinition** FortQuestItemDefinitionOut, bool* bIsCompletedForSelf, bool* bIsAssisting, bool* bHasQuest);
	void SetPrimitiveGroupsToHide(TArray<class UPrimitiveComponent*>* Param_PrimitivesToHideByDefault, TArray<class UPrimitiveComponent*>* Param_PrimitivesToShowIfQuestComplete, TArray<class UPrimitiveComponent*>* Param_PrimitivesToShowIfQuestInProgress);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AthenaQuest_BGA_C">();
	}
	static class AAthenaQuest_BGA_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAthenaQuest_BGA_C>();
	}
};
static_assert(alignof(AAthenaQuest_BGA_C) == 0x000008, "Wrong alignment on AAthenaQuest_BGA_C");
static_assert(sizeof(AAthenaQuest_BGA_C) == 0x0008C0, "Wrong size on AAthenaQuest_BGA_C");
static_assert(offsetof(AAthenaQuest_BGA_C, UberGraphFrame) == 0x0007B0, "Member 'AAthenaQuest_BGA_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, AmbientSound) == 0x0007B8, "Member 'AAthenaQuest_BGA_C::AmbientSound' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, Root) == 0x0007C0, "Member 'AAthenaQuest_BGA_C::Root' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, InteractCylinder) == 0x0007C8, "Member 'AAthenaQuest_BGA_C::InteractCylinder' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, RequiredCalendarEventFlag) == 0x0007D0, "Member 'AAthenaQuest_BGA_C::RequiredCalendarEventFlag' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, bServerQuestEnabledThisMatch) == 0x0007E0, "Member 'AAthenaQuest_BGA_C::bServerQuestEnabledThisMatch' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, BlockedPlaylistTags) == 0x0007E8, "Member 'AAthenaQuest_BGA_C::BlockedPlaylistTags' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, TurnOn15SecDelayToTestSplitscreen) == 0x000808, "Member 'AAthenaQuest_BGA_C::TurnOn15SecDelayToTestSplitscreen' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, PrimitivesToHideByDefault) == 0x000810, "Member 'AAthenaQuest_BGA_C::PrimitivesToHideByDefault' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, LocalPlayersThatCanInteract) == 0x000820, "Member 'AAthenaQuest_BGA_C::LocalPlayersThatCanInteract' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, BVGCalendarFlag) == 0x000830, "Member 'AAthenaQuest_BGA_C::BVGCalendarFlag' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, PrimitivesToShowIfQuestComplete) == 0x000840, "Member 'AAthenaQuest_BGA_C::PrimitivesToShowIfQuestComplete' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, PrimitivesToShowIfQuestInProgress) == 0x000850, "Member 'AAthenaQuest_BGA_C::PrimitivesToShowIfQuestInProgress' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, ServerBlockPlayersFromMultipleInteracts) == 0x000860, "Member 'AAthenaQuest_BGA_C::ServerBlockPlayersFromMultipleInteracts' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, PreRequisite_Quest_BackendName) == 0x000870, "Member 'AAthenaQuest_BGA_C::PreRequisite_Quest_BackendName' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, QuestsRequiredOnProfile) == 0x000878, "Member 'AAthenaQuest_BGA_C::QuestsRequiredOnProfile' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, Primary_BackendName) == 0x000888, "Member 'AAthenaQuest_BGA_C::Primary_BackendName' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, PreRequisite_Quest) == 0x000890, "Member 'AAthenaQuest_BGA_C::PreRequisite_Quest' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, Primary_Quest) == 0x000898, "Member 'AAthenaQuest_BGA_C::Primary_Quest' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, SuccessSound) == 0x0008A0, "Member 'AAthenaQuest_BGA_C::SuccessSound' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, SuccessFX) == 0x0008A8, "Member 'AAthenaQuest_BGA_C::SuccessFX' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, SuccessShakeFeedback) == 0x0008B0, "Member 'AAthenaQuest_BGA_C::SuccessShakeFeedback' has a wrong offset!");
static_assert(offsetof(AAthenaQuest_BGA_C, bTestVisuals) == 0x0008B8, "Member 'AAthenaQuest_BGA_C::bTestVisuals' has a wrong offset!");

}

