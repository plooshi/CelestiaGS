#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ShootingTarget_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ShootingTarget_Master.B_ShootingTarget_Master_C
// 0x03F8 (0x0FB8 - 0x0BC0)
class AB_ShootingTarget_Master_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BC0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   AimAssistPawn;                                     // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_TargetImpact_Falldown;                           // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RoundShortWeakPoint;                               // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       RoundWeakPoint;                                    // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      HuskyWeakPoint1;                                   // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PumpkinHeadTargetWeakPoint;                        // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LlamaTargetWeakPoint;                              // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TomatoHeadTargetWeakPoint;                         // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HandsOnHipsWeakPoint;                              // 0x0C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PandaHeadWeakPoint;                                // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TeddyBearWeakPoint;                                // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CrouchingTargetWeakPoint;                          // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HuskTargetWeakPoint;                               // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       DancingTargetWeakPoint;                            // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LoserTargetWeakPoint;                              // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      StandingTargetWeakPoint;                           // 0x0C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TargetMesh;                                        // 0x0C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   HeightExtender;                                    // 0x0C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAbilitySystemComponent*                AbilitySystem;                                     // 0x0C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ProximityTrigger;                                  // 0x0C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameProgressComponent*         FortMinigameProgress;                              // 0x0C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Target_StandShort;                              // 0x0C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Target_Base;                                    // 0x0C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         KnockDownTimeline_Rotation_8B965F244DB51315A670CE8BD54F045D; // 0x0C88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            KnockDownTimeline__Direction_8B965F244DB51315A670CE8BD54F045D; // 0x0C8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_652D[0x3];                                     // 0x0C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     KnockDownTimeline;                                 // 0x0C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Height_50A7E1DD45D0851E9ECD309DBAE220D5; // 0x0C98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_50A7E1DD45D0851E9ECD309DBAE220D5; // 0x0C9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_652E[0x3];                                     // 0x0C9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PopUpTimeline_Rotation_EC7265FB4A8A31A05B401FB83B908B21; // 0x0CA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            PopUpTimeline__Direction_EC7265FB4A8A31A05B401FB83B908B21; // 0x0CAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_652F[0x3];                                     // 0x0CAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     PopUpTimeline;                                     // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Rotated_Piece;                                     // 0x0CB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingHealthSetting;                             // 0x0CC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResetDelaySetting;                                 // 0x0CC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JumpTimeSetting;                                   // 0x0CC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBeforeHidingSetting;                           // 0x0CCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentMaxHealthMultiplier;                        // 0x0CD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HingeLocationSetting;                              // 0x0CD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StartingPositionSetting;                           // 0x0CD8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxPopUpsSetting;                                  // 0x0CDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreValueSetting;                                 // 0x0CE0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         WeakPointMultiplierSetting;                        // 0x0CE4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ProximityDistanceSetting;                          // 0x0CE8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamAssignmentSetting;                             // 0x0CEC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AddGameTimeSetting;                                // 0x0CF0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetMeshSetting;                                 // 0x0CF4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         NumResets;                                         // 0x0CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PopUpOnJumpSetting;                                // 0x0CFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeakPointKnockdownSetting;                         // 0x0CFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          TargetIsUp;                                        // 0x0CFE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6530[0x1];                                     // 0x0CFF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   CurrentlyDisplayedMesh;                            // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InJumpUpPosition;                                  // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WeakPointHit;                                      // 0x0D09(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6531[0x6];                                     // 0x0D0A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ModifyMaxHealth;                                   // 0x0D10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             TargetKnockedDownDispatcher;                       // 0x0D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             TargetPopUpDispatcher;                             // 0x0D28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TSoftObjectPtr<class UStaticMesh>             StandingTargetRef;                                 // 0x0D38(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             LoserTargetRef;                                    // 0x0D60(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             DancingTargetRef;                                  // 0x0D88(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             HuskTargetRef;                                     // 0x0DB0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             CrouchingTargetRef;                                // 0x0DD8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             TeddyBearTargetRef;                                // 0x0E00(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             PandaHeadTargetRef;                                // 0x0E28(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             HandsOnHipsTargetRef;                              // 0x0E50(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             TomatoHeadTargetRef;                               // 0x0E78(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             LlamaTargetRef;                                    // 0x0EA0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             PumpkinHeadTargetRef;                              // 0x0EC8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             HuskyTargetRef;                                    // 0x0EF0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             RoundTargetRef;                                    // 0x0F18(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             RoundTargetShortRef;                               // 0x0F40(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           PopUpDelayTimer;                                   // 0x0F68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HideTargetTimer;                                   // 0x0F70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HopTimer;                                          // 0x0F78(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UStaticMesh>>     TargetMeshesArray;                                 // 0x0F80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UPrimitiveComponent*>            WeakPointArray;                                    // 0x0F90(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          UserSuppressHealthBar;                             // 0x0FA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6532[0x3];                                     // 0x0FA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SetMaxHealthDataTag;                               // 0x0FA4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            MaxHealthEffectHandler;                            // 0x0FAC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void TargetKnockedDownDispatcher__DelegateSignature();
	void TargetPopUpDispatcher__DelegateSignature();
	void ExecuteUbergraph_B_ShootingTarget_Master(int32 EntryPoint);
	void PostFinishSpawning();
	void PopUpTargetTimerEvent();
	void Target_Movement_Audio(bool Jump_Up_);
	void SpawnWeakpointFX(const struct FTransform& ImpactTransform);
	void Impact_Audio(int32 Check_for_Positive_Score, class AController* Param_Instigator);
	void Knock_Down_Audio(bool Knocked_Down_);
	void SetHopTimer();
	void HopTimerEvent();
	void Hop(bool Param_InJumpUpPosition);
	void SetHideTargetTimer(float TimerDuration);
	void HideTargetTimerEvent();
	void ResetFromSettings();
	void InitializeSettings();
	void PickMeshFromSettings();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_4_SimpleDynamicMulticastDelegate__DelegateSignature();
	void ReceiveBeginPlay();
	void OnDamageServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void KnockdownTarget();
	void BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_2_AnyPropertyChangedDelegate__DelegateSignature();
	void PopUpTarget(bool MinigameJustStartedOrStopped);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__FortMinigameProgress_K2Node_ComponentBoundEvent_0_SimpleDynamicMulticastDelegate__DelegateSignature();
	void OnLoaded_068F5161459B8B1AEAD4A0B19781287D(class UObject* Loaded);
	void OnReady_A57ED5A14BEB6A98DB20D88D1582D58A();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void KnockDownTimeline__UpdateFunc();
	void KnockDownTimeline__FinishedFunc();
	void PopUpTimeline__UpdateFunc();
	void PopUpTimeline__FinishedFunc();
	void CanPopUp(bool MinigameJustStartedOrStopped, bool* Param_CanPopUp);
	void ResetWeakPoints();
	bool WeakPointWasHit(const struct FHitResult& Hit_Result, class UPrimitiveComponent** HitComponent);
	void PrepareChosenTarget(class UStaticMeshComponent* Param_StaticMeshComponent, class UPrimitiveComponent* WeakPointComponent_1, class UPrimitiveComponent* WeakPointComponent2);
	void CalculateScore(int32* ScoreToAward);
	void AwardScore(class AFortPlayerController* FortPlayerController, int32* ScoreAwarded, int32* TeamAwardedPoints);
	void ShouldTriggerTarget(class UObject* Overlapping_Actor, class UPrimitiveComponent* Overlapping_Component, bool* Result);
	void MinigameIsRunning(bool* Param_MinigameIsRunning);
	void SetStartingPosition();
	bool TargetShouldFall();
	void SetMaxHealth(float NewMaxHealth);
	void HideTarget();
	void InitializeHideTargetTimer();
	void ClearBunnyHopTimer();
	void SetBunnyHopTimer();
	void CheckIfShouldHop();
	void CreateWeakPointArray();
	void SetAimAssistEnabled(bool NewType);
	float BlueprintModifyIncomingDamage(float Damage, const struct FGameplayTagContainer& InTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void UpdateHealthBarVisibility(bool ShouldShowBar);
	bool IsWithinWeakpointBounds(const struct FVector& Impact_Location, const class USceneComponent* Component);
	void CalculateDamageFromWeaponData(class UFortWeaponItemDefinition* WeaponData, float InDamage, float* OutDamage);
	void GetWeaponDataFromDamageCauser(class UObject* DamageCauser, class UFortWeaponItemDefinition** OutWeaponData);
	void WeakPointArrayContainsItems(bool* ArrayContainsItems);
	void RestoreToMaxHealth();
	void OnRep_TargetMeshSetting();

	class UStaticMesh* GetCollisionStaticMesh() const;
	TArray<class UMeshComponent*> GetMeshComponents() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ShootingTarget_Master_C">();
	}
	static class AB_ShootingTarget_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ShootingTarget_Master_C>();
	}
};
static_assert(alignof(AB_ShootingTarget_Master_C) == 0x000008, "Wrong alignment on AB_ShootingTarget_Master_C");
static_assert(sizeof(AB_ShootingTarget_Master_C) == 0x000FB8, "Wrong size on AB_ShootingTarget_Master_C");
static_assert(offsetof(AB_ShootingTarget_Master_C, UberGraphFrame) == 0x000BC0, "Member 'AB_ShootingTarget_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, AimAssistPawn) == 0x000BC8, "Member 'AB_ShootingTarget_Master_C::AimAssistPawn' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, P_TargetImpact_Falldown) == 0x000BD0, "Member 'AB_ShootingTarget_Master_C::P_TargetImpact_Falldown' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, RoundShortWeakPoint) == 0x000BD8, "Member 'AB_ShootingTarget_Master_C::RoundShortWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, RoundWeakPoint) == 0x000BE0, "Member 'AB_ShootingTarget_Master_C::RoundWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HuskyWeakPoint1) == 0x000BE8, "Member 'AB_ShootingTarget_Master_C::HuskyWeakPoint1' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PumpkinHeadTargetWeakPoint) == 0x000BF0, "Member 'AB_ShootingTarget_Master_C::PumpkinHeadTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, LlamaTargetWeakPoint) == 0x000BF8, "Member 'AB_ShootingTarget_Master_C::LlamaTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TomatoHeadTargetWeakPoint) == 0x000C00, "Member 'AB_ShootingTarget_Master_C::TomatoHeadTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HandsOnHipsWeakPoint) == 0x000C08, "Member 'AB_ShootingTarget_Master_C::HandsOnHipsWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PandaHeadWeakPoint) == 0x000C10, "Member 'AB_ShootingTarget_Master_C::PandaHeadWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TeddyBearWeakPoint) == 0x000C18, "Member 'AB_ShootingTarget_Master_C::TeddyBearWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, CrouchingTargetWeakPoint) == 0x000C20, "Member 'AB_ShootingTarget_Master_C::CrouchingTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HuskTargetWeakPoint) == 0x000C28, "Member 'AB_ShootingTarget_Master_C::HuskTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, DancingTargetWeakPoint) == 0x000C30, "Member 'AB_ShootingTarget_Master_C::DancingTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, LoserTargetWeakPoint) == 0x000C38, "Member 'AB_ShootingTarget_Master_C::LoserTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, StandingTargetWeakPoint) == 0x000C40, "Member 'AB_ShootingTarget_Master_C::StandingTargetWeakPoint' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetMesh) == 0x000C48, "Member 'AB_ShootingTarget_Master_C::TargetMesh' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HeightExtender) == 0x000C50, "Member 'AB_ShootingTarget_Master_C::HeightExtender' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, AbilitySystem) == 0x000C58, "Member 'AB_ShootingTarget_Master_C::AbilitySystem' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ProximityTrigger) == 0x000C60, "Member 'AB_ShootingTarget_Master_C::ProximityTrigger' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, FortMinigameProgress) == 0x000C68, "Member 'AB_ShootingTarget_Master_C::FortMinigameProgress' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ToyOptionsComponent) == 0x000C70, "Member 'AB_ShootingTarget_Master_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, SM_Target_StandShort) == 0x000C78, "Member 'AB_ShootingTarget_Master_C::SM_Target_StandShort' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, SM_Target_Base) == 0x000C80, "Member 'AB_ShootingTarget_Master_C::SM_Target_Base' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, KnockDownTimeline_Rotation_8B965F244DB51315A670CE8BD54F045D) == 0x000C88, "Member 'AB_ShootingTarget_Master_C::KnockDownTimeline_Rotation_8B965F244DB51315A670CE8BD54F045D' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, KnockDownTimeline__Direction_8B965F244DB51315A670CE8BD54F045D) == 0x000C8C, "Member 'AB_ShootingTarget_Master_C::KnockDownTimeline__Direction_8B965F244DB51315A670CE8BD54F045D' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, KnockDownTimeline) == 0x000C90, "Member 'AB_ShootingTarget_Master_C::KnockDownTimeline' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, Timeline_2_Height_50A7E1DD45D0851E9ECD309DBAE220D5) == 0x000C98, "Member 'AB_ShootingTarget_Master_C::Timeline_2_Height_50A7E1DD45D0851E9ECD309DBAE220D5' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, Timeline_2__Direction_50A7E1DD45D0851E9ECD309DBAE220D5) == 0x000C9C, "Member 'AB_ShootingTarget_Master_C::Timeline_2__Direction_50A7E1DD45D0851E9ECD309DBAE220D5' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, Timeline_2) == 0x000CA0, "Member 'AB_ShootingTarget_Master_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PopUpTimeline_Rotation_EC7265FB4A8A31A05B401FB83B908B21) == 0x000CA8, "Member 'AB_ShootingTarget_Master_C::PopUpTimeline_Rotation_EC7265FB4A8A31A05B401FB83B908B21' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PopUpTimeline__Direction_EC7265FB4A8A31A05B401FB83B908B21) == 0x000CAC, "Member 'AB_ShootingTarget_Master_C::PopUpTimeline__Direction_EC7265FB4A8A31A05B401FB83B908B21' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PopUpTimeline) == 0x000CB0, "Member 'AB_ShootingTarget_Master_C::PopUpTimeline' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, Rotated_Piece) == 0x000CB8, "Member 'AB_ShootingTarget_Master_C::Rotated_Piece' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, StartingHealthSetting) == 0x000CC0, "Member 'AB_ShootingTarget_Master_C::StartingHealthSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ResetDelaySetting) == 0x000CC4, "Member 'AB_ShootingTarget_Master_C::ResetDelaySetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, JumpTimeSetting) == 0x000CC8, "Member 'AB_ShootingTarget_Master_C::JumpTimeSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TimeBeforeHidingSetting) == 0x000CCC, "Member 'AB_ShootingTarget_Master_C::TimeBeforeHidingSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, CurrentMaxHealthMultiplier) == 0x000CD0, "Member 'AB_ShootingTarget_Master_C::CurrentMaxHealthMultiplier' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HingeLocationSetting) == 0x000CD4, "Member 'AB_ShootingTarget_Master_C::HingeLocationSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, StartingPositionSetting) == 0x000CD8, "Member 'AB_ShootingTarget_Master_C::StartingPositionSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, MaxPopUpsSetting) == 0x000CDC, "Member 'AB_ShootingTarget_Master_C::MaxPopUpsSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ScoreValueSetting) == 0x000CE0, "Member 'AB_ShootingTarget_Master_C::ScoreValueSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, WeakPointMultiplierSetting) == 0x000CE4, "Member 'AB_ShootingTarget_Master_C::WeakPointMultiplierSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ProximityDistanceSetting) == 0x000CE8, "Member 'AB_ShootingTarget_Master_C::ProximityDistanceSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TeamAssignmentSetting) == 0x000CEC, "Member 'AB_ShootingTarget_Master_C::TeamAssignmentSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, AddGameTimeSetting) == 0x000CF0, "Member 'AB_ShootingTarget_Master_C::AddGameTimeSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetMeshSetting) == 0x000CF4, "Member 'AB_ShootingTarget_Master_C::TargetMeshSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, NumResets) == 0x000CF8, "Member 'AB_ShootingTarget_Master_C::NumResets' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PopUpOnJumpSetting) == 0x000CFC, "Member 'AB_ShootingTarget_Master_C::PopUpOnJumpSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, WeakPointKnockdownSetting) == 0x000CFD, "Member 'AB_ShootingTarget_Master_C::WeakPointKnockdownSetting' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetIsUp) == 0x000CFE, "Member 'AB_ShootingTarget_Master_C::TargetIsUp' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, CurrentlyDisplayedMesh) == 0x000D00, "Member 'AB_ShootingTarget_Master_C::CurrentlyDisplayedMesh' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, InJumpUpPosition) == 0x000D08, "Member 'AB_ShootingTarget_Master_C::InJumpUpPosition' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, WeakPointHit) == 0x000D09, "Member 'AB_ShootingTarget_Master_C::WeakPointHit' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, ModifyMaxHealth) == 0x000D10, "Member 'AB_ShootingTarget_Master_C::ModifyMaxHealth' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetKnockedDownDispatcher) == 0x000D18, "Member 'AB_ShootingTarget_Master_C::TargetKnockedDownDispatcher' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetPopUpDispatcher) == 0x000D28, "Member 'AB_ShootingTarget_Master_C::TargetPopUpDispatcher' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, StandingTargetRef) == 0x000D38, "Member 'AB_ShootingTarget_Master_C::StandingTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, LoserTargetRef) == 0x000D60, "Member 'AB_ShootingTarget_Master_C::LoserTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, DancingTargetRef) == 0x000D88, "Member 'AB_ShootingTarget_Master_C::DancingTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HuskTargetRef) == 0x000DB0, "Member 'AB_ShootingTarget_Master_C::HuskTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, CrouchingTargetRef) == 0x000DD8, "Member 'AB_ShootingTarget_Master_C::CrouchingTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TeddyBearTargetRef) == 0x000E00, "Member 'AB_ShootingTarget_Master_C::TeddyBearTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PandaHeadTargetRef) == 0x000E28, "Member 'AB_ShootingTarget_Master_C::PandaHeadTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HandsOnHipsTargetRef) == 0x000E50, "Member 'AB_ShootingTarget_Master_C::HandsOnHipsTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TomatoHeadTargetRef) == 0x000E78, "Member 'AB_ShootingTarget_Master_C::TomatoHeadTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, LlamaTargetRef) == 0x000EA0, "Member 'AB_ShootingTarget_Master_C::LlamaTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PumpkinHeadTargetRef) == 0x000EC8, "Member 'AB_ShootingTarget_Master_C::PumpkinHeadTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HuskyTargetRef) == 0x000EF0, "Member 'AB_ShootingTarget_Master_C::HuskyTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, RoundTargetRef) == 0x000F18, "Member 'AB_ShootingTarget_Master_C::RoundTargetRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, RoundTargetShortRef) == 0x000F40, "Member 'AB_ShootingTarget_Master_C::RoundTargetShortRef' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, PopUpDelayTimer) == 0x000F68, "Member 'AB_ShootingTarget_Master_C::PopUpDelayTimer' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HideTargetTimer) == 0x000F70, "Member 'AB_ShootingTarget_Master_C::HideTargetTimer' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, HopTimer) == 0x000F78, "Member 'AB_ShootingTarget_Master_C::HopTimer' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, TargetMeshesArray) == 0x000F80, "Member 'AB_ShootingTarget_Master_C::TargetMeshesArray' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, WeakPointArray) == 0x000F90, "Member 'AB_ShootingTarget_Master_C::WeakPointArray' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, UserSuppressHealthBar) == 0x000FA0, "Member 'AB_ShootingTarget_Master_C::UserSuppressHealthBar' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, SetMaxHealthDataTag) == 0x000FA4, "Member 'AB_ShootingTarget_Master_C::SetMaxHealthDataTag' has a wrong offset!");
static_assert(offsetof(AB_ShootingTarget_Master_C, MaxHealthEffectHandler) == 0x000FAC, "Member 'AB_ShootingTarget_Master_C::MaxHealthEffectHandler' has a wrong offset!");

}

