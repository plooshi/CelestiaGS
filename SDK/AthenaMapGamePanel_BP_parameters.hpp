#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaMapGamePanel_BP

#include "Basic.hpp"


namespace SDK::Params
{

// Function AthenaMapGamePanel_BP.AthenaMapGamePanel_BP_C.UpdateInspectText
// 0x0018 (0x0018 - 0x0000)
struct AthenaMapGamePanel_BP_C_UpdateInspectText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(AthenaMapGamePanel_BP_C_UpdateInspectText) == 0x000008, "Wrong alignment on AthenaMapGamePanel_BP_C_UpdateInspectText");
static_assert(sizeof(AthenaMapGamePanel_BP_C_UpdateInspectText) == 0x000018, "Wrong size on AthenaMapGamePanel_BP_C_UpdateInspectText");
static_assert(offsetof(AthenaMapGamePanel_BP_C_UpdateInspectText, InText) == 0x000000, "Member 'AthenaMapGamePanel_BP_C_UpdateInspectText::InText' has a wrong offset!");

// Function AthenaMapGamePanel_BP.AthenaMapGamePanel_BP_C.BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature) == 0x000004, "Wrong alignment on AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature");
static_assert(sizeof(AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature) == 0x000004, "Wrong size on AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature");
static_assert(offsetof(AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature, Value) == 0x000000, "Member 'AthenaMapGamePanel_BP_C_BndEvt__Rotator_ChallengeCategories_K2Node_ComponentBoundEvent_0_OnRotated__DelegateSignature::Value' has a wrong offset!");

// Function AthenaMapGamePanel_BP.AthenaMapGamePanel_BP_C.ExecuteUbergraph_AthenaMapGamePanel_BP
// 0x0030 (0x0030 - 0x0000)
struct AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_70D3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_InText;                               // 0x0008(0x0018)(ConstParm)
	class UAthenaMapChallengeCategoryInGameRotator_C* K2Node_DynamicCast_AsAthena_Map_Challenge_Category_in_Game_Rotator; // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_70D4[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_ComponentBoundEvent_Value;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP) == 0x000008, "Wrong alignment on AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP");
static_assert(sizeof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP) == 0x000030, "Wrong size on AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP");
static_assert(offsetof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP, EntryPoint) == 0x000000, "Member 'AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP::EntryPoint' has a wrong offset!");
static_assert(offsetof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP, K2Node_Event_InText) == 0x000008, "Member 'AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP::K2Node_Event_InText' has a wrong offset!");
static_assert(offsetof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP, K2Node_DynamicCast_AsAthena_Map_Challenge_Category_in_Game_Rotator) == 0x000020, "Member 'AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP::K2Node_DynamicCast_AsAthena_Map_Challenge_Category_in_Game_Rotator' has a wrong offset!");
static_assert(offsetof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP, K2Node_ComponentBoundEvent_Value) == 0x00002C, "Member 'AthenaMapGamePanel_BP_C_ExecuteUbergraph_AthenaMapGamePanel_BP::K2Node_ComponentBoundEvent_Value' has a wrong offset!");

}

