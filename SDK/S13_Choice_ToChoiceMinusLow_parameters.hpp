#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S13_Choice_ToChoiceMinusLow

#include "Basic.hpp"


namespace SDK::Params
{

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_0::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.BP_Battlepass_LightSwitcher2_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher2;                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1, BP_Battlepass_LightSwitcher2) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher2_Event_1::BP_Battlepass_LightSwitcher2' has a wrong offset!");

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.Audio Camera Movemt Event
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_Audio_Camera_Movemt_Event final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Audio_Camera_Movemt_Event) == 0x000008, "Wrong alignment on SequenceDirector_C_Audio_Camera_Movemt_Event");
static_assert(sizeof(SequenceDirector_C_Audio_Camera_Movemt_Event) == 0x000008, "Wrong size on SequenceDirector_C_Audio_Camera_Movemt_Event");
static_assert(offsetof(SequenceDirector_C_Audio_Camera_Movemt_Event, Sound) == 0x000000, "Member 'SequenceDirector_C_Audio_Camera_Movemt_Event::Sound' has a wrong offset!");

// Function S13_Choice_ToChoice-Low.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0060 (0x0060 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher2;   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_CustomEvent_Sound;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsReversed_ReturnValue_1;                 // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7C15[0x6];                                     // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AItemOnPawnPreview_C*>           CallFunc_GetAllActorsOfClass_OutActors;            // 0x0040(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000060, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher2) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Sound) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue_1) == 0x000039, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_GetAllActorsOfClass_OutActors) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_Array_Get_Item) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

