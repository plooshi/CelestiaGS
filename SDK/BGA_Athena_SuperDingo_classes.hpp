#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Athena_SuperDingo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Athena_SuperDingo.BGA_Athena_SuperDingo_C
// 0x0298 (0x0A60 - 0x07C8)
class ABGA_Athena_SuperDingo_C final : public AAthenaSuperDingo
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x07C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortProjectileMovementComponent*       FortProjectileMovement;                            // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_FX_AirFlow_Drone;                                // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        HoverSound;                                        // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh;                                              // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          PlayerCollision;                                   // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SpawnIn_Color_94D7AB4E474D80B66C0BF59BEF89A933;    // 0x0800(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnIn_Dissolve_94D7AB4E474D80B66C0BF59BEF89A933; // 0x0810(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpawnIn__Direction_94D7AB4E474D80B66C0BF59BEF89A933; // 0x0814(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D2F[0x3];                                     // 0x0815(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpawnIn;                                           // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitTurn_TurnTime_99D8B31B4D50B8EC6ECD43A58EF6E089; // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HitTurn__Direction_99D8B31B4D50B8EC6ECD43A58EF6E089; // 0x0824(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D30[0x3];                                     // 0x0825(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HitTurn;                                           // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortRarity                                   Rarity;                                            // 0x0830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_5D31[0x3];                                     // 0x0831(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_Death;                                          // 0x0834(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          AlreadySpawned;                                    // 0x083C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BeingDestroyed;                                    // 0x083D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D32[0x2];                                     // 0x083E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomTurnTime;                                    // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomTurnChance;                                  // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Spawn;                                          // 0x0848(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Damaged;                                        // 0x0850(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeDamageFX;                               // 0x0858(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCheckTime;                                   // 0x085C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_HeightCheck;                                 // 0x0860(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurning;                                         // 0x0868(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D33[0x3];                                     // 0x0869(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             NullHit;                                           // 0x086C(0x008C)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          HitRotating;                                       // 0x08F8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D34[0x3];                                     // 0x08F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitTurnPlayRateMax;                                // 0x08FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitRotTurnMin;                                     // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitRotTurnMax;                                     // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetHeight;                                      // 0x0908(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightSelectTime;                                  // 0x090C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_SelectHeight;                                // 0x0910(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FlyHigh;                                           // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         FlyLow;                                            // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FScalableFloat                         Row_Speed;                                         // 0x0920(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasLeash;                                          // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_5D35[0x3];                                     // 0x0941(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeashDistance;                                     // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         DespawnTime;                                       // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Despawned;                                         // 0x094C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D36[0x3];                                     // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartingLoc;                                       // 0x0950(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeashCheckTime;                                    // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LeashTurning;                                      // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D37[0x7];                                     // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_Leash;                                       // 0x0968(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EFortRarity, struct FColor>              RarityToColorMap;                                  // 0x0970(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BaseSpeed;                                         // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 BoxColor;                                          // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VarianceAmountForTimers;                           // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Despawn;                                        // 0x09CC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HitWindFXTag;                                   // 0x09D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D38[0x4];                                     // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             SpawnMatStorage;                                   // 0x09E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SpawnInDuration;                                   // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DissolveInVector;                                  // 0x09F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DissolveOutVector;                                 // 0x0A00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnOutDuration;                                  // 0x0A0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Spawn_Sound;                                       // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Destroy_Sound;                                     // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Despawn_Sound;                                     // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug;                                             // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D39[0x3];                                     // 0x0A29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBeforeStormDespawn;                            // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitFrontCheck;                                     // 0x0A30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_AmbientSound;                                   // 0x0A34(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         DelayHitRotReset;                                  // 0x0A3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HitTurnPlayRateMin;                                // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DespawnLifespan;                                   // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocationCheck;                                 // 0x0A48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocationCheckDistance;                             // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Player_Damaging;                                   // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void MovingCheck();
	void CheckHitByVehicle(class AActor* OtherActor);
	void QuestProgress(class AActor* PlayerPawn);
	void HeightCheckCalc(struct FVector* New_Velocity, bool* Adjust);
	void UserConstructionScript();
	void HitTurn__FinishedFunc();
	void HitTurn__UpdateFunc();
	void SpawnIn__FinishedFunc();
	void SpawnIn__UpdateFunc();
	void ReceiveBeginPlay();
	void DamageEvent(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void SpawnBox();
	void Destroyed(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnSpawn();
	void SetupRandomTurns();
	void TurnTrigger();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetupHeightCheck();
	void HeightCheck();
	void HitTurnMulticast(const struct FRotator& StartRot, const struct FRotator& EndRot, float PlayRate);
	void SetupHeightPicker();
	void SelectHeight();
	void Despawn();
	void SetupLeashCheck();
	void LeashCheck();
	void SpawnMaterialVFX();
	void DeSpawnMaterialVFX();
	void OutOfCircleDespawn();
	void ResumeMovement();
	void ExecuteUbergraph_BGA_Athena_SuperDingo(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Athena_SuperDingo_C">();
	}
	static class ABGA_Athena_SuperDingo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Athena_SuperDingo_C>();
	}
};
static_assert(alignof(ABGA_Athena_SuperDingo_C) == 0x000008, "Wrong alignment on ABGA_Athena_SuperDingo_C");
static_assert(sizeof(ABGA_Athena_SuperDingo_C) == 0x000A60, "Wrong size on ABGA_Athena_SuperDingo_C");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, UberGraphFrame) == 0x0007C8, "Member 'ABGA_Athena_SuperDingo_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, FortProjectileMovement) == 0x0007D0, "Member 'ABGA_Athena_SuperDingo_C::FortProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, S_FX_AirFlow_Drone) == 0x0007D8, "Member 'ABGA_Athena_SuperDingo_C::S_FX_AirFlow_Drone' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Sphere) == 0x0007E0, "Member 'ABGA_Athena_SuperDingo_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HoverSound) == 0x0007E8, "Member 'ABGA_Athena_SuperDingo_C::HoverSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Mesh) == 0x0007F0, "Member 'ABGA_Athena_SuperDingo_C::Mesh' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, PlayerCollision) == 0x0007F8, "Member 'ABGA_Athena_SuperDingo_C::PlayerCollision' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnIn_Color_94D7AB4E474D80B66C0BF59BEF89A933) == 0x000800, "Member 'ABGA_Athena_SuperDingo_C::SpawnIn_Color_94D7AB4E474D80B66C0BF59BEF89A933' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnIn_Dissolve_94D7AB4E474D80B66C0BF59BEF89A933) == 0x000810, "Member 'ABGA_Athena_SuperDingo_C::SpawnIn_Dissolve_94D7AB4E474D80B66C0BF59BEF89A933' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnIn__Direction_94D7AB4E474D80B66C0BF59BEF89A933) == 0x000814, "Member 'ABGA_Athena_SuperDingo_C::SpawnIn__Direction_94D7AB4E474D80B66C0BF59BEF89A933' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnIn) == 0x000818, "Member 'ABGA_Athena_SuperDingo_C::SpawnIn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitTurn_TurnTime_99D8B31B4D50B8EC6ECD43A58EF6E089) == 0x000820, "Member 'ABGA_Athena_SuperDingo_C::HitTurn_TurnTime_99D8B31B4D50B8EC6ECD43A58EF6E089' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitTurn__Direction_99D8B31B4D50B8EC6ECD43A58EF6E089) == 0x000824, "Member 'ABGA_Athena_SuperDingo_C::HitTurn__Direction_99D8B31B4D50B8EC6ECD43A58EF6E089' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitTurn) == 0x000828, "Member 'ABGA_Athena_SuperDingo_C::HitTurn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Rarity) == 0x000830, "Member 'ABGA_Athena_SuperDingo_C::Rarity' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_Death) == 0x000834, "Member 'ABGA_Athena_SuperDingo_C::GC_Death' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, AlreadySpawned) == 0x00083C, "Member 'ABGA_Athena_SuperDingo_C::AlreadySpawned' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, BeingDestroyed) == 0x00083D, "Member 'ABGA_Athena_SuperDingo_C::BeingDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, RandomTurnTime) == 0x000840, "Member 'ABGA_Athena_SuperDingo_C::RandomTurnTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, RandomTurnChance) == 0x000844, "Member 'ABGA_Athena_SuperDingo_C::RandomTurnChance' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_Spawn) == 0x000848, "Member 'ABGA_Athena_SuperDingo_C::GC_Spawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_Damaged) == 0x000850, "Member 'ABGA_Athena_SuperDingo_C::GC_Damaged' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DelayBeforeDamageFX) == 0x000858, "Member 'ABGA_Athena_SuperDingo_C::DelayBeforeDamageFX' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HeightCheckTime) == 0x00085C, "Member 'ABGA_Athena_SuperDingo_C::HeightCheckTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Timer_HeightCheck) == 0x000860, "Member 'ABGA_Athena_SuperDingo_C::Timer_HeightCheck' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, IsTurning) == 0x000868, "Member 'ABGA_Athena_SuperDingo_C::IsTurning' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, NullHit) == 0x00086C, "Member 'ABGA_Athena_SuperDingo_C::NullHit' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitRotating) == 0x0008F8, "Member 'ABGA_Athena_SuperDingo_C::HitRotating' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitTurnPlayRateMax) == 0x0008FC, "Member 'ABGA_Athena_SuperDingo_C::HitTurnPlayRateMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitRotTurnMin) == 0x000900, "Member 'ABGA_Athena_SuperDingo_C::HitRotTurnMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitRotTurnMax) == 0x000904, "Member 'ABGA_Athena_SuperDingo_C::HitRotTurnMax' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, TargetHeight) == 0x000908, "Member 'ABGA_Athena_SuperDingo_C::TargetHeight' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HeightSelectTime) == 0x00090C, "Member 'ABGA_Athena_SuperDingo_C::HeightSelectTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Timer_SelectHeight) == 0x000910, "Member 'ABGA_Athena_SuperDingo_C::Timer_SelectHeight' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, FlyHigh) == 0x000918, "Member 'ABGA_Athena_SuperDingo_C::FlyHigh' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, FlyLow) == 0x00091C, "Member 'ABGA_Athena_SuperDingo_C::FlyLow' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Row_Speed) == 0x000920, "Member 'ABGA_Athena_SuperDingo_C::Row_Speed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HasLeash) == 0x000940, "Member 'ABGA_Athena_SuperDingo_C::HasLeash' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, LeashDistance) == 0x000944, "Member 'ABGA_Athena_SuperDingo_C::LeashDistance' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DespawnTime) == 0x000948, "Member 'ABGA_Athena_SuperDingo_C::DespawnTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Despawned) == 0x00094C, "Member 'ABGA_Athena_SuperDingo_C::Despawned' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, StartingLoc) == 0x000950, "Member 'ABGA_Athena_SuperDingo_C::StartingLoc' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, LeashCheckTime) == 0x00095C, "Member 'ABGA_Athena_SuperDingo_C::LeashCheckTime' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, LeashTurning) == 0x000960, "Member 'ABGA_Athena_SuperDingo_C::LeashTurning' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Timer_Leash) == 0x000968, "Member 'ABGA_Athena_SuperDingo_C::Timer_Leash' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, RarityToColorMap) == 0x000970, "Member 'ABGA_Athena_SuperDingo_C::RarityToColorMap' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, BaseSpeed) == 0x0009C0, "Member 'ABGA_Athena_SuperDingo_C::BaseSpeed' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, BoxColor) == 0x0009C4, "Member 'ABGA_Athena_SuperDingo_C::BoxColor' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, VarianceAmountForTimers) == 0x0009C8, "Member 'ABGA_Athena_SuperDingo_C::VarianceAmountForTimers' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_Despawn) == 0x0009CC, "Member 'ABGA_Athena_SuperDingo_C::GC_Despawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_HitWindFXTag) == 0x0009D4, "Member 'ABGA_Athena_SuperDingo_C::GC_HitWindFXTag' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnMatStorage) == 0x0009E0, "Member 'ABGA_Athena_SuperDingo_C::SpawnMatStorage' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnInDuration) == 0x0009F0, "Member 'ABGA_Athena_SuperDingo_C::SpawnInDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DissolveInVector) == 0x0009F4, "Member 'ABGA_Athena_SuperDingo_C::DissolveInVector' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DissolveOutVector) == 0x000A00, "Member 'ABGA_Athena_SuperDingo_C::DissolveOutVector' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, SpawnOutDuration) == 0x000A0C, "Member 'ABGA_Athena_SuperDingo_C::SpawnOutDuration' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Spawn_Sound) == 0x000A10, "Member 'ABGA_Athena_SuperDingo_C::Spawn_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Destroy_Sound) == 0x000A18, "Member 'ABGA_Athena_SuperDingo_C::Destroy_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Despawn_Sound) == 0x000A20, "Member 'ABGA_Athena_SuperDingo_C::Despawn_Sound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Debug) == 0x000A28, "Member 'ABGA_Athena_SuperDingo_C::Debug' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, TimeBeforeStormDespawn) == 0x000A2C, "Member 'ABGA_Athena_SuperDingo_C::TimeBeforeStormDespawn' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitFrontCheck) == 0x000A30, "Member 'ABGA_Athena_SuperDingo_C::HitFrontCheck' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, GC_AmbientSound) == 0x000A34, "Member 'ABGA_Athena_SuperDingo_C::GC_AmbientSound' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DelayHitRotReset) == 0x000A3C, "Member 'ABGA_Athena_SuperDingo_C::DelayHitRotReset' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, HitTurnPlayRateMin) == 0x000A40, "Member 'ABGA_Athena_SuperDingo_C::HitTurnPlayRateMin' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, DespawnLifespan) == 0x000A44, "Member 'ABGA_Athena_SuperDingo_C::DespawnLifespan' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, LastLocationCheck) == 0x000A48, "Member 'ABGA_Athena_SuperDingo_C::LastLocationCheck' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, LocationCheckDistance) == 0x000A54, "Member 'ABGA_Athena_SuperDingo_C::LocationCheckDistance' has a wrong offset!");
static_assert(offsetof(ABGA_Athena_SuperDingo_C, Player_Damaging) == 0x000A58, "Member 'ABGA_Athena_SuperDingo_C::Player_Damaging' has a wrong offset!");

}

