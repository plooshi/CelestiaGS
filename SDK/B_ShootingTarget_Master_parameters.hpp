#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ShootingTarget_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"


namespace SDK::Params
{

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.ExecuteUbergraph_B_ShootingTarget_Master
// 0x0590 (0x0590 - 0x0000)
struct B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryAttachToMinigame_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6533[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6534[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6535[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6536[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_CustomEvent_Loaded;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0070(0x0010)(ZeroConstructor, NoDestructor)
	class UObject*                                Temp_object_Variable_6;                            // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6537[0x2];                                     // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_MinigameJustStartedOrStopped;   // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanPopUp_CanPopUp;                        // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6538[0x2];                                     // 0x009E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6539[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653A[0x3];                                     // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00D0(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldTriggerTarget_Result;               // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653B[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0164(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653C[0x3];                                     // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAsyncAction_AuthorityMatchReady*   CallFunc_MatchReadyAsync_ReturnValue;              // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653D[0x1];                                     // 0x018B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Damage;                               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  K2Node_Event_DamageTags;                           // 0x0190(0x0020)(ConstParm)
	struct FVector                                K2Node_Event_Momentum;                             // 0x01B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_Event_HitInfo;                              // 0x01BC(0x008C)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            K2Node_Event_InstigatedBy;                         // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_Event_DamageCauser;                         // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           K2Node_Event_EffectContext;                        // 0x0258(0x0018)()
	class AFortPlayerController*                  K2Node_DynamicCast_AsFort_Player_Controller;       // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653E[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_WeakPointWasHit_HitComponent;             // 0x0280(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeakPointWasHit_ReturnValue;              // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_653F[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_AwardScore_ScoreAwarded;                  // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_AwardScore_TeamAwardedPoints;             // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TargetShouldFall_ReturnValue;             // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6540[0x2];                                     // 0x0296(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_TimerDuration;                  // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6541[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x02A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_InJumpUpPosition;               // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6542[0x3];                                     // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x02AC(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0338(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0340(0x0010)(ZeroConstructor, NoDestructor)
	TSoftObjectPtr<class UStaticMesh>             CallFunc_Array_Get_Item;                           // 0x0350(0x0028)(HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item_1;                         // 0x0378(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0380(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Knocked_Down_;                  // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6543[0x3];                                     // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0398(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Check_for_Positive_Score;       // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_CustomEvent_Instigator;                     // 0x03A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocalController_ReturnValue;            // 0x03B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6544[0x7];                                     // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default_1;                           // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x03C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6545[0xE];                                     // 0x03C2(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             K2Node_CustomEvent_ImpactTransform;                // 0x03D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0430(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_6546[0x4];                                     // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x04C0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x04C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TDelegate<void(class UObject* Loaded)>        K2Node_CreateDelegate_OutputDelegate_4;            // 0x04D4(0x0010)(ZeroConstructor, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x04E4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          K2Node_CustomEvent_Jump_Up_;                       // 0x0570(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6547[0x3];                                     // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0574(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default_2;                           // 0x0580(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeakPointArrayContainsItems_ArrayContainsItems; // 0x0588(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0589(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master) == 0x000010, "Wrong alignment on B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master");
static_assert(sizeof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master) == 0x000590, "Wrong size on B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, EntryPoint) == 0x000000, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::EntryPoint' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_TryAttachToMinigame_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_TryAttachToMinigame_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_MakeVector_ReturnValue) == 0x000008, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_bool_Variable) == 0x000024, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable) == 0x000028, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_1) == 0x000030, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_bool_Variable_1) == 0x000038, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_2) == 0x000040, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_3) == 0x000048, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_bool_Variable_2) == 0x000050, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_4) == 0x000058, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_5) == 0x000060, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_Loaded) == 0x000068, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_Loaded' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CreateDelegate_OutputDelegate_1) == 0x000070, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_object_Variable_6) == 0x000080, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_DynamicCast_AsStatic_Mesh) == 0x000088, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_DynamicCast_bSuccess) == 0x000090, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_IsValid_ReturnValue) == 0x000091, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_GetMaxHealth_ReturnValue) == 0x000094, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000098, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_MinigameJustStartedOrStopped) == 0x00009C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_MinigameJustStartedOrStopped' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_CanPopUp_CanPopUp) == 0x00009D, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_CanPopUp_CanPopUp' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_Add_IntInt_ReturnValue) == 0x0000A0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, Temp_int_Variable) == 0x0000A4, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x0000A8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000B0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_OtherActor) == 0x0000B8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_OtherComp) == 0x0000C0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000C8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000CC, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_ComponentBoundEvent_SweepResult) == 0x0000D0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00015C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_ShouldTriggerTarget_Result) == 0x000160, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_ShouldTriggerTarget_Result' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CreateDelegate_OutputDelegate_2) == 0x000164, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000174, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_MatchReadyAsync_ReturnValue) == 0x000178, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_MatchReadyAsync_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000180, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000188, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_IsValid_ReturnValue_1) == 0x000189, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00018A, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_Damage) == 0x00018C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_DamageTags) == 0x000190, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_DamageTags' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_Momentum) == 0x0001B0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_Momentum' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_HitInfo) == 0x0001BC, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_HitInfo' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_InstigatedBy) == 0x000248, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_DamageCauser) == 0x000250, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_DamageCauser' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Event_EffectContext) == 0x000258, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Event_EffectContext' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_DynamicCast_AsFort_Player_Controller) == 0x000270, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_DynamicCast_AsFort_Player_Controller' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_DynamicCast_bSuccess_1) == 0x000278, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_WeakPointWasHit_HitComponent) == 0x000280, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_WeakPointWasHit_HitComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_WeakPointWasHit_ReturnValue) == 0x000288, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_WeakPointWasHit_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_AwardScore_ScoreAwarded) == 0x00028C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_AwardScore_ScoreAwarded' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_AwardScore_TeamAwardedPoints) == 0x000290, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_AwardScore_TeamAwardedPoints' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_TargetShouldFall_ReturnValue) == 0x000294, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_TargetShouldFall_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_IsDedicatedServer_ReturnValue) == 0x000295, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_TimerDuration) == 0x000298, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_TimerDuration' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x0002A0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_InJumpUpPosition) == 0x0002A8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_InJumpUpPosition' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0002AC, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000338, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CreateDelegate_OutputDelegate_3) == 0x000340, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_Array_Get_Item) == 0x000350, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_Array_Get_Item_1) == 0x000378, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000380, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_Knocked_Down_) == 0x00038C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_Knocked_Down_' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Select_Default) == 0x000390, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000398, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_Check_for_Positive_Score) == 0x0003A4, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_Check_for_Positive_Score' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_Instigator) == 0x0003A8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_Instigator' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_IsLocalController_ReturnValue) == 0x0003B0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_IsLocalController_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Select_Default_1) == 0x0003B8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_BooleanAND_ReturnValue) == 0x0003C0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0003C1, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_ImpactTransform) == 0x0003D0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_ImpactTransform' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_MakeRotator_ReturnValue) == 0x000400, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_BreakTransform_Location) == 0x00040C, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_BreakTransform_Rotation) == 0x000418, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_BreakTransform_Scale) == 0x000424, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000430, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0004C0, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_MakeRotator_ReturnValue_1) == 0x0004C8, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CreateDelegate_OutputDelegate_4) == 0x0004D4, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x0004E4, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_CustomEvent_Jump_Up_) == 0x000570, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_CustomEvent_Jump_Up_' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000574, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, K2Node_Select_Default_2) == 0x000580, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_WeakPointArrayContainsItems_ArrayContainsItems) == 0x000588, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_WeakPointArrayContainsItems_ArrayContainsItems' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master, CallFunc_SetStaticMesh_ReturnValue) == 0x000589, "Member 'B_ShootingTarget_Master_C_ExecuteUbergraph_B_ShootingTarget_Master::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.Target Movement Audio
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_Target_Movement_Audio final
{
public:
	bool                                          Jump_Up_;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_Target_Movement_Audio) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_Target_Movement_Audio");
static_assert(sizeof(B_ShootingTarget_Master_C_Target_Movement_Audio) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_Target_Movement_Audio");
static_assert(offsetof(B_ShootingTarget_Master_C_Target_Movement_Audio, Jump_Up_) == 0x000000, "Member 'B_ShootingTarget_Master_C_Target_Movement_Audio::Jump_Up_' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SpawnWeakpointFX
// 0x0030 (0x0030 - 0x0000)
struct B_ShootingTarget_Master_C_SpawnWeakpointFX final
{
public:
	struct FTransform                             ImpactTransform;                                   // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_SpawnWeakpointFX) == 0x000010, "Wrong alignment on B_ShootingTarget_Master_C_SpawnWeakpointFX");
static_assert(sizeof(B_ShootingTarget_Master_C_SpawnWeakpointFX) == 0x000030, "Wrong size on B_ShootingTarget_Master_C_SpawnWeakpointFX");
static_assert(offsetof(B_ShootingTarget_Master_C_SpawnWeakpointFX, ImpactTransform) == 0x000000, "Member 'B_ShootingTarget_Master_C_SpawnWeakpointFX::ImpactTransform' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.Impact Audio
// 0x0010 (0x0010 - 0x0000)
struct B_ShootingTarget_Master_C_Impact_Audio final
{
public:
	int32                                         Check_for_Positive_Score;                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6548[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            Param_Instigator;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_Impact_Audio) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_Impact_Audio");
static_assert(sizeof(B_ShootingTarget_Master_C_Impact_Audio) == 0x000010, "Wrong size on B_ShootingTarget_Master_C_Impact_Audio");
static_assert(offsetof(B_ShootingTarget_Master_C_Impact_Audio, Check_for_Positive_Score) == 0x000000, "Member 'B_ShootingTarget_Master_C_Impact_Audio::Check_for_Positive_Score' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_Impact_Audio, Param_Instigator) == 0x000008, "Member 'B_ShootingTarget_Master_C_Impact_Audio::Param_Instigator' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.Knock Down Audio
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_Knock_Down_Audio final
{
public:
	bool                                          Knocked_Down_;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_Knock_Down_Audio) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_Knock_Down_Audio");
static_assert(sizeof(B_ShootingTarget_Master_C_Knock_Down_Audio) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_Knock_Down_Audio");
static_assert(offsetof(B_ShootingTarget_Master_C_Knock_Down_Audio, Knocked_Down_) == 0x000000, "Member 'B_ShootingTarget_Master_C_Knock_Down_Audio::Knocked_Down_' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.Hop
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_Hop final
{
public:
	bool                                          Param_InJumpUpPosition;                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_Hop) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_Hop");
static_assert(sizeof(B_ShootingTarget_Master_C_Hop) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_Hop");
static_assert(offsetof(B_ShootingTarget_Master_C_Hop, Param_InJumpUpPosition) == 0x000000, "Member 'B_ShootingTarget_Master_C_Hop::Param_InJumpUpPosition' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SetHideTargetTimer
// 0x0004 (0x0004 - 0x0000)
struct B_ShootingTarget_Master_C_SetHideTargetTimer final
{
public:
	float                                         TimerDuration;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_SetHideTargetTimer) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_SetHideTargetTimer");
static_assert(sizeof(B_ShootingTarget_Master_C_SetHideTargetTimer) == 0x000004, "Wrong size on B_ShootingTarget_Master_C_SetHideTargetTimer");
static_assert(offsetof(B_ShootingTarget_Master_C_SetHideTargetTimer, TimerDuration) == 0x000000, "Member 'B_ShootingTarget_Master_C_SetHideTargetTimer::TimerDuration' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.OnDamageServer
// 0x00E8 (0x00E8 - 0x0000)
struct B_ShootingTarget_Master_C_OnDamageServer final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6549[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageTags;                                        // 0x0008(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FVector                                Momentum;                                          // 0x0028(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             HitInfo;                                           // 0x0034(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class AController*                            InstigatedBy;                                      // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x00D0(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(B_ShootingTarget_Master_C_OnDamageServer) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_OnDamageServer");
static_assert(sizeof(B_ShootingTarget_Master_C_OnDamageServer) == 0x0000E8, "Wrong size on B_ShootingTarget_Master_C_OnDamageServer");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, Damage) == 0x000000, "Member 'B_ShootingTarget_Master_C_OnDamageServer::Damage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, DamageTags) == 0x000008, "Member 'B_ShootingTarget_Master_C_OnDamageServer::DamageTags' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, Momentum) == 0x000028, "Member 'B_ShootingTarget_Master_C_OnDamageServer::Momentum' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, HitInfo) == 0x000034, "Member 'B_ShootingTarget_Master_C_OnDamageServer::HitInfo' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, InstigatedBy) == 0x0000C0, "Member 'B_ShootingTarget_Master_C_OnDamageServer::InstigatedBy' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, DamageCauser) == 0x0000C8, "Member 'B_ShootingTarget_Master_C_OnDamageServer::DamageCauser' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_OnDamageServer, EffectContext) == 0x0000D0, "Member 'B_ShootingTarget_Master_C_OnDamageServer::EffectContext' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_654A[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000B0, "Wrong size on B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'B_ShootingTarget_Master_C_BndEvt__ProximityTrigger_K2Node_ComponentBoundEvent_3_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.PopUpTarget
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_PopUpTarget final
{
public:
	bool                                          MinigameJustStartedOrStopped;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_PopUpTarget) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_PopUpTarget");
static_assert(sizeof(B_ShootingTarget_Master_C_PopUpTarget) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_PopUpTarget");
static_assert(offsetof(B_ShootingTarget_Master_C_PopUpTarget, MinigameJustStartedOrStopped) == 0x000000, "Member 'B_ShootingTarget_Master_C_PopUpTarget::MinigameJustStartedOrStopped' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.OnLoaded_068F5161459B8B1AEAD4A0B19781287D
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D final
{
public:
	class UObject*                                Loaded;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D");
static_assert(sizeof(B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D) == 0x000008, "Wrong size on B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D");
static_assert(offsetof(B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D, Loaded) == 0x000000, "Member 'B_ShootingTarget_Master_C_OnLoaded_068F5161459B8B1AEAD4A0B19781287D::Loaded' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.CanPopUp
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingTarget_Master_C_CanPopUp final
{
public:
	bool                                          MinigameJustStartedOrStopped;                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Param_CanPopUp;                                    // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_CanPopUp) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_CanPopUp");
static_assert(sizeof(B_ShootingTarget_Master_C_CanPopUp) == 0x000008, "Wrong size on B_ShootingTarget_Master_C_CanPopUp");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, MinigameJustStartedOrStopped) == 0x000000, "Member 'B_ShootingTarget_Master_C_CanPopUp::MinigameJustStartedOrStopped' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, Param_CanPopUp) == 0x000001, "Member 'B_ShootingTarget_Master_C_CanPopUp::Param_CanPopUp' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_Less_IntInt_ReturnValue) == 0x000003, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000006, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CanPopUp, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'B_ShootingTarget_Master_C_CanPopUp::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.ResetWeakPoints
// 0x0028 (0x0028 - 0x0000)
struct B_ShootingTarget_Master_C_ResetWeakPoints final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeakPointArrayContainsItems_ArrayContainsItems; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_654B[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654C[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_654D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_ResetWeakPoints) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_ResetWeakPoints");
static_assert(sizeof(B_ShootingTarget_Master_C_ResetWeakPoints) == 0x000028, "Wrong size on B_ShootingTarget_Master_C_ResetWeakPoints");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, Temp_int_Array_Index_Variable) == 0x000000, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, CallFunc_WeakPointArrayContainsItems_ArrayContainsItems) == 0x000004, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::CallFunc_WeakPointArrayContainsItems_ArrayContainsItems' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, CallFunc_Array_Get_Item) == 0x000010, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ResetWeakPoints, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'B_ShootingTarget_Master_C_ResetWeakPoints::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.WeakPointWasHit
// 0x0170 (0x0170 - 0x0000)
struct B_ShootingTarget_Master_C_WeakPointWasHit final
{
public:
	struct FHitResult                             Hit_Result;                                        // 0x0000(0x008C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_654E[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WeakPointArrayContainsItems_ArrayContainsItems; // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakHitResult_Time;                      // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_654F[0x4];                                     // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComponentHasTag_ReturnValue;              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6550[0x3];                                     // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6551[0x8];                                     // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0130(0x0030)(IsPlainOldData, NoDestructor)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsWithinWeakpointBounds_ReturnValue;      // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_WeakPointWasHit) == 0x000010, "Wrong alignment on B_ShootingTarget_Master_C_WeakPointWasHit");
static_assert(sizeof(B_ShootingTarget_Master_C_WeakPointWasHit) == 0x000170, "Wrong size on B_ShootingTarget_Master_C_WeakPointWasHit");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, Hit_Result) == 0x000000, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::Hit_Result' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, HitComponent) == 0x000090, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::HitComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, ReturnValue) == 0x000098, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_WeakPointArrayContainsItems_ArrayContainsItems) == 0x000099, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_WeakPointArrayContainsItems_ArrayContainsItems' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_bBlockingHit) == 0x00009A, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_bInitialOverlap) == 0x00009B, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_Time) == 0x00009C, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_Distance) == 0x0000A0, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_Location) == 0x0000A4, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_ImpactPoint) == 0x0000B0, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_Normal) == 0x0000BC, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_ImpactNormal) == 0x0000C8, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_PhysMat) == 0x0000D8, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_HitActor) == 0x0000E0, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_HitComponent) == 0x0000E8, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_HitBoneName) == 0x0000F0, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_HitItem) == 0x0000F8, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_FaceIndex) == 0x0000FC, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_TraceStart) == 0x000100, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BreakHitResult_TraceEnd) == 0x00010C, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_ComponentHasTag_ReturnValue) == 0x000118, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_ComponentHasTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x00011C, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_MakeTransform_ReturnValue) == 0x000130, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_Array_Get_Item) == 0x000160, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_IsWithinWeakpointBounds_ReturnValue) == 0x000168, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_IsWithinWeakpointBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointWasHit, CallFunc_BooleanOR_ReturnValue) == 0x000169, "Member 'B_ShootingTarget_Master_C_WeakPointWasHit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.PrepareChosenTarget
// 0x0018 (0x0018 - 0x0000)
struct B_ShootingTarget_Master_C_PrepareChosenTarget final
{
public:
	class UStaticMeshComponent*                   Param_StaticMeshComponent;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    WeakPointComponent_1;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    WeakPointComponent2;                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_PrepareChosenTarget) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_PrepareChosenTarget");
static_assert(sizeof(B_ShootingTarget_Master_C_PrepareChosenTarget) == 0x000018, "Wrong size on B_ShootingTarget_Master_C_PrepareChosenTarget");
static_assert(offsetof(B_ShootingTarget_Master_C_PrepareChosenTarget, Param_StaticMeshComponent) == 0x000000, "Member 'B_ShootingTarget_Master_C_PrepareChosenTarget::Param_StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_PrepareChosenTarget, WeakPointComponent_1) == 0x000008, "Member 'B_ShootingTarget_Master_C_PrepareChosenTarget::WeakPointComponent_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_PrepareChosenTarget, WeakPointComponent2) == 0x000010, "Member 'B_ShootingTarget_Master_C_PrepareChosenTarget::WeakPointComponent2' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.CalculateScore
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingTarget_Master_C_CalculateScore final
{
public:
	int32                                         ScoreToAward;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_CalculateScore) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_CalculateScore");
static_assert(sizeof(B_ShootingTarget_Master_C_CalculateScore) == 0x000008, "Wrong size on B_ShootingTarget_Master_C_CalculateScore");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateScore, ScoreToAward) == 0x000000, "Member 'B_ShootingTarget_Master_C_CalculateScore::ScoreToAward' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateScore, CallFunc_Multiply_IntInt_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_CalculateScore::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.AwardScore
// 0x0090 (0x0090 - 0x0000)
struct B_ShootingTarget_Master_C_AwardScore final
{
public:
	class AFortPlayerController*                  FortPlayerController;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScoreAwarded;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamAwardedPoints;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameManager*                   MinigameManager;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameManager*                   CallFunc_GetMinigameManager_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_GetSourceAndContextTags_OutSourceTags;    // 0x0020(0x0020)()
	struct FGameplayTagContainer                  CallFunc_GetSourceAndContextTags_OutContextTags;   // 0x0040(0x0020)()
	uint8                                         CallFunc_GetActorTeam_ReturnValue;                 // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Subtract_ByteByte_ReturnValue;            // 0x0062(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0063(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeGameplayTagContainerFromTag_ReturnValue; // 0x0068(0x0020)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6552[0x2];                                     // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CalculateScore_ScoreToAward;              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_AwardScore) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_AwardScore");
static_assert(sizeof(B_ShootingTarget_Master_C_AwardScore) == 0x000090, "Wrong size on B_ShootingTarget_Master_C_AwardScore");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, FortPlayerController) == 0x000000, "Member 'B_ShootingTarget_Master_C_AwardScore::FortPlayerController' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, ScoreAwarded) == 0x000008, "Member 'B_ShootingTarget_Master_C_AwardScore::ScoreAwarded' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, TeamAwardedPoints) == 0x00000C, "Member 'B_ShootingTarget_Master_C_AwardScore::TeamAwardedPoints' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, MinigameManager) == 0x000010, "Member 'B_ShootingTarget_Master_C_AwardScore::MinigameManager' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_GetMinigameManager_ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_GetMinigameManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_GetSourceAndContextTags_OutSourceTags) == 0x000020, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_GetSourceAndContextTags_OutSourceTags' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_GetSourceAndContextTags_OutContextTags) == 0x000040, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_GetSourceAndContextTags_OutContextTags' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_GetActorTeam_ReturnValue) == 0x000060, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_GetActorTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_MakeLiteralByte_ReturnValue) == 0x000061, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_Subtract_ByteByte_ReturnValue) == 0x000062, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_Subtract_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000063, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000064, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_MakeGameplayTagContainerFromTag_ReturnValue) == 0x000068, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_MakeGameplayTagContainerFromTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000088, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_BooleanOR_ReturnValue) == 0x000089, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_AwardScore, CallFunc_CalculateScore_ScoreToAward) == 0x00008C, "Member 'B_ShootingTarget_Master_C_AwardScore::CallFunc_CalculateScore_ScoreToAward' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.ShouldTriggerTarget
// 0x0068 (0x0068 - 0x0000)
struct B_ShootingTarget_Master_C_ShouldTriggerTarget final
{
public:
	class UObject*                                Overlapping_Actor;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    Overlapping_Component;                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6553[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortAthenaVehicle*                     K2Node_DynamicCast_AsFort_Athena_Vehicle;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6554[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerPawn_Athena_C*                   K2Node_DynamicCast_AsPlayer_Pawn_Athena;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6555[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IFortVehicleInterface> CallFunc_GetAllPassengers_self_CastInput;          // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class AFortPlayerPawn*>                CallFunc_GetAllPassengers_ReturnValue;             // 0x0048(0x0010)(ReferenceParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsInVehicle_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6556[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_ShouldTriggerTarget) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_ShouldTriggerTarget");
static_assert(sizeof(B_ShootingTarget_Master_C_ShouldTriggerTarget) == 0x000068, "Wrong size on B_ShootingTarget_Master_C_ShouldTriggerTarget");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, Overlapping_Actor) == 0x000000, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::Overlapping_Actor' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, Overlapping_Component) == 0x000008, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::Overlapping_Component' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, Result) == 0x000010, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::Result' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, K2Node_DynamicCast_AsFort_Athena_Vehicle) == 0x000018, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::K2Node_DynamicCast_AsFort_Athena_Vehicle' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, K2Node_DynamicCast_AsPlayer_Pawn_Athena) == 0x000028, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::K2Node_DynamicCast_AsPlayer_Pawn_Athena' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_GetAllPassengers_self_CastInput) == 0x000038, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_GetAllPassengers_self_CastInput' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_GetAllPassengers_ReturnValue) == 0x000048, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_GetAllPassengers_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_IsInVehicle_ReturnValue) == 0x000058, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_IsInVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_Not_PreBool_ReturnValue) == 0x000060, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_ShouldTriggerTarget, CallFunc_Greater_IntInt_ReturnValue) == 0x000061, "Member 'B_ShootingTarget_Master_C_ShouldTriggerTarget::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.MinigameIsRunning
// 0x0003 (0x0003 - 0x0000)
struct B_ShootingTarget_Master_C_MinigameIsRunning final
{
public:
	bool                                          Param_MinigameIsRunning;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasStarted_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_MinigameIsRunning) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_MinigameIsRunning");
static_assert(sizeof(B_ShootingTarget_Master_C_MinigameIsRunning) == 0x000003, "Wrong size on B_ShootingTarget_Master_C_MinigameIsRunning");
static_assert(offsetof(B_ShootingTarget_Master_C_MinigameIsRunning, Param_MinigameIsRunning) == 0x000000, "Member 'B_ShootingTarget_Master_C_MinigameIsRunning::Param_MinigameIsRunning' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_MinigameIsRunning, CallFunc_HasStarted_ReturnValue) == 0x000001, "Member 'B_ShootingTarget_Master_C_MinigameIsRunning::CallFunc_HasStarted_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_MinigameIsRunning, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'B_ShootingTarget_Master_C_MinigameIsRunning::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SetStartingPosition
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_SetStartingPosition final
{
public:
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_SetStartingPosition) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_SetStartingPosition");
static_assert(sizeof(B_ShootingTarget_Master_C_SetStartingPosition) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_SetStartingPosition");
static_assert(offsetof(B_ShootingTarget_Master_C_SetStartingPosition, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_SetStartingPosition::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.TargetShouldFall
// 0x000C (0x000C - 0x0000)
struct B_ShootingTarget_Master_C_TargetShouldFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6557[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetHealth_ReturnValue;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_TargetShouldFall) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_TargetShouldFall");
static_assert(sizeof(B_ShootingTarget_Master_C_TargetShouldFall) == 0x00000C, "Wrong size on B_ShootingTarget_Master_C_TargetShouldFall");
static_assert(offsetof(B_ShootingTarget_Master_C_TargetShouldFall, ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_TargetShouldFall::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_TargetShouldFall, CallFunc_GetHealth_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_TargetShouldFall::CallFunc_GetHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_TargetShouldFall, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'B_ShootingTarget_Master_C_TargetShouldFall::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_TargetShouldFall, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'B_ShootingTarget_Master_C_TargetShouldFall::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_TargetShouldFall, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'B_ShootingTarget_Master_C_TargetShouldFall::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SetMaxHealth
// 0x0040 (0x0040 - 0x0000)
struct B_ShootingTarget_Master_C_SetMaxHealth final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6558[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectSpecHandle              CallFunc_MakeOutgoingSpec_ReturnValue;             // 0x0008(0x0010)()
	class UAbilitySystemComponent*                CallFunc_GetAbilitySystemComponent_ReturnValue;    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayEffectSpecHandle              CallFunc_AssignTagSetByCallerMagnitude_ReturnValue; // 0x0020(0x0010)()
	bool                                          CallFunc_RemoveActiveGameplayEffect_ReturnValue;   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6559[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue; // 0x0034(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_SetMaxHealth) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_SetMaxHealth");
static_assert(sizeof(B_ShootingTarget_Master_C_SetMaxHealth) == 0x000040, "Wrong size on B_ShootingTarget_Master_C_SetMaxHealth");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, NewMaxHealth) == 0x000000, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::NewMaxHealth' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_MakeOutgoingSpec_ReturnValue) == 0x000008, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_MakeOutgoingSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_GetAbilitySystemComponent_ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_GetAbilitySystemComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_AssignTagSetByCallerMagnitude_ReturnValue) == 0x000020, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_AssignTagSetByCallerMagnitude_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_RemoveActiveGameplayEffect_ReturnValue) == 0x000030, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_RemoveActiveGameplayEffect_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue) == 0x000034, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_BP_ApplyGameplayEffectSpecToSelf_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetMaxHealth, CallFunc_IsValid_ReturnValue) == 0x00003C, "Member 'B_ShootingTarget_Master_C_SetMaxHealth::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.InitializeHideTargetTimer
// 0x0002 (0x0002 - 0x0000)
struct B_ShootingTarget_Master_C_InitializeHideTargetTimer final
{
public:
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_InitializeHideTargetTimer) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_InitializeHideTargetTimer");
static_assert(sizeof(B_ShootingTarget_Master_C_InitializeHideTargetTimer) == 0x000002, "Wrong size on B_ShootingTarget_Master_C_InitializeHideTargetTimer");
static_assert(offsetof(B_ShootingTarget_Master_C_InitializeHideTargetTimer, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_InitializeHideTargetTimer::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_InitializeHideTargetTimer, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'B_ShootingTarget_Master_C_InitializeHideTargetTimer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SetBunnyHopTimer
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_SetBunnyHopTimer final
{
public:
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_SetBunnyHopTimer) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_SetBunnyHopTimer");
static_assert(sizeof(B_ShootingTarget_Master_C_SetBunnyHopTimer) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_SetBunnyHopTimer");
static_assert(offsetof(B_ShootingTarget_Master_C_SetBunnyHopTimer, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_SetBunnyHopTimer::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.CheckIfShouldHop
// 0x0001 (0x0001 - 0x0000)
struct B_ShootingTarget_Master_C_CheckIfShouldHop final
{
public:
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_CheckIfShouldHop) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_CheckIfShouldHop");
static_assert(sizeof(B_ShootingTarget_Master_C_CheckIfShouldHop) == 0x000001, "Wrong size on B_ShootingTarget_Master_C_CheckIfShouldHop");
static_assert(offsetof(B_ShootingTarget_Master_C_CheckIfShouldHop, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_CheckIfShouldHop::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.CreateWeakPointArray
// 0x0038 (0x0038 - 0x0000)
struct B_ShootingTarget_Master_C_CreateWeakPointArray final
{
public:
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_9;                  // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_10;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_11;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_12;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_13;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_CreateWeakPointArray) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_CreateWeakPointArray");
static_assert(sizeof(B_ShootingTarget_Master_C_CreateWeakPointArray) == 0x000038, "Wrong size on B_ShootingTarget_Master_C_CreateWeakPointArray");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_1) == 0x000004, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_2) == 0x000008, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_3) == 0x00000C, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_4) == 0x000010, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_5) == 0x000014, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_6) == 0x000018, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_7) == 0x00001C, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_8) == 0x000020, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_9) == 0x000024, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_10) == 0x000028, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_11) == 0x00002C, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_12) == 0x000030, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CreateWeakPointArray, CallFunc_Array_Add_ReturnValue_13) == 0x000034, "Member 'B_ShootingTarget_Master_C_CreateWeakPointArray::CallFunc_Array_Add_ReturnValue_13' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.SetAimAssistEnabled
// 0x00F8 (0x00F8 - 0x0000)
struct B_ShootingTarget_Master_C_SetAimAssistEnabled final
{
public:
	bool                                          NewType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655A[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ECollisionResponse                            CallFunc_GetCollisionResponseToChannel_ReturnValue; // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655B[0x5];                                     // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_ByteToText_ReturnValue;              // 0x0018(0x0018)()
	ECollisionResponse                            CallFunc_GetCollisionResponseToChannel_ReturnValue_1; // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655C[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_ByteToText_ReturnValue_1;            // 0x0078(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0090(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00E0(0x0018)()
};
static_assert(alignof(B_ShootingTarget_Master_C_SetAimAssistEnabled) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_SetAimAssistEnabled");
static_assert(sizeof(B_ShootingTarget_Master_C_SetAimAssistEnabled) == 0x0000F8, "Wrong size on B_ShootingTarget_Master_C_SetAimAssistEnabled");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, NewType) == 0x000000, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::NewType' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, Temp_bool_Variable) == 0x000001, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, Temp_byte_Variable) == 0x000002, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_Select_Default) == 0x000004, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_DynamicCast_AsCharacter) == 0x000008, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_GetCollisionResponseToChannel_ReturnValue) == 0x000012, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_GetCollisionResponseToChannel_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_Conv_ByteToText_ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_Conv_ByteToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_GetCollisionResponseToChannel_ReturnValue_1) == 0x000030, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_GetCollisionResponseToChannel_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_Conv_ByteToText_ReturnValue_1) == 0x000078, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_Conv_ByteToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_MakeStruct_FormatArgumentData_1) == 0x000090, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, K2Node_MakeArray_Array) == 0x0000D0, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_SetAimAssistEnabled, CallFunc_Format_ReturnValue) == 0x0000E0, "Member 'B_ShootingTarget_Master_C_SetAimAssistEnabled::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.BlueprintModifyIncomingDamage
// 0x0108 (0x0108 - 0x0000)
struct B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655D[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  InTags;                                            // 0x0008(0x0020)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayEffectContextHandle           EffectContext;                                     // 0x0028(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class AController*                            EventInstigator;                                   // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewDamage;                                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWeaponItemDefinition*              CallFunc_GetWeaponDataFromDamageCauser_OutWeaponData; // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BlueprintModifyIncomingDamage_ReturnValue; // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateDamageFromWeaponData_OutDamage;  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_EffectContextGetHitResult_ReturnValue;    // 0x0068(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_EffectContextHasHitResult_ReturnValue;    // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_655E[0x3];                                     // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_WeakPointWasHit_HitComponent;             // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_WeakPointWasHit_ReturnValue;              // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage");
static_assert(sizeof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage) == 0x000108, "Wrong size on B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, Damage) == 0x000000, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::Damage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, InTags) == 0x000008, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::InTags' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, EffectContext) == 0x000028, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::EffectContext' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, EventInstigator) == 0x000040, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::EventInstigator' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, DamageCauser) == 0x000048, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, ReturnValue) == 0x000050, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, NewDamage) == 0x000054, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::NewDamage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_GetWeaponDataFromDamageCauser_OutWeaponData) == 0x000058, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_GetWeaponDataFromDamageCauser_OutWeaponData' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_BlueprintModifyIncomingDamage_ReturnValue) == 0x000060, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_BlueprintModifyIncomingDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_CalculateDamageFromWeaponData_OutDamage) == 0x000064, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_CalculateDamageFromWeaponData_OutDamage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_EffectContextGetHitResult_ReturnValue) == 0x000068, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_EffectContextGetHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_EffectContextHasHitResult_ReturnValue) == 0x0000F4, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_EffectContextHasHitResult_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_WeakPointWasHit_HitComponent) == 0x0000F8, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_WeakPointWasHit_HitComponent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage, CallFunc_WeakPointWasHit_ReturnValue) == 0x000100, "Member 'B_ShootingTarget_Master_C_BlueprintModifyIncomingDamage::CallFunc_WeakPointWasHit_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.UpdateHealthBarVisibility
// 0x0004 (0x0004 - 0x0000)
struct B_ShootingTarget_Master_C_UpdateHealthBarVisibility final
{
public:
	bool                                          ShouldShowBar;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShouldSuppress;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility) == 0x000001, "Wrong alignment on B_ShootingTarget_Master_C_UpdateHealthBarVisibility");
static_assert(sizeof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility) == 0x000004, "Wrong size on B_ShootingTarget_Master_C_UpdateHealthBarVisibility");
static_assert(offsetof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility, ShouldShowBar) == 0x000000, "Member 'B_ShootingTarget_Master_C_UpdateHealthBarVisibility::ShouldShowBar' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility, ShouldSuppress) == 0x000001, "Member 'B_ShootingTarget_Master_C_UpdateHealthBarVisibility::ShouldSuppress' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'B_ShootingTarget_Master_C_UpdateHealthBarVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_UpdateHealthBarVisibility, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'B_ShootingTarget_Master_C_UpdateHealthBarVisibility::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.IsWithinWeakpointBounds
// 0x0078 (0x0078 - 0x0000)
struct B_ShootingTarget_Master_C_IsWithinWeakpointBounds final
{
public:
	struct FVector                                Impact_Location;                                   // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_655F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneComponent*                  Component;                                         // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6560[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_Origin;                // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetComponentBounds_BoxExtent;             // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetComponentBounds_SphereRadius;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6561[0x2];                                     // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6562[0x1];                                     // 0x0067(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0073(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_IsWithinWeakpointBounds");
static_assert(sizeof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds) == 0x000078, "Wrong size on B_ShootingTarget_Master_C_IsWithinWeakpointBounds");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, Impact_Location) == 0x000000, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::Impact_Location' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, Component) == 0x000010, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::Component' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_X) == 0x00001C, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_Y) == 0x000020, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_Z) == 0x000024, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GetComponentBounds_Origin) == 0x000028, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GetComponentBounds_Origin' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GetComponentBounds_BoxExtent) == 0x000034, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GetComponentBounds_BoxExtent' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GetComponentBounds_SphereRadius) == 0x000040, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GetComponentBounds_SphereRadius' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_X_1) == 0x000044, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_Y_1) == 0x000048, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BreakVector_Z_1) == 0x00004C, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Add_FloatFloat_ReturnValue) == 0x000050, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000054, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000059, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00005C, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000060, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000064, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000065, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BooleanAND_ReturnValue) == 0x000066, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000068, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x00006C, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000070, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x000071, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BooleanAND_ReturnValue_1) == 0x000072, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BooleanAND_ReturnValue_2) == 0x000073, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BooleanAND_ReturnValue_3) == 0x000074, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_IsWithinWeakpointBounds, CallFunc_BooleanAND_ReturnValue_4) == 0x000075, "Member 'B_ShootingTarget_Master_C_IsWithinWeakpointBounds::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.CalculateDamageFromWeaponData
// 0x0190 (0x0190 - 0x0000)
struct B_ShootingTarget_Master_C_CalculateDamageFromWeaponData final
{
public:
	class UFortWeaponItemDefinition*              WeaponData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InDamage;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutDamage;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NewDamage;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6563[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    CallFunc_GetWeaponStatHandle_ReturnValue;          // 0x0018(0x0010)(NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6564[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFortBaseWeaponStats                   CallFunc_GetWeaponStatsRow_OutRow;                 // 0x0030(0x0158)()
	bool                                          CallFunc_GetWeaponStatsRow_ReturnValue;            // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6565[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_CalculateDamageFromWeaponData");
static_assert(sizeof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData) == 0x000190, "Wrong size on B_ShootingTarget_Master_C_CalculateDamageFromWeaponData");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, WeaponData) == 0x000000, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::WeaponData' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, InDamage) == 0x000008, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::InDamage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, OutDamage) == 0x00000C, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::OutDamage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, NewDamage) == 0x000010, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::NewDamage' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, CallFunc_GetWeaponStatHandle_ReturnValue) == 0x000018, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::CallFunc_GetWeaponStatHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, CallFunc_GetWeaponStatsRow_OutRow) == 0x000030, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::CallFunc_GetWeaponStatsRow_OutRow' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, CallFunc_GetWeaponStatsRow_ReturnValue) == 0x000188, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::CallFunc_GetWeaponStatsRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_CalculateDamageFromWeaponData, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00018C, "Member 'B_ShootingTarget_Master_C_CalculateDamageFromWeaponData::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.GetWeaponDataFromDamageCauser
// 0x0060 (0x0060 - 0x0000)
struct B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser final
{
public:
	class UObject*                                DamageCauser;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWeaponItemDefinition*              OutWeaponData;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWeaponItemDefinition*              WeaponData;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileAthena*                  K2Node_DynamicCast_AsFort_Projectile_Athena;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6566[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            K2Node_DynamicCast_AsFort_Weapon;                  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6567[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortWeaponItemDefinition*              CallFunc_GetWeaponData_ReturnValue;                // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortWeapon*                            K2Node_DynamicCast_AsFort_Weapon_1;                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6568[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortWeaponItemDefinition*              CallFunc_GetWeaponData_ReturnValue_1;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser");
static_assert(sizeof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser) == 0x000060, "Wrong size on B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, DamageCauser) == 0x000000, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::DamageCauser' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, OutWeaponData) == 0x000008, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::OutWeaponData' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, WeaponData) == 0x000010, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::WeaponData' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_AsFort_Projectile_Athena) == 0x000018, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_AsFort_Projectile_Athena' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_AsFort_Weapon) == 0x000028, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_AsFort_Weapon' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, CallFunc_GetWeaponData_ReturnValue) == 0x000040, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::CallFunc_GetWeaponData_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_AsFort_Weapon_1) == 0x000048, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_AsFort_Weapon_1' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, K2Node_DynamicCast_bSuccess_2) == 0x000050, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser, CallFunc_GetWeaponData_ReturnValue_1) == 0x000058, "Member 'B_ShootingTarget_Master_C_GetWeaponDataFromDamageCauser::CallFunc_GetWeaponData_ReturnValue_1' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.WeakPointArrayContainsItems
// 0x000C (0x000C - 0x0000)
struct B_ShootingTarget_Master_C_WeakPointArrayContainsItems final
{
public:
	bool                                          ArrayContainsItems;                                // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6569[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(B_ShootingTarget_Master_C_WeakPointArrayContainsItems) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_WeakPointArrayContainsItems");
static_assert(sizeof(B_ShootingTarget_Master_C_WeakPointArrayContainsItems) == 0x00000C, "Wrong size on B_ShootingTarget_Master_C_WeakPointArrayContainsItems");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointArrayContainsItems, ArrayContainsItems) == 0x000000, "Member 'B_ShootingTarget_Master_C_WeakPointArrayContainsItems::ArrayContainsItems' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointArrayContainsItems, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_WeakPointArrayContainsItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_WeakPointArrayContainsItems, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'B_ShootingTarget_Master_C_WeakPointArrayContainsItems::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.RestoreToMaxHealth
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingTarget_Master_C_RestoreToMaxHealth final
{
public:
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_656A[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxHealth_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_RestoreToMaxHealth) == 0x000004, "Wrong alignment on B_ShootingTarget_Master_C_RestoreToMaxHealth");
static_assert(sizeof(B_ShootingTarget_Master_C_RestoreToMaxHealth) == 0x000008, "Wrong size on B_ShootingTarget_Master_C_RestoreToMaxHealth");
static_assert(offsetof(B_ShootingTarget_Master_C_RestoreToMaxHealth, CallFunc_HasAuthority_ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_RestoreToMaxHealth::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(B_ShootingTarget_Master_C_RestoreToMaxHealth, CallFunc_GetMaxHealth_ReturnValue) == 0x000004, "Member 'B_ShootingTarget_Master_C_RestoreToMaxHealth::CallFunc_GetMaxHealth_ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.GetCollisionStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct B_ShootingTarget_Master_C_GetCollisionStaticMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_GetCollisionStaticMesh) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_GetCollisionStaticMesh");
static_assert(sizeof(B_ShootingTarget_Master_C_GetCollisionStaticMesh) == 0x000008, "Wrong size on B_ShootingTarget_Master_C_GetCollisionStaticMesh");
static_assert(offsetof(B_ShootingTarget_Master_C_GetCollisionStaticMesh, ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_GetCollisionStaticMesh::ReturnValue' has a wrong offset!");

// Function B_ShootingTarget_Master.B_ShootingTarget_Master_C.GetMeshComponents
// 0x0010 (0x0010 - 0x0000)
struct B_ShootingTarget_Master_C_GetMeshComponents final
{
public:
	TArray<class UMeshComponent*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(B_ShootingTarget_Master_C_GetMeshComponents) == 0x000008, "Wrong alignment on B_ShootingTarget_Master_C_GetMeshComponents");
static_assert(sizeof(B_ShootingTarget_Master_C_GetMeshComponents) == 0x000010, "Wrong size on B_ShootingTarget_Master_C_GetMeshComponents");
static_assert(offsetof(B_ShootingTarget_Master_C_GetMeshComponents, ReturnValue) == 0x000000, "Member 'B_ShootingTarget_Master_C_GetMeshComponents::ReturnValue' has a wrong offset!");

}

