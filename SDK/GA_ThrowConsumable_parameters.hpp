#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_ThrowConsumable

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.ExecuteUbergraph_GA_ThrowConsumable
// 0x0480 (0x0480 - 0x0000)
struct GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           Temp_struct_Variable;                              // 0x0004(0x0008)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FCC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       Temp_struct_Variable_1;                            // 0x0010(0x0028)()
	class UFortWeaponItemDefinition*              CallFunc_GetWeaponData_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0040(0x0010)(ZeroConstructor, NoDestructor)
	class UAbilityTask_WaitDelay*                 CallFunc_WaitDelay_ReturnValue;                    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleSize_OutRadius;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleSize_OutHalfHeight;       // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGravityZ_ReturnValue;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCurveTableRowValid_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCD[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGravityZ_ReturnValue_1;                // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCE[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0078(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0088(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x00A8(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FCF[0x7];                                     // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortAbilityTask_PlayMontageWaitTarget* CallFunc_PlayMontageWaitTarget_ReturnValue;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_CommitAbility_ReturnValue;             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsServer_ReturnValue;                     // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD0[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x00CC(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_bWasCancelled;                        // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD1[0x3];                                     // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetSpawnLocationAndRotation_Location;     // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSpawnLocationAndRotation_Rotation;     // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAbilityTask_PlayMontageAndWait*        CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue; // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD2[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0110(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD3[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileBase*                    CallFunc_FinishSpawningActor_ReturnValue;          // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData;                     // 0x0160(0x0028)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag;                 // 0x0188(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x0190(0x0010)(ZeroConstructor, NoDestructor)
	class AFortProjectileTrajectory*              CallFunc_SpawnTrajectoryIndicator_ReturnValue;     // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortGameplayEffectContainerSpec       CallFunc_MakeGameplayEffectContainerSpec_ReturnValue; // 0x01A8(0x00B8)()
	struct FFortGameplayEffectContainerSpec       CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_1; // 0x0260(0x00B8)()
	struct FFortGameplayEffectContainerSpec       CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_2; // 0x0318(0x00B8)()
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData_1;                   // 0x03D0(0x0028)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag_1;               // 0x03F8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class AFortPlayerController*                  CallFunc_GetFortPlayerControllerFromActor_ReturnValue; // 0x0400(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0408(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD4[0x3];                                     // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x040C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_5FD5[0x4];                                     // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestManager*                      CallFunc_GetQuestManager_ReturnValue;              // 0x0420(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SendComplexCustomStatEvent_QuestActive;   // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SendComplexCustomStatEvent_QuestCompleted; // 0x042D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD6[0x2];                                     // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetProjectileInitialGravityScaleToUse_GravityScaleToUse; // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse_1; // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    CallFunc_SpawnThrownProjectile_SpawnedProjectile;  // 0x0438(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0440(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD7[0x7];                                     // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetDataHandle       K2Node_CustomEvent_TargetData_2;                   // 0x0448(0x0028)(ConstParm)
	struct FGameplayTag                           K2Node_CustomEvent_ApplicationTag_2;               // 0x0470(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable) == 0x000010, "Wrong alignment on GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable");
static_assert(sizeof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable) == 0x000480, "Wrong size on GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, EntryPoint) == 0x000000, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::EntryPoint' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, Temp_struct_Variable) == 0x000004, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, Temp_struct_Variable_1) == 0x000010, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetWeaponData_ReturnValue) == 0x000038, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetWeaponData_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate) == 0x000040, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_WaitDelay_ReturnValue) == 0x000050, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_WaitDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetScaledCapsuleSize_OutRadius) == 0x000058, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetScaledCapsuleSize_OutRadius' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetScaledCapsuleSize_OutHalfHeight) == 0x00005C, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetScaledCapsuleSize_OutHalfHeight' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetGravityZ_ReturnValue) == 0x000060, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetGravityZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_FMax_ReturnValue) == 0x000064, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsCurveTableRowValid_ReturnValue) == 0x000068, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsCurveTableRowValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetGravityZ_ReturnValue_1) == 0x00006C, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetGravityZ_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsValid_ReturnValue) == 0x000070, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000074, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_1) == 0x000078, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_2) == 0x000088, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_3) == 0x000098, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_4) == 0x0000A8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, Temp_bool_Variable) == 0x0000B8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_PlayMontageWaitTarget_ReturnValue) == 0x0000C0, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_PlayMontageWaitTarget_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsValid_ReturnValue_1) == 0x0000C8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_K2_CommitAbility_ReturnValue) == 0x0000C9, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_K2_CommitAbility_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsServer_ReturnValue) == 0x0000CA, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_5) == 0x0000CC, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_Event_bWasCancelled) == 0x0000DC, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_Event_bWasCancelled' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetSpawnLocationAndRotation_Location) == 0x0000E0, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetSpawnLocationAndRotation_Location' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetSpawnLocationAndRotation_Rotation) == 0x0000EC, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetSpawnLocationAndRotation_Rotation' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue) == 0x0000F8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_CreatePlayMontageAndWaitProxy_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsValid_ReturnValue_2) == 0x000100, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetOwningPlayer_Player_Pawn) == 0x000108, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetTransform_ReturnValue) == 0x000110, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000140, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetValueAtLevel_ReturnValue) == 0x000148, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00014C, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_Select_Default) == 0x000150, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_FinishSpawningActor_ReturnValue) == 0x000158, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_TargetData) == 0x000160, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_TargetData' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_ApplicationTag) == 0x000188, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_ApplicationTag' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_6) == 0x000190, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_SpawnTrajectoryIndicator_ReturnValue) == 0x0001A0, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_SpawnTrajectoryIndicator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_MakeGameplayEffectContainerSpec_ReturnValue) == 0x0001A8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_MakeGameplayEffectContainerSpec_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_1) == 0x000260, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_2) == 0x000318, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_MakeGameplayEffectContainerSpec_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_TargetData_1) == 0x0003D0, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_TargetData_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_ApplicationTag_1) == 0x0003F8, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_ApplicationTag_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetFortPlayerControllerFromActor_ReturnValue) == 0x000400, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetFortPlayerControllerFromActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsValid_ReturnValue_3) == 0x000408, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CreateDelegate_OutputDelegate_7) == 0x00040C, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetQuestManager_ReturnValue) == 0x000420, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetQuestManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse) == 0x000428, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_SendComplexCustomStatEvent_QuestActive) == 0x00042C, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_SendComplexCustomStatEvent_QuestActive' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_SendComplexCustomStatEvent_QuestCompleted) == 0x00042D, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_SendComplexCustomStatEvent_QuestCompleted' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetProjectileInitialGravityScaleToUse_GravityScaleToUse) == 0x000430, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetProjectileInitialGravityScaleToUse_GravityScaleToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse_1) == 0x000434, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_GetProjectileInitialSpeedToUse_ProjectileSpeedToUse_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_SpawnThrownProjectile_SpawnedProjectile) == 0x000438, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_SpawnThrownProjectile_SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, CallFunc_IsValid_ReturnValue_4) == 0x000440, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_TargetData_2) == 0x000448, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_TargetData_2' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable, K2Node_CustomEvent_ApplicationTag_2) == 0x000470, "Member 'GA_ThrowConsumable_C_ExecuteUbergraph_GA_ThrowConsumable::K2Node_CustomEvent_ApplicationTag_2' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.K2_OnEndAbility
// 0x0001 (0x0001 - 0x0000)
struct GA_ThrowConsumable_C_K2_OnEndAbility final
{
public:
	bool                                          bWasCancelled;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_K2_OnEndAbility) == 0x000001, "Wrong alignment on GA_ThrowConsumable_C_K2_OnEndAbility");
static_assert(sizeof(GA_ThrowConsumable_C_K2_OnEndAbility) == 0x000001, "Wrong size on GA_ThrowConsumable_C_K2_OnEndAbility");
static_assert(offsetof(GA_ThrowConsumable_C_K2_OnEndAbility, bWasCancelled) == 0x000000, "Member 'GA_ThrowConsumable_C_K2_OnEndAbility::bWasCancelled' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.Triggered_01C5B37D48E3DC6F82DDC58640CE2A27
// 0x0030 (0x0030 - 0x0000)
struct GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(sizeof(GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000030, "Wrong size on GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(offsetof(GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27, TargetData) == 0x000000, "Member 'GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27::TargetData' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27, ApplicationTag) == 0x000028, "Member 'GA_ThrowConsumable_C_Triggered_01C5B37D48E3DC6F82DDC58640CE2A27::ApplicationTag' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27
// 0x0030 (0x0030 - 0x0000)
struct GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(sizeof(GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000030, "Wrong size on GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(offsetof(GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27, TargetData) == 0x000000, "Member 'GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27::TargetData' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27, ApplicationTag) == 0x000028, "Member 'GA_ThrowConsumable_C_Cancelled_01C5B37D48E3DC6F82DDC58640CE2A27::ApplicationTag' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.Completed_01C5B37D48E3DC6F82DDC58640CE2A27
// 0x0030 (0x0030 - 0x0000)
struct GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27 final
{
public:
	struct FGameplayAbilityTargetDataHandle       TargetData;                                        // 0x0000(0x0028)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FGameplayTag                           ApplicationTag;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(sizeof(GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27) == 0x000030, "Wrong size on GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27");
static_assert(offsetof(GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27, TargetData) == 0x000000, "Member 'GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27::TargetData' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27, ApplicationTag) == 0x000028, "Member 'GA_ThrowConsumable_C_Completed_01C5B37D48E3DC6F82DDC58640CE2A27::ApplicationTag' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.PrethrowSetup
// 0x0060 (0x0060 - 0x0000)
struct GA_ThrowConsumable_C_PrethrowSetup final
{
public:
	struct FActiveGameplayEffectHandle            CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue; // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0008(0x0048)(ContainsInstancedReference)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_PrethrowSetup) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_PrethrowSetup");
static_assert(sizeof(GA_ThrowConsumable_C_PrethrowSetup) == 0x000060, "Wrong size on GA_ThrowConsumable_C_PrethrowSetup");
static_assert(offsetof(GA_ThrowConsumable_C_PrethrowSetup, CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue) == 0x000000, "Member 'GA_ThrowConsumable_C_PrethrowSetup::CallFunc_BP_ApplyGameplayEffectToOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_PrethrowSetup, CallFunc_GetActorInfo_ReturnValue) == 0x000008, "Member 'GA_ThrowConsumable_C_PrethrowSetup::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_PrethrowSetup, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000050, "Member 'GA_ThrowConsumable_C_PrethrowSetup::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_PrethrowSetup, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'GA_ThrowConsumable_C_PrethrowSetup::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.SpawnThrownProjectile
// 0x01B0 (0x01B0 - 0x0000)
struct GA_ThrowConsumable_C_SpawnThrownProjectile final
{
public:
	class UClass*                                 Param_ProjectileClass;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ProjectileSpawnLocation;                           // 0x0008(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ProjectileSpawnDirection;                          // 0x0014(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)
	struct FFortGameplayEffectContainerSpec       Param_HitEffectContainerSpec;                      // 0x0020(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FFortGameplayEffectContainerSpec       Param_ExplosionEffectContainerSpec;                // 0x00D8(0x00B8)(BlueprintVisible, BlueprintReadOnly, Parm)
	float                                         ProjectileInitialSpeed;                            // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Param_ProjectileGravityScale;                      // 0x0194(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    Param_SpawnedProjectile;                           // 0x0198(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    CallFunc_SpawnProjectile_ReturnValue;              // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_SpawnThrownProjectile) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_SpawnThrownProjectile");
static_assert(sizeof(GA_ThrowConsumable_C_SpawnThrownProjectile) == 0x0001B0, "Wrong size on GA_ThrowConsumable_C_SpawnThrownProjectile");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, Param_ProjectileClass) == 0x000000, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::Param_ProjectileClass' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, ProjectileSpawnLocation) == 0x000008, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::ProjectileSpawnLocation' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, ProjectileSpawnDirection) == 0x000014, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::ProjectileSpawnDirection' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, Param_HitEffectContainerSpec) == 0x000020, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::Param_HitEffectContainerSpec' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, Param_ExplosionEffectContainerSpec) == 0x0000D8, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::Param_ExplosionEffectContainerSpec' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, ProjectileInitialSpeed) == 0x000190, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::ProjectileInitialSpeed' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, Param_ProjectileGravityScale) == 0x000194, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::Param_ProjectileGravityScale' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, Param_SpawnedProjectile) == 0x000198, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::Param_SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, CallFunc_GetOwningPlayer_Player_Pawn) == 0x0001A0, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnThrownProjectile, CallFunc_SpawnProjectile_ReturnValue) == 0x0001A8, "Member 'GA_ThrowConsumable_C_SpawnThrownProjectile::CallFunc_SpawnProjectile_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct GA_ThrowConsumable_C_OnProjectileSpawned final
{
public:
	class AFortProjectileBase*                    Param_SpawnedProjectile;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_OnProjectileSpawned) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_OnProjectileSpawned");
static_assert(sizeof(GA_ThrowConsumable_C_OnProjectileSpawned) == 0x000008, "Wrong size on GA_ThrowConsumable_C_OnProjectileSpawned");
static_assert(offsetof(GA_ThrowConsumable_C_OnProjectileSpawned, Param_SpawnedProjectile) == 0x000000, "Member 'GA_ThrowConsumable_C_OnProjectileSpawned::Param_SpawnedProjectile' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.SetupDummyProjectile
// 0x0070 (0x0070 - 0x0000)
struct GA_ThrowConsumable_C_SetupDummyProjectile final
{
public:
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FD8[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FD9[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileTrajectory*              CallFunc_FinishSpawningActor_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ProjectileTrajectory_C*             K2Node_DynamicCast_AsBP_Projectile_Trajectory;     // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_SetupDummyProjectile) == 0x000010, "Wrong alignment on GA_ThrowConsumable_C_SetupDummyProjectile");
static_assert(sizeof(GA_ThrowConsumable_C_SetupDummyProjectile) == 0x000070, "Wrong size on GA_ThrowConsumable_C_SetupDummyProjectile");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, CallFunc_GetOwningPlayer_Player_Pawn) == 0x000000, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, CallFunc_IsValidClass_ReturnValue) == 0x000040, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000048, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, CallFunc_FinishSpawningActor_ReturnValue) == 0x000050, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, K2Node_DynamicCast_AsBP_Projectile_Trajectory) == 0x000058, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::K2Node_DynamicCast_AsBP_Projectile_Trajectory' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SetupDummyProjectile, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GA_ThrowConsumable_C_SetupDummyProjectile::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.UpdateTrajectorySpline
// 0x00B0 (0x00B0 - 0x0000)
struct GA_ThrowConsumable_C_UpdateTrajectorySpline final
{
public:
	TArray<struct FVector>                        CallFunc_GetProjectileTrajectoryPoints_OutSplinePoints; // 0x0000(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_GetProjectileTrajectoryPoints_OutSplineTangents; // 0x0010(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_GetProjectileTrajectoryPoints_OutHitResult; // 0x0020(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_UpdateTrajectorySpline) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_UpdateTrajectorySpline");
static_assert(sizeof(GA_ThrowConsumable_C_UpdateTrajectorySpline) == 0x0000B0, "Wrong size on GA_ThrowConsumable_C_UpdateTrajectorySpline");
static_assert(offsetof(GA_ThrowConsumable_C_UpdateTrajectorySpline, CallFunc_GetProjectileTrajectoryPoints_OutSplinePoints) == 0x000000, "Member 'GA_ThrowConsumable_C_UpdateTrajectorySpline::CallFunc_GetProjectileTrajectoryPoints_OutSplinePoints' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_UpdateTrajectorySpline, CallFunc_GetProjectileTrajectoryPoints_OutSplineTangents) == 0x000010, "Member 'GA_ThrowConsumable_C_UpdateTrajectorySpline::CallFunc_GetProjectileTrajectoryPoints_OutSplineTangents' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_UpdateTrajectorySpline, CallFunc_GetProjectileTrajectoryPoints_OutHitResult) == 0x000020, "Member 'GA_ThrowConsumable_C_UpdateTrajectorySpline::CallFunc_GetProjectileTrajectoryPoints_OutHitResult' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_UpdateTrajectorySpline, CallFunc_IsValid_ReturnValue) == 0x0000AC, "Member 'GA_ThrowConsumable_C_UpdateTrajectorySpline::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.PostThrowCleanup
// 0x0001 (0x0001 - 0x0000)
struct GA_ThrowConsumable_C_PostThrowCleanup final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_PostThrowCleanup) == 0x000001, "Wrong alignment on GA_ThrowConsumable_C_PostThrowCleanup");
static_assert(sizeof(GA_ThrowConsumable_C_PostThrowCleanup) == 0x000001, "Wrong size on GA_ThrowConsumable_C_PostThrowCleanup");
static_assert(offsetof(GA_ThrowConsumable_C_PostThrowCleanup, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'GA_ThrowConsumable_C_PostThrowCleanup::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetProjectileInitialSpeedToUse
// 0x0028 (0x0028 - 0x0000)
struct GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse final
{
public:
	float                                         ProjectileSpeedToUse;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GetProjectileInitialSpeedToUseContext;             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EvaluateCurveTableRow_OutXY;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EvaluateCurveTableRow_ReturnValue;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurveTableRowValid_ReturnValue;         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse");
static_assert(sizeof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse) == 0x000028, "Wrong size on GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, ProjectileSpeedToUse) == 0x000000, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::ProjectileSpeedToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, GetProjectileInitialSpeedToUseContext) == 0x000008, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::GetProjectileInitialSpeedToUseContext' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, CallFunc_GetValueAtLevel_ReturnValue) == 0x000018, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, CallFunc_IsValidClass_ReturnValue) == 0x00001C, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, CallFunc_EvaluateCurveTableRow_OutXY) == 0x000020, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::CallFunc_EvaluateCurveTableRow_OutXY' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, CallFunc_EvaluateCurveTableRow_ReturnValue) == 0x000024, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::CallFunc_EvaluateCurveTableRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse, CallFunc_IsCurveTableRowValid_ReturnValue) == 0x000025, "Member 'GA_ThrowConsumable_C_GetProjectileInitialSpeedToUse::CallFunc_IsCurveTableRowValid_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetProjectileInitialGravityScaleToUse
// 0x0028 (0x0028 - 0x0000)
struct GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse final
{
public:
	float                                         GravityScaleToUse;                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDC[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GetProjectileInitialGravityScaleContext;           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_GetValueAtLevel_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDD[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EvaluateCurveTableRow_OutXY;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EvaluateCurveTableRow_ReturnValue;        // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCurveTableRowValid_ReturnValue;         // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse");
static_assert(sizeof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse) == 0x000028, "Wrong size on GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, GravityScaleToUse) == 0x000000, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::GravityScaleToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, GetProjectileInitialGravityScaleContext) == 0x000008, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::GetProjectileInitialGravityScaleContext' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, CallFunc_GetValueAtLevel_ReturnValue) == 0x000018, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::CallFunc_GetValueAtLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, CallFunc_IsValidClass_ReturnValue) == 0x00001C, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, CallFunc_EvaluateCurveTableRow_OutXY) == 0x000020, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::CallFunc_EvaluateCurveTableRow_OutXY' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, CallFunc_EvaluateCurveTableRow_ReturnValue) == 0x000024, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::CallFunc_EvaluateCurveTableRow_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse, CallFunc_IsCurveTableRowValid_ReturnValue) == 0x000025, "Member 'GA_ThrowConsumable_C_GetProjectileInitialGravityScaleToUse::CallFunc_IsCurveTableRowValid_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetProjectileTrajectoryPoints
// 0x0268 (0x0268 - 0x0000)
struct GA_ThrowConsumable_C_GetProjectileTrajectoryPoints final
{
public:
	TArray<struct FVector>                        OutSplinePoints;                                   // 0x0000(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector>                        OutSplineTangents;                                 // 0x0010(0x0010)(Parm, OutParm, HasGetValueTypeHash)
	struct FHitResult                             OutHitResult;                                      // 0x0020(0x008C)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                LocalVelocity;                                     // 0x00AC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LocalLocation;                                     // 0x00B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FDE[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LocalPawn;                                         // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FDF[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_CalculateProjectileTrajectorySplineWithHit_OutHitResult; // 0x00D4(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	TArray<struct FVector>                        CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplinePoints; // 0x0160(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplineTangents; // 0x0170(0x0010)(ReferenceParm, HasGetValueTypeHash)
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutHitResult; // 0x0188(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	uint8                                         Pad_5FE0[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplinePoints; // 0x0218(0x0010)(ReferenceParm, HasGetValueTypeHash)
	TArray<struct FVector>                        CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplineTangents; // 0x0228(0x0010)(ReferenceParm, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSpawnLocationAndRotation_Location;     // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetSpawnLocationAndRotation_Rotation;     // 0x0244(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0250(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x025C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetProjectileTrajectoryPoints");
static_assert(sizeof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints) == 0x000268, "Wrong size on GA_ThrowConsumable_C_GetProjectileTrajectoryPoints");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, OutSplinePoints) == 0x000000, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::OutSplinePoints' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, OutSplineTangents) == 0x000010, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::OutSplineTangents' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, OutHitResult) == 0x000020, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::OutHitResult' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, LocalVelocity) == 0x0000AC, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::LocalVelocity' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, LocalLocation) == 0x0000B8, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::LocalLocation' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, LocalPawn) == 0x0000C8, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::LocalPawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_NotEqual_NameName_ReturnValue) == 0x0000D0, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHit_OutHitResult) == 0x0000D4, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHit_OutHitResult' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplinePoints) == 0x000160, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplinePoints' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplineTangents) == 0x000170, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHit_OutSplineTangents' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_GetOwningPlayer_Player_Pawn) == 0x000180, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutHitResult) == 0x000188, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutHitResult' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplinePoints) == 0x000218, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplinePoints' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplineTangents) == 0x000228, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_CalculateProjectileTrajectorySplineWithHitProfile_OutSplineTangents' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_GetSpawnLocationAndRotation_Location) == 0x000238, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_GetSpawnLocationAndRotation_Location' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_GetSpawnLocationAndRotation_Rotation) == 0x000244, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_GetSpawnLocationAndRotation_Rotation' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000250, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryPoints, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00025C, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryPoints::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.SpawnTrajectoryIndicator
// 0x0028 (0x0028 - 0x0000)
struct GA_ThrowConsumable_C_SpawnTrajectoryIndicator final
{
public:
	bool                                          bSpawnOnEquip;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortProjectileTrajectory*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE2[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_SpawnTrajectoryIndicator");
static_assert(sizeof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator) == 0x000028, "Wrong size on GA_ThrowConsumable_C_SpawnTrajectoryIndicator");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, bSpawnOnEquip) == 0x000000, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::bSpawnOnEquip' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, ReturnValue) == 0x000008, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, CallFunc_GetOwningPlayer_Player_Pawn) == 0x000018, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, CallFunc_IsLocallyControlled_ReturnValue) == 0x000020, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, CallFunc_BooleanOR_ReturnValue) == 0x000021, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_SpawnTrajectoryIndicator, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'GA_ThrowConsumable_C_SpawnTrajectoryIndicator::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetSpawnLocationAndRotation
// 0x00B8 (0x00B8 - 0x0000)
struct GA_ThrowConsumable_C_GetSpawnLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetProjectileAdditionalThrowAngleToUse_AdditionalThrowAngleToUse; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE3[0x2];                                     // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetDefaultTargetingRotation_ReturnValue;  // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        CallFunc_GetOwningPlayer_Player_Pawn_1;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSurfaceSwimming_ReturnValue;            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE4[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_NormalizeAxis_ReturnValue;                // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetSpawnLocationAndRotation");
static_assert(sizeof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation) == 0x0000B8, "Wrong size on GA_ThrowConsumable_C_GetSpawnLocationAndRotation");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, Location) == 0x000000, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, Rotation) == 0x00000C, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::Rotation' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_GetProjectileAdditionalThrowAngleToUse_AdditionalThrowAngleToUse) == 0x000018, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_GetProjectileAdditionalThrowAngleToUse_AdditionalThrowAngleToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, Temp_bool_Variable) == 0x00001C, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, Temp_bool_Variable_1) == 0x00001D, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_GetOwningPlayer_Player_Pawn) == 0x000020, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_GetOwningPlayer_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_GetDefaultTargetingRotation_ReturnValue) == 0x000028, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_GetDefaultTargetingRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_GetOwningPlayer_Player_Pawn_1) == 0x000040, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_GetOwningPlayer_Player_Pawn_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000048, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_IsSurfaceSwimming_ReturnValue) == 0x00004C, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_IsSurfaceSwimming_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_NormalizeAxis_ReturnValue) == 0x000050, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_NormalizeAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_FMin_ReturnValue) == 0x000054, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000058, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_MakeRotator_ReturnValue) == 0x000064, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Roll_1) == 0x000070, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Pitch_1) == 0x000074, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_BreakRotator_Yaw_1) == 0x000078, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00007C, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, K2Node_Select_Default) == 0x000088, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, K2Node_Select_Default_1) == 0x000094, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_RotateAngleAxis_ReturnValue) == 0x0000A0, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetSpawnLocationAndRotation, CallFunc_Add_VectorVector_ReturnValue) == 0x0000AC, "Member 'GA_ThrowConsumable_C_GetSpawnLocationAndRotation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetOwningPlayer
// 0x0068 (0x0068 - 0x0000)
struct GA_ThrowConsumable_C_GetOwningPlayer final
{
public:
	class AFortPlayerPawn*                        Player_Pawn;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE5[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityActorInfo              CallFunc_GetActorInfo_ReturnValue;                 // 0x0010(0x0048)(ContainsInstancedReference)
	class AFortPlayerPawn*                        K2Node_DynamicCast_AsFort_Player_Pawn;             // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_GetOwningPlayer) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetOwningPlayer");
static_assert(sizeof(GA_ThrowConsumable_C_GetOwningPlayer) == 0x000068, "Wrong size on GA_ThrowConsumable_C_GetOwningPlayer");
static_assert(offsetof(GA_ThrowConsumable_C_GetOwningPlayer, Player_Pawn) == 0x000000, "Member 'GA_ThrowConsumable_C_GetOwningPlayer::Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetOwningPlayer, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'GA_ThrowConsumable_C_GetOwningPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetOwningPlayer, CallFunc_GetActorInfo_ReturnValue) == 0x000010, "Member 'GA_ThrowConsumable_C_GetOwningPlayer::CallFunc_GetActorInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetOwningPlayer, K2Node_DynamicCast_AsFort_Player_Pawn) == 0x000058, "Member 'GA_ThrowConsumable_C_GetOwningPlayer::K2Node_DynamicCast_AsFort_Player_Pawn' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetOwningPlayer, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'GA_ThrowConsumable_C_GetOwningPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetProjectileAdditionalThrowAngleToUse
// 0x0028 (0x0028 - 0x0000)
struct GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse final
{
public:
	float                                         AdditionalThrowAngleToUse;                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            AbilitySourceWeapon;                               // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetProjectilePitchOffset_ReturnValue;     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5FE7[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5FE8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWeapon*                            CallFunc_GetCurrentSourceWeapon_ReturnValue;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse");
static_assert(sizeof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse) == 0x000028, "Wrong size on GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, AdditionalThrowAngleToUse) == 0x000000, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::AdditionalThrowAngleToUse' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, AbilitySourceWeapon) == 0x000008, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::AbilitySourceWeapon' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, CallFunc_GetProjectilePitchOffset_ReturnValue) == 0x000010, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::CallFunc_GetProjectilePitchOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, CallFunc_IsValid_ReturnValue) == 0x000015, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, CallFunc_SelectFloat_ReturnValue) == 0x000018, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse, CallFunc_GetCurrentSourceWeapon_ReturnValue) == 0x000020, "Member 'GA_ThrowConsumable_C_GetProjectileAdditionalThrowAngleToUse::CallFunc_GetCurrentSourceWeapon_ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.GetProjectileTrajectoryActor
// 0x0008 (0x0008 - 0x0000)
struct GA_ThrowConsumable_C_GetProjectileTrajectoryActor final
{
public:
	TSubclassOf<class AFortProjectileTrajectory>  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(GA_ThrowConsumable_C_GetProjectileTrajectoryActor) == 0x000008, "Wrong alignment on GA_ThrowConsumable_C_GetProjectileTrajectoryActor");
static_assert(sizeof(GA_ThrowConsumable_C_GetProjectileTrajectoryActor) == 0x000008, "Wrong size on GA_ThrowConsumable_C_GetProjectileTrajectoryActor");
static_assert(offsetof(GA_ThrowConsumable_C_GetProjectileTrajectoryActor, ReturnValue) == 0x000000, "Member 'GA_ThrowConsumable_C_GetProjectileTrajectoryActor::ReturnValue' has a wrong offset!");

// Function GA_ThrowConsumable.GA_ThrowConsumable_C.ShouldOnlyShowTrajectoryOnUse
// 0x0001 (0x0001 - 0x0000)
struct GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse) == 0x000001, "Wrong alignment on GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse");
static_assert(sizeof(GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse) == 0x000001, "Wrong size on GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse");
static_assert(offsetof(GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse, ReturnValue) == 0x000000, "Member 'GA_ThrowConsumable_C_ShouldOnlyShowTrajectoryOnUse::ReturnValue' has a wrong offset!");

}

