#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_Quest_Ring

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BGA_BaseQuestObject_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_Quest_Ring.BGA_Quest_Ring_C
// 0x0068 (0x0838 - 0x07D0)
class ABGA_Quest_Ring_C final : public ABGA_BaseQuestObject_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGA_Quest_Ring_C;                   // 0x07D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        SpinAudioLoop;                                     // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  T_Ring;                                            // 0x07F0(0x0020)(Edit, BlueprintVisible)
	class USoundBase*                             SuccessSound;                                      // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        SuccessFX;                                         // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SuccessShakeFeedback;                              // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QuestReady;                                        // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4148[0x7];                                     // 0x0829(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortQuestItemDefinition*               Quest_ID;                                          // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_Quest_Ring(int32 EntryPoint);
	void ReceiveDestroyed();
	void BndEvt__QuestComponent_K2Node_ComponentBoundEvent_4_SimpleQuestComponentDelegate__DelegateSignature(class AFortPlayerController* PlayerController);
	void BndEvt__QuestComponent_K2Node_ComponentBoundEvent_2_SimpleQuestComponentDelegate__DelegateSignature(class AFortPlayerController* PlayerController);
	void BndEvt__QuestComponent_K2Node_ComponentBoundEvent_1_SimpleQuestComponentDelegate__DelegateSignature(class AFortPlayerController* PlayerController);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void UpdateLoopingAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_Quest_Ring_C">();
	}
	static class ABGA_Quest_Ring_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_Quest_Ring_C>();
	}
};
static_assert(alignof(ABGA_Quest_Ring_C) == 0x000008, "Wrong alignment on ABGA_Quest_Ring_C");
static_assert(sizeof(ABGA_Quest_Ring_C) == 0x000838, "Wrong size on ABGA_Quest_Ring_C");
static_assert(offsetof(ABGA_Quest_Ring_C, UberGraphFrame_BGA_Quest_Ring_C) == 0x0007D0, "Member 'ABGA_Quest_Ring_C::UberGraphFrame_BGA_Quest_Ring_C' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, SpinAudioLoop) == 0x0007D8, "Member 'ABGA_Quest_Ring_C::SpinAudioLoop' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, Niagara) == 0x0007E0, "Member 'ABGA_Quest_Ring_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, Sphere) == 0x0007E8, "Member 'ABGA_Quest_Ring_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, T_Ring) == 0x0007F0, "Member 'ABGA_Quest_Ring_C::T_Ring' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, SuccessSound) == 0x000810, "Member 'ABGA_Quest_Ring_C::SuccessSound' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, SuccessFX) == 0x000818, "Member 'ABGA_Quest_Ring_C::SuccessFX' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, SuccessShakeFeedback) == 0x000820, "Member 'ABGA_Quest_Ring_C::SuccessShakeFeedback' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, QuestReady) == 0x000828, "Member 'ABGA_Quest_Ring_C::QuestReady' has a wrong offset!");
static_assert(offsetof(ABGA_Quest_Ring_C, Quest_ID) == 0x000830, "Member 'ABGA_Quest_Ring_C::Quest_ID' has a wrong offset!");

}

