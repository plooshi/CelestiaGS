#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Valet_BasicCar_Vehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "ValetRuntime_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass Valet_BasicCar_Vehicle.Valet_BasicCar_Vehicle_C
// 0x0840 (0x23D0 - 0x1B90)
class AValet_BasicCar_Vehicle_C : public AFortDagwoodVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1B90(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   AudioControllerBP;                                 // 0x1B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FireSystem;                                        // 0x1BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OverlapVolume;                                     // 0x1BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Fade_Fade_C0442AEC47AB69188F18FBB055F64424;        // 0x1BB0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Fade__Direction_C0442AEC47AB69188F18FBB055F64424;  // 0x1BB4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_897F[0x3];                                     // 0x1BB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Fade;                                              // 0x1BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumbleStartTimeline_RumbleIntensity_F99EE4E1475567C5F8F0D3A98F363298; // 0x1BC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostRumbleStartTimeline__Direction_F99EE4E1475567C5F8F0D3A98F363298; // 0x1BC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8980[0x3];                                     // 0x1BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostRumbleStartTimeline;                          // 0x1BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BoostRumbleStopTimeline_RumbleIntensity_DC860F8E4981132637738288A66B9CED; // 0x1BD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BoostRumbleStopTimeline__Direction_DC860F8E4981132637738288A66B9CED; // 0x1BD4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8981[0x3];                                     // 0x1BD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BoostRumbleStopTimeline;                           // 0x1BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892; // 0x1BE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892; // 0x1BE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8982[0x3];                                     // 0x1BE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OutOfFuel;                                         // 0x1BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OnDeathSound;                                      // 0x1BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedForAccelFX;                                // 0x1BF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8983[0x4];                                     // 0x1BFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PassengerPawn;                                     // 0x1C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      DrivingPlayerController;                           // 0x1C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DriverPawn;                                        // 0x1C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        LastDriver;                                        // 0x1C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawnAthena*                  LastHitPlayer;                                     // 0x1C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreHitLastDriver;                               // 0x1C28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PassengerIsInstigator;                             // 0x1C29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8984[0x6];                                     // 0x1C2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         CanLaunchPlayer;                                   // 0x1C30(0x0020)(Edit, BlueprintVisible, Transient)
	class APlayerController*                      PassengerPlayerController;                         // 0x1C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AFortPlayerPawn*>                Passengers;                                        // 0x1C58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Debug_NoCameraShake;                               // 0x1C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8985[0x7];                                     // 0x1C69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                BounceIgnoreList;                                  // 0x1C70(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         DestructionAngle;                                  // 0x1C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedToDestroyObjects;                          // 0x1C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineSoundMaxDistance;                            // 0x1C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedHeadlightValueForMID;                         // 0x1C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SavedDamageValueForMID;                            // 0x1C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8986[0x4];                                     // 0x1C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 VehicleHitActor;                                   // 0x1C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               InWaterFX;                                         // 0x1CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayCueParameters                 GCParamsEmpty;                                     // 0x1CA8(0x00B8)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameplayTag                           HitPlayerCue;                                      // 0x1D60(0x0008)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           HitFiendCue;                                       // 0x1D68(0x0008)(Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WaterMovementSound;                                // 0x1D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             InWaterLoopSound;                                  // 0x1D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterSplashFX;                                   // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        InWaterLoopingFX;                                  // 0x1D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensityFalloff;                       // 0x1D90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8987[0x4];                                     // 0x1D94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DestroyedFX;                                       // 0x1D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   MovementForceFeedback;                             // 0x1DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Movement_CameraShake;                              // 0x1DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Driver_CameraShake;                                // 0x1DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DamageWalls_300;                                // 0x1DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DamageWalls_200;                                // 0x1DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLocalPlayerADS;                                   // 0x1DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8988[0x7];                                     // 0x1DC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 BigHit_CameraShake;                                // 0x1DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   BigHitForceFeedback;                               // 0x1DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SmallHitForceFeedback;                             // 0x1DE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SmallHit_CameraShake;                              // 0x1DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UForceFeedbackEffect*                   SpringCompressionForceFeedback;                    // 0x1DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           DriverCameraShake;                                 // 0x1DF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           OffRoadCamera_Shake;                               // 0x1E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraShakeFalloff;                         // 0x1E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraSpeedForShakes;                       // 0x1E0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadNormalizedSpeedForRumble;                   // 0x1E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraMinFrequency;                         // 0x1E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraMaxFrequency;                         // 0x1E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraY_Amp;                                // 0x1E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraZ_Amp;                                // 0x1E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffRoadCameraRot_Amp;                              // 0x1E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensityPower;                         // 0x1E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AccelRumbleIntensity;                              // 0x1E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LargeRumble;                                       // 0x1E30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8989[0x7];                                     // 0x1E31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 OffRoad_CameraShake;                               // 0x1E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleMaxSpeed;                                   // 0x1E40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactEjectUpVelocity;                             // 0x1E44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ImpactEjectForwardVelocity;                        // 0x1E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_898A[0x4];                                     // 0x1E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 OutOfFuelCameraShake;                              // 0x1E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedForAccelRumble;                            // 0x1E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSkidAmountRequired;                             // 0x1E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TireSkidRumbleFalloff;                             // 0x1E60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForTireSkid;                               // 0x1E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForBrakingSkid;                            // 0x1E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDamageToEjectDriver;                            // 0x1E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WindshieldBreakFX;                                 // 0x1E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           HandbrakeSmoke;                                    // 0x1E78(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           AccelCameraShake;                                  // 0x1E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           HandbrakeCameraShake;                              // 0x1E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Handbrake_CameraShake;                             // 0x1E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraShakeFalloff;                       // 0x1E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraSpeedForShakes;                     // 0x1E9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalizedSpeedForRumble;                          // 0x1EA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraMinFrequency;                       // 0x1EA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraMaxFrequency;                       // 0x1EA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraY_Amp;                              // 0x1EAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraZ_Amp;                              // 0x1EB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HandbrakeCameraRot_Amp;                            // 0x1EB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelLeakPerDrop;                                   // 0x1EB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FuelLeakFrequency;                                 // 0x1EBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           LeakingFuelTimer;                                  // 0x1EC0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bFuelLeaking;                                      // 0x1EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_898B[0x7];                                     // 0x1EC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      LeakObjectTrace;                                   // 0x1ED0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bIsOnFire;                                         // 0x1EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_898C[0x3];                                     // 0x1EE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DripOntoFuelCount;                                 // 0x1EE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DripDistanceCheck;                                 // 0x1EE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_898D[0x4];                                     // 0x1EF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAthena_PlayerController_C*             DamagingPlayerController;                          // 0x1EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        DamagingPlayerPawn;                                // 0x1F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_DamagePlayerHit;                                // 0x1F08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CameraShakeBoost;                                  // 0x1F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCameraShake*                           BoostCameraShake;                                  // 0x1F18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ExplodeFX;                                         // 0x1F20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_RimScrapeDamage;                                // 0x1F28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LowFuelThreshold;                                  // 0x1F30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_898E[0x4];                                     // 0x1F34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             LowFuelWarningSound;                               // 0x1F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             OutOfFuelSound_0;                                  // 0x1F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        PopTireFX;                                         // 0x1F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WheelScrapeSparksFX;                               // 0x1F50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_FR;                                    // 0x1F58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_FL;                                    // 0x1F60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_BR;                                    // 0x1F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocket_BL;                                    // 0x1F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocketBR_Mid;                                 // 0x1F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   WheelSocketBL_Mid;                                 // 0x1F80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MidR_TirePop;                                      // 0x1F88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MidL_TirePop;                                      // 0x1F89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBigRig;                                          // 0x1F8A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_898F[0x5];                                     // 0x1F8B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BodyMID;                                           // 0x1F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageValue;                                       // 0x1F98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8990[0x4];                                     // 0x1F9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WheelScrapeDustFX;                                 // 0x1FA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LaunchVelocity;                                    // 0x1FA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8991[0x4];                                     // 0x1FB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         TargetedActors;                                    // 0x1FB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	class AFortPawn*                              ExplodeInstigator;                                 // 0x1FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UClass*>                         GE_ExplodeBuildingDamage;                          // 0x1FD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      ObjectArray;                                       // 0x1FE0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         ExplodeRadius;                                     // 0x1FF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8992[0x4];                                     // 0x1FF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GE_ExplodePlayerDamage;                            // 0x1FF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ExplodeVehicleDamage;                           // 0x2000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ExplodeVehicleSpin;                                // 0x2008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeVehicleImpulse;                             // 0x2014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Turn_Signal_Update_Frequencey;                     // 0x2018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePontoonRadiusFront;                            // 0x201C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BasePontoonRadiusRear;                             // 0x2020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinPontoonRadiusToSink;                            // 0x2024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReduceRadiusTerTickRear;                           // 0x2028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReduceRadiusTerTickFront;                          // 0x202C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePontoonTickRateFront;                         // 0x2030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePontoonTickRateRear;                          // 0x2034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledPontoonRadiusRear;                           // 0x2038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaledPontoonRadiusFront;                          // 0x203C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScalePontoonTimerFront;                            // 0x2040(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ScalePontoonTimerRear;                             // 0x2048(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FuelGainPerInteract;                               // 0x2050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8993[0x4];                                     // 0x2054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      FX_Road_Interaction_And_Exhaust;                   // 0x2058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimerSnapFoamToWaterSurface;                       // 0x2060(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_LargeSplashFX;                                  // 0x2068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LowFuelSputterSmoke;                            // 0x2070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tire_Popped_FL;                                    // 0x2078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Tire_Popped_FR;                                    // 0x2079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Tire_Popped_RL;                                    // 0x207A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Tire_Popped_RR;                                    // 0x207B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                Wheel_Scale_Rear;                                  // 0x207C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wheel_Scale_Front;                                 // 0x2088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tire_Scale_Rear;                                   // 0x2094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Tire_Scale_Front;                                  // 0x20A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinSpeedForDust;                                   // 0x20AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FX_Dust_Color_Dirt;                                // 0x20B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FX_Dust_Color_Default;                             // 0x20C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LeakingFuel;                                    // 0x20D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8994[0x8];                                     // 0x20D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WindowTransform_F;                                 // 0x20E0(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_FL;                                // 0x2110(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_FR;                                // 0x2140(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_BL;                                // 0x2170(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_BR;                                // 0x21A0(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	struct FTransform                             WindowTransform_B;                                 // 0x21D0(0x0030)(Edit, BlueprintVisible, Transient, IsPlainOldData, NoDestructor)
	bool                                          CanExplodeHack;                                    // 0x2200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          VehicleImpulseOnExplode;                           // 0x2201(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8995[0x2];                                     // 0x2202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplodeSpinThrustMagnitude;                        // 0x2204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         PopTireFXNiagara;                                  // 0x2208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         ExplodeFXNiagara;                                  // 0x2210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_TireSkid;                                       // 0x2218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage1;                                     // 0x2220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage2;                                     // 0x2224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage_Stage3Critical;                             // 0x2228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleFallSpeed;                                  // 0x222C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         WreckFXNiagara;                                    // 0x2230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Vehicle_Radio_C*                    VehicleRadio;                                      // 0x2238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastCollisionTime;                                 // 0x2240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinTimeBetweenCollision;                           // 0x2244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScrapeImpact_Strength;                             // 0x2248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsVehicleOccupied_;                                // 0x224C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8996[0x3];                                     // 0x224D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SportCar;                                          // 0x2250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SportCarUpgrade;                                   // 0x2260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SemiTruck;                                         // 0x2270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LeakingFuel_r;                                  // 0x2280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInDeepWater;                                     // 0x2288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8997[0x3];                                     // 0x2289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumWheels;                                         // 0x228C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 WheelSpringLength;                                 // 0x2290(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         SurfaceChangeTime;                                 // 0x22A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8998[0x4];                                     // 0x22A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AudioControllerClass;                              // 0x22A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDepthToEject;                                   // 0x22B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8999[0x4];                                     // 0x22B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortWaterBodyActor*                    WaterBody;                                         // 0x22B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaterDepthCheckTimer;                              // 0x22C0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Explosion_CameraShake_Radius;                      // 0x22C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnImpactFX_VehicleSpeed;                        // 0x22CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpawnImpactFX_VehicleSpeed_Limit;                  // 0x22D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodeImpulseZ_Magnitude;                         // 0x22D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSpeedToHandbrakeHaptics;                        // 0x22D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExplodePlayerImpulse;                              // 0x22DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePlayerHitImpulseBySpeed;                      // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScalePlayerHitImpulseNoDriver;                     // 0x22E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         RandomMatInt;                                      // 0x22E8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_899A[0x4];                                     // 0x22EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             SK_RandomMat2_Array;                               // 0x22F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             SK_RandomMat0_Array;                               // 0x2300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             SK_RandomMat1_Array;                               // 0x2310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UTexture*                               Diffuse;                                           // 0x2320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Mask;                                              // 0x2328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Normal;                                            // 0x2330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ScratchGrime;                                      // 0x2338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               SpecularMask;                                      // 0x2340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x2348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DestroyedMID;                                      // 0x2350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Primary_Color;                                     // 0x2358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_ApplyInValetTag;                                // 0x2368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  InValetVehicleTag;                                 // 0x2370(0x0020)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	struct FScalableFloat                         HotfixCurieEnabled;                                // 0x2390(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAudioComponent*                        FuelGainedLoop;                                    // 0x23B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             GainFuelSound;                                     // 0x23B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFuelGainPercent;                            // 0x23C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_899B[0x4];                                     // 0x23C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      DamageFX;                                          // 0x23C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_Valet_BasicCar_Vehicle(int32 EntryPoint);
	void SetHeadlightState(EFortDayPhase CurrentDayPhase, EFortDayPhase PreviousDayPhase, bool bAtCreation);
	void CanHitLastDriver();
	void StopDriverCameraShake();
	void StartDriverCameraShake();
	void OnIsSprintingChanged();
	void OnEnterLandscape();
	void OnExitLandscape();
	void HealthChanged();
	void OnSurfaceTypeVehicleIsOnChanged(EPhysicalSurface SurfaceTypeVehicleIsOn);
	void DisolveVehicle(float Param_Fade);
	void CleanupLoopingPooledFX();
	void OnStartCriticalHealth();
	void PickRandomMaterial();
	void OnTickAudioController(float DeltaTime);
	void OnSleepStateChanged(const bool bAwake);
	void FX_RemoveFuelLeaking();
	void CE_ResetWaterFXSnapping();
	void CE_PawnExitVehicleWhileInWater();
	void CE_PawnEnterVehicleWhileInWater();
	void SpawnWreckFX();
	void WaterDepthCheck();
	void KickPlayersFromVehicle();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void DestroyRadio();
	void RadioGo(bool Start, int32 RadioStationIndex);
	void CreateRadio();
	void FadeoutCosmetics(class AActor* DestroyedActor);
	void Update_Damage_State(float Damage);
	void VFX_DamageState(float Damage);
	void BrakingSkid(bool Condition);
	void CE_WaterFX_ResetDeepWaterEffectActivate();
	void SnapFoamtoWaterSurface();
	void OnExitedWaterBody(class AFortWaterBodyActor* Param_WaterBody);
	void OnEnteredWaterBody(class AFortWaterBodyActor* Param_WaterBody);
	void ExplodeCosmetics(class AActor* DestroyedActor);
	void OnLeakingFuelStop();
	void OnLeakingFuelStart();
	void FX_Init_Settings();
	void OnServerAltInteract(class AFortPawn* Pawn);
	void OnClientBeginAltInteract(class AFortPawn* Pawn);
	void ScalePontoonRear();
	void ScalePontoonFront();
	void OnDamageablePartHealthChanged_Event(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, const bool bNewlyDisabled, const bool bNewlyEnabled);
	void ReceiveDestroyed();
	void ResetLastHitPlayer();
	void OnExplode();
	void OnRimScrapeDamage(int32 TireIndex);
	void BoostRumbleStop();
	void StopBoostCameraShake();
	void BP_OnBoostFinished();
	void BP_OnBoostStarted();
	void OnFuelTouchedFire(class AActor* SourceActor);
	void UpdateHandbrakeCameraShake();
	void StopHandbrakeCameraShake();
	void StartHandbrakeCameraShake();
	void AccelCameraShakeEnd();
	void AccelCameraShakeBegin();
	void UpdateOffRoadCameraShake();
	void HandbrakeSkid();
	void StopHandbrakeHaptics();
	void OnStopHandbrake();
	void OnStartHandbrake();
	void BrakingRumbleStop();
	void BrakingRumbleStart();
	void SkidRumbleStart();
	void SkidRumbleStop();
	void TireSkid(bool Condition);
	void OnImpactDamageApplied(const float Damage, const struct FVector& ImpactNormal);
	void ManageAccelRumble();
	void StopOutOfGasRumble();
	void StartOutOfGasRumble();
	void EventOutOfFuel();
	void OnGainedFuel(float NewPercent);
	void DeactivateTireSmoke();
	void ActivateTireSmoke();
	void HandleTireSmoke();
	void ReceiveTick(float DeltaSeconds);
	void UpdateMovementCosmeticParameters();
	void OnCollisionHitEffects(const struct FVector& HitLocation, const struct FVector& HitNormalImpulse, const struct FVector& HitFrictionImpulse, const struct FVector& HitNormal, class AActor* HitActor, EPhysicalSurface HitSurfaceType);
	void StartAccelRumble();
	void StopAccelRumble();
	void OffRoadShakeEnd();
	void OffRoadCameraShake();
	void OnFireStop();
	void OnFireStart();
	void OnHonk();
	void OnPawnEnterVehicle(class AFortPlayerPawn* PlayerPawn, const int32 SeatIdx);
	void OnPawnExitVehicle(class AFortPlayerPawn* PlayerPawn, class FName ExitSocketName);
	void OnHoldExitStopped(class AFortPawn* ExitingPawn);
	void OnHoldExitStarted(class AFortPawn* ExitingPawn, const float ExitDuration);
	void OnStopTick();
	void PawnHitByVehicle(class AFortPawn* Pawn, const struct FVector& ImpactPoint, const struct FVector& ImpactNormal, const struct FVector& LaunchVector);
	void CheckWater();
	void OnExitedWaterVolume(const struct FVector& WaterSurfacePoint);
	void OnEnteredWaterVolume(const struct FVector& WaterSurfacePoint);
	void ReceiveBeginPlay();
	void BndEvt__SkeletalMesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void LocalPassengerADS(bool IsADS);
	void OnDamaged(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FGameplayEffectContextHandle& EffectContext, class AController* EventInstigator, class AActor* DamageCauser);
	void OnSpringCompression();
	void OnCurieActive_1D9CDF534780404ABF0AA6893CD541A6();
	void Fade__UpdateFunc();
	void Fade__FinishedFunc();
	void BoostRumbleStartTimeline__UpdateFunc();
	void BoostRumbleStartTimeline__FinishedFunc();
	void BoostRumbleStopTimeline__UpdateFunc();
	void BoostRumbleStopTimeline__FinishedFunc();
	void OutOfFuel__UpdateFunc();
	void OutOfFuel__FinishedFunc();
	void UserConstructionScript();
	void PlayHapticsOnHit(float HitMagnitude);
	void DestroyOrDamageBuildingPiece(class ABuildingActor* BuildingActor, bool CheckForHealth, class UClass* GameplayEffectClass, float DestroyThreshold);
	void SendHeadlightValueToMaterials(const float ParameterValue);
	void SendDamageValueToMaterials(const float ParameterValue);
	float CalcAccelRumbleIntensity(float MaxIntensity);
	void IsVehicleAccelerating_(float MaxSpeed, bool* Return);
	void Damageable_Part_Changed(const struct FVehicleDamageablePartConfig& PartConfig, const struct FVehicleDamageablePart& Part, bool NewlyDisabled);
	void SetFallInstigator(class AFortPlayerPawnAthena* Pawn);
	struct FVector CalcImpulseDirection(class AActor* Vehicle, float Magnitude);
	void DamageBuildings();
	void TurnSignalsandBrakes();
	void SetFxSettingsForVehicleType();
	void ToggleDustFX(bool InValue);
	void ToggleGlassFX(class FName AttachPointName, const struct FTransform& InTransform);
	void DamgeStateSetAmount();
	void OnRep_RandomMatInt();
	void GenerateRandomInt(const TArray<class UMaterialInterface*>& TargetArray);
	void CreateDestroyedMIDApply();
	void CreateBaseMID();

	void GetIconPlacement(const class AActor* SelfActor, const class AActor* ViewingActor, struct FVector* OutLocation, struct FVector* OutExtents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Valet_BasicCar_Vehicle_C">();
	}
	static class AValet_BasicCar_Vehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AValet_BasicCar_Vehicle_C>();
	}
};
static_assert(alignof(AValet_BasicCar_Vehicle_C) == 0x000010, "Wrong alignment on AValet_BasicCar_Vehicle_C");
static_assert(sizeof(AValet_BasicCar_Vehicle_C) == 0x0023D0, "Wrong size on AValet_BasicCar_Vehicle_C");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, UberGraphFrame) == 0x001B90, "Member 'AValet_BasicCar_Vehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AudioControllerBP) == 0x001B98, "Member 'AValet_BasicCar_Vehicle_C::AudioControllerBP' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FireSystem) == 0x001BA0, "Member 'AValet_BasicCar_Vehicle_C::FireSystem' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OverlapVolume) == 0x001BA8, "Member 'AValet_BasicCar_Vehicle_C::OverlapVolume' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Fade_Fade_C0442AEC47AB69188F18FBB055F64424) == 0x001BB0, "Member 'AValet_BasicCar_Vehicle_C::Fade_Fade_C0442AEC47AB69188F18FBB055F64424' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Fade__Direction_C0442AEC47AB69188F18FBB055F64424) == 0x001BB4, "Member 'AValet_BasicCar_Vehicle_C::Fade__Direction_C0442AEC47AB69188F18FBB055F64424' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Fade) == 0x001BB8, "Member 'AValet_BasicCar_Vehicle_C::Fade' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStartTimeline_RumbleIntensity_F99EE4E1475567C5F8F0D3A98F363298) == 0x001BC0, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStartTimeline_RumbleIntensity_F99EE4E1475567C5F8F0D3A98F363298' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStartTimeline__Direction_F99EE4E1475567C5F8F0D3A98F363298) == 0x001BC4, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStartTimeline__Direction_F99EE4E1475567C5F8F0D3A98F363298' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStartTimeline) == 0x001BC8, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStartTimeline' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStopTimeline_RumbleIntensity_DC860F8E4981132637738288A66B9CED) == 0x001BD0, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStopTimeline_RumbleIntensity_DC860F8E4981132637738288A66B9CED' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStopTimeline__Direction_DC860F8E4981132637738288A66B9CED) == 0x001BD4, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStopTimeline__Direction_DC860F8E4981132637738288A66B9CED' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostRumbleStopTimeline) == 0x001BD8, "Member 'AValet_BasicCar_Vehicle_C::BoostRumbleStopTimeline' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892) == 0x001BE0, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel_Intensity_C83D96E348E80AB3A7B67182D3F6C892' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892) == 0x001BE4, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel__Direction_C83D96E348E80AB3A7B67182D3F6C892' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuel) == 0x001BE8, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuel' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OnDeathSound) == 0x001BF0, "Member 'AValet_BasicCar_Vehicle_C::OnDeathSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedForAccelFX) == 0x001BF8, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedForAccelFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerPawn) == 0x001C00, "Member 'AValet_BasicCar_Vehicle_C::PassengerPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DrivingPlayerController) == 0x001C08, "Member 'AValet_BasicCar_Vehicle_C::DrivingPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DriverPawn) == 0x001C10, "Member 'AValet_BasicCar_Vehicle_C::DriverPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastDriver) == 0x001C18, "Member 'AValet_BasicCar_Vehicle_C::LastDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastHitPlayer) == 0x001C20, "Member 'AValet_BasicCar_Vehicle_C::LastHitPlayer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IgnoreHitLastDriver) == 0x001C28, "Member 'AValet_BasicCar_Vehicle_C::IgnoreHitLastDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerIsInstigator) == 0x001C29, "Member 'AValet_BasicCar_Vehicle_C::PassengerIsInstigator' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CanLaunchPlayer) == 0x001C30, "Member 'AValet_BasicCar_Vehicle_C::CanLaunchPlayer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PassengerPlayerController) == 0x001C50, "Member 'AValet_BasicCar_Vehicle_C::PassengerPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Passengers) == 0x001C58, "Member 'AValet_BasicCar_Vehicle_C::Passengers' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Debug_NoCameraShake) == 0x001C68, "Member 'AValet_BasicCar_Vehicle_C::Debug_NoCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BounceIgnoreList) == 0x001C70, "Member 'AValet_BasicCar_Vehicle_C::BounceIgnoreList' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestructionAngle) == 0x001C80, "Member 'AValet_BasicCar_Vehicle_C::DestructionAngle' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedToDestroyObjects) == 0x001C84, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedToDestroyObjects' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, EngineSoundMaxDistance) == 0x001C88, "Member 'AValet_BasicCar_Vehicle_C::EngineSoundMaxDistance' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SavedHeadlightValueForMID) == 0x001C8C, "Member 'AValet_BasicCar_Vehicle_C::SavedHeadlightValueForMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SavedDamageValueForMID) == 0x001C90, "Member 'AValet_BasicCar_Vehicle_C::SavedDamageValueForMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleHitActor) == 0x001C98, "Member 'AValet_BasicCar_Vehicle_C::VehicleHitActor' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterFX) == 0x001CA0, "Member 'AValet_BasicCar_Vehicle_C::InWaterFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GCParamsEmpty) == 0x001CA8, "Member 'AValet_BasicCar_Vehicle_C::GCParamsEmpty' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HitPlayerCue) == 0x001D60, "Member 'AValet_BasicCar_Vehicle_C::HitPlayerCue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HitFiendCue) == 0x001D68, "Member 'AValet_BasicCar_Vehicle_C::HitFiendCue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterMovementSound) == 0x001D70, "Member 'AValet_BasicCar_Vehicle_C::WaterMovementSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterLoopSound) == 0x001D78, "Member 'AValet_BasicCar_Vehicle_C::InWaterLoopSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterSplashFX) == 0x001D80, "Member 'AValet_BasicCar_Vehicle_C::InWaterSplashFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InWaterLoopingFX) == 0x001D88, "Member 'AValet_BasicCar_Vehicle_C::InWaterLoopingFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensityFalloff) == 0x001D90, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensityFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestroyedFX) == 0x001D98, "Member 'AValet_BasicCar_Vehicle_C::DestroyedFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MovementForceFeedback) == 0x001DA0, "Member 'AValet_BasicCar_Vehicle_C::MovementForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Movement_CameraShake) == 0x001DA8, "Member 'AValet_BasicCar_Vehicle_C::Movement_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Driver_CameraShake) == 0x001DB0, "Member 'AValet_BasicCar_Vehicle_C::Driver_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_DamageWalls_300) == 0x001DB8, "Member 'AValet_BasicCar_Vehicle_C::GE_DamageWalls_300' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_DamageWalls_200) == 0x001DC0, "Member 'AValet_BasicCar_Vehicle_C::GE_DamageWalls_200' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bLocalPlayerADS) == 0x001DC8, "Member 'AValet_BasicCar_Vehicle_C::bLocalPlayerADS' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BigHit_CameraShake) == 0x001DD0, "Member 'AValet_BasicCar_Vehicle_C::BigHit_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BigHitForceFeedback) == 0x001DD8, "Member 'AValet_BasicCar_Vehicle_C::BigHitForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SmallHitForceFeedback) == 0x001DE0, "Member 'AValet_BasicCar_Vehicle_C::SmallHitForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SmallHit_CameraShake) == 0x001DE8, "Member 'AValet_BasicCar_Vehicle_C::SmallHit_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpringCompressionForceFeedback) == 0x001DF0, "Member 'AValet_BasicCar_Vehicle_C::SpringCompressionForceFeedback' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DriverCameraShake) == 0x001DF8, "Member 'AValet_BasicCar_Vehicle_C::DriverCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCamera_Shake) == 0x001E00, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCamera_Shake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraShakeFalloff) == 0x001E08, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraSpeedForShakes) == 0x001E0C, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadNormalizedSpeedForRumble) == 0x001E10, "Member 'AValet_BasicCar_Vehicle_C::OffRoadNormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraMinFrequency) == 0x001E14, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraMaxFrequency) == 0x001E18, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraY_Amp) == 0x001E1C, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraZ_Amp) == 0x001E20, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoadCameraRot_Amp) == 0x001E24, "Member 'AValet_BasicCar_Vehicle_C::OffRoadCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensityPower) == 0x001E28, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensityPower' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelRumbleIntensity) == 0x001E2C, "Member 'AValet_BasicCar_Vehicle_C::AccelRumbleIntensity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LargeRumble) == 0x001E30, "Member 'AValet_BasicCar_Vehicle_C::LargeRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OffRoad_CameraShake) == 0x001E38, "Member 'AValet_BasicCar_Vehicle_C::OffRoad_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleMaxSpeed) == 0x001E40, "Member 'AValet_BasicCar_Vehicle_C::VehicleMaxSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ImpactEjectUpVelocity) == 0x001E44, "Member 'AValet_BasicCar_Vehicle_C::ImpactEjectUpVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ImpactEjectForwardVelocity) == 0x001E48, "Member 'AValet_BasicCar_Vehicle_C::ImpactEjectForwardVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuelCameraShake) == 0x001E50, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuelCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedForAccelRumble) == 0x001E58, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedForAccelRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSkidAmountRequired) == 0x001E5C, "Member 'AValet_BasicCar_Vehicle_C::MinSkidAmountRequired' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TireSkidRumbleFalloff) == 0x001E60, "Member 'AValet_BasicCar_Vehicle_C::TireSkidRumbleFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForTireSkid) == 0x001E64, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForTireSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForBrakingSkid) == 0x001E68, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForBrakingSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinDamageToEjectDriver) == 0x001E6C, "Member 'AValet_BasicCar_Vehicle_C::MinDamageToEjectDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindshieldBreakFX) == 0x001E70, "Member 'AValet_BasicCar_Vehicle_C::WindshieldBreakFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeSmoke) == 0x001E78, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeSmoke' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AccelCameraShake) == 0x001E80, "Member 'AValet_BasicCar_Vehicle_C::AccelCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraShake) == 0x001E88, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Handbrake_CameraShake) == 0x001E90, "Member 'AValet_BasicCar_Vehicle_C::Handbrake_CameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraShakeFalloff) == 0x001E98, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraShakeFalloff' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraSpeedForShakes) == 0x001E9C, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraSpeedForShakes' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NormalizedSpeedForRumble) == 0x001EA0, "Member 'AValet_BasicCar_Vehicle_C::NormalizedSpeedForRumble' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraMinFrequency) == 0x001EA4, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraMinFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraMaxFrequency) == 0x001EA8, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraMaxFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraY_Amp) == 0x001EAC, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraY_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraZ_Amp) == 0x001EB0, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraZ_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HandbrakeCameraRot_Amp) == 0x001EB4, "Member 'AValet_BasicCar_Vehicle_C::HandbrakeCameraRot_Amp' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelLeakPerDrop) == 0x001EB8, "Member 'AValet_BasicCar_Vehicle_C::FuelLeakPerDrop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelLeakFrequency) == 0x001EBC, "Member 'AValet_BasicCar_Vehicle_C::FuelLeakFrequency' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LeakingFuelTimer) == 0x001EC0, "Member 'AValet_BasicCar_Vehicle_C::LeakingFuelTimer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bFuelLeaking) == 0x001EC8, "Member 'AValet_BasicCar_Vehicle_C::bFuelLeaking' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LeakObjectTrace) == 0x001ED0, "Member 'AValet_BasicCar_Vehicle_C::LeakObjectTrace' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, bIsOnFire) == 0x001EE0, "Member 'AValet_BasicCar_Vehicle_C::bIsOnFire' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DripOntoFuelCount) == 0x001EE4, "Member 'AValet_BasicCar_Vehicle_C::DripOntoFuelCount' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DripDistanceCheck) == 0x001EE8, "Member 'AValet_BasicCar_Vehicle_C::DripDistanceCheck' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamagingPlayerController) == 0x001EF8, "Member 'AValet_BasicCar_Vehicle_C::DamagingPlayerController' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamagingPlayerPawn) == 0x001F00, "Member 'AValet_BasicCar_Vehicle_C::DamagingPlayerPawn' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_DamagePlayerHit) == 0x001F08, "Member 'AValet_BasicCar_Vehicle_C::GE_DamagePlayerHit' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CameraShakeBoost) == 0x001F10, "Member 'AValet_BasicCar_Vehicle_C::CameraShakeBoost' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BoostCameraShake) == 0x001F18, "Member 'AValet_BasicCar_Vehicle_C::BoostCameraShake' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeFX) == 0x001F20, "Member 'AValet_BasicCar_Vehicle_C::ExplodeFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_RimScrapeDamage) == 0x001F28, "Member 'AValet_BasicCar_Vehicle_C::GE_RimScrapeDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LowFuelThreshold) == 0x001F30, "Member 'AValet_BasicCar_Vehicle_C::LowFuelThreshold' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LowFuelWarningSound) == 0x001F38, "Member 'AValet_BasicCar_Vehicle_C::LowFuelWarningSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, OutOfFuelSound_0) == 0x001F40, "Member 'AValet_BasicCar_Vehicle_C::OutOfFuelSound_0' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PopTireFX) == 0x001F48, "Member 'AValet_BasicCar_Vehicle_C::PopTireFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelScrapeSparksFX) == 0x001F50, "Member 'AValet_BasicCar_Vehicle_C::WheelScrapeSparksFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_FR) == 0x001F58, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_FL) == 0x001F60, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_BR) == 0x001F68, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_BR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocket_BL) == 0x001F70, "Member 'AValet_BasicCar_Vehicle_C::WheelSocket_BL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocketBR_Mid) == 0x001F78, "Member 'AValet_BasicCar_Vehicle_C::WheelSocketBR_Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSocketBL_Mid) == 0x001F80, "Member 'AValet_BasicCar_Vehicle_C::WheelSocketBL_Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MidR_TirePop) == 0x001F88, "Member 'AValet_BasicCar_Vehicle_C::MidR_TirePop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MidL_TirePop) == 0x001F89, "Member 'AValet_BasicCar_Vehicle_C::MidL_TirePop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsBigRig) == 0x001F8A, "Member 'AValet_BasicCar_Vehicle_C::IsBigRig' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BodyMID) == 0x001F90, "Member 'AValet_BasicCar_Vehicle_C::BodyMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamageValue) == 0x001F98, "Member 'AValet_BasicCar_Vehicle_C::DamageValue' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelScrapeDustFX) == 0x001FA0, "Member 'AValet_BasicCar_Vehicle_C::WheelScrapeDustFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LaunchVelocity) == 0x001FA8, "Member 'AValet_BasicCar_Vehicle_C::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TargetedActors) == 0x001FB8, "Member 'AValet_BasicCar_Vehicle_C::TargetedActors' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeInstigator) == 0x001FC8, "Member 'AValet_BasicCar_Vehicle_C::ExplodeInstigator' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodeBuildingDamage) == 0x001FD0, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodeBuildingDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ObjectArray) == 0x001FE0, "Member 'AValet_BasicCar_Vehicle_C::ObjectArray' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeRadius) == 0x001FF0, "Member 'AValet_BasicCar_Vehicle_C::ExplodeRadius' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodePlayerDamage) == 0x001FF8, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodePlayerDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ExplodeVehicleDamage) == 0x002000, "Member 'AValet_BasicCar_Vehicle_C::GE_ExplodeVehicleDamage' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeVehicleSpin) == 0x002008, "Member 'AValet_BasicCar_Vehicle_C::ExplodeVehicleSpin' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeVehicleImpulse) == 0x002014, "Member 'AValet_BasicCar_Vehicle_C::ExplodeVehicleImpulse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Turn_Signal_Update_Frequencey) == 0x002018, "Member 'AValet_BasicCar_Vehicle_C::Turn_Signal_Update_Frequencey' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BasePontoonRadiusFront) == 0x00201C, "Member 'AValet_BasicCar_Vehicle_C::BasePontoonRadiusFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, BasePontoonRadiusRear) == 0x002020, "Member 'AValet_BasicCar_Vehicle_C::BasePontoonRadiusRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinPontoonRadiusToSink) == 0x002024, "Member 'AValet_BasicCar_Vehicle_C::MinPontoonRadiusToSink' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ReduceRadiusTerTickRear) == 0x002028, "Member 'AValet_BasicCar_Vehicle_C::ReduceRadiusTerTickRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ReduceRadiusTerTickFront) == 0x00202C, "Member 'AValet_BasicCar_Vehicle_C::ReduceRadiusTerTickFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTickRateFront) == 0x002030, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTickRateFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTickRateRear) == 0x002034, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTickRateRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScaledPontoonRadiusRear) == 0x002038, "Member 'AValet_BasicCar_Vehicle_C::ScaledPontoonRadiusRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScaledPontoonRadiusFront) == 0x00203C, "Member 'AValet_BasicCar_Vehicle_C::ScaledPontoonRadiusFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTimerFront) == 0x002040, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTimerFront' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePontoonTimerRear) == 0x002048, "Member 'AValet_BasicCar_Vehicle_C::ScalePontoonTimerRear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelGainPerInteract) == 0x002050, "Member 'AValet_BasicCar_Vehicle_C::FuelGainPerInteract' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Road_Interaction_And_Exhaust) == 0x002058, "Member 'AValet_BasicCar_Vehicle_C::FX_Road_Interaction_And_Exhaust' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, TimerSnapFoamToWaterSurface) == 0x002060, "Member 'AValet_BasicCar_Vehicle_C::TimerSnapFoamToWaterSurface' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NS_LargeSplashFX) == 0x002068, "Member 'AValet_BasicCar_Vehicle_C::NS_LargeSplashFX' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LowFuelSputterSmoke) == 0x002070, "Member 'AValet_BasicCar_Vehicle_C::FX_LowFuelSputterSmoke' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_FL) == 0x002078, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_FR) == 0x002079, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_RL) == 0x00207A, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_RL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Popped_RR) == 0x00207B, "Member 'AValet_BasicCar_Vehicle_C::Tire_Popped_RR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scale_Rear) == 0x00207C, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scale_Rear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Wheel_Scale_Front) == 0x002088, "Member 'AValet_BasicCar_Vehicle_C::Wheel_Scale_Front' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Scale_Rear) == 0x002094, "Member 'AValet_BasicCar_Vehicle_C::Tire_Scale_Rear' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Tire_Scale_Front) == 0x0020A0, "Member 'AValet_BasicCar_Vehicle_C::Tire_Scale_Front' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinSpeedForDust) == 0x0020AC, "Member 'AValet_BasicCar_Vehicle_C::MinSpeedForDust' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Dust_Color_Dirt) == 0x0020B0, "Member 'AValet_BasicCar_Vehicle_C::FX_Dust_Color_Dirt' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_Dust_Color_Default) == 0x0020C0, "Member 'AValet_BasicCar_Vehicle_C::FX_Dust_Color_Default' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LeakingFuel) == 0x0020D0, "Member 'AValet_BasicCar_Vehicle_C::FX_LeakingFuel' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_F) == 0x0020E0, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_F' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_FL) == 0x002110, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_FL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_FR) == 0x002140, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_FR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_BL) == 0x002170, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_BL' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_BR) == 0x0021A0, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_BR' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WindowTransform_B) == 0x0021D0, "Member 'AValet_BasicCar_Vehicle_C::WindowTransform_B' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CanExplodeHack) == 0x002200, "Member 'AValet_BasicCar_Vehicle_C::CanExplodeHack' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleImpulseOnExplode) == 0x002201, "Member 'AValet_BasicCar_Vehicle_C::VehicleImpulseOnExplode' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeSpinThrustMagnitude) == 0x002204, "Member 'AValet_BasicCar_Vehicle_C::ExplodeSpinThrustMagnitude' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, PopTireFXNiagara) == 0x002208, "Member 'AValet_BasicCar_Vehicle_C::PopTireFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeFXNiagara) == 0x002210, "Member 'AValet_BasicCar_Vehicle_C::ExplodeFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_TireSkid) == 0x002218, "Member 'AValet_BasicCar_Vehicle_C::FX_TireSkid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage1) == 0x002220, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage1' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage2) == 0x002224, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage2' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Damage_Stage3Critical) == 0x002228, "Member 'AValet_BasicCar_Vehicle_C::Damage_Stage3Critical' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleFallSpeed) == 0x00222C, "Member 'AValet_BasicCar_Vehicle_C::VehicleFallSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WreckFXNiagara) == 0x002230, "Member 'AValet_BasicCar_Vehicle_C::WreckFXNiagara' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, VehicleRadio) == 0x002238, "Member 'AValet_BasicCar_Vehicle_C::VehicleRadio' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, LastCollisionTime) == 0x002240, "Member 'AValet_BasicCar_Vehicle_C::LastCollisionTime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MinTimeBetweenCollision) == 0x002244, "Member 'AValet_BasicCar_Vehicle_C::MinTimeBetweenCollision' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScrapeImpact_Strength) == 0x002248, "Member 'AValet_BasicCar_Vehicle_C::ScrapeImpact_Strength' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsVehicleOccupied_) == 0x00224C, "Member 'AValet_BasicCar_Vehicle_C::IsVehicleOccupied_' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SportCar) == 0x002250, "Member 'AValet_BasicCar_Vehicle_C::SportCar' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SportCarUpgrade) == 0x002260, "Member 'AValet_BasicCar_Vehicle_C::SportCarUpgrade' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SemiTruck) == 0x002270, "Member 'AValet_BasicCar_Vehicle_C::SemiTruck' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FX_LeakingFuel_r) == 0x002280, "Member 'AValet_BasicCar_Vehicle_C::FX_LeakingFuel_r' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, IsInDeepWater) == 0x002288, "Member 'AValet_BasicCar_Vehicle_C::IsInDeepWater' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, NumWheels) == 0x00228C, "Member 'AValet_BasicCar_Vehicle_C::NumWheels' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WheelSpringLength) == 0x002290, "Member 'AValet_BasicCar_Vehicle_C::WheelSpringLength' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SurfaceChangeTime) == 0x0022A0, "Member 'AValet_BasicCar_Vehicle_C::SurfaceChangeTime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, AudioControllerClass) == 0x0022A8, "Member 'AValet_BasicCar_Vehicle_C::AudioControllerClass' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxDepthToEject) == 0x0022B0, "Member 'AValet_BasicCar_Vehicle_C::MaxDepthToEject' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterBody) == 0x0022B8, "Member 'AValet_BasicCar_Vehicle_C::WaterBody' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, WaterDepthCheckTimer) == 0x0022C0, "Member 'AValet_BasicCar_Vehicle_C::WaterDepthCheckTimer' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Explosion_CameraShake_Radius) == 0x0022C8, "Member 'AValet_BasicCar_Vehicle_C::Explosion_CameraShake_Radius' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpawnImpactFX_VehicleSpeed) == 0x0022CC, "Member 'AValet_BasicCar_Vehicle_C::SpawnImpactFX_VehicleSpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpawnImpactFX_VehicleSpeed_Limit) == 0x0022D0, "Member 'AValet_BasicCar_Vehicle_C::SpawnImpactFX_VehicleSpeed_Limit' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodeImpulseZ_Magnitude) == 0x0022D4, "Member 'AValet_BasicCar_Vehicle_C::ExplodeImpulseZ_Magnitude' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, MaxSpeedToHandbrakeHaptics) == 0x0022D8, "Member 'AValet_BasicCar_Vehicle_C::MaxSpeedToHandbrakeHaptics' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ExplodePlayerImpulse) == 0x0022DC, "Member 'AValet_BasicCar_Vehicle_C::ExplodePlayerImpulse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePlayerHitImpulseBySpeed) == 0x0022E0, "Member 'AValet_BasicCar_Vehicle_C::ScalePlayerHitImpulseBySpeed' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScalePlayerHitImpulseNoDriver) == 0x0022E4, "Member 'AValet_BasicCar_Vehicle_C::ScalePlayerHitImpulseNoDriver' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, RandomMatInt) == 0x0022E8, "Member 'AValet_BasicCar_Vehicle_C::RandomMatInt' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat2_Array) == 0x0022F0, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat2_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat0_Array) == 0x002300, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat0_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SK_RandomMat1_Array) == 0x002310, "Member 'AValet_BasicCar_Vehicle_C::SK_RandomMat1_Array' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Diffuse) == 0x002320, "Member 'AValet_BasicCar_Vehicle_C::Diffuse' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Mask) == 0x002328, "Member 'AValet_BasicCar_Vehicle_C::Mask' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Normal) == 0x002330, "Member 'AValet_BasicCar_Vehicle_C::Normal' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, ScratchGrime) == 0x002338, "Member 'AValet_BasicCar_Vehicle_C::ScratchGrime' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, SpecularMask) == 0x002340, "Member 'AValet_BasicCar_Vehicle_C::SpecularMask' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Mid) == 0x002348, "Member 'AValet_BasicCar_Vehicle_C::Mid' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DestroyedMID) == 0x002350, "Member 'AValet_BasicCar_Vehicle_C::DestroyedMID' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, Primary_Color) == 0x002358, "Member 'AValet_BasicCar_Vehicle_C::Primary_Color' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GE_ApplyInValetTag) == 0x002368, "Member 'AValet_BasicCar_Vehicle_C::GE_ApplyInValetTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, InValetVehicleTag) == 0x002370, "Member 'AValet_BasicCar_Vehicle_C::InValetVehicleTag' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, HotfixCurieEnabled) == 0x002390, "Member 'AValet_BasicCar_Vehicle_C::HotfixCurieEnabled' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, FuelGainedLoop) == 0x0023B0, "Member 'AValet_BasicCar_Vehicle_C::FuelGainedLoop' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, GainFuelSound) == 0x0023B8, "Member 'AValet_BasicCar_Vehicle_C::GainFuelSound' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, CurrentFuelGainPercent) == 0x0023C0, "Member 'AValet_BasicCar_Vehicle_C::CurrentFuelGainPercent' has a wrong offset!");
static_assert(offsetof(AValet_BasicCar_Vehicle_C, DamageFX) == 0x0023C8, "Member 'AValet_BasicCar_Vehicle_C::DamageFX' has a wrong offset!");

}

