#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function AmbientAudio.AmbientAudioStatics.AddAmbientEntry
// 0x0020 (0x0020 - 0x0000)
struct AmbientAudioStatics_AddAmbientEntry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AmbientName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmbientAudioDataAsset*                 Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossfadeTime;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioStatics_AddAmbientEntry) == 0x000008, "Wrong alignment on AmbientAudioStatics_AddAmbientEntry");
static_assert(sizeof(AmbientAudioStatics_AddAmbientEntry) == 0x000020, "Wrong size on AmbientAudioStatics_AddAmbientEntry");
static_assert(offsetof(AmbientAudioStatics_AddAmbientEntry, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_AddAmbientEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_AddAmbientEntry, AmbientName) == 0x000008, "Member 'AmbientAudioStatics_AddAmbientEntry::AmbientName' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_AddAmbientEntry, Asset) == 0x000010, "Member 'AmbientAudioStatics_AddAmbientEntry::Asset' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_AddAmbientEntry, Priority) == 0x000018, "Member 'AmbientAudioStatics_AddAmbientEntry::Priority' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_AddAmbientEntry, CrossfadeTime) == 0x00001C, "Member 'AmbientAudioStatics_AddAmbientEntry::CrossfadeTime' has a wrong offset!");

// Function AmbientAudio.AmbientAudioStatics.AddAmbientGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioStatics_AddAmbientGameplayTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioStatics_AddAmbientGameplayTag) == 0x000008, "Wrong alignment on AmbientAudioStatics_AddAmbientGameplayTag");
static_assert(sizeof(AmbientAudioStatics_AddAmbientGameplayTag) == 0x000010, "Wrong size on AmbientAudioStatics_AddAmbientGameplayTag");
static_assert(offsetof(AmbientAudioStatics_AddAmbientGameplayTag, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_AddAmbientGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_AddAmbientGameplayTag, GameplayTag) == 0x000008, "Member 'AmbientAudioStatics_AddAmbientGameplayTag::GameplayTag' has a wrong offset!");

// Function AmbientAudio.AmbientAudioStatics.CreateAudioComponent
// 0x0018 (0x0018 - 0x0000)
struct AmbientAudioStatics_CreateAudioComponent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioStatics_CreateAudioComponent) == 0x000008, "Wrong alignment on AmbientAudioStatics_CreateAudioComponent");
static_assert(sizeof(AmbientAudioStatics_CreateAudioComponent) == 0x000018, "Wrong size on AmbientAudioStatics_CreateAudioComponent");
static_assert(offsetof(AmbientAudioStatics_CreateAudioComponent, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_CreateAudioComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_CreateAudioComponent, Sound) == 0x000008, "Member 'AmbientAudioStatics_CreateAudioComponent::Sound' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_CreateAudioComponent, ReturnValue) == 0x000010, "Member 'AmbientAudioStatics_CreateAudioComponent::ReturnValue' has a wrong offset!");

// Function AmbientAudio.AmbientAudioStatics.PlaySoundAtLocation
// 0x0020 (0x0020 - 0x0000)
struct AmbientAudioStatics_PlaySoundAtLocation final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C6[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioStatics_PlaySoundAtLocation) == 0x000008, "Wrong alignment on AmbientAudioStatics_PlaySoundAtLocation");
static_assert(sizeof(AmbientAudioStatics_PlaySoundAtLocation) == 0x000020, "Wrong size on AmbientAudioStatics_PlaySoundAtLocation");
static_assert(offsetof(AmbientAudioStatics_PlaySoundAtLocation, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_PlaySoundAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_PlaySoundAtLocation, Sound) == 0x000008, "Member 'AmbientAudioStatics_PlaySoundAtLocation::Sound' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_PlaySoundAtLocation, Location) == 0x000010, "Member 'AmbientAudioStatics_PlaySoundAtLocation::Location' has a wrong offset!");

// Function AmbientAudio.AmbientAudioStatics.RemoveAmbientEntry
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioStatics_RemoveAmbientEntry final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AmbientName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioStatics_RemoveAmbientEntry) == 0x000008, "Wrong alignment on AmbientAudioStatics_RemoveAmbientEntry");
static_assert(sizeof(AmbientAudioStatics_RemoveAmbientEntry) == 0x000010, "Wrong size on AmbientAudioStatics_RemoveAmbientEntry");
static_assert(offsetof(AmbientAudioStatics_RemoveAmbientEntry, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_RemoveAmbientEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_RemoveAmbientEntry, AmbientName) == 0x000008, "Member 'AmbientAudioStatics_RemoveAmbientEntry::AmbientName' has a wrong offset!");

// Function AmbientAudio.AmbientAudioStatics.RemoveAmbientGameplayTag
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioStatics_RemoveAmbientGameplayTag final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameplayTag;                                       // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioStatics_RemoveAmbientGameplayTag) == 0x000008, "Wrong alignment on AmbientAudioStatics_RemoveAmbientGameplayTag");
static_assert(sizeof(AmbientAudioStatics_RemoveAmbientGameplayTag) == 0x000010, "Wrong size on AmbientAudioStatics_RemoveAmbientGameplayTag");
static_assert(offsetof(AmbientAudioStatics_RemoveAmbientGameplayTag, WorldContextObject) == 0x000000, "Member 'AmbientAudioStatics_RemoveAmbientGameplayTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioStatics_RemoveAmbientGameplayTag, GameplayTag) == 0x000008, "Member 'AmbientAudioStatics_RemoveAmbientGameplayTag::GameplayTag' has a wrong offset!");

// Function AmbientAudio.AmbientAudioSubsystem.AddAmbientEntry
// 0x0018 (0x0018 - 0x0000)
struct AmbientAudioSubsystem_AddAmbientEntry final
{
public:
	class FName                                   AmbientName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAmbientAudioDataAsset*                 Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrossfadeTime;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioSubsystem_AddAmbientEntry) == 0x000008, "Wrong alignment on AmbientAudioSubsystem_AddAmbientEntry");
static_assert(sizeof(AmbientAudioSubsystem_AddAmbientEntry) == 0x000018, "Wrong size on AmbientAudioSubsystem_AddAmbientEntry");
static_assert(offsetof(AmbientAudioSubsystem_AddAmbientEntry, AmbientName) == 0x000000, "Member 'AmbientAudioSubsystem_AddAmbientEntry::AmbientName' has a wrong offset!");
static_assert(offsetof(AmbientAudioSubsystem_AddAmbientEntry, Asset) == 0x000008, "Member 'AmbientAudioSubsystem_AddAmbientEntry::Asset' has a wrong offset!");
static_assert(offsetof(AmbientAudioSubsystem_AddAmbientEntry, Priority) == 0x000010, "Member 'AmbientAudioSubsystem_AddAmbientEntry::Priority' has a wrong offset!");
static_assert(offsetof(AmbientAudioSubsystem_AddAmbientEntry, CrossfadeTime) == 0x000014, "Member 'AmbientAudioSubsystem_AddAmbientEntry::CrossfadeTime' has a wrong offset!");

// Function AmbientAudio.AmbientAudioSubsystem.AddGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct AmbientAudioSubsystem_AddGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioSubsystem_AddGameplayTag) == 0x000004, "Wrong alignment on AmbientAudioSubsystem_AddGameplayTag");
static_assert(sizeof(AmbientAudioSubsystem_AddGameplayTag) == 0x000008, "Wrong size on AmbientAudioSubsystem_AddGameplayTag");
static_assert(offsetof(AmbientAudioSubsystem_AddGameplayTag, GameplayTag) == 0x000000, "Member 'AmbientAudioSubsystem_AddGameplayTag::GameplayTag' has a wrong offset!");

// Function AmbientAudio.AmbientAudioSubsystem.RemoveAmbientEntry
// 0x0008 (0x0008 - 0x0000)
struct AmbientAudioSubsystem_RemoveAmbientEntry final
{
public:
	class FName                                   AmbientName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioSubsystem_RemoveAmbientEntry) == 0x000004, "Wrong alignment on AmbientAudioSubsystem_RemoveAmbientEntry");
static_assert(sizeof(AmbientAudioSubsystem_RemoveAmbientEntry) == 0x000008, "Wrong size on AmbientAudioSubsystem_RemoveAmbientEntry");
static_assert(offsetof(AmbientAudioSubsystem_RemoveAmbientEntry, AmbientName) == 0x000000, "Member 'AmbientAudioSubsystem_RemoveAmbientEntry::AmbientName' has a wrong offset!");

// Function AmbientAudio.AmbientAudioSubsystem.RemoveGameplayTag
// 0x0008 (0x0008 - 0x0000)
struct AmbientAudioSubsystem_RemoveGameplayTag final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioSubsystem_RemoveGameplayTag) == 0x000004, "Wrong alignment on AmbientAudioSubsystem_RemoveGameplayTag");
static_assert(sizeof(AmbientAudioSubsystem_RemoveGameplayTag) == 0x000008, "Wrong size on AmbientAudioSubsystem_RemoveGameplayTag");
static_assert(offsetof(AmbientAudioSubsystem_RemoveGameplayTag, GameplayTag) == 0x000000, "Member 'AmbientAudioSubsystem_RemoveGameplayTag::GameplayTag' has a wrong offset!");

// Function AmbientAudio.AmbientVolume.SetAmbientAsset
// 0x0008 (0x0008 - 0x0000)
struct AmbientVolume_SetAmbientAsset final
{
public:
	class UAmbientAudioDataAsset*                 NewAmbientAsset;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientVolume_SetAmbientAsset) == 0x000008, "Wrong alignment on AmbientVolume_SetAmbientAsset");
static_assert(sizeof(AmbientVolume_SetAmbientAsset) == 0x000008, "Wrong size on AmbientVolume_SetAmbientAsset");
static_assert(offsetof(AmbientVolume_SetAmbientAsset, NewAmbientAsset) == 0x000000, "Member 'AmbientVolume_SetAmbientAsset::NewAmbientAsset' has a wrong offset!");

// Function AmbientAudio.AmbientVolume.SetCrossfadeTime
// 0x0004 (0x0004 - 0x0000)
struct AmbientVolume_SetCrossfadeTime final
{
public:
	float                                         NewCrossfadeTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientVolume_SetCrossfadeTime) == 0x000004, "Wrong alignment on AmbientVolume_SetCrossfadeTime");
static_assert(sizeof(AmbientVolume_SetCrossfadeTime) == 0x000004, "Wrong size on AmbientVolume_SetCrossfadeTime");
static_assert(offsetof(AmbientVolume_SetCrossfadeTime, NewCrossfadeTime) == 0x000000, "Member 'AmbientVolume_SetCrossfadeTime::NewCrossfadeTime' has a wrong offset!");

// Function AmbientAudio.AmbientVolume.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct AmbientVolume_SetEnabled final
{
public:
	bool                                          bNewEnabled;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientVolume_SetEnabled) == 0x000001, "Wrong alignment on AmbientVolume_SetEnabled");
static_assert(sizeof(AmbientVolume_SetEnabled) == 0x000001, "Wrong size on AmbientVolume_SetEnabled");
static_assert(offsetof(AmbientVolume_SetEnabled, bNewEnabled) == 0x000000, "Member 'AmbientVolume_SetEnabled::bNewEnabled' has a wrong offset!");

// Function AmbientAudio.AmbientVolume.SetPriority
// 0x0004 (0x0004 - 0x0000)
struct AmbientVolume_SetPriority final
{
public:
	int32                                         NewPriority;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientVolume_SetPriority) == 0x000004, "Wrong alignment on AmbientVolume_SetPriority");
static_assert(sizeof(AmbientVolume_SetPriority) == 0x000004, "Wrong size on AmbientVolume_SetPriority");
static_assert(offsetof(AmbientVolume_SetPriority, NewPriority) == 0x000000, "Member 'AmbientVolume_SetPriority::NewPriority' has a wrong offset!");

}

