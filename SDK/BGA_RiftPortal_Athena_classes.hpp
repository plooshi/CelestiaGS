#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGA_RiftPortal_Athena

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BGA_RiftPortal_Athena.BGA_RiftPortal_Athena_C
// 0x01F0 (0x0A18 - 0x0828)
class ABGA_RiftPortal_Athena_C final : public AFortAthenaRiftPortal
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0828(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPostProcessComponent*                  RiftPostProcess;                                   // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PostProcessRadius;                                 // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_RiftClosingUp;                                   // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Rift_Idle_Loop;                                  // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      OverlapCapsule;                                    // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Rift;                                           // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Looping;                                     // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352; // 0x0870(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352; // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352; // 0x0878(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C1[0x7];                                     // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FragmentMovement;                                  // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41; // 0x0888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41; // 0x088C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C2[0x3];                                     // 0x088D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Audio_RiftDestroyed;                               // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9; // 0x0898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9; // 0x089C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C3[0x3];                                     // 0x089D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     VectorScale;                                       // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DeathEffects;                                      // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             EnteredRift;                                       // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             RiftDestroyed;                                     // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x08C0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TeleportLocation;                                  // 0x08C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C4[0x4];                                     // 0x08D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        EnterRift;                                         // 0x08D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PortalOpen;                                        // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49C5[0x7];                                     // 0x08E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FallingAnimation;                                  // 0x08E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         TeleportHeight;                                    // 0x08F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ActiveDuration;                                    // 0x0910(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         HangTime;                                          // 0x0930(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TeleportDelay;                                     // 0x0950(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49C6[0x4];                                     // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AFortPlayerPawn*>                PassengerArray;                                    // 0x0958(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, HasGetValueTypeHash)
	class UParticleSystem*                        CrackExitRift;                                     // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             PlayerExitSkyCrack;                                // 0x0970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MaxSpawnHeight;                                    // 0x0978(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ActorOriginalLocation;                             // 0x0998(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSpawnHeightMultiplier;                          // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               QuestItem;                                         // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ObjectiveBackendName;                              // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortQuestItemDefinition*               RiftPortalLocationsQuest;                          // 0x09B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CreativeMode;                                      // 0x09C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49C7[0x7];                                     // 0x09C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OverlapActor;                                      // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ActorRotation;                                     // 0x09D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49C8[0x4];                                     // 0x09DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         ShouldSpawnRift_;                                  // 0x09E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TScriptInterface<class IFortVehicleInterface> FortVehicleInterface;                              // 0x0A00(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          PermanentRift;                                     // 0x0A10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49C9[0x3];                                     // 0x0A11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomRange;                                       // 0x0A14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGA_RiftPortal_Athena(int32 EntryPoint);
	void ResetRift();
	void OverlappingOnBeginPlay(class AActor* Actor);
	void PlaylistLoaded(class FName PlaylistName, const struct FGameplayTagContainer& PlaylistContextTags);
	void ResetFX();
	void PortalOpened();
	void PlayTeleportFX(const struct FVector& Location);
	void ReceiveBeginPlay();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__OverlapCapsule_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void DestroyRift();
	void FragmentMovement__UpdateFunc();
	void FragmentMovement__FinishedFunc();
	void VectorScale__UpdateFunc();
	void VectorScale__FinishedFunc();
	void Audio_RiftDestroyed__UpdateFunc();
	void Audio_RiftDestroyed__FinishedFunc();
	void PlayExpandOrCollapseAudio(bool Expand);
	void OnRep_TeleportLocation();
	void OnRep_Vehicle();
	void OnRep_PlayerPawn();
	void UseRiftQuestUpdate(class AController* InController);
	void CheckForRiftLocUpdate(class AController* Controller);
	bool Is_Flying();
	void QuestUpdateComplexCustom(class AFortPlayerPawn* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGA_RiftPortal_Athena_C">();
	}
	static class ABGA_RiftPortal_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABGA_RiftPortal_Athena_C>();
	}
};
static_assert(alignof(ABGA_RiftPortal_Athena_C) == 0x000008, "Wrong alignment on ABGA_RiftPortal_Athena_C");
static_assert(sizeof(ABGA_RiftPortal_Athena_C) == 0x000A18, "Wrong size on ABGA_RiftPortal_Athena_C");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, UberGraphFrame) == 0x000828, "Member 'ABGA_RiftPortal_Athena_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftPostProcess) == 0x000830, "Member 'ABGA_RiftPortal_Athena_C::RiftPostProcess' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PostProcessRadius) == 0x000838, "Member 'ABGA_RiftPortal_Athena_C::PostProcessRadius' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, P_RiftClosingUp) == 0x000840, "Member 'ABGA_RiftPortal_Athena_C::P_RiftClosingUp' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, P_Rift_Idle_Loop) == 0x000848, "Member 'ABGA_RiftPortal_Athena_C::P_Rift_Idle_Loop' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, OverlapCapsule) == 0x000850, "Member 'ABGA_RiftPortal_Athena_C::OverlapCapsule' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Capsule) == 0x000858, "Member 'ABGA_RiftPortal_Athena_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, SM_Rift) == 0x000860, "Member 'ABGA_RiftPortal_Athena_C::SM_Rift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_Looping) == 0x000868, "Member 'ABGA_RiftPortal_Athena_C::Audio_Looping' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352) == 0x000870, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement_Glow_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352) == 0x000874, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement_Open_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352) == 0x000878, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement__Direction_0216837E42A17FBFE0B65F9D47929352' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FragmentMovement) == 0x000880, "Member 'ABGA_RiftPortal_Athena_C::FragmentMovement' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41) == 0x000888, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed_PitchCurve_FD5644F8499DCD599737CE8E444A6A41' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41) == 0x00088C, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed__Direction_FD5644F8499DCD599737CE8E444A6A41' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, Audio_RiftDestroyed) == 0x000890, "Member 'ABGA_RiftPortal_Athena_C::Audio_RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9) == 0x000898, "Member 'ABGA_RiftPortal_Athena_C::VectorScale_Open_E8FFA9954C20AF01A2B5FBA7F5A6D4B9' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9) == 0x00089C, "Member 'ABGA_RiftPortal_Athena_C::VectorScale__Direction_E8FFA9954C20AF01A2B5FBA7F5A6D4B9' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, VectorScale) == 0x0008A0, "Member 'ABGA_RiftPortal_Athena_C::VectorScale' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, DeathEffects) == 0x0008A8, "Member 'ABGA_RiftPortal_Athena_C::DeathEffects' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, EnteredRift) == 0x0008B0, "Member 'ABGA_RiftPortal_Athena_C::EnteredRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftDestroyed) == 0x0008B8, "Member 'ABGA_RiftPortal_Athena_C::RiftDestroyed' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PlayerPawn) == 0x0008C0, "Member 'ABGA_RiftPortal_Athena_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportLocation) == 0x0008C8, "Member 'ABGA_RiftPortal_Athena_C::TeleportLocation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, EnterRift) == 0x0008D8, "Member 'ABGA_RiftPortal_Athena_C::EnterRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PortalOpen) == 0x0008E0, "Member 'ABGA_RiftPortal_Athena_C::PortalOpen' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FallingAnimation) == 0x0008E8, "Member 'ABGA_RiftPortal_Athena_C::FallingAnimation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportHeight) == 0x0008F0, "Member 'ABGA_RiftPortal_Athena_C::TeleportHeight' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActiveDuration) == 0x000910, "Member 'ABGA_RiftPortal_Athena_C::ActiveDuration' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, HangTime) == 0x000930, "Member 'ABGA_RiftPortal_Athena_C::HangTime' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, TeleportDelay) == 0x000950, "Member 'ABGA_RiftPortal_Athena_C::TeleportDelay' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PassengerArray) == 0x000958, "Member 'ABGA_RiftPortal_Athena_C::PassengerArray' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, CrackExitRift) == 0x000968, "Member 'ABGA_RiftPortal_Athena_C::CrackExitRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PlayerExitSkyCrack) == 0x000970, "Member 'ABGA_RiftPortal_Athena_C::PlayerExitSkyCrack' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, MaxSpawnHeight) == 0x000978, "Member 'ABGA_RiftPortal_Athena_C::MaxSpawnHeight' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActorOriginalLocation) == 0x000998, "Member 'ABGA_RiftPortal_Athena_C::ActorOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, MaxSpawnHeightMultiplier) == 0x0009A4, "Member 'ABGA_RiftPortal_Athena_C::MaxSpawnHeightMultiplier' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, QuestItem) == 0x0009A8, "Member 'ABGA_RiftPortal_Athena_C::QuestItem' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ObjectiveBackendName) == 0x0009B0, "Member 'ABGA_RiftPortal_Athena_C::ObjectiveBackendName' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RiftPortalLocationsQuest) == 0x0009B8, "Member 'ABGA_RiftPortal_Athena_C::RiftPortalLocationsQuest' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, CreativeMode) == 0x0009C0, "Member 'ABGA_RiftPortal_Athena_C::CreativeMode' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, OverlapActor) == 0x0009C8, "Member 'ABGA_RiftPortal_Athena_C::OverlapActor' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ActorRotation) == 0x0009D0, "Member 'ABGA_RiftPortal_Athena_C::ActorRotation' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, ShouldSpawnRift_) == 0x0009E0, "Member 'ABGA_RiftPortal_Athena_C::ShouldSpawnRift_' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, FortVehicleInterface) == 0x000A00, "Member 'ABGA_RiftPortal_Athena_C::FortVehicleInterface' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, PermanentRift) == 0x000A10, "Member 'ABGA_RiftPortal_Athena_C::PermanentRift' has a wrong offset!");
static_assert(offsetof(ABGA_RiftPortal_Athena_C, RandomRange) == 0x000A14, "Member 'ABGA_RiftPortal_Athena_C::RandomRange' has a wrong offset!");

}

