#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_BasketballHoopWithMinigame_TALL

#include "Basic.hpp"

#include "Struct_BasketballMinigame_Message_structs.hpp"
#include "B_BuildingPropToy_QuestMiniGame_Parent_classes.hpp"
#include "Engine_structs.hpp"
#include "Struct_BasketballMinigame_State_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_BasketballHoopWithMinigame_TALL.B_BasketballHoopWithMinigame_TALL_C
// 0x00F8 (0x0DD8 - 0x0CE0)
class AB_BasketballHoopWithMinigame_TALL_C final : public AB_BuildingPropToy_QuestMiniGame_Parent_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_BasketballHoopWithMinigame_TALL_C; // 0x0CE0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          HoopTriggerBox;                                    // 0x0CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         MessageSN;                                         // 0x0CF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8879[0x7];                                     // 0x0CF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStruct_BasketballMinigame_Message     DisplayMessage;                                    // 0x0CF8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	TMap<class AFortPlayerController*, struct FStruct_BasketballMinigame_State> ScoreMap;                                          // 0x0D10(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FText                                   FirstShot_WithDistance;                            // 0x0D60(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SubsequentShot_WithDistance;                       // 0x0D78(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   FirstShot_NoDistance;                              // 0x0D90(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SubsequentShot_NoDistance;                         // 0x0DA8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ThreePointThresholdDistanceInM;                    // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistanceToPrint;                                // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistanceForTeamRelevance;                       // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_887A[0x4];                                     // 0x0DCC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerController*                  PC_That_Scored;                                    // 0x0DD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_BasketballHoopWithMinigame_TALL(int32 EntryPoint);
	void BndEvt__HoopTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void GradeScore(class AB_ToyBasketball_Base_C* Ball, int32* NumPoints, float* TotalDistance);
	void CreateMessage(class AFortPlayerState* PlayerWhoShot, float TotalDistance, int32 ShotScore, int32 TotalScore);
	void OnRep_DisplayMessage();
	void AccumulateScore(class AFortPlayerController* PC, int32 NumPoints, class AB_ToyBasketball_Base_C* Ball, int32* TotalScore);
	void IsSequentialShot(class AFortPlayerController* PC, class AB_ToyBasketball_Base_C* Ball, bool* IsSequential, int32* RunningScore);
	void PickFormatString(class FText* FormatString);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_BasketballHoopWithMinigame_TALL_C">();
	}
	static class AB_BasketballHoopWithMinigame_TALL_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_BasketballHoopWithMinigame_TALL_C>();
	}
};
static_assert(alignof(AB_BasketballHoopWithMinigame_TALL_C) == 0x000008, "Wrong alignment on AB_BasketballHoopWithMinigame_TALL_C");
static_assert(sizeof(AB_BasketballHoopWithMinigame_TALL_C) == 0x000DD8, "Wrong size on AB_BasketballHoopWithMinigame_TALL_C");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, UberGraphFrame_B_BasketballHoopWithMinigame_TALL_C) == 0x000CE0, "Member 'AB_BasketballHoopWithMinigame_TALL_C::UberGraphFrame_B_BasketballHoopWithMinigame_TALL_C' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, HoopTriggerBox) == 0x000CE8, "Member 'AB_BasketballHoopWithMinigame_TALL_C::HoopTriggerBox' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, MessageSN) == 0x000CF0, "Member 'AB_BasketballHoopWithMinigame_TALL_C::MessageSN' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, DisplayMessage) == 0x000CF8, "Member 'AB_BasketballHoopWithMinigame_TALL_C::DisplayMessage' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, ScoreMap) == 0x000D10, "Member 'AB_BasketballHoopWithMinigame_TALL_C::ScoreMap' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, FirstShot_WithDistance) == 0x000D60, "Member 'AB_BasketballHoopWithMinigame_TALL_C::FirstShot_WithDistance' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, SubsequentShot_WithDistance) == 0x000D78, "Member 'AB_BasketballHoopWithMinigame_TALL_C::SubsequentShot_WithDistance' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, FirstShot_NoDistance) == 0x000D90, "Member 'AB_BasketballHoopWithMinigame_TALL_C::FirstShot_NoDistance' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, SubsequentShot_NoDistance) == 0x000DA8, "Member 'AB_BasketballHoopWithMinigame_TALL_C::SubsequentShot_NoDistance' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, ThreePointThresholdDistanceInM) == 0x000DC0, "Member 'AB_BasketballHoopWithMinigame_TALL_C::ThreePointThresholdDistanceInM' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, MinDistanceToPrint) == 0x000DC4, "Member 'AB_BasketballHoopWithMinigame_TALL_C::MinDistanceToPrint' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, MinDistanceForTeamRelevance) == 0x000DC8, "Member 'AB_BasketballHoopWithMinigame_TALL_C::MinDistanceForTeamRelevance' has a wrong offset!");
static_assert(offsetof(AB_BasketballHoopWithMinigame_TALL_C, PC_That_Scored) == 0x000DD0, "Member 'AB_BasketballHoopWithMinigame_TALL_C::PC_That_Scored' has a wrong offset!");

}

