#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AthenaHitPointBar

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function AthenaHitPointBar.AthenaHitPointBar_C.SetSize
// 0x001C (0x001C - 0x0000)
struct AthenaHitPointBar_C_SetSize final
{
public:
	bool                                          UseLargeSize;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7114[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TallHeight;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NormalHeight;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7115[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_SetSize) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_SetSize");
static_assert(sizeof(AthenaHitPointBar_C_SetSize) == 0x00001C, "Wrong size on AthenaHitPointBar_C_SetSize");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, UseLargeSize) == 0x000000, "Member 'AthenaHitPointBar_C_SetSize::UseLargeSize' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, TallHeight) == 0x000004, "Member 'AthenaHitPointBar_C_SetSize::TallHeight' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, NormalHeight) == 0x000008, "Member 'AthenaHitPointBar_C_SetSize::NormalHeight' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, Temp_bool_Variable) == 0x00000C, "Member 'AthenaHitPointBar_C_SetSize::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, K2Node_Select_Default) == 0x000010, "Member 'AthenaHitPointBar_C_SetSize::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_SetSize, CallFunc_MakeVector2D_ReturnValue) == 0x000014, "Member 'AthenaHitPointBar_C_SetSize::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.UpdateDBNOState
// 0x0003 (0x0003 - 0x0000)
struct AthenaHitPointBar_C_UpdateDBNOState final
{
public:
	bool                                          bIsDBNO;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaHitPointBar_C_UpdateDBNOState) == 0x000001, "Wrong alignment on AthenaHitPointBar_C_UpdateDBNOState");
static_assert(sizeof(AthenaHitPointBar_C_UpdateDBNOState) == 0x000003, "Wrong size on AthenaHitPointBar_C_UpdateDBNOState");
static_assert(offsetof(AthenaHitPointBar_C_UpdateDBNOState, bIsDBNO) == 0x000000, "Member 'AthenaHitPointBar_C_UpdateDBNOState::bIsDBNO' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateDBNOState, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'AthenaHitPointBar_C_UpdateDBNOState::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateDBNOState, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000002, "Member 'AthenaHitPointBar_C_UpdateDBNOState::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.Update Delta Bar
// 0x0004 (0x0004 - 0x0000)
struct AthenaHitPointBar_C_Update_Delta_Bar final
{
public:
	float                                         CallFunc_GetLastValuePercentage_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_Update_Delta_Bar) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_Update_Delta_Bar");
static_assert(sizeof(AthenaHitPointBar_C_Update_Delta_Bar) == 0x000004, "Wrong size on AthenaHitPointBar_C_Update_Delta_Bar");
static_assert(offsetof(AthenaHitPointBar_C_Update_Delta_Bar, CallFunc_GetLastValuePercentage_ReturnValue) == 0x000000, "Member 'AthenaHitPointBar_C_Update_Delta_Bar::CallFunc_GetLastValuePercentage_ReturnValue' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.Initialize Bar
// 0x01C0 (0x01C0 - 0x0000)
struct AthenaHitPointBar_C_Initialize_Bar final
{
public:
	EHealthBarType                                Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7116[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHealthBarType                                Temp_byte_Variable_1;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7117[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHealthBarType                                Temp_byte_Variable_2;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7118[0x3];                                     // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x009C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x00AC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_11;                           // 0x00BC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_12;                           // 0x00CC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_13;                           // 0x00DC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHealthBarType                                Temp_byte_Variable_3;                              // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7119[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISlateTextureAtlasInterface> Temp_interface_Variable;                           // 0x00F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class ISlateTextureAtlasInterface> Temp_interface_Variable_1;                         // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable_14;                           // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_15;                           // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_16;                           // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class ISlateTextureAtlasInterface> K2Node_Select_Default_2;                           // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_17;                           // 0x0180(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EHealthBarType                                Temp_byte_Variable_4;                              // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711A[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x01A8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x01B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_Initialize_Bar) == 0x000008, "Wrong alignment on AthenaHitPointBar_C_Initialize_Bar");
static_assert(sizeof(AthenaHitPointBar_C_Initialize_Bar) == 0x0001C0, "Wrong size on AthenaHitPointBar_C_Initialize_Bar");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_byte_Variable) == 0x000000, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable) == 0x000004, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_1) == 0x000014, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_2) == 0x000024, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_3) == 0x000034, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_byte_Variable_1) == 0x000044, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_4) == 0x000048, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_5) == 0x000058, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_6) == 0x000068, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_7) == 0x000078, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_8) == 0x000088, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_byte_Variable_2) == 0x000098, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_9) == 0x00009C, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_10) == 0x0000AC, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_11) == 0x0000BC, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_12) == 0x0000CC, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_12' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_13) == 0x0000DC, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_13' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_byte_Variable_3) == 0x0000EC, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_interface_Variable) == 0x0000F0, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_interface_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_interface_Variable_1) == 0x000100, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_interface_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_14) == 0x000110, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_14' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_15) == 0x000120, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_15' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_16) == 0x000130, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_16' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_Select_Default) == 0x000140, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_Select_Default_1) == 0x000150, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_Select_Default_2) == 0x000160, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_Select_Default_3) == 0x000170, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_struct_Variable_17) == 0x000180, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_struct_Variable_17' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_MakeStruct_Margin) == 0x000190, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, Temp_byte_Variable_4) == 0x0001A0, "Member 'AthenaHitPointBar_C_Initialize_Bar::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x0001A8, "Member 'AthenaHitPointBar_C_Initialize_Bar::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_Initialize_Bar, K2Node_Select_Default_4) == 0x0001B0, "Member 'AthenaHitPointBar_C_Initialize_Bar::K2Node_Select_Default_4' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.Update Fill Bar
// 0x0004 (0x0004 - 0x0000)
struct AthenaHitPointBar_C_Update_Fill_Bar final
{
public:
	float                                         CallFunc_GetCurrentValuePercentage_ReturnValue;    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_Update_Fill_Bar) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_Update_Fill_Bar");
static_assert(sizeof(AthenaHitPointBar_C_Update_Fill_Bar) == 0x000004, "Wrong size on AthenaHitPointBar_C_Update_Fill_Bar");
static_assert(offsetof(AthenaHitPointBar_C_Update_Fill_Bar, CallFunc_GetCurrentValuePercentage_ReturnValue) == 0x000000, "Member 'AthenaHitPointBar_C_Update_Fill_Bar::CallFunc_GetCurrentValuePercentage_ReturnValue' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.UpdateCurrentValue
// 0x0090 (0x0090 - 0x0000)
struct AthenaHitPointBar_C_UpdateCurrentValue final
{
public:
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurrentValuePercentage_ReturnValue;    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711C[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_711D[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711E[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_3;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0050(0x0018)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0070(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaHitPointBar_C_UpdateCurrentValue) == 0x000008, "Wrong alignment on AthenaHitPointBar_C_UpdateCurrentValue");
static_assert(sizeof(AthenaHitPointBar_C_UpdateCurrentValue) == 0x000090, "Wrong size on AthenaHitPointBar_C_UpdateCurrentValue");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, Temp_byte_Variable) == 0x000000, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_PlayAnimation_ReturnValue) == 0x000008, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_GetCurrentValuePercentage_ReturnValue) == 0x000010, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_GetCurrentValuePercentage_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000014, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, Temp_byte_Variable_1) == 0x00001C, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_PlayAnimation_ReturnValue_1) == 0x000028, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_PlayAnimation_ReturnValue_2) == 0x000030, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000038, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_PlayAnimation_ReturnValue_3) == 0x000040, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_PlayAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Less_FloatFloat_ReturnValue) == 0x000048, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000049, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, Temp_bool_Variable) == 0x00004A, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004B, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x00004C, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_BooleanOR_ReturnValue) == 0x00004D, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_BooleanAND_ReturnValue) == 0x00004E, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00004F, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Conv_IntToText_ReturnValue) == 0x000050, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000068, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_BooleanAND_ReturnValue_1) == 0x000069, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00006A, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_BooleanAND_ReturnValue_2) == 0x00006B, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Round_ReturnValue) == 0x00006C, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000070, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, K2Node_Select_Default) == 0x000088, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000089, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_UpdateCurrentValue, CallFunc_BooleanAND_ReturnValue_3) == 0x00008A, "Member 'AthenaHitPointBar_C_UpdateCurrentValue::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.UpdateMaxValue
// 0x0018 (0x0018 - 0x0000)
struct AthenaHitPointBar_C_UpdateMaxValue final
{
public:
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0000(0x0018)()
};
static_assert(alignof(AthenaHitPointBar_C_UpdateMaxValue) == 0x000008, "Wrong alignment on AthenaHitPointBar_C_UpdateMaxValue");
static_assert(sizeof(AthenaHitPointBar_C_UpdateMaxValue) == 0x000018, "Wrong size on AthenaHitPointBar_C_UpdateMaxValue");
static_assert(offsetof(AthenaHitPointBar_C_UpdateMaxValue, CallFunc_Conv_FloatToText_ReturnValue) == 0x000000, "Member 'AthenaHitPointBar_C_UpdateMaxValue::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct AthenaHitPointBar_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaHitPointBar_C_PreConstruct) == 0x000001, "Wrong alignment on AthenaHitPointBar_C_PreConstruct");
static_assert(sizeof(AthenaHitPointBar_C_PreConstruct) == 0x000001, "Wrong size on AthenaHitPointBar_C_PreConstruct");
static_assert(offsetof(AthenaHitPointBar_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'AthenaHitPointBar_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.OnMaxValueChanged
// 0x0004 (0x0004 - 0x0000)
struct AthenaHitPointBar_C_OnMaxValueChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_OnMaxValueChanged) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_OnMaxValueChanged");
static_assert(sizeof(AthenaHitPointBar_C_OnMaxValueChanged) == 0x000004, "Wrong size on AthenaHitPointBar_C_OnMaxValueChanged");
static_assert(offsetof(AthenaHitPointBar_C_OnMaxValueChanged, Value) == 0x000000, "Member 'AthenaHitPointBar_C_OnMaxValueChanged::Value' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.OnValueChangedWithReason
// 0x0008 (0x0008 - 0x0000)
struct AthenaHitPointBar_C_OnValueChangedWithReason final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortHitPointModificationReason               Reason;                                            // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AthenaHitPointBar_C_OnValueChangedWithReason) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_OnValueChangedWithReason");
static_assert(sizeof(AthenaHitPointBar_C_OnValueChangedWithReason) == 0x000008, "Wrong size on AthenaHitPointBar_C_OnValueChangedWithReason");
static_assert(offsetof(AthenaHitPointBar_C_OnValueChangedWithReason, Value) == 0x000000, "Member 'AthenaHitPointBar_C_OnValueChangedWithReason::Value' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_OnValueChangedWithReason, Reason) == 0x000004, "Member 'AthenaHitPointBar_C_OnValueChangedWithReason::Reason' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.OnDBNOStateChanged
// 0x0001 (0x0001 - 0x0000)
struct AthenaHitPointBar_C_OnDBNOStateChanged final
{
public:
	bool                                          IsDBNO;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaHitPointBar_C_OnDBNOStateChanged) == 0x000001, "Wrong alignment on AthenaHitPointBar_C_OnDBNOStateChanged");
static_assert(sizeof(AthenaHitPointBar_C_OnDBNOStateChanged) == 0x000001, "Wrong size on AthenaHitPointBar_C_OnDBNOStateChanged");
static_assert(offsetof(AthenaHitPointBar_C_OnDBNOStateChanged, IsDBNO) == 0x000000, "Member 'AthenaHitPointBar_C_OnDBNOStateChanged::IsDBNO' has a wrong offset!");

// Function AthenaHitPointBar.AthenaHitPointBar_C.ExecuteUbergraph_AthenaHitPointBar
// 0x0014 (0x0014 - 0x0000)
struct AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_711F[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_Value_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Value;                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortHitPointModificationReason               K2Node_Event_Reason;                               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDBNO;                               // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar) == 0x000004, "Wrong alignment on AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar");
static_assert(sizeof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar) == 0x000014, "Wrong size on AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, EntryPoint) == 0x000000, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::EntryPoint' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, K2Node_Event_IsDesignTime) == 0x000004, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, K2Node_Event_Value_1) == 0x000008, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::K2Node_Event_Value_1' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, K2Node_Event_Value) == 0x00000C, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::K2Node_Event_Value' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, K2Node_Event_Reason) == 0x000010, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::K2Node_Event_Reason' has a wrong offset!");
static_assert(offsetof(AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar, K2Node_Event_IsDBNO) == 0x000011, "Member 'AthenaHitPointBar_C_ExecuteUbergraph_AthenaHitPointBar::K2Node_Event_IsDBNO' has a wrong offset!");

}

