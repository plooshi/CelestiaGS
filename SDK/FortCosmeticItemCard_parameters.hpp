#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FortCosmeticItemCard

#include "Basic.hpp"

#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.HandleUpdateRarity
// 0x0050 (0x0050 - 0x0000)
struct FortCosmeticItemCard_C_HandleUpdateRarity final
{
public:
	struct FFortColorPalette                      RarityColors;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(FortCosmeticItemCard_C_HandleUpdateRarity) == 0x000004, "Wrong alignment on FortCosmeticItemCard_C_HandleUpdateRarity");
static_assert(sizeof(FortCosmeticItemCard_C_HandleUpdateRarity) == 0x000050, "Wrong size on FortCosmeticItemCard_C_HandleUpdateRarity");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateRarity, RarityColors) == 0x000000, "Member 'FortCosmeticItemCard_C_HandleUpdateRarity::RarityColors' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.HandleUpdateVisuals
// 0x0010 (0x0010 - 0x0000)
struct FortCosmeticItemCard_C_HandleUpdateVisuals final
{
public:
	bool                                          bIsItem;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsBorderAnimated;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsHero;                                            // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsReward;                                          // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          IsShuffleItem;                                     // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7523[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortCosmeticItemCard_C_HandleUpdateVisuals) == 0x000004, "Wrong alignment on FortCosmeticItemCard_C_HandleUpdateVisuals");
static_assert(sizeof(FortCosmeticItemCard_C_HandleUpdateVisuals) == 0x000010, "Wrong size on FortCosmeticItemCard_C_HandleUpdateVisuals");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, bIsItem) == 0x000000, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::bIsItem' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, bIsBorderAnimated) == 0x000001, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::bIsBorderAnimated' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, IsHero) == 0x000002, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::IsHero' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, IsReward) == 0x000003, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::IsReward' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, IsShuffleItem) == 0x000004, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::IsShuffleItem' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000008, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_HandleUpdateVisuals, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x00000C, "Member 'FortCosmeticItemCard_C_HandleUpdateVisuals::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.UpdateVisuals
// 0x0005 (0x0005 - 0x0000)
struct FortCosmeticItemCard_C_UpdateVisuals final
{
public:
	bool                                          bIsItem;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsBorderAnimated;                                 // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsHero;                                           // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bReward;                                           // 0x0003(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsShuffleItem;                                    // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortCosmeticItemCard_C_UpdateVisuals) == 0x000001, "Wrong alignment on FortCosmeticItemCard_C_UpdateVisuals");
static_assert(sizeof(FortCosmeticItemCard_C_UpdateVisuals) == 0x000005, "Wrong size on FortCosmeticItemCard_C_UpdateVisuals");
static_assert(offsetof(FortCosmeticItemCard_C_UpdateVisuals, bIsItem) == 0x000000, "Member 'FortCosmeticItemCard_C_UpdateVisuals::bIsItem' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_UpdateVisuals, bIsBorderAnimated) == 0x000001, "Member 'FortCosmeticItemCard_C_UpdateVisuals::bIsBorderAnimated' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_UpdateVisuals, bIsHero) == 0x000002, "Member 'FortCosmeticItemCard_C_UpdateVisuals::bIsHero' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_UpdateVisuals, bReward) == 0x000003, "Member 'FortCosmeticItemCard_C_UpdateVisuals::bReward' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_UpdateVisuals, bIsShuffleItem) == 0x000004, "Member 'FortCosmeticItemCard_C_UpdateVisuals::bIsShuffleItem' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.OnUpdateEnhanced
// 0x0001 (0x0001 - 0x0000)
struct FortCosmeticItemCard_C_OnUpdateEnhanced final
{
public:
	bool                                          bEnhanced;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(FortCosmeticItemCard_C_OnUpdateEnhanced) == 0x000001, "Wrong alignment on FortCosmeticItemCard_C_OnUpdateEnhanced");
static_assert(sizeof(FortCosmeticItemCard_C_OnUpdateEnhanced) == 0x000001, "Wrong size on FortCosmeticItemCard_C_OnUpdateEnhanced");
static_assert(offsetof(FortCosmeticItemCard_C_OnUpdateEnhanced, bEnhanced) == 0x000000, "Member 'FortCosmeticItemCard_C_OnUpdateEnhanced::bEnhanced' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.OnUpdateItemCardMaterial
// 0x0008 (0x0008 - 0x0000)
struct FortCosmeticItemCard_C_OnUpdateItemCardMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortCosmeticItemCard_C_OnUpdateItemCardMaterial) == 0x000008, "Wrong alignment on FortCosmeticItemCard_C_OnUpdateItemCardMaterial");
static_assert(sizeof(FortCosmeticItemCard_C_OnUpdateItemCardMaterial) == 0x000008, "Wrong size on FortCosmeticItemCard_C_OnUpdateItemCardMaterial");
static_assert(offsetof(FortCosmeticItemCard_C_OnUpdateItemCardMaterial, Material) == 0x000000, "Member 'FortCosmeticItemCard_C_OnUpdateItemCardMaterial::Material' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.OnUpdateItemCardIcon
// 0x0008 (0x0008 - 0x0000)
struct FortCosmeticItemCard_C_OnUpdateItemCardIcon final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortCosmeticItemCard_C_OnUpdateItemCardIcon) == 0x000008, "Wrong alignment on FortCosmeticItemCard_C_OnUpdateItemCardIcon");
static_assert(sizeof(FortCosmeticItemCard_C_OnUpdateItemCardIcon) == 0x000008, "Wrong size on FortCosmeticItemCard_C_OnUpdateItemCardIcon");
static_assert(offsetof(FortCosmeticItemCard_C_OnUpdateItemCardIcon, Icon) == 0x000000, "Member 'FortCosmeticItemCard_C_OnUpdateItemCardIcon::Icon' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.OnUpdateSeriesOrRarityColors
// 0x0050 (0x0050 - 0x0000)
struct FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors final
{
public:
	struct FFortColorPalette                      ColorPalette;                                      // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors) == 0x000004, "Wrong alignment on FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors");
static_assert(sizeof(FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors) == 0x000050, "Wrong size on FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors");
static_assert(offsetof(FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors, ColorPalette) == 0x000000, "Member 'FortCosmeticItemCard_C_OnUpdateSeriesOrRarityColors::ColorPalette' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.OnSizeChanged
// 0x0004 (0x0004 - 0x0000)
struct FortCosmeticItemCard_C_OnSizeChanged final
{
public:
	float                                         InCardWidth;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortCosmeticItemCard_C_OnSizeChanged) == 0x000004, "Wrong alignment on FortCosmeticItemCard_C_OnSizeChanged");
static_assert(sizeof(FortCosmeticItemCard_C_OnSizeChanged) == 0x000004, "Wrong size on FortCosmeticItemCard_C_OnSizeChanged");
static_assert(offsetof(FortCosmeticItemCard_C_OnSizeChanged, InCardWidth) == 0x000000, "Member 'FortCosmeticItemCard_C_OnSizeChanged::InCardWidth' has a wrong offset!");

// Function FortCosmeticItemCard.FortCosmeticItemCard_C.ExecuteUbergraph_FortCosmeticItemCard
// 0x0098 (0x0098 - 0x0000)
struct FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7524[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     K2Node_Event_Material;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bEnhanced;                            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7525[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_Event_Icon;                                 // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortColorPalette                      K2Node_Event_ColorPalette;                         // 0x0028(0x0050)(ConstParm, NoDestructor)
	float                                         K2Node_Event_InCardWidth;                          // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsItem;                              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsBorderAnimated;                    // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsHero;                              // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bReward;                              // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsShuffleItem;                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7526[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard) == 0x000008, "Wrong alignment on FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard");
static_assert(sizeof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard) == 0x000098, "Wrong size on FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, EntryPoint) == 0x000000, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::EntryPoint' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_Material) == 0x000008, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_Material' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bEnhanced) == 0x000010, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bEnhanced' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000014, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_Icon) == 0x000018, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_Icon' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_ColorPalette) == 0x000028, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_ColorPalette' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_InCardWidth) == 0x000078, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_InCardWidth' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bIsItem) == 0x00007C, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bIsItem' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bIsBorderAnimated) == 0x00007D, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bIsBorderAnimated' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bIsHero) == 0x00007E, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bIsHero' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bReward) == 0x00007F, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bReward' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, K2Node_Event_bIsShuffleItem) == 0x000080, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::K2Node_Event_bIsShuffleItem' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000088, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard, CallFunc_PlayAnimationForward_ReturnValue) == 0x000090, "Member 'FortCosmeticItemCard_C_ExecuteUbergraph_FortCosmeticItemCard::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

}

