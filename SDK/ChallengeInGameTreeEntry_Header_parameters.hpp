#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeInGameTreeEntry_Header

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK::Params
{

// Function ChallengeInGameTreeEntry_Header.ChallengeInGameTreeEntry_Header_C.ExecuteUbergraph_ChallengeInGameTreeEntry_Header
// 0x01F8 (0x01F8 - 0x0000)
struct ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0010(0x0038)(IsPlainOldData, NoDestructor)
	struct FPointerEvent                          K2Node_Event_MouseEvent_1;                         // 0x0048(0x0070)(ConstParm)
	struct FPointerEvent                          K2Node_Event_MouseEvent;                           // 0x00B8(0x0070)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_73A0[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFortChallengeSetStyle                 K2Node_Event_DisplayStyle;                         // 0x0150(0x00A0)(ConstParm)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header) == 0x000008, "Wrong alignment on ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header");
static_assert(sizeof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header) == 0x0001F8, "Wrong size on ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, EntryPoint) == 0x000000, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, K2Node_Event_MyGeometry) == 0x000010, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, K2Node_Event_MouseEvent_1) == 0x000048, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::K2Node_Event_MouseEvent_1' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, K2Node_Event_MouseEvent) == 0x0000B8, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::K2Node_Event_MouseEvent' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_PlayAnimationForward_ReturnValue) == 0x000128, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000130, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, K2Node_Event_bIsExpanded) == 0x000138, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000140, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000148, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, K2Node_Event_DisplayStyle) == 0x000150, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::K2Node_Event_DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x0001F0, "Member 'ChallengeInGameTreeEntry_Header_C_ExecuteUbergraph_ChallengeInGameTreeEntry_Header::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function ChallengeInGameTreeEntry_Header.ChallengeInGameTreeEntry_Header_C.OnChallengeSetEstablished
// 0x00A0 (0x00A0 - 0x0000)
struct ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished final
{
public:
	struct FFortChallengeSetStyle                 DisplayStyle;                                      // 0x0000(0x00A0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished) == 0x000008, "Wrong alignment on ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished");
static_assert(sizeof(ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished) == 0x0000A0, "Wrong size on ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished, DisplayStyle) == 0x000000, "Member 'ChallengeInGameTreeEntry_Header_C_OnChallengeSetEstablished::DisplayStyle' has a wrong offset!");

// Function ChallengeInGameTreeEntry_Header.ChallengeInGameTreeEntry_Header_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged");
static_assert(sizeof(ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'ChallengeInGameTreeEntry_Header_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function ChallengeInGameTreeEntry_Header.ChallengeInGameTreeEntry_Header_C.OnMouseLeave
// 0x0070 (0x0070 - 0x0000)
struct ChallengeInGameTreeEntry_Header_C_OnMouseLeave final
{
public:
	struct FPointerEvent                          MouseEvent;                                        // 0x0000(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeInGameTreeEntry_Header_C_OnMouseLeave) == 0x000008, "Wrong alignment on ChallengeInGameTreeEntry_Header_C_OnMouseLeave");
static_assert(sizeof(ChallengeInGameTreeEntry_Header_C_OnMouseLeave) == 0x000070, "Wrong size on ChallengeInGameTreeEntry_Header_C_OnMouseLeave");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_OnMouseLeave, MouseEvent) == 0x000000, "Member 'ChallengeInGameTreeEntry_Header_C_OnMouseLeave::MouseEvent' has a wrong offset!");

// Function ChallengeInGameTreeEntry_Header.ChallengeInGameTreeEntry_Header_C.OnMouseEnter
// 0x00A8 (0x00A8 - 0x0000)
struct ChallengeInGameTreeEntry_Header_C_OnMouseEnter final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeInGameTreeEntry_Header_C_OnMouseEnter) == 0x000008, "Wrong alignment on ChallengeInGameTreeEntry_Header_C_OnMouseEnter");
static_assert(sizeof(ChallengeInGameTreeEntry_Header_C_OnMouseEnter) == 0x0000A8, "Wrong size on ChallengeInGameTreeEntry_Header_C_OnMouseEnter");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_OnMouseEnter, MyGeometry) == 0x000000, "Member 'ChallengeInGameTreeEntry_Header_C_OnMouseEnter::MyGeometry' has a wrong offset!");
static_assert(offsetof(ChallengeInGameTreeEntry_Header_C_OnMouseEnter, MouseEvent) == 0x000038, "Member 'ChallengeInGameTreeEntry_Header_C_OnMouseEnter::MouseEvent' has a wrong offset!");

}

