#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_ExplosiveBow_Athena

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "B_Ranged_Generic_Athena_classes.hpp"
#include "FortniteGame_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_ExplosiveBow_Athena.B_ExplosiveBow_Athena_C
// 0x0138 (0x1248 - 0x1110)
class AB_ExplosiveBow_Athena_C final : public AB_Ranged_Generic_Athena_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_B_ExplosiveBow_Athena_C;            // 0x1110(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        FullCharge_AudioComponent;                         // 0x1118(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Ambient_Charge_AudioComponent;                     // 0x1120(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Reached_Max_Charge;                                // 0x1128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Reached_Min_Charge;                                // 0x1129(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Charging;                                          // 0x112A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6596[0x5];                                     // 0x112B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ChargeAudio;                                       // 0x1130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FullyChargedVFX;                                   // 0x1138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UpdateTrajectorySpline;                            // 0x1148(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Prj_Dummy;                                         // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortProjectileBase*                    DummyProjectile;                                   // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyGravity;                                      // 0x1160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyExtent;                                       // 0x1164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyMaxSpeed;                                     // 0x1168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x116C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityScale;                                      // 0x1170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GravityTickIncrease;                               // 0x1174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ProjectileVelocity;                                // 0x1178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxProjectileVelocity;                             // 0x117C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VelocityTickIncrease;                              // 0x1180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6597[0x4];                                     // 0x1184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ChargingAnim;                                      // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           MaxChargeAnim;                                     // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         MinProjectileSpeed;                                // 0x1198(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxProjectileSpeed;                                // 0x11B8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_ProjectileTrajectory_ExplosiveBow_C* BowTrajectory;                                     // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyFriction;                                     // 0x11E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DummyBouncieness;                                  // 0x11E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionChannel                             DummyCollisionChannel;                             // 0x11E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6598[0x7];                                     // 0x11E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 TrajectoryClass;                                   // 0x11F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBowEquipped;                                     // 0x11F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ReachedHalfCharge;                                 // 0x11F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6599[0x2];                                     // 0x11FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DummyTimeStep;                                     // 0x11FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LowTensionFire;                                    // 0x1200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             NormalTensionFire;                                 // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FullTensionFire;                                   // 0x1210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FullTensionFireP1;                                 // 0x1218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LowTensionFireP1;                                  // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             NormalTensionFireP1;                               // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        AdditionalFireFX;                                  // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        FullyChargeFX;                                     // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundOnCharge;                                     // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_ExplosiveBow_Athena(int32 EntryPoint);
	void OnReachedMaxCharge();
	void ReceiveTick(float DeltaSeconds);
	void OnWeaponAttached();
	void IncreaseDrawStrength();
	void ResetCharge();
	void OnEndCharge();
	void OnChargeUp();
	void OnChargeDown();
	void K2_OnUnEquip();
	void EndOfCharge();
	void OnPlayWeaponFireFX(bool bPersistentFire, bool bSecondaryFire);
	void OnStartCharge();
	void OnReachedMinCharge();
	void SetupTrajectoryProjectile();
	void SetDummyVariables();
	void CalculateTrajectorySpline();
	void StartDrawAudio();
	void StopDrawAudio();

	void CalculateVelocity(float* Velocity) const;
	void SetupProjectileVariables(struct FVector* StartLocation, struct FVector* InitialVelocity, float* Param_ProjectileVelocity, struct FRotator* OutRotation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_ExplosiveBow_Athena_C">();
	}
	static class AB_ExplosiveBow_Athena_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_ExplosiveBow_Athena_C>();
	}
};
static_assert(alignof(AB_ExplosiveBow_Athena_C) == 0x000008, "Wrong alignment on AB_ExplosiveBow_Athena_C");
static_assert(sizeof(AB_ExplosiveBow_Athena_C) == 0x001248, "Wrong size on AB_ExplosiveBow_Athena_C");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, UberGraphFrame_B_ExplosiveBow_Athena_C) == 0x001110, "Member 'AB_ExplosiveBow_Athena_C::UberGraphFrame_B_ExplosiveBow_Athena_C' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, FullCharge_AudioComponent) == 0x001118, "Member 'AB_ExplosiveBow_Athena_C::FullCharge_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Ambient_Charge_AudioComponent) == 0x001120, "Member 'AB_ExplosiveBow_Athena_C::Ambient_Charge_AudioComponent' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Reached_Max_Charge) == 0x001128, "Member 'AB_ExplosiveBow_Athena_C::Reached_Max_Charge' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Reached_Min_Charge) == 0x001129, "Member 'AB_ExplosiveBow_Athena_C::Reached_Min_Charge' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Charging) == 0x00112A, "Member 'AB_ExplosiveBow_Athena_C::Charging' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, ChargeAudio) == 0x001130, "Member 'AB_ExplosiveBow_Athena_C::ChargeAudio' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, FullyChargedVFX) == 0x001138, "Member 'AB_ExplosiveBow_Athena_C::FullyChargedVFX' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, PlayerPawn) == 0x001140, "Member 'AB_ExplosiveBow_Athena_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, UpdateTrajectorySpline) == 0x001148, "Member 'AB_ExplosiveBow_Athena_C::UpdateTrajectorySpline' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Prj_Dummy) == 0x001150, "Member 'AB_ExplosiveBow_Athena_C::Prj_Dummy' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyProjectile) == 0x001158, "Member 'AB_ExplosiveBow_Athena_C::DummyProjectile' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyGravity) == 0x001160, "Member 'AB_ExplosiveBow_Athena_C::DummyGravity' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyExtent) == 0x001164, "Member 'AB_ExplosiveBow_Athena_C::DummyExtent' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyMaxSpeed) == 0x001168, "Member 'AB_ExplosiveBow_Athena_C::DummyMaxSpeed' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, Gravity) == 0x00116C, "Member 'AB_ExplosiveBow_Athena_C::Gravity' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, GravityScale) == 0x001170, "Member 'AB_ExplosiveBow_Athena_C::GravityScale' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, GravityTickIncrease) == 0x001174, "Member 'AB_ExplosiveBow_Athena_C::GravityTickIncrease' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, ProjectileVelocity) == 0x001178, "Member 'AB_ExplosiveBow_Athena_C::ProjectileVelocity' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, MaxProjectileVelocity) == 0x00117C, "Member 'AB_ExplosiveBow_Athena_C::MaxProjectileVelocity' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, VelocityTickIncrease) == 0x001180, "Member 'AB_ExplosiveBow_Athena_C::VelocityTickIncrease' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, ChargingAnim) == 0x001188, "Member 'AB_ExplosiveBow_Athena_C::ChargingAnim' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, MaxChargeAnim) == 0x001190, "Member 'AB_ExplosiveBow_Athena_C::MaxChargeAnim' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, MinProjectileSpeed) == 0x001198, "Member 'AB_ExplosiveBow_Athena_C::MinProjectileSpeed' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, MaxProjectileSpeed) == 0x0011B8, "Member 'AB_ExplosiveBow_Athena_C::MaxProjectileSpeed' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, BowTrajectory) == 0x0011D8, "Member 'AB_ExplosiveBow_Athena_C::BowTrajectory' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyFriction) == 0x0011E0, "Member 'AB_ExplosiveBow_Athena_C::DummyFriction' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyBouncieness) == 0x0011E4, "Member 'AB_ExplosiveBow_Athena_C::DummyBouncieness' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyCollisionChannel) == 0x0011E8, "Member 'AB_ExplosiveBow_Athena_C::DummyCollisionChannel' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, TrajectoryClass) == 0x0011F0, "Member 'AB_ExplosiveBow_Athena_C::TrajectoryClass' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, IsBowEquipped) == 0x0011F8, "Member 'AB_ExplosiveBow_Athena_C::IsBowEquipped' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, ReachedHalfCharge) == 0x0011F9, "Member 'AB_ExplosiveBow_Athena_C::ReachedHalfCharge' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, DummyTimeStep) == 0x0011FC, "Member 'AB_ExplosiveBow_Athena_C::DummyTimeStep' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, LowTensionFire) == 0x001200, "Member 'AB_ExplosiveBow_Athena_C::LowTensionFire' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, NormalTensionFire) == 0x001208, "Member 'AB_ExplosiveBow_Athena_C::NormalTensionFire' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, FullTensionFire) == 0x001210, "Member 'AB_ExplosiveBow_Athena_C::FullTensionFire' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, FullTensionFireP1) == 0x001218, "Member 'AB_ExplosiveBow_Athena_C::FullTensionFireP1' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, LowTensionFireP1) == 0x001220, "Member 'AB_ExplosiveBow_Athena_C::LowTensionFireP1' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, NormalTensionFireP1) == 0x001228, "Member 'AB_ExplosiveBow_Athena_C::NormalTensionFireP1' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, AdditionalFireFX) == 0x001230, "Member 'AB_ExplosiveBow_Athena_C::AdditionalFireFX' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, FullyChargeFX) == 0x001238, "Member 'AB_ExplosiveBow_Athena_C::FullyChargeFX' has a wrong offset!");
static_assert(offsetof(AB_ExplosiveBow_Athena_C, SoundOnCharge) == 0x001240, "Member 'AB_ExplosiveBow_Athena_C::SoundOnCharge' has a wrong offset!");

}

